[
    {
        "q": "What is the file extension of a Vue.js single-file component?",
        "o": [
            ".vue",
            ".js",
            ".html",
            ".css"
        ]
    },
    {
        "q": "Which section in a Vue single-file component is used to define the component's JavaScript logic?",
        "o": [
            "<script>",
            "<template>",
            "<style>",
            "<data>"
        ]
    },
    {
        "q": "What is the purpose of 'props' in a Vue.js component?",
        "o": [
            "To pass data from parent to child component",
            "To define component styles",
            "To handle component events",
            "To define the component template"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?",
        "c": "<template>\n  <div>{{ message }}</div>\n</template>\n<script>\nexport default {\n  props: ['message']\n}\n</script>",
        "o": [
            "The value passed to the 'message' prop",
            "undefined",
            "null",
            "Error"
        ]
    },
    {
        "q": "Which directive is used to bind a prop to a parent component's data in Vue.js?",
        "o": [
            "v-bind",
            "v-model",
            "v-on",
            "v-if"
        ]
    },
    {
        "q": "What is the purpose of slots in Vue.js components?",
        "o": [
            "To allow parent components to inject content into child components",
            "To define component props",
            "To emit custom events",
            "To style child components"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?",
        "c": "<template>\n  <slot></slot>\n</template>",
        "o": [
            "Content provided by the parent component",
            "Empty div",
            "Error",
            "Default slot content"
        ]
    },
    {
        "q": "Which keyword is used to define custom events in a Vue.js component?",
        "o": [
            "emits",
            "props",
            "slots",
            "events"
        ]
    },
    {
        "q": "What will happen when a Vue.js component emits an event using $emit?",
        "c": "<template>\n  <button @click=\"$emit('customEvent')\">Click</button>\n</template>\n<script>\nexport default {\n  emits: ['customEvent']\n}\n</script>",
        "o": [
            "The parent component listens for 'customEvent'",
            "The component renders a new button",
            "The event is ignored",
            "An error is thrown"
        ]
    },
    {
        "q": "What is the correct syntax to define a named slot in a Vue.js component?",
        "o": [
            "<slot name=\"slotName\"></slot>",
            "<slot slot=\"slotName\"></slot>",
            "<slot v-name=\"slotName\"></slot>",
            "<slot id=\"slotName\"></slot>"
        ]
    },
    {
        "q": "How do you validate a prop in a Vue.js component?",
        "c": "<script>\nexport default {\n  props: {\n    age: {\n      type: Number,\n      required: true\n    }\n  }\n}\n</script>",
        "o": [
            "By defining type and required in the props object",
            "By using v-validate directive",
            "By adding a validate method",
            "By using a computed property"
        ]
    },
    {
        "q": "Which of the following is true about single-file components in Vue.js?",
        "o": [
            "They combine template, script, and style in one file",
            "They can only contain JavaScript code",
            "They cannot use scoped styles",
            "They cannot accept props"
        ]
    },
    {
        "q": "What is the purpose of the 'scoped' attribute in a Vue.js single-file component's <style> tag?",
        "o": [
            "To apply styles only to the current component",
            "To make styles globally available",
            "To disable CSS in the component",
            "To import external stylesheets"
        ]
    },
    {
        "q": "What is the correct way to define a single-file component in Vue.js?",
        "o": [
            "Using <template>, <script>, and <style> tags in a .vue file",
            "Using only a <script> tag in a .js file",
            "Using a .html file with Vue directives",
            "Using a .css file with Vue logic"
        ]
    },
    {
        "q": "Which Vue.js feature allows a parent component to pass dynamic content to a child component?",
        "o": [
            "Slots",
            "Props",
            "Emits",
            "Mixins"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?",
        "c": "<template>\n  <div>{{ title }}</div>\n</template>\n<script>\nexport default {\n  props: {\n    title: String\n  }\n}\n</script>",
        "o": [
            "The value passed to the 'title' prop",
            "undefined",
            "null",
            "Error"
        ]
    },
    {
        "q": "How do you define a default value for a prop in a Vue.js component?",
        "o": [
            "Using the 'default' key in the props object",
            "Using the 'value' key in the props object",
            "Using the 'init' key in the props object",
            "Using a computed property"
        ]
    },
    {
        "q": "What is the purpose of the 'emits' option in a Vue.js component?",
        "o": [
            "To declare custom events the component can emit",
            "To define props the component accepts",
            "To specify slots for the component",
            "To handle component lifecycle hooks"
        ]
    },
    {
        "q": "What will happen when the following Vue.js code is executed?",
        "c": "<template>\n  <button @click=\"$emit('update', 42)\">Click</button>\n</template>\n<script>\nexport default {\n  emits: ['update']\n}\n</script>",
        "o": [
            "The parent component receives the 'update' event with 42",
            "The button disappears",
            "An error is thrown",
            "The component re-renders"
        ]
    },
    {
        "q": "Which directive is used to pass content to a named slot in Vue.js?",
        "o": [
            "v-slot",
            "v-bind",
            "v-on",
            "v-if"
        ]
    },
    {
        "q": "What is the correct syntax to pass a prop to a Vue.js component?",
        "o": [
            "<ComponentName :propName=\"value\" />",
            "<ComponentName propName=value />",
            "<ComponentName v-prop=\"propName\" />",
            "<ComponentName @propName=\"value\" />"
        ]
    },
    {
        "q": "What happens if a required prop is not passed to a Vue.js component?",
        "c": "<script>\nexport default {\n  props: {\n    name: {\n      type: String,\n      required: true\n    }\n  }\n}\n</script>",
        "o": [
            "Vue throws a warning in the console",
            "The component does not render",
            "The prop defaults to null",
            "The component uses a default value"
        ]
    },
    {
        "q": "Which of the following is true about scoped slots in Vue.js?",
        "o": [
            "They allow the parent to access child component data",
            "They are used to define component styles",
            "They replace all default slots",
            "They cannot pass data to the parent"
        ]
    },
    {
        "q": "What is the correct way to define a custom event in a Vue.js component?",
        "c": "<template>\n  <input @input=\"$emit('inputChange', $event.target.value)\">\n</template>\n<script>\nexport default {\n  emits: ['inputChange']\n}\n</script>",
        "o": [
            "Using $emit with the event name and optional payload",
            "Using v-on to define the event",
            "Using props to emit events",
            "Using slots to trigger events"
        ]
    },
    {
        "q": "What is the role of the <template> tag in a Vue.js single-file component?",
        "o": [
            "To define the component's HTML structure",
            "To handle component logic",
            "To define component styles",
            "To import external scripts"
        ]
    },
    {
        "q": "How can you make a prop optional in a Vue.js component?",
        "o": [
            "By omitting the 'required' key or setting it to false",
            "By setting the prop type to null",
            "By using the 'optional' key",
            "By defining it in the emits option"
        ]
    },
    {
        "q": "What is the main benefit of using single-file components in Vue.js?",
        "o": [
            "Encapsulates template, logic, and styles in one file",
            "Improves server-side rendering",
            "Enables direct DOM manipulation",
            "Reduces the need for props"
        ]
    },
    {
        "q": "Which attribute is used to make styles in a Vue.js single-file component apply only to that component?",
        "o": [
            "scoped",
            "module",
            "local",
            "private"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?",
        "c": "<template>\n  <div>{{ count }}</div>\n</template>\n<script>\nexport default {\n  props: {\n    count: {\n      type: Number,\n      default: 0\n    }\n  }\n}\n</script>",
        "o": [
            "The value of the 'count' prop or 0 if not provided",
            "undefined",
            "null",
            "Error"
        ]
    },
    {
        "q": "What is the purpose of the 'v-slot' directive in Vue.js?",
        "o": [
            "To pass content to a slot in a child component",
            "To bind a prop to a component",
            "To emit a custom event",
            "To define a component's data"
        ]
    },
    {
        "q": "How do you define multiple props in a Vue.js component?",
        "o": [
            "As an object with prop names and their configurations",
            "As an array of prop names",
            "Using the 'props' method",
            "Using the 'data' property"
        ]
    },
    {
        "q": "What happens when a Vue.js component emits an event that is not declared in the 'emits' option?",
        "c": "<template>\n  <button @click=\"$emit('undeclaredEvent')\">Click</button>\n</template>\n<script>\nexport default {\n  emits: []\n}\n</script>",
        "o": [
            "Vue throws a warning in the console",
            "The event is ignored silently",
            "The component fails to render",
            "The event is automatically added to emits"
        ]
    },
    {
        "q": "What is the correct syntax for using a default slot in a Vue.js component?",
        "o": [
            "<slot></slot>",
            "<slot name=\"default\"></slot>",
            "<slot default></slot>",
            "<slot v-default></slot>"
        ]
    },
    {
        "q": "How can you pass multiple values through a Vue.js component's emit?",
        "c": "<template>\n  <button @click=\"$emit('update', 10, 'text')\">Click</button>\n</template>\n<script>\nexport default {\n  emits: ['update']\n}\n</script>",
        "o": [
            "By passing multiple arguments to $emit",
            "By using an array in the emits option",
            "By defining multiple emits options",
            "By using a prop instead"
        ]
    },
    {
        "q": "Which of the following is a valid prop type in Vue.js?",
        "o": [
            "String",
            "Object",
            "Array",
            "All of the options"
        ]
    },
    {
        "q": "What is the purpose of a named slot in Vue.js?",
        "o": [
            "To allow specific content placement in a child component",
            "To define reusable component logic",
            "To pass props to a parent component",
            "To handle component events"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?",
        "c": "<template>\n  <slot name=\"header\"></slot>\n</template>",
        "o": [
            "Content passed to the 'header' slot",
            "Empty content",
            "Error",
            "Default slot content"
        ]
    },
    {
        "q": "How do you access a slot’s data in a Vue.js component using scoped slots?",
        "o": [
            "Using v-slot to bind data from the child component",
            "Using v-bind to pass slot data",
            "Using emits to access slot data",
            "Using props to receive slot data"
        ]
    },
    {
        "q": "What is the correct way to validate that a prop is one of specific values in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    size: {\n      type: String,\n      validator: value => ['small', 'medium', 'large'].includes(value)\n    }\n  }\n}\n</script>",
        "o": [
            "Using the 'validator' function in the props object",
            "Using a computed property",
            "Using the 'validate' method",
            "Using the 'required' key"
        ]
    },
    {
        "q": "What is the primary purpose of the `<template>` tag in a Vue.js single-file component?",
        "o": [
            "To define the component's HTML structure",
            "To store JavaScript logic",
            "To apply CSS styles",
            "To handle component events"
        ]
    },
    {
        "q": "Which option correctly defines a prop with a default value in a Vue.js component?",
        "c": "<script>\nexport default {\n  props: {\n    message: {\n      type: String,\n      default: 'Hello'\n    }\n  }\n}\n</script>",
        "o": [
            "Using the 'default' key in the props object",
            "Using the 'value' key in the props object",
            "Using a computed property",
            "Using the 'init' key in the props object"
        ]
    },
    {
        "q": "What is the role of the 'emits' array in a Vue.js component?",
        "o": [
            "To declare custom events the component can emit",
            "To define props the component accepts",
            "To specify slots for content injection",
            "To handle component lifecycle hooks"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?",
        "c": "<template>\n  <div>{{ user.name }}</div>\n</template>\n<script>\nexport default {\n  props: {\n    user: Object\n  }\n}\n</script>",
        "o": [
            "The 'name' property of the 'user' prop object",
            "undefined",
            "null",
            "Error"
        ]
    },
    {
        "q": "Which directive is used to pass content to a default slot in a Vue.js component?",
        "o": [
            "<template v-slot:default>",
            "<template v-bind:default>",
            "<template v-on:default>",
            "<template v-if:default>"
        ]
    },
    {
        "q": "What happens if a prop’s type does not match the provided value in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    count: {\n      type: Number\n    }\n  }\n}\n</script>",
        "o": [
            "Vue throws a warning in the console",
            "The component fails to render",
            "The prop is set to null",
            "The prop is converted to the correct type"
        ]
    },
    {
        "q": "What is the correct syntax for emitting a custom event with a payload in Vue.js?",
        "c": "<template>\n  <button @click=\"$emit('change', 100)\">Click</button>\n</template>\n<script>\nexport default {\n  emits: ['change']\n}\n</script>",
        "o": [
            "Using $emit with the event name and payload",
            "Using v-on with the event name",
            "Using props to emit the event",
            "Using slots to trigger the event"
        ]
    },
    {
        "q": "Which of the following is true about named slots in Vue.js?",
        "o": [
            "They allow targeted content placement in a child component",
            "They replace all props in a component",
            "They are used to emit events",
            "They cannot be used with default slots"
        ]
    },
    {
        "q": "How do you specify that a prop is required in a Vue.js component?",
        "o": [
            "Using the 'required: true' key in the props object",
            "Using the 'mandatory: true' key in the props object",
            "Using the 'validate' method",
            "Using a computed property"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?",
        "c": "<template>\n  <slot name=\"footer\"></slot>\n</template>",
        "o": [
            "Content passed to the 'footer' slot",
            "Empty content",
            "Error",
            "Default slot content"
        ]
    },
    {
        "q": "What is the purpose of scoped slots in Vue.js?",
        "o": [
            "To allow the parent to access and use child component data",
            "To define reusable component styles",
            "To emit custom events",
            "To pass props to a child component"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a slot in a Vue.js component?",
        "o": [
            "<slot name=\"content\"></slot>",
            "<slot id=\"content\"></slot>",
            "<slot v-name=\"content\"></slot>",
            "<slot slot=\"content\"></slot>"
        ]
    },
    {
        "q": "What is the correct way to bind a prop dynamically in Vue.js?",
        "o": [
            "<Component :prop-name=\"value\" />",
            "<Component prop-name=value />",
            "<Component v-prop=\"prop-name\" />",
            "<Component @prop-name=\"value\" />"
        ]
    },
    {
        "q": "What is the file extension commonly used for Vue.js single-file components?",
        "o": [
            ".vue",
            ".js",
            ".html",
            ".ts"
        ]
    },
    {
        "q": "Which tag in a Vue.js single-file component is used for defining styles?",
        "o": [
            "<style>",
            "<template>",
            "<script>",
            "<css>"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code if no prop is passed?",
        "c": "<template>\n  <div>{{ greeting }}</div>\n</template>\n<script>\nexport default {\n  props: {\n    greeting: {\n      type: String,\n      default: 'Hello World'\n    }\n  }\n}\n</script>",
        "o": [
            "Hello World",
            "undefined",
            "null",
            "Error"
        ]
    },
    {
        "q": "What is the purpose of the 'props' option in a Vue.js component?",
        "o": [
            "To receive data from parent components",
            "To emit events to parent components",
            "To define local component state",
            "To handle routing in the application"
        ]
    },
    {
        "q": "How do you define an array prop in a Vue.js component?",
        "o": [
            "props: { items: Array }",
            "props: { items: [Array] }",
            "props: { items: 'Array' }",
            "props: { items: [] }"
        ]
    },
    {
        "q": "What will happen when the button is clicked in the following Vue.js code?",
        "c": "<template>\n  <button @click=\"$emit('clickEvent')\">Click Me</button>\n</template>\n<script>\nexport default {\n  emits: ['clickEvent']\n}\n</script>",
        "o": [
            "Emits a 'clickEvent' to the parent component",
            "Renders a new component",
            "Throws an error",
            "Changes the button text"
        ]
    },
    {
        "q": "Which feature in Vue.js allows for content distribution in components?",
        "o": [
            "Slots",
            "Props",
            "Emits",
            "Directives"
        ]
    },
    {
        "q": "What is the correct syntax to listen to a custom event in a Vue.js parent component?",
        "o": [
            "<ChildComponent @customEvent=\"handleEvent\" />",
            "<ChildComponent :customEvent=\"handleEvent\" />",
            "<ChildComponent v-on:customEvent=\"handleEvent\" />",
            "<ChildComponent v-bind:customEvent=\"handleEvent\" />"
        ]
    },
    {
        "q": "What is the purpose of the 'validator' function in Vue.js props?",
        "c": "<script>\nexport default {\n  props: {\n    color: {\n      type: String,\n      validator: value => ['red', 'green', 'blue'].includes(value)\n    }\n  }\n}\n</script>",
        "o": [
            "To custom validate the prop value",
            "To set a default value for the prop",
            "To make the prop required",
            "To define the prop type"
        ]
    },
    {
        "q": "Which of the following is true about default slots in Vue.js?",
        "o": [
            "They are used when no named slot is specified",
            "They require a name attribute",
            "They cannot contain fallback content",
            "They are only for text content"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?",
        "c": "<template>\n  <slot></slot>\n</template>",
        "o": [
            "Content from the parent component",
            "Nothing, if no content is provided",
            "Error",
            "Default text"
        ]
    },
    {
        "q": "How can you make styles in a Vue.js component global instead of scoped?",
        "o": [
            "By omitting the 'scoped' attribute",
            "By adding 'global' attribute",
            "By using <style global>",
            "By importing external CSS"
        ]
    },
    {
        "q": "What is the correct way to pass a boolean prop in Vue.js?",
        "o": [
            "<Component :isActive=\"true\" />",
            "<Component isActive=true />",
            "<Component v-bind:isActive=true />",
            "<Component @isActive=\"true\" />"
        ]
    },
    {
        "q": "What is the primary function of a single-file component in Vue.js?",
        "o": [
            "To combine template, logic, and styles in one file",
            "To manage global state",
            "To handle HTTP requests",
            "To define routing logic"
        ]
    },
    {
        "q": "Which section of a Vue.js single-file component contains the HTML structure?",
        "o": [
            "<template>",
            "<script>",
            "<style>",
            "<html>"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code if the 'title' prop is not provided?",
        "c": "<template>\n  <div>{{ title }}</div>\n</template>\n<script>\nexport default {\n  props: {\n    title: {\n      type: String,\n      default: 'Default Title'\n    }\n  }\n}\n</script>",
        "o": [
            "Default Title",
            "undefined",
            "null",
            "Error"
        ]
    },
    {
        "q": "What is the purpose of the 'v-bind' directive when passing props in Vue.js?",
        "o": [
            "To dynamically bind data to a component prop",
            "To emit custom events",
            "To define a slot's content",
            "To handle conditional rendering"
        ]
    },
    {
        "q": "How do you declare a custom event in a Vue.js component?",
        "o": [
            "Using the 'emits' option in the component",
            "Using the 'props' option in the component",
            "Using the 'events' method",
            "Using the 'slots' option"
        ]
    },
    {
        "q": "What happens when the following Vue.js code is executed?",
        "c": "<template>\n  <button @click=\"$emit('toggle', true)\">Toggle</button>\n</template>\n<script>\nexport default {\n  emits: ['toggle']\n}\n</script>",
        "o": [
            "Emits a 'toggle' event with true as payload",
            "Changes the button's visibility",
            "Throws an error",
            "Renders a new component"
        ]
    },
    {
        "q": "Which of the following correctly defines a named slot in a Vue.js component?",
        "o": [
            "<slot name=\"header\"></slot>",
            "<slot id=\"header\"></slot>",
            "<slot v-name=\"header\"></slot>",
            "<slot slot=\"header\"></slot>"
        ]
    },
    {
        "q": "What is the purpose of the 'type' property in a Vue.js prop definition?",
        "c": "<script>\nexport default {\n  props: {\n    age: {\n      type: Number,\n      required: true\n    }\n  }\n}\n</script>",
        "o": [
            "To enforce the data type of the prop",
            "To set a default value",
            "To make the prop optional",
            "To validate the prop's content"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?",
        "c": "<template>\n  <slot name=\"content\"></slot>\n</template>",
        "o": [
            "Content passed to the 'content' slot",
            "Empty content",
            "Error",
            "Default slot content"
        ]
    },
    {
        "q": "Which feature of Vue.js allows a parent component to customize a child component's content?",
        "o": [
            "Slots",
            "Props",
            "Emits",
            "Mixins"
        ]
    },
    {
        "q": "How do you make a prop optional in a Vue.js component?",
        "o": [
            "By omitting 'required' or setting it to false",
            "By setting the prop type to null",
            "By using the 'optional' key",
            "By defining it in the emits option"
        ]
    },
    {
        "q": "What is the correct syntax for passing content to a scoped slot in Vue.js?",
        "o": [
            "<template v-slot:slotName=\"slotProps\">",
            "<template v-bind:slotName=\"slotProps\">",
            "<template v-on:slotName=\"slotProps\">",
            "<template slot:slotName=\"slotProps\">"
        ]
    },
    {
        "q": "What happens if a Vue.js component receives a prop with an incorrect type?",
        "c": "<script>\nexport default {\n  props: {\n    value: {\n      type: Boolean\n    }\n  }\n}\n</script>",
        "o": [
            "Vue logs a warning in the console",
            "The component fails to render",
            "The prop is converted to the correct type",
            "The prop is set to undefined"
        ]
    },
    {
        "q": "What is the standard way to structure a single-file component in Vue.js?",
        "o": [
            "With <template>, <script>, and optional <style> sections",
            "With only a <script> section",
            "With <html>, <js>, and <css> sections",
            "With a single <component> tag"
        ]
    },
    {
        "q": "Which attribute makes CSS styles apply only to the current Vue.js component?",
        "o": [
            "scoped",
            "local",
            "private",
            "module"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?",
        "c": "<template>\n  <div>{{ quantity }}</div>\n</template>\n<script>\nexport default {\n  props: {\n    quantity: {\n      type: Number,\n      default: 1\n    }\n  }\n}\n</script>",
        "o": [
            "The 'quantity' prop value or 1 if not provided",
            "undefined",
            "null",
            "Error"
        ]
    },
    {
        "q": "What is the role of props in Vue.js components?",
        "o": [
            "To pass data from parent to child components",
            "To emit events from child to parent",
            "To define local state in the component",
            "To handle component styling"
        ]
    },
    {
        "q": "How do you define a boolean prop in a Vue.js component?",
        "o": [
            "props: { isVisible: Boolean }",
            "props: { isVisible: 'Boolean' }",
            "props: { isVisible: true }",
            "props: { isVisible: [Boolean] }"
        ]
    },
    {
        "q": "What will happen when the input changes in the following Vue.js code?",
        "c": "<template>\n  <input @input=\"$emit('input', $event.target.value)\" />\n</template>\n<script>\nexport default {\n  emits: ['input']\n}\n</script>",
        "o": [
            "Emits an 'input' event with the new value",
            "Updates the input's style",
            "Throws an error",
            "Renders a new input"
        ]
    },
    {
        "q": "Which Vue.js feature is used for content projection in components?",
        "o": [
            "Slots",
            "Props",
            "Emits",
            "Computed properties"
        ]
    },
    {
        "q": "What is the correct way to pass a prop without binding in Vue.js?",
        "o": [
            "<Component propName=\"staticValue\" />",
            "<Component :propName=\"staticValue\" />",
            "<Component v-prop=\"propName\" />",
            "<Component @propName=\"staticValue\" />"
        ]
    },
    {
        "q": "What is the purpose of the 'default' key in a Vue.js prop definition?",
        "c": "<script>\nexport default {\n  props: {\n    color: {\n      type: String,\n      default: 'blue'\n    }\n  }\n}\n</script>",
        "o": [
            "To provide a fallback value if the prop is not passed",
            "To enforce the prop type",
            "To make the prop required",
            "To validate the prop value"
        ]
    },
    {
        "q": "Which of the following is true about fallback content in Vue.js slots?",
        "o": [
            "It is displayed if no content is provided by the parent",
            "It replaces the parent's content",
            "It is always required",
            "It cannot be used with named slots"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?",
        "c": "<template>\n  <slot>Fallback</slot>\n</template>",
        "o": [
            "Fallback if no content is provided, otherwise parent's content",
            "Always Fallback",
            "Error",
            "Nothing"
        ]
    },
    {
        "q": "How can you import another component in a Vue.js single-file component?",
        "o": [
            "Using import in the <script> section",
            "Using <import> tag in <template>",
            "Using require in <style>",
            "Using v-import directive"
        ]
    },
    {
        "q": "What is the correct way to define a custom validator for a prop in Vue.js?",
        "o": [
            "Using the 'validator' function in the prop object",
            "Using a separate validate method",
            "Using the 'validate' key in props",
            "Using a computed property"
        ]
    },
    {
        "q": "What is the purpose of the 'name' attribute in a Vue.js single-file component's <script> section?",
        "o": [
            "To define the component's registered name",
            "To set the component's display name in the DOM",
            "To specify the component's CSS scope",
            "To define the component's event name"
        ]
    },
    {
        "q": "How can you pass a dynamic prop value to a Vue.js component?",
        "o": [
            "Using v-bind or : shorthand",
            "Using v-on or @ shorthand",
            "Using v-slot directive",
            "Using v-model directive"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code if no slot content is provided?",
        "c": "<template>\n  <slot>Default Content</slot>\n</template>",
        "o": [
            "Default Content",
            "Empty string",
            "Error",
            "null"
        ]
    },
    {
        "q": "What is the correct syntax for accessing scoped slot data in a Vue.js parent component?",
        "o": [
            "<template v-slot:default=\"slotProps\">",
            "<template v-bind:default=\"slotProps\">",
            "<template v-on:default=\"slotProps\">",
            "<template slot:default=\"slotProps\">"
        ]
    },
    {
        "q": "What happens if you use a prop without declaring it in the Vue.js component's props option?",
        "c": "<template>\n  <div>{{ undeclaredProp }}</div>\n</template>\n<script>\nexport default {\n  props: []\n}\n</script>",
        "o": [
            "Vue logs a warning and the prop is undefined",
            "The component fails to render",
            "The prop is automatically added",
            "The prop is set to null"
        ]
    },
    {
        "q": "Which option correctly defines a prop with multiple types in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    value: [String, Number]\n  }\n}\n</script>",
        "o": [
            "Using an array of types in the props definition",
            "Using a comma-separated list in the type field",
            "Using a union type in the default value",
            "Using a computed property"
        ]
    },
    {
        "q": "What is the purpose of the 'lang' attribute in the <style> tag of a Vue.js single-file component?",
        "o": [
            "To specify the preprocessor for styles, like SCSS",
            "To set the language for the template",
            "To define the component's locale",
            "To enable JavaScript in styles"
        ]
    },
    {
        "q": "What will happen when the following Vue.js code is executed?",
        "c": "<template>\n  <slot name=\"sidebar\">Default Sidebar</slot>\n</template>",
        "o": [
            "Renders parent-provided content or 'Default Sidebar'",
            "Always renders 'Default Sidebar'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "How can you dynamically bind multiple props to a Vue.js component at once?",
        "o": [
            "Using v-bind with an object",
            "Using v-on with an object",
            "Using v-slot with an array",
            "Using v-model with multiple values"
        ]
    },
    {
        "q": "What is the role of the 'v-slot' directive shorthand in Vue.js?",
        "o": [
            "# for slot definitions",
            ": for slot definitions",
            "@ for slot definitions",
            "$ for slot definitions"
        ]
    },
    {
        "q": "What is the correct way to emit an event with multiple arguments in Vue.js?",
        "c": "<template>\n  <button @click=\"$emit('update', 'value', 42)\">Click</button>\n</template>\n<script>\nexport default {\n  emits: ['update']\n}\n</script>",
        "o": [
            "Pass multiple arguments to $emit",
            "Use an array in the emits option",
            "Define multiple emits options",
            "Use a single object as the payload"
        ]
    },
    {
        "q": "Which of the following is a valid way to define fallback content for a Vue.js slot?",
        "o": [
            "Content inside the <slot> tag",
            "Content inside the <template> tag",
            "Content in the props option",
            "Content in the emits option"
        ]
    },
    {
        "q": "What is the purpose of the 'lang' attribute in the <template> tag of a Vue.js single-file component?",
        "o": [
            "To specify the template syntax, like Pug",
            "To set the language for the script",
            "To define the CSS preprocessor",
            "To enable localization"
        ]
    },
    {
        "q": "What is the purpose of the 'lang' attribute in the <script> tag of a Vue.js single-file component?",
        "o": [
            "To specify the script language, like TypeScript",
            "To set the template language",
            "To define the style preprocessor",
            "To enable event handling"
        ]
    },
    {
        "q": "How can you define a custom validator for a prop to accept specific values in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    status: {\n      type: String,\n      validator: value => ['active', 'inactive'].includes(value)\n    }\n  }\n}\n</script>",
        "o": [
            "Using a validator function in the prop definition",
            "Using a computed property",
            "Using the validate method",
            "Using the required key"
        ]
    },
    {
        "q": "What happens if you pass a prop to a Vue.js component that expects an object but receives a string?",
        "c": "<script>\nexport default {\n  props: {\n    config: Object\n  }\n}\n</script>",
        "o": [
            "Vue logs a warning in the console",
            "The component fails to render",
            "The string is converted to an object",
            "The prop is set to null"
        ]
    },
    {
        "q": "Which syntax is used to provide fallback content for a named slot in Vue.js?",
        "o": [
            "Content inside <slot name=\"slotName\">",
            "Content inside <template slot=\"slotName\">",
            "Content inside <slot v-bind=\"slotName\">",
            "Content inside <slot id=\"slotName\">"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code if the 'sidebar' slot is not provided?",
        "c": "<template>\n  <slot name=\"sidebar\">Default Sidebar Content</slot>\n</template>",
        "o": [
            "Default Sidebar Content",
            "Empty string",
            "Error",
            "null"
        ]
    },
    {
        "q": "How can you dynamically bind an object of props to a Vue.js component?",
        "o": [
            "Using v-bind=\"{ prop1: value1, prop2: value2 }\"",
            "Using v-on=\"{ prop1: value1, prop2: value2 }\"",
            "Using v-slot=\"{ prop1: value1, prop2: value2 }\"",
            "Using v-model=\"{ prop1: value1, prop2: value2 }\""
        ]
    },
    {
        "q": "What is the purpose of the 'setup' attribute in the <script> tag of a Vue.js single-file component?",
        "o": [
            "To use the Composition API",
            "To define global component settings",
            "To enable scoped styles",
            "To handle event listeners"
        ]
    },
    {
        "q": "What is the correct way to listen for a custom event with multiple arguments in a Vue.js parent component?",
        "c": "<template>\n  <ChildComponent @customEvent=\"handleEvent\" />\n</template>\n<script>\nexport default {\n  methods: {\n    handleEvent(arg1, arg2) {}\n  }\n}\n</script>",
        "o": [
            "Using a method that accepts multiple arguments",
            "Using a single argument in the method",
            "Using a computed property",
            "Using a slot to handle the event"
        ]
    },
    {
        "q": "Which of the following is true about scoped slots in Vue.js?",
        "o": [
            "They allow the parent to access child data for rendering",
            "They are used to define global styles",
            "They replace default slots entirely",
            "They cannot be used with named slots"
        ]
    },
    {
        "q": "What will happen when the following Vue.js code is executed?",
        "c": "<template>\n  <slot :data=\"childData\"></slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { childData: { name: 'Vue' } }\n  }\n}\n</script>",
        "o": [
            "Parent can access 'childData' via scoped slot",
            "Renders nothing",
            "Throws an error",
            "Displays 'childData' directly"
        ]
    },
    {
        "q": "How do you define a prop that accepts multiple types in Vue.js?",
        "o": [
            "props: { value: [String, Number] }",
            "props: { value: String | Number }",
            "props: { value: 'String, Number' }",
            "props: { value: { type: String, Number } }"
        ]
    },
    {
        "q": "What is the purpose of the 'src' attribute in the <style> tag of a Vue.js single-file component?",
        "o": [
            "To import an external stylesheet",
            "To define inline styles",
            "To specify the style language",
            "To link to a JavaScript file"
        ]
    },
    {
        "q": "What is the correct syntax to use a scoped slot with a shorthand in Vue.js?",
        "o": [
            "<template #slotName=\"slotProps\">",
            "<template :slotName=\"slotProps\">",
            "<template @slotName=\"slotProps\">",
            "<template $slotName=\"slotProps\">"
        ]
    },
    {
        "q": "What is the purpose of the 'src' attribute in the <script> tag of a Vue.js single-file component?",
        "o": [
            "To import an external JavaScript file",
            "To define the script language",
            "To link to an external stylesheet",
            "To specify a template source"
        ]
    },
    {
        "q": "How can you define a prop with a custom validator that checks for positive numbers in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    count: {\n      type: Number,\n      validator: value => value > 0\n    }\n  }\n}\n</script>",
        "o": [
            "Using a validator function returning a boolean",
            "Using a computed property",
            "Using the validate method",
            "Using the required key"
        ]
    },
    {
        "q": "What happens if a Vue.js component uses a slot without a name attribute?",
        "c": "<template>\n  <slot>Default</slot>\n</template>",
        "o": [
            "It acts as the default slot",
            "It throws an error",
            "It is ignored",
            "It becomes a named slot"
        ]
    },
    {
        "q": "What is the correct way to pass multiple named slots to a Vue.js component?",
        "o": [
            "Using multiple <template> tags with v-slot directives",
            "Using a single <slot> tag with multiple names",
            "Using v-bind for slot content",
            "Using v-on for slot definitions"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code when using a scoped slot?",
        "c": "<template>\n  <slot :item=\"data\"></slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { data: { id: 1 } }\n  }\n}\n</script>",
        "o": [
            "Parent can render content using the 'item' data",
            "Renders nothing",
            "Throws an error",
            "Displays 'data' directly"
        ]
    },
    {
        "q": "Which attribute allows importing an external template file in a Vue.js single-file component?",
        "o": [
            "src in <template>",
            "lang in <template>",
            "import in <template>",
            "ref in <template>"
        ]
    },
    {
        "q": "What is the purpose of the 'custom' attribute in the <style> tag of a Vue.js single-file component?",
        "o": [
            "To disable built-in style processing",
            "To enable scoped styles",
            "To define a custom style language",
            "To import JavaScript logic"
        ]
    },
    {
        "q": "What happens if a Vue.js component emits an event not listed in the 'emits' option with strict validation?",
        "c": "<template>\n  <button @click=\"$emit('unlisted')\">Click</button>\n</template>\n<script>\nexport default {\n  emits: []\n}\n</script>",
        "o": [
            "Vue logs a warning in the console",
            "The event is ignored",
            "The component fails to render",
            "The event is automatically added"
        ]
    },
    {
        "q": "How do you access multiple slot props in a Vue.js scoped slot?",
        "o": [
            "<template v-slot:default=\"{ prop1, prop2 }\">",
            "<template v-bind:default=\"{ prop1, prop2 }\">",
            "<template v-on:default=\"{ prop1, prop2 }\">",
            "<template slot:default=\"prop1, prop2\">"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code if the prop is not provided?",
        "c": "<template>\n  <div>{{ size }}</div>\n</template>\n<script>\nexport default {\n  props: {\n    size: {\n      type: String,\n      validator: value => ['small', 'large'].includes(value)\n    }\n  }\n}\n</script>",
        "o": [
            "undefined",
            "Error",
            "null",
            "Default value"
        ]
    },
    {
        "q": "What is the correct way to define a prop that accepts null in Vue.js?",
        "o": [
            "props: { value: [String, null] }",
            "props: { value: 'null' }",
            "props: { value: Null }",
            "props: { value: { type: null } }"
        ]
    },
    {
        "q": "What is the purpose of dynamic slot names in Vue.js?",
        "o": [
            "To allow slots to be selected dynamically with v-slot",
            "To rename props dynamically",
            "To emit dynamic events",
            "To bind styles dynamically"
        ]
    },
    {
        "q": "How can you ensure a Vue.js component only accepts specific object properties as a prop?",
        "c": "<script>\nexport default {\n  props: {\n    user: {\n      type: Object,\n      validator: obj => 'name' in obj\n    }\n  }\n}\n</script>",
        "o": [
            "Using a validator to check object properties",
            "Using a computed property",
            "Using the required key",
            "Using a default object"
        ]
    },
    {
        "q": "What is the purpose of the 'functional' attribute in a Vue.js single-file component's <template> tag?",
        "o": [
            "To create a stateless, functional component",
            "To enable event handling in the template",
            "To define a scoped style",
            "To import external templates"
        ]
    },
    {
        "q": "How can you define a prop that accepts an array of specific types in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    items: {\n      type: Array,\n      validator: arr => arr.every(item => typeof item === 'string')\n    }\n  }\n}\n</script>",
        "o": [
            "Using a validator to check array element types",
            "Using a computed property",
            "Using the required key",
            "Using a default array"
        ]
    },
    {
        "q": "What happens if a Vue.js component receives a prop that fails its validator function?",
        "c": "<script>\nexport default {\n  props: {\n    rating: {\n      type: Number,\n      validator: value => value >= 1 && value <= 5\n    }\n  }\n}\n</script>",
        "o": [
            "Vue logs a warning in the console",
            "The component fails to render",
            "The prop is set to null",
            "The prop is converted to a valid value"
        ]
    },
    {
        "q": "What is the correct syntax for dynamically selecting a slot name in Vue.js?",
        "o": [
            "<template v-slot:[dynamicSlotName]>",
            "<template :slot=[dynamicSlotName]>",
            "<template @slot=[dynamicSlotName]>",
            "<template slot=[dynamicSlotName]>"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code if no content is provided for the slot?",
        "c": "<template>\n  <slot name=\"header\">Header Fallback</slot>\n</template>",
        "o": [
            "Header Fallback",
            "Empty string",
            "Error",
            "null"
        ]
    },
    {
        "q": "What is the purpose of the 'is' attribute when using Vue.js components dynamically?",
        "o": [
            "To dynamically render a component based on a variable",
            "To define a prop type",
            "To emit a custom event",
            "To specify a slot name"
        ]
    },
    {
        "q": "How can you define a prop that accepts either a string or an array in Vue.js?",
        "o": [
            "props: { value: [String, Array] }",
            "props: { value: String | Array }",
            "props: { value: 'String, Array' }",
            "props: { value: { type: String, Array } }"
        ]
    },
    {
        "q": "What will happen when the following Vue.js code is executed with a scoped slot?",
        "c": "<template>\n  <slot :user=\"userData\"></slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { userData: { name: 'Alice' } }\n  }\n}\n</script>",
        "o": [
            "Parent can use 'user' data to render content",
            "Renders nothing",
            "Throws an error",
            "Displays 'userData' directly"
        ]
    },
    {
        "q": "What is the purpose of the 'module' attribute in the <style> tag of a Vue.js single-file component?",
        "o": [
            "To enable CSS Modules for scoped styling",
            "To import external JavaScript",
            "To define a global stylesheet",
            "To enable template preprocessing"
        ]
    },
    {
        "q": "How do you define a default slot with multiple props in Vue.js?",
        "o": [
            "<slot :prop1=\"value1\" :prop2=\"value2\"></slot>",
            "<slot prop1=\"value1\" prop2=\"value2\"></slot>",
            "<slot v-bind:prop1=\"value1\" v-bind:prop2=\"value2\"></slot>",
            "<slot v-slot:prop1=\"value1\" v-slot:prop2=\"value2\">"
        ]
    },
    {
        "q": "What is the correct way to handle a custom event in a Vue.js parent component?",
        "c": "<template>\n  <ChildComponent @updateValue=\"onUpdate\" />\n</template>\n<script>\nexport default {\n  methods: {\n    onUpdate(value) {}\n  }\n}\n</script>",
        "o": [
            "Using a method to handle the event payload",
            "Using a computed property",
            "Using a slot to capture the event",
            "Using a prop to receive the event"
        ]
    },
    {
        "q": "What is the purpose of the 'inheritAttrs' option in a Vue.js component?",
        "o": [
            "To control whether attributes are passed to the root element",
            "To inherit parent component props",
            "To inherit parent component events",
            "To inherit parent component slots"
        ]
    },
    {
        "q": "What happens if you define a prop with a default value but mark it as required in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    name: {\n      type: String,\n      required: true,\n      default: 'Guest'\n    }\n  }\n}\n</script>",
        "o": [
            "The default value is ignored, and a warning is logged if not provided",
            "The default value is used if not provided",
            "An error is thrown at compile time",
            "The prop is set to null"
        ]
    },
    {
        "q": "What is the purpose of the 'async' attribute in a Vue.js single-file component's <script> tag?",
        "o": [
            "To indicate the script is asynchronous",
            "To enable async functions in the component",
            "To load external scripts asynchronously",
            "To define async props"
        ]
    },
    {
        "q": "How can you define a prop with a default factory function in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    list: {\n      type: Array,\n      default: () => []\n    }\n  }\n}\n</script>",
        "o": [
            "Using a function for the 'default' key to return the value",
            "Using a computed property",
            "Using the 'factory' key",
            "Using the 'init' method"
        ]
    },
    {
        "q": "What happens if a Vue.js component emits an event with a validator in the 'emits' option that fails?",
        "c": "<script>\nexport default {\n  emits: {\n    update: payload => typeof payload === 'number'\n  }\n}\n</script>",
        "o": [
            "Vue logs a warning if the validator returns false",
            "The event is not emitted",
            "The component re-renders",
            "An error is thrown"
        ]
    },
    {
        "q": "What is the correct syntax for using a dynamic slot name in a Vue.js parent component?",
        "o": [
            "<template v-slot:[slotName]>",
            "<template :v-slot=slotName>",
            "<template @slotName>",
            "<template slotName>"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code if the slot is provided?",
        "c": "<template>\n  <slot name=\"body\">Body Fallback</slot>\n</template>",
        "o": [
            "The provided slot content",
            "Body Fallback",
            "Error",
            "null"
        ]
    },
    {
        "q": "What is the purpose of the 'expose' option in a Vue.js component?",
        "o": [
            "To specify which properties are exposed to the parent",
            "To expose all props to the child",
            "To handle exposed events",
            "To define exposed slots"
        ]
    },
    {
        "q": "How do you define a prop that accepts a function in Vue.js?",
        "o": [
            "props: { callback: Function }",
            "props: { callback: 'Function' }",
            "props: { callback: () => {} }",
            "props: { callback: [Function] }"
        ]
    },
    {
        "q": "What will happen when the following Vue.js code is executed?",
        "c": "<template>\n  <slot :items=\"itemList\"></slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { itemList: [1, 2, 3] }\n  }\n}\n</script>",
        "o": [
            "Parent can access 'items' in the scoped slot",
            "Renders the itemList directly",
            "Throws an error",
            "Displays nothing"
        ]
    },
    {
        "q": "What is the purpose of the 'attrs' in a Vue.js slot scope?",
        "o": [
            "To access attributes passed to the slot",
            "To define slot attributes",
            "To emit slot events",
            "To bind slot props"
        ]
    },
    {
        "q": "How can you define an event validator in the 'emits' option of a Vue.js component?",
        "c": "<script>\nexport default {\n  emits: {\n    submit: payload => !!payload\n  }\n}\n</script>",
        "o": [
            "Using a function that returns a boolean for validation",
            "Using a computed property",
            "Using the validate method",
            "Using the required key"
        ]
    },
    {
        "q": "What is the correct way to use a slot in a Vue.js component without scoped props?",
        "o": [
            "<slot></slot>",
            "<slot :props=\"data\"></slot>",
            "<slot v-slot>",
            "<slot name>"
        ]
    },
    {
        "q": "What is the purpose of the 'name' option in a Vue.js component?",
        "o": [
            "To define the component's name for recursive or keep-alive usage",
            "To set the component's display name",
            "To define the component's prop name",
            "To name the component's events"
        ]
    },
    {
        "q": "What happens if a required prop is provided but fails type validation in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    id: {\n      type: Number,\n      required: true\n    }\n  }\n}\n</script>",
        "o": [
            "Vue logs a type mismatch warning",
            "The prop is set to default",
            "An error is thrown",
            "The component does not render"
        ]
    },
    {
        "q": "What is the purpose of the 'inheritAttrs' option when set to false in a Vue.js component?",
        "o": [
            "Prevents attributes from being applied to the root element",
            "Disables prop inheritance from the parent",
            "Blocks event emission",
            "Disables slot content"
        ]
    },
    {
        "q": "How can you define a prop with a custom validator for an object with specific keys in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    config: {\n      type: Object,\n      validator: obj => 'id' in obj && 'name' in obj\n    }\n  }\n}\n</script>",
        "o": [
            "Using a validator function checking object keys",
            "Using a computed property",
            "Using the required key",
            "Using a default object"
        ]
    },
    {
        "q": "What will happen if a Vue.js component uses a dynamic slot name that doesn’t exist?",
        "c": "<template>\n  <slot :name=\"dynamicName\"></slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { dynamicName: 'missing' }\n  }\n}\n</script>",
        "o": [
            "Renders nothing for that slot",
            "Throws an error",
            "Uses the default slot",
            "Logs a warning"
        ]
    },
    {
        "q": "What is the correct syntax for defining a fallback content for a scoped slot in Vue.js?",
        "o": [
            "<slot :data=\"value\">Fallback</slot>",
            "<slot v-bind:data=\"value\">Fallback</slot>",
            "<slot v-slot:data=\"value\">Fallback</slot>",
            "<slot name=\"data\">Fallback</slot>"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code if the parent provides no slot content?",
        "c": "<template>\n  <slot name=\"footer\">Default Footer</slot>\n</template>",
        "o": [
            "Default Footer",
            "Empty string",
            "Error",
            "null"
        ]
    },
    {
        "q": "What is the purpose of the 'slots' object in a Vue.js slot scope?",
        "o": [
            "To access slot content passed by the parent",
            "To define new slots dynamically",
            "To emit slot events",
            "To bind slot props"
        ]
    },
    {
        "q": "How do you define a prop that accepts a custom class in Vue.js?",
        "o": [
            "props: { class: [String, Object, Array] }",
            "props: { class: 'Class' }",
            "props: { class: Class }",
            "props: { class: { type: Class } }"
        ]
    },
    {
        "q": "What will happen when the following Vue.js code is executed with a scoped slot?",
        "c": "<template>\n  <slot :value=\"counter\" :max=\"limit\"></slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { counter: 5, limit: 10 }\n  }\n}\n</script>",
        "o": [
            "Parent can access 'value' and 'max' for rendering",
            "Renders counter and limit directly",
            "Throws an error",
            "Displays nothing"
        ]
    },
    {
        "q": "What is the purpose of the 'v-bind' directive in the context of slots in Vue.js?",
        "o": [
            "To pass data to a scoped slot",
            "To define slot names",
            "To emit slot events",
            "To style slot content"
        ]
    },
    {
        "q": "How can you define an event in Vue.js that validates its payload type?",
        "c": "<script>\nexport default {\n  emits: {\n    change: value => typeof value === 'string'\n  }\n}\n</script>",
        "o": [
            "Using a function in the emits object",
            "Using a computed property",
            "Using the validate method",
            "Using the required key"
        ]
    },
    {
        "q": "What is the correct way to define a slot with multiple named slots in a Vue.js component?",
        "o": [
            "Multiple <slot> tags with different name attributes",
            "A single <slot> with multiple names",
            "Multiple <template> tags with v-slot",
            "A single <slot> with v-bind"
        ]
    },
    {
        "q": "What is the purpose of the 'provide' option in a Vue.js component in relation to slots?",
        "o": [
            "To share data with slotted content",
            "To define slot names",
            "To emit events to slots",
            "To validate slot content"
        ]
    },
    {
        "q": "What happens if a Vue.js component defines a prop with both a default value and a validator that conflicts?",
        "c": "<script>\nexport default {\n  props: {\n    size: {\n      type: String,\n      default: 'medium',\n      validator: value => ['large'].includes(value)\n    }\n  }\n}\n</script>",
        "o": [
            "Vue logs a warning for validator failure",
            "The default value is used",
            "An error is thrown",
            "The prop is set to null"
        ]
    },
    {
        "q": "What is the purpose of the 'key' attribute when using dynamic components in Vue.js?",
        "o": [
            "To help Vue track component identity for efficient updates",
            "To define a unique prop name",
            "To specify a slot name",
            "To bind an event listener"
        ]
    },
    {
        "q": "How can you define a prop that accepts a specific set of numbers in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    level: {\n      type: Number,\n      validator: value => [1, 2, 3].includes(value)\n    }\n  }\n}\n</script>",
        "o": [
            "Using a validator function checking specific values",
            "Using a computed property",
            "Using the required key",
            "Using a default value"
        ]
    },
    {
        "q": "What happens if a Vue.js component uses a scoped slot but the parent doesn’t provide a template?",
        "c": "<template>\n  <slot :data=\"info\">Fallback</slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { info: { name: 'Test' } }\n  }\n}\n</script>",
        "o": [
            "Renders the fallback content",
            "Renders nothing",
            "Throws an error",
            "Displays the 'info' object directly"
        ]
    },
    {
        "q": "What is the correct syntax for passing multiple attributes to a slot in Vue.js?",
        "o": [
            "<slot :attr1=\"value1\" :attr2=\"value2\"></slot>",
            "<slot attr1=\"value1\" attr2=\"value2\"></slot>",
            "<slot v-bind:attr1=\"value1\" v-bind:attr2=\"value2\"></slot>",
            "<slot v-slot:attr1=\"value1\" v-slot:attr2=\"value2\">"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code if the 'main' slot is provided?",
        "c": "<template>\n  <slot name=\"main\">Default Main</slot>\n</template>",
        "o": [
            "The provided slot content",
            "Default Main",
            "Error",
            "null"
        ]
    },
    {
        "q": "What is the purpose of the 'inject' option in a Vue.js component in relation to slots?",
        "o": [
            "To access data provided by a parent for slotted content",
            "To define slot names",
            "To emit slot events",
            "To validate slot props"
        ]
    },
    {
        "q": "How do you define a prop that accepts a custom instance in Vue.js?",
        "o": [
            "props: { instance: Object }",
            "props: { instance: 'Object' }",
            "props: { instance: Instance }",
            "props: { instance: { type: Custom } }"
        ]
    },
    {
        "q": "What will happen when the following Vue.js code is executed?",
        "c": "<template>\n  <slot :count=\"counter\" :limit=\"maxValue\"></slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { counter: 10, maxValue: 100 }\n  }\n}\n</script>",
        "o": [
            "Parent can access 'count' and 'limit' for rendering",
            "Renders counter and maxValue directly",
            "Throws an error",
            "Displays nothing"
        ]
    },
    {
        "q": "What is the purpose of the '$attrs' object in a Vue.js component?",
        "o": [
            "To access attributes passed to the component not declared as props",
            "To define new attributes dynamically",
            "To emit component events",
            "To bind slot props"
        ]
    },
    {
        "q": "How can you validate that an event payload in Vue.js meets specific criteria?",
        "c": "<script>\nexport default {\n  emits: {\n    save: payload => payload && payload.id\n  }\n}\n</script>",
        "o": [
            "Using a function in the emits option that returns a boolean",
            "Using a computed property",
            "Using the validate method",
            "Using the required key"
        ]
    },
    {
        "q": "What is the correct way to define multiple slots with fallback content in a Vue.js component?",
        "o": [
            "Multiple <slot> tags with name attributes and content",
            "A single <slot> with multiple fallback contents",
            "Multiple <template> tags with v-slot",
            "A single <slot> with v-bind"
        ]
    },
    {
        "q": "What is the purpose of the 'renderless' component pattern in Vue.js?",
        "o": [
            "To provide logic via slots without rendering DOM elements",
            "To render multiple components",
            "To disable component rendering",
            "To handle external styles"
        ]
    },
    {
        "q": "What happens if a Vue.js component defines a prop with a validator that always returns false?",
        "c": "<script>\nexport default {\n  props: {\n    value: {\n      type: Number,\n      validator: () => false\n    }\n  }\n}\n</script>",
        "o": [
            "Vue logs a warning for every value passed",
            "The prop is always null",
            "An error is thrown",
            "The component does not render"
        ]
    },
    {
        "q": "What is the purpose of the 'keep-alive' directive when used with dynamic components in Vue.js?",
        "o": [
            "To cache and preserve component state between switches",
            "To destroy the component after use",
            "To define a unique slot name",
            "To bind dynamic props"
        ]
    },
    {
        "q": "How can you define a prop that accepts a custom validator with multiple conditions in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    score: {\n      type: Number,\n      validator: value => value >= 0 && value <= 100\n    }\n  }\n}\n</script>",
        "o": [
            "Using a validator function with multiple checks",
            "Using a computed property with conditions",
            "Using the required key with conditions",
            "Using a default value with checks"
        ]
    },
    {
        "q": "What happens if a Vue.js component uses a slot with a dynamic name that is invalid?",
        "c": "<template>\n  <slot :name=\"invalidName\"></slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { invalidName: '' }\n  }\n}\n</script>",
        "o": [
            "Renders nothing for that slot",
            "Throws a runtime error",
            "Falls back to the default slot",
            "Logs a warning"
        ]
    },
    {
        "q": "What is the correct syntax for accessing a dynamic slot name in a Vue.js parent component?",
        "o": [
            "<template v-slot:[dynamicName]>",
            "<template :slot=\"dynamicName\">",
            "<template @slot=\"dynamicName\">",
            "<template slot=\"dynamicName\">"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code if the parent provides scoped slot content?",
        "c": "<template>\n  <slot :user=\"userData\">Fallback User</slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { userData: { id: 42 } }\n  }\n}\n</script>",
        "o": [
            "The parent’s scoped slot content using 'user'",
            "Fallback User",
            "Error",
            "null"
        ]
    },
    {
        "q": "What is the purpose of the '$slots' object in a Vue.js component?",
        "o": [
            "To check which slots are provided by the parent",
            "To define new slots dynamically",
            "To emit slot events",
            "To bind slot attributes"
        ]
    },
    {
        "q": "How do you define a prop that accepts a specific custom object constructor in Vue.js?",
        "o": [
            "props: { instance: { type: Object } }",
            "props: { instance: 'CustomObject' }",
            "props: { instance: CustomObject }",
            "props: { instance: { constructor: CustomObject } }"
        ]
    },
    {
        "q": "What will happen when the following Vue.js code is executed with an invalid event payload?",
        "c": "<script>\nexport default {\n  emits: {\n    update: value => typeof value === 'number'\n  }\n}\n</script>",
        "o": [
            "Vue logs a warning if the payload is not a number",
            "The event is not emitted",
            "An error is thrown",
            "The payload is converted to a number"
        ]
    },
    {
        "q": "What is the purpose of the 'v-once' directive in a Vue.js component’s slot?",
        "o": [
            "To render slot content only once for performance",
            "To bind slot content dynamically",
            "To emit a one-time event",
            "To validate slot content"
        ]
    },
    {
        "q": "How can you conditionally render a slot in a Vue.js component?",
        "c": "<template>\n  <slot v-if=\"showSlot\" name=\"conditional\">Default</slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { showSlot: true }\n  }\n}\n</script>",
        "o": [
            "Using v-if on the slot element",
            "Using v-bind on the slot",
            "Using v-slot with a condition",
            "Using v-on for conditional rendering"
        ]
    },
    {
        "q": "What is the purpose of the 'provide/inject' pair in Vue.js components with slots?",
        "o": [
            "To share data between parent and slotted content",
            "To define slot attributes",
            "To emit slot events",
            "To validate slot props"
        ]
    },
    {
        "q": "What is the correct way to pass a prop with a reactive object in Vue.js?",
        "o": [
            "<Component :data=\"reactiveObject\" />",
            "<Component data=\"reactiveObject\" />",
            "<Component v-bind:data=\"reactiveObject\" />",
            "<Component @data=\"reactiveObject\" />"
        ]
    },
    {
        "q": "What happens if a Vue.js component defines a prop with a validator and a conflicting required flag?",
        "c": "<script>\nexport default {\n  props: {\n    rank: {\n      type: Number,\n      required: true,\n      validator: value => value > 0\n    }\n  }\n}\n</script>",
        "o": [
            "A warning is logged if the value is not positive",
            "The prop is set to null",
            "An error is thrown at compile time",
            "The validator is ignored"
        ]
    },
    {
        "q": "What is the purpose of the 'ref' attribute in a Vue.js single-file component when used with slots?",
        "o": [
            "To reference the slot content for DOM manipulation",
            "To define a slot name",
            "To bind props to the slot",
            "To emit events from the slot"
        ]
    },
    {
        "q": "How can you define a prop that accepts a Map object in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    settings: {\n      type: Map,\n      default: () => new Map()\n    }\n  }\n}\n</script>",
        "o": [
            "Using Map as the type with a default factory function",
            "Using Object as the type",
            "Using a computed property",
            "Using a validator function"
        ]
    },
    {
        "q": "What happens if a Vue.js component uses a scoped slot without binding any data?",
        "c": "<template>\n  <slot>Fallback Content</slot>\n</template>",
        "o": [
            "Renders the parent’s slot content or fallback",
            "Throws an error",
            "Renders nothing",
            "Logs a warning"
        ]
    },
    {
        "q": "What is the correct syntax for accessing multiple scoped slot props in a Vue.js parent component?",
        "o": [
            "<template v-slot:default=\"{ prop1, prop2 }\">",
            "<template v-bind:default=\"{ prop1, prop2 }\">",
            "<template v-on:default=\"{ prop1, prop2 }\">",
            "<template slot:default=\"prop1, prop2\">"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code if the parent provides a dynamic slot?",
        "c": "<template>\n  <slot :name=\"slotName\">Dynamic Fallback</slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { slotName: 'dynamic' }\n  }\n}\n</script>",
        "o": [
            "The parent’s content for the 'dynamic' slot or fallback",
            "Dynamic Fallback",
            "Error",
            "null"
        ]
    },
    {
        "q": "What is the purpose of the 'v-bind' directive without an argument in a Vue.js component?",
        "o": [
            "To bind all props and attributes to a component or element",
            "To bind all events to a component",
            "To define all slots dynamically",
            "To validate all props"
        ]
    },
    {
        "q": "How do you define a prop that accepts a Set object in Vue.js?",
        "o": [
            "props: { values: Set }",
            "props: { values: 'Set' }",
            "props: { values: [Set] }",
            "props: { values: { type: SetObject } }"
        ]
    },
    {
        "q": "What will happen when the following Vue.js code is executed with an invalid prop type?",
        "c": "<script>\nexport default {\n  props: {\n    count: {\n      type: Number,\n      required: true\n    }\n  }\n}\n</script>",
        "o": [
            "Vue logs a warning for type mismatch",
            "The prop is set to null",
            "An error is thrown",
            "The component does not render"
        ]
    },
    {
        "q": "What is the purpose of the 'v-on' directive in the context of Vue.js custom events?",
        "o": [
            "To listen for custom events emitted by a component",
            "To bind props to a component",
            "To define slot content",
            "To validate event payloads"
        ]
    },
    {
        "q": "How can you conditionally emit an event based on a condition in a Vue.js component?",
        "c": "<template>\n  <button @click=\"emitIfValid\">Click</button>\n</template>\n<script>\nexport default {\n  emits: ['valid'],\n  methods: {\n    emitIfValid() {\n      if (true) this.$emit('valid', 1);\n    }\n  }\n}\n</script>",
        "o": [
            "Using a method to check conditions before emitting",
            "Using a computed property",
            "Using a validator in emits",
            "Using a slot condition"
        ]
    },
    {
        "q": "What is the purpose of the 'model' option in a Vue.js component?",
        "o": [
            "To customize v-model behavior for the component",
            "To define default slot content",
            "To validate prop types",
            "To manage component events"
        ]
    },
    {
        "q": "What is the correct way to access the parent’s attributes in a Vue.js slot?",
        "o": [
            "Using $attrs in the slot scope",
            "Using $props in the slot scope",
            "Using $slots in the slot scope",
            "Using $emit in the slot scope"
        ]
    },
    {
        "q": "What happens if a Vue.js component defines a prop with a validator that checks for null?",
        "c": "<script>\nexport default {\n  props: {\n    item: {\n      type: String,\n      validator: value => value !== null\n    }\n  }\n}\n</script>",
        "o": [
            "A warning is logged if the prop is null",
            "The prop is set to undefined",
            "An error is thrown",
            "The validator is ignored"
        ]
    },
    {
        "q": "What is the purpose of the 'transition' component when used with slots in Vue.js?",
        "o": [
            "To apply animations to slot content during insertion/removal",
            "To define a transition for props",
            "To handle slot events",
            "To validate slot content"
        ]
    },
    {
        "q": "How can you define a prop that accepts a Promise in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    asyncData: {\n      type: Promise,\n      default: () => Promise.resolve()\n    }\n  }\n}\n</script>",
        "o": [
            "Using Promise as the type with a default factory function",
            "Using Object as the type",
            "Using a computed property",
            "Using a validator function"
        ]
    },
    {
        "q": "What happens if a Vue.js component uses a slot with a v-if directive that evaluates to false?",
        "c": "<template>\n  <slot v-if=\"false\">Fallback</slot>\n</template>",
        "o": [
            "The slot and its fallback are not rendered",
            "Renders the fallback content",
            "Throws an error",
            "Renders the parent’s slot content"
        ]
    },
    {
        "q": "What is the correct syntax for binding an event to a slot in a Vue.js component?",
        "o": [
            "<slot @event=\"handler\"></slot>",
            "<slot :event=\"handler\"></slot>",
            "<slot v-on:event=\"handler\"></slot>",
            "<slot v-slot:event=\"handler\"></slot>"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code if no scoped slot is provided?",
        "c": "<template>\n  <slot :data=\"info\">No Data</slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { info: { value: 'Test' } }\n  }\n}\n</script>",
        "o": [
            "No Data",
            "The 'info' object",
            "Error",
            "null"
        ]
    },
    {
        "q": "What is the purpose of the 'teleport' component in Vue.js when used with slots?",
        "o": [
            "To render slot content to a different DOM location",
            "To bind slot props dynamically",
            "To emit slot events",
            "To validate slot content"
        ]
    },
    {
        "q": "How do you define a prop that accepts a Symbol in Vue.js?",
        "o": [
            "props: { key: Symbol }",
            "props: { key: 'Symbol' }",
            "props: { key: [Symbol] }",
            "props: { key: { type: SymbolObject } }"
        ]
    },
    {
        "q": "What will happen when the following Vue.js code is executed with a valid event payload?",
        "c": "<script>\nexport default {\n  emits: {\n    submit: payload => payload.id > 0\n  }\n}\n</script>",
        "o": [
            "The event is emitted successfully",
            "A warning is logged",
            "An error is thrown",
            "The payload is modified"
        ]
    },
    {
        "q": "What is the purpose of the 'v-show' directive when used with a slot in Vue.js?",
        "o": [
            "To toggle the visibility of slot content",
            "To bind slot props",
            "To emit slot events",
            "To validate slot content"
        ]
    },
    {
        "q": "How can you dynamically bind an event listener to a Vue.js component’s custom event?",
        "c": "<template>\n  <ChildComponent @[eventName]=\"handleEvent\" />\n</template>\n<script>\nexport default {\n  data() {\n    return { eventName: 'update' }\n  }\n}\n</script>",
        "o": [
            "Using @[eventName] syntax for dynamic events",
            "Using :[eventName] syntax",
            "Using v-slot for events",
            "Using v-bind for events"
        ]
    },
    {
        "q": "What is the purpose of the 'scopedSlots' property in a Vue.js component’s $slots object?",
        "o": [
            "To access data bound to scoped slots",
            "To define new scoped slots",
            "To emit slot events",
            "To validate slot props"
        ]
    },
    {
        "q": "What is the correct way to handle a custom event with a complex payload in a Vue.js parent component?",
        "o": [
            "<ChildComponent @customEvent=\"({ id, name }) => handle(id, name)\" />",
            "<ChildComponent :customEvent=\"({ id, name }) => handle(id, name)\" />",
            "<ChildComponent v-slot:customEvent=\"{ id, name }\">",
            "<ChildComponent v-bind:customEvent=\"{ id, name }\">"
        ]
    },
    {
        "q": "What happens if a Vue.js component defines a prop with a default factory that throws an error?",
        "c": "<script>\nexport default {\n  props: {\n    data: {\n      type: Object,\n      default: () => { throw new Error('Invalid') }\n    }\n  }\n}\n</script>",
        "o": [
            "An error is thrown when the default is used",
            "The prop is set to null",
            "Vue logs a warning",
            "The component renders with undefined"
        ]
    },
    {
        "q": "What is the purpose of the 'slot-scope' attribute in older Vue.js versions (pre-2.6) when used with slots?",
        "o": [
            "To access scoped slot data in the parent component",
            "To define a new slot name",
            "To bind events to the slot",
            "To validate slot content"
        ]
    },
    {
        "q": "How can you define a prop that accepts a Date object in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    date: {\n      type: Date,\n      default: () => new Date()\n    }\n  }\n}\n</script>",
        "o": [
            "Using Date as the type with a default factory function",
            "Using Object as the type",
            "Using a computed property",
            "Using a validator function"
        ]
    },
    {
        "q": "What happens if a Vue.js component uses a slot with a v-for directive?",
        "c": "<template>\n  <slot v-for=\"item in items\" :item=\"item\">Fallback</slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { items: [1, 2, 3] }\n  }\n}\n</script>",
        "o": [
            "Renders the slot content for each item",
            "Renders only the first item",
            "Throws an error",
            "Renders the fallback content"
        ]
    },
    {
        "q": "What is the correct syntax for binding multiple dynamic props to a Vue.js component?",
        "o": [
            "<Component v-bind=\"{ prop1: value1, prop2: value2 }\" />",
            "<Component :prop1=\"value1\" :prop2=\"value2\" />",
            "<Component v-on=\"{ prop1: value1, prop2: value2 }\" />",
            "<Component v-slot=\"{ prop1: value1, prop2: value2 }\" />"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code if the parent provides a named slot?",
        "c": "<template>\n  <slot name=\"content\">Default Content</slot>\n</template>",
        "o": [
            "The parent’s content for the 'content' slot",
            "Default Content",
            "Error",
            "null"
        ]
    },
    {
        "q": "What is the purpose of the 'component' tag with the 'is' attribute in Vue.js?",
        "o": [
            "To dynamically render a component based on a variable",
            "To define a slot dynamically",
            "To emit a custom event",
            "To validate a prop type"
        ]
    },
    {
        "q": "How do you define a prop that accepts a RegExp in Vue.js?",
        "o": [
            "props: { pattern: RegExp }",
            "props: { pattern: 'RegExp' }",
            "props: { pattern: [RegExp] }",
            "props: { pattern: { type: RegExpObject } }"
        ]
    },
    {
        "q": "What will happen when the following Vue.js code is executed?",
        "c": "<template>\n  <slot :info=\"data\" name=\"info\">No Info</slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { data: { key: 'value' } }\n  }\n}\n</script>",
        "o": [
            "Parent can use 'info' for rendering or No Info if not provided",
            "Renders the 'data' object directly",
            "Throws an error",
            "Displays nothing"
        ]
    },
    {
        "q": "What is the purpose of the '$listeners' object in Vue.js (pre-Vue 3)?",
        "o": [
            "To access event listeners passed to the component",
            "To define new event listeners",
            "To bind slot props",
            "To validate event payloads"
        ]
    },
    {
        "q": "How can you define a conditional event emission in a Vue.js component?",
        "c": "<template>\n  <button @click=\"emitIfTrue\">Click</button>\n</template>\n<script>\nexport default {\n  emits: ['action'],\n  methods: {\n    emitIfTrue() {\n      if (this.condition) this.$emit('action', true);\n    }\n  }\n}\n</script>",
        "o": [
            "Using a method to conditionally emit the event",
            "Using a computed property",
            "Using a validator in emits",
            "Using a slot condition"
        ]
    },
    {
        "q": "What is the purpose of the 'v-is' directive in Vue.js for dynamic components?",
        "o": [
            "To dynamically bind a component name",
            "To define a slot name",
            "To emit a dynamic event",
            "To validate a prop"
        ]
    },
    {
        "q": "What is the correct way to access the parent’s event listeners in a Vue.js slot?",
        "o": [
            "Using $listeners in the slot scope (pre-Vue 3)",
            "Using $attrs in the slot scope",
            "Using $slots in the slot scope",
            "Using $emit in the slot scope"
        ]
    },
    {
        "q": "What happens if a Vue.js component defines a prop with a default factory that returns an invalid type?",
        "c": "<script>\nexport default {\n  props: {\n    count: {\n      type: Number,\n      default: () => 'invalid'\n    }\n  }\n}\n</script>",
        "o": [
            "Vue logs a warning for type mismatch",
            "The prop is set to null",
            "An error is thrown",
            "The component renders with undefined"
        ]
    },
    {
        "q": "What is the purpose of the 'scopedSlots' property in a Vue.js component’s $slots object (pre-Vue 3)?",
        "o": [
            "To check for scoped slots provided by the parent",
            "To define new scoped slots dynamically",
            "To emit slot-specific events",
            "To validate slot attributes"
        ]
    },
    {
        "q": "How can you define a prop that accepts a WeakMap object in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    cache: {\n      type: WeakMap,\n      default: () => new WeakMap()\n    }\n  }\n}\n</script>",
        "o": [
            "Using WeakMap as the type with a default factory function",
            "Using Object as the type",
            "Using a computed property",
            "Using a validator function"
        ]
    },
    {
        "q": "What happens if a Vue.js component uses a slot with a v-else directive without a corresponding v-if?",
        "c": "<template>\n  <slot v-else>Fallback</slot>\n</template>",
        "o": [
            "Throws a compilation error",
            "Renders the fallback content",
            "Renders nothing",
            "Logs a warning"
        ]
    },
    {
        "q": "What is the correct syntax for passing a dynamic event name to a Vue.js component?",
        "o": [
            "<Component @[eventName]=\"handler\" />",
            "<Component :[eventName]=\"handler\" />",
            "<Component v-slot:[eventName]=\"handler\" />",
            "<Component v-bind:[eventName]=\"handler\" />"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code if the parent provides a scoped slot?",
        "c": "<template>\n  <slot :record=\"data\">No Record</slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { data: { id: 123 } }\n  }\n}\n</script>",
        "o": [
            "The parent’s scoped slot content using 'record'",
            "No Record",
            "Error",
            "null"
        ]
    },
    {
        "q": "What is the purpose of the 'v-model' directive when used with a Vue.js component?",
        "o": [
            "To create two-way data binding with custom prop and event",
            "To define a slot’s content",
            "To validate component props",
            "To bind slot attributes"
        ]
    },
    {
        "q": "How do you define a prop that accepts a WeakSet in Vue.js?",
        "o": [
            "props: { set: WeakSet }",
            "props: { set: 'WeakSet' }",
            "props: { set: [WeakSet] }",
            "props: { set: { type: WeakSetObject } }"
        ]
    },
    {
        "q": "What will happen when the following Vue.js code is executed with a dynamic prop?",
        "c": "<template>\n  <div>{{ dynamicProp }}</div>\n</template>\n<script>\nexport default {\n  props: {\n    dynamicProp: [String, Number]\n  }\n}\n</script>",
        "o": [
            "Renders the value of dynamicProp (string or number)",
            "Throws an error",
            "Renders undefined",
            "Logs a warning"
        ]
    },
    {
        "q": "What is the purpose of the 'v-once' directive when applied to a slot’s fallback content in Vue.js?",
        "o": [
            "To render the fallback content only once",
            "To bind the fallback content dynamically",
            "To emit a one-time slot event",
            "To validate the fallback content"
        ]
    },
    {
        "q": "How can you define a custom event with a specific payload structure in Vue.js?",
        "c": "<script>\nexport default {\n  emits: {\n    select: payload => payload && 'value' in payload\n  }\n}\n</script>",
        "o": [
            "Using a validator function in the emits option",
            "Using a computed property",
            "Using a method to validate",
            "Using a prop to validate"
        ]
    },
    {
        "q": "What is the purpose of the 'functional' component in Vue.js (pre-Vue 3)?",
        "o": [
            "To create a stateless component for performance",
            "To define a stateful component",
            "To handle slot events",
            "To validate component props"
        ]
    },
    {
        "q": "What is the correct way to check if a named slot exists in a Vue.js component?",
        "o": [
            "Using this.$slots.slotName",
            "Using this.$props.slotName",
            "Using this.$attrs.slotName",
            "Using this.$emit.slotName"
        ]
    },
    {
        "q": "What happens if a Vue.js component defines a prop with a validator that checks for undefined?",
        "c": "<script>\nexport default {\n  props: {\n    value: {\n      type: String,\n      validator: value => value !== undefined\n    }\n  }\n}\n</script>",
        "o": [
            "A warning is logged if the prop is undefined",
            "The prop is set to null",
            "An error is thrown",
            "The validator is ignored"
        ]
    },
    {
        "q": "What is the purpose of the 'tag' attribute in a Vue.js single-file component's <template> tag?",
        "o": [
            "To specify the HTML tag for the component's root element",
            "To define a slot name",
            "To bind a dynamic prop",
            "To emit a custom event"
        ]
    },
    {
        "q": "How can you define a prop that accepts a custom validator for a range of dates in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    date: {\n      type: Date,\n      validator: value => value >= new Date('2020-01-01')\n    }\n  }\n}\n</script>",
        "o": [
            "Using a validator function checking date ranges",
            "Using a computed property",
            "Using the required key",
            "Using a default date"
        ]
    },
    {
        "q": "What happens if a Vue.js component uses a slot with a v-for and no parent content?",
        "c": "<template>\n  <slot v-for=\"item in list\">Fallback {{ item }}</slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { list: ['a', 'b'] }\n  }\n}\n</script>",
        "o": [
            "Renders 'Fallback a' and 'Fallback b'",
            "Renders nothing",
            "Throws an error",
            "Renders the list directly"
        ]
    },
    {
        "q": "What is the correct syntax for passing a dynamic prop name to a Vue.js component?",
        "o": [
            "<Component :[propName]=\"value\" />",
            "<Component [propName]=\"value\" />",
            "<Component v-bind:[propName]=\"value\" />",
            "<Component v-slot:[propName]=\"value\" />"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code if no 'header' slot is provided?",
        "c": "<template>\n  <slot name=\"header\">Default Header</slot>\n</template>",
        "o": [
            "Default Header",
            "Empty string",
            "Error",
            "null"
        ]
    },
    {
        "q": "What is the purpose of the 'render' function in Vue.js components in relation to slots?",
        "o": [
            "To programmatically render slot content",
            "To define slot names",
            "To emit slot events",
            "To validate slot props"
        ]
    },
    {
        "q": "How do you define a prop that accepts a custom Error object in Vue.js?",
        "o": [
            "props: { error: Error }",
            "props: { error: 'Error' }",
            "props: { error: [Error] }",
            "props: { error: { type: ErrorObject } }"
        ]
    },
    {
        "q": "What will happen when the following Vue.js code is executed?",
        "c": "<template>\n  <slot :details=\"info\" name=\"details\">No Details</slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { info: { status: 'active' } }\n  }\n}\n</script>",
        "o": [
            "Parent can use 'details' for rendering or No Details if not provided",
            "Renders the 'info' object directly",
            "Throws an error",
            "Displays nothing"
        ]
    },
    {
        "q": "What is the purpose of the 'v-bind.sync' modifier in Vue.js (pre-Vue 3)?",
        "o": [
            "To enable two-way binding for a prop",
            "To synchronize slot content",
            "To bind slot attributes",
            "To validate event payloads"
        ]
    },
    {
        "q": "How can you check if a specific scoped slot is provided in a Vue.js component?",
        "c": "<script>\nexport default {\n  mounted() {\n    console.log(this.$slots.mySlot);\n  }\n}\n</script>",
        "o": [
            "Using this.$slots.mySlot to check for existence",
            "Using this.$props.mySlot",
            "Using this.$attrs.mySlot",
            "Using this.$emit.mySlot"
        ]
    },
    {
        "q": "What is the purpose of the 'dynamic components' feature in Vue.js?",
        "o": [
            "To render components based on a variable",
            "To define dynamic slots",
            "To emit dynamic events",
            "To validate dynamic props"
        ]
    },
    {
        "q": "What is the correct way to access slot props in a Vue.js parent component with a default slot?",
        "o": [
            "<template v-slot:default=\"slotProps\">",
            "<template v-bind:default=\"slotProps\">",
            "<template v-on:default=\"slotProps\">",
            "<template slot:default=\"slotProps\">"
        ]
    },
    {
        "q": "What happens if a Vue.js component defines a prop with a default factory that returns null?",
        "c": "<script>\nexport default {\n  props: {\n    data: {\n      type: Object,\n      default: () => null\n    }\n  }\n}\n</script>",
        "o": [
            "The prop is set to null if not provided",
            "A warning is logged",
            "An error is thrown",
            "The component renders with undefined"
        ]
    },
    {
        "q": "What is the purpose of the 'is' attribute in a Vue.js template when used with slots?",
        "o": [
            "To dynamically render a component in a slot",
            "To define a slot name",
            "To bind a prop to the slot",
            "To emit an event from the slot"
        ]
    },
    {
        "q": "How can you define a prop that accepts a custom validator for an array of objects with specific properties in Vue.js?",
        "c": "<script>\nexport default {\n  props: {\n    users: {\n      type: Array,\n      validator: arr => arr.every(user => 'id' in user)\n    }\n  }\n}\n</script>",
        "o": [
            "Using a validator function checking object properties",
            "Using a computed property",
            "Using the required key",
            "Using a default array"
        ]
    },
    {
        "q": "What happens if a Vue.js component uses a slot with a v-show directive set to false?",
        "c": "<template>\n  <slot v-show=\"false\">Hidden Content</slot>\n</template>",
        "o": [
            "The slot content is hidden but present in the DOM",
            "The slot content is not rendered",
            "Throws an error",
            "Renders the fallback content"
        ]
    },
    {
        "q": "What is the correct syntax for binding a dynamic event to a slot in a Vue.js component?",
        "o": [
            "<slot @[eventName]=\"handler\"></slot>",
            "<slot :[eventName]=\"handler\"></slot>",
            "<slot v-slot:[eventName]=\"handler\"></slot>",
            "<slot v-bind:[eventName]=\"handler\"></slot>"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code if the 'sidebar' slot is not provided?",
        "c": "<template>\n  <slot name=\"sidebar\">Sidebar Fallback</slot>\n</template>",
        "o": [
            "Sidebar Fallback",
            "Empty string",
            "Error",
            "null"
        ]
    },
    {
        "q": "What is the purpose of the 'h' function in a Vue.js render function when working with slots?",
        "o": [
            "To create virtual DOM nodes for slot content",
            "To define slot names",
            "To emit slot events",
            "To validate slot props"
        ]
    },
    {
        "q": "How do you define a prop that accepts a BigInt in Vue.js?",
        "o": [
            "props: { number: BigInt }",
            "props: { number: 'BigInt' }",
            "props: { number: [BigInt] }",
            "props: { number: { type: BigIntObject } }"
        ]
    },
    {
        "q": "What will happen when the following Vue.js code is executed?",
        "c": "<template>\n  <slot :meta=\"info\" name=\"meta\">No Meta</slot>\n</template>\n<script>\nexport default {\n  data() {\n    return { info: { type: 'info' } }\n  }\n}\n</script>",
        "o": [
            "Parent can use 'meta' for rendering or No Meta if not provided",
            "Renders the 'info' object directly",
            "Throws an error",
            "Displays nothing"
        ]
    },
    {
        "q": "What is the purpose of the 'v-model' customization in a Vue.js component?",
        "o": [
            "To define custom prop and event for two-way binding",
            "To validate slot content",
            "To bind dynamic slot props",
            "To emit slot events"
        ]
    },
    {
        "q": "How can you programmatically access a slot’s content in a Vue.js component?",
        "c": "<script>\nexport default {\n  mounted() {\n    console.log(this.$slots.default);\n  }\n}\n</script>",
        "o": [
            "Using this.$slots.default to access default slot content",
            "Using this.$props.default",
            "Using this.$attrs.default",
            "Using this.$emit.default"
        ]
    },
    {
        "q": "What is the purpose of the 'activated' lifecycle hook in a Vue.js component with keep-alive?",
        "o": [
            "To handle logic when a cached component is reactivated",
            "To define a new slot",
            "To emit a custom event",
            "To validate a prop"
        ]
    },
    {
        "q": "What is the correct way to pass a slot with dynamic content to a Vue.js component?",
        "o": [
            "<template v-slot:slotName><div>{{ dynamicContent }}</div></template>",
            "<template :slotName><div>{{ dynamicContent }}</div></template>",
            "<template @slotName><div>{{ dynamicContent }}</div></template>",
            "<template v-bind:slotName><div>{{ dynamicContent }}</div></template>"
        ]
    },
    {
        "q": "What happens if a Vue.js component defines a prop with a validator that checks for a specific string length?",
        "c": "<script>\nexport default {\n  props: {\n    text: {\n      type: String,\n      validator: value => value.length > 3\n    }\n  }\n}\n</script>",
        "o": [
            "A warning is logged if the string length is 3 or less",
            "The prop is set to null",
            "An error is thrown",
            "The validator is ignored"
        ]
    },
    {
        "q": "What is the primary advantage of using Vue Single-File Components (SFCs)?",
        "o": [
            "They encapsulate template, script, and style in one file for better organization",
            "They automatically optimize JavaScript for production",
            "They eliminate the need for a build step",
            "They allow direct DOM manipulation without virtual DOM"
        ]
    },
    {
        "q": "Which of the following is true about props in Vue components?",
        "o": [
            "Props are reactive and can be modified by the child component",
            "Props are immutable within the child component",
            "Props cannot have default values",
            "Props must always be passed as strings"
        ]
    },
    {
        "q": "What is the output of the following Vue component code when the parent passes `message='Hello'`?",
        "c": "<template>\n  <div>{{ formattedMessage }}</div>\n</template>\n<script>\nexport default {\n  props: {\n    message: String\n  },\n  computed: {\n    formattedMessage() {\n      return this.message + ' World';\n    }\n  }\n}\n</script>",
        "o": [
            "Hello World",
            "Hello",
            "undefined World",
            "Error"
        ]
    },
    {
        "q": "How can a Vue component emit a custom event with a payload?",
        "o": [
            "this.$emit('event-name', payload)",
            "this.emit('event-name', payload)",
            "this.$dispatch('event-name', payload)",
            "this.$trigger('event-name', payload)"
        ]
    },
    {
        "q": "What is the purpose of slots in Vue components?",
        "o": [
            "To allow parent components to inject custom content into child components",
            "To define reactive data properties",
            "To handle component lifecycle hooks",
            "To manage global state in Vuex"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Child><template v-slot:header>Custom Header</template></Child>`?",
        "c": "<template>\n  <div>\n    <slot name='header'>Default Header</slot>\n    <slot>Default Content</slot>\n  </div>\n</template>\n<script>\nexport default {}\n</script>",
        "o": [
            "Custom Header",
            "Default Header",
            "Custom Header and Default Content",
            "Default Header and Default Content"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a prop with validation in a Vue Single-File Component?",
        "o": [
            "props: { age: { type: Number, required: true, validator: val => val > 0 } }",
            "props: { age: { type: Number, required: true, validate: val => val > 0 } }",
            "props: { age: { type: Number, default: 0, validator: val => val > 0 } }",
            "props: { age: { type: Number, required: true, default: null } }"
        ]
    },
    {
        "q": "What happens if a Vue component tries to modify a prop directly?",
        "o": [
            "Vue throws a warning in development mode",
            "The prop is updated in the parent component",
            "The component re-renders without errors",
            "The application crashes"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent emits an update with value `10`?",
        "c": "<template>\n  <div>{{ count }}</div>\n</template>\n<script>\nexport default {\n  props: ['count'],\n  emits: ['update:count'],\n  methods: {\n    increment() {\n      this.$emit('update:count', this.count + 1);\n    }\n  }\n}\n</script>",
        "o": [
            "10",
            "11",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "Which of the following is a correct way to define a named slot in a Vue component?",
        "o": [
            "<slot name='content'>Default</slot>",
            "<slot>content:Default</slot>",
            "<slot id='content'>Default</slot>",
            "<slot slot='content'>Default</slot>"
        ]
    },
    {
        "q": "What is the purpose of the `emits` option in a Vue component?",
        "o": [
            "To declare custom events the component can emit for better maintainability",
            "To define reactive state properties",
            "To configure prop validation rules",
            "To handle slot content rendering"
        ]
    },
    {
        "q": "What will be the behavior of the following Vue component when the button is clicked?",
        "c": "<template>\n  <button @click='notify'>Click</button>\n</template>\n<script>\nexport default {\n  emits: ['custom-event'],\n  methods: {\n    notify() {\n      this.$emit('custom-event', 'Data sent');\n    }\n  }\n}\n</script>",
        "o": [
            "Emits a 'custom-event' with the payload 'Data sent'",
            "Throws an error for undefined event",
            "Renders 'Data sent' in the template",
            "No action is performed"
        ]
    },
    {
        "q": "Which of the following is a correct way to pass a prop with a dynamic value to a Vue component?",
        "o": [
            "<MyComponent :value='dynamicValue' />",
            "<MyComponent value='dynamicValue' />",
            "<MyComponent v-bind='dynamicValue' />",
            "<MyComponent v-prop='dynamicValue' />"
        ]
    },
    {
        "q": "What is the correct way to define a default value for a prop in a Vue Single-File Component?",
        "o": [
            "props: { name: { type: String, default: 'Guest' } }",
            "props: { name: { type: String, value: 'Guest' } }",
            "props: { name: { type: String, default: () => 'Guest' } }",
            "props: { name: { type: String, initial: 'Guest' } }"
        ]
    },
    {
        "q": "What happens when a Vue component uses a slot with a fallback content and no content is provided by the parent?",
        "o": [
            "The fallback content is rendered",
            "The slot is left empty",
            "Vue throws a rendering error",
            "The parent component's content is rendered"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `items=[1, 2, 3]`?",
        "c": "<template>\n  <ul>\n    <li v-for='item in items' :key='item'>{{ item * 2 }}</li>\n  </ul>\n</template>\n<script>\nexport default {\n  props: {\n    items: Array\n  }\n}\n</script>",
        "o": [
            "<ul><li>2</li><li>4</li><li>6</li></ul>",
            "<ul><li>1</li><li>2</li><li>3</li></ul>",
            "Error: Invalid prop type",
            "Nothing is rendered"
        ]
    },
    {
        "q": "Which of the following is a valid way to emit an event with multiple arguments in a Vue component?",
        "o": [
            "this.$emit('update', value1, value2)",
            "this.$emit('update', { value1, value2 })",
            "this.emit('update', [value1, value2])",
            "this.$emit('update', value1; value2)"
        ]
    },
    {
        "q": "What is the purpose of the `scoped` attribute in a Vue Single-File Component's style tag?",
        "o": [
            "It ensures styles only apply to the component's template",
            "It makes styles globally available",
            "It disables CSS preprocessing",
            "It enables inline CSS in the template"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Child><template v-slot:footer>Custom Footer</template></Child>`?",
        "c": "<template>\n  <div>\n    <slot name='header'>Default Header</slot>\n    <slot name='footer'>Default Footer</slot>\n  </div>\n</template>\n<script>\nexport default {}\n</script>",
        "o": [
            "Default Header and Custom Footer",
            "Default Header and Default Footer",
            "Custom Footer only",
            "Error: Invalid slot name"
        ]
    },
    {
        "q": "Which of the following is a correct way to validate a prop that must be one of specific values in a Vue component?",
        "o": [
            "props: { status: { type: String, validator: val => ['active', 'inactive'].includes(val) } }",
            "props: { status: { type: String, values: ['active', 'inactive'] } }",
            "props: { status: { type: String, restrict: ['active', 'inactive'] } }",
            "props: { status: { type: String, default: ['active', 'inactive'] } }"
        ]
    },
    {
        "q": "What happens if a Vue component emits an event that is not declared in the `emits` option in development mode?",
        "o": [
            "Vue logs a warning to the console",
            "The event is ignored silently",
            "The application crashes",
            "The event is automatically registered"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the button is clicked with `count=5` passed from the parent?",
        "c": "<template>\n  <button @click='increment'>Add</button>\n</template>\n<script>\nexport default {\n  props: ['count'],\n  emits: ['update:count'],\n  methods: {\n    increment() {\n      this.$emit('update:count', Number(this.count) + 1);\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:count with payload 6",
            "Emits update:count with payload 5",
            "Throws a type error",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a correct way to access a scoped slot's props in a parent component?",
        "o": [
            "<template v-slot='slotProps'>{{ slotProps.value }}</template>",
            "<template slot='slotProps'>{{ slotProps.value }}</template>",
            "<template v-bind='slotProps'>{{ slotProps.value }}</template>",
            "<template v-slot:value='slotProps'>{{ slotProps }}</template>"
        ]
    },
    {
        "q": "What is the benefit of using the `emits` option with event validation in a Vue component?",
        "o": [
            "It allows runtime validation of emitted event payloads",
            "It automatically binds events to the parent component",
            "It improves performance of event handling",
            "It disables event emission"
        ]
    },
    {
        "q": "What will happen when the following Vue component is rendered with no content passed to the default slot?",
        "c": "<template>\n  <div>\n    <slot>Default Content</slot>\n  </div>\n</template>\n<script>\nexport default {}\n</script>",
        "o": [
            "Renders 'Default Content'",
            "Renders an empty div",
            "Throws a slot error",
            "Renders the parent component's content"
        ]
    },
    {
        "q": "Which of the following is a correct way to pass multiple props dynamically to a Vue component?",
        "o": [
            "<MyComponent v-bind='{ prop1, prop2 }' />",
            "<MyComponent :prop1 :prop2 />",
            "<MyComponent props='{ prop1, prop2 }' />",
            "<MyComponent v-props='{ prop1, prop2 }' />"
        ]
    },
    {
        "q": "How can you make a Vue Single-File Component's prop optional with a custom default value?",
        "o": [
            "props: { title: { type: String, default: 'Default Title' } }",
            "props: { title: { type: String, optional: true } }",
            "props: { title: { type: String, value: 'Default Title' } }",
            "props: { title: { type: String, default: null } }"
        ]
    },
    {
        "q": "What is the purpose of using `v-bind='$props'` in a Vue component?",
        "o": [
            "To pass all props from a parent component to a child component",
            "To bind all events to the child component",
            "To merge all slots into the child component",
            "To override default prop values"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Child><template v-slot:default='slotProps'>{{ slotProps.item }}</template></Child>` and `items=['Vue']` passed as a prop?",
        "c": "<template>\n  <slot :item='items[0]'>Default Item</slot>\n</template>\n<script>\nexport default {\n  props: {\n    items: Array\n  }\n}\n</script>",
        "o": [
            "Vue",
            "Default Item",
            "Error: Invalid slot props",
            "Nothing is rendered"
        ]
    },
    {
        "q": "Which of the following is a correct way to emit an event with validation in a Vue component?",
        "o": [
            "emits: { 'update:value': payload => typeof payload === 'number' }",
            "emits: { 'update:value': { validate: payload => typeof payload === 'number' } }",
            "emits: { 'update:value': payload => payload > 0 }",
            "emits: { 'update:value': { type: Number } }"
        ]
    },
    {
        "q": "What is the effect of using the `inheritAttrs` option in a Vue component?",
        "o": [
            "It controls whether attributes not declared as props are bound to the root element",
            "It enables automatic prop validation",
            "It merges parent and child component styles",
            "It disables event emission"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `value='Test'` and clicks the button?",
        "c": "<template>\n  <button @click='updateValue'>Update</button>\n</template>\n<script>\nexport default {\n  props: ['value'],\n  emits: ['update:value'],\n  methods: {\n    updateValue() {\n      this.$emit('update:value', this.value + '!');\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:value with payload 'Test!'",
            "Emits update:value with payload 'Test'",
            "Throws an error for modifying prop",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a slot with dynamic content in a Vue component?",
        "o": [
            "<slot :data='dynamicData'>Default</slot>",
            "<slot data='dynamicData'>Default</slot>",
            "<slot v-bind='dynamicData'>Default</slot>",
            "<slot dynamic='dynamicData'>Default</slot>"
        ]
    },
    {
        "q": "What happens if a Vue component's prop validation fails during development?",
        "o": [
            "Vue logs a warning to the console",
            "The component fails to render",
            "The prop is assigned a default value",
            "The application crashes"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when no content is provided for the named slot?",
        "c": "<template>\n  <div>\n    <slot name='content'>Fallback Content</slot>\n  </div>\n</template>\n<script>\nexport default {}\n</script>",
        "o": [
            "Fallback Content",
            "Empty div",
            "Error: Missing slot content",
            "Parent component's content"
        ]
    },
    {
        "q": "Which of the following is a correct way to pass a prop with a boolean value in a Vue component?",
        "o": [
            "<MyComponent :active='true' />",
            "<MyComponent active='true' />",
            "<MyComponent v-bind:active='true' />",
            "<MyComponent :active='\"true\"' />"
        ]
    },
    {
        "q": "What is the purpose of the `v-model` directive when used with a Vue component?",
        "o": [
            "It enables two-way binding between a parent and child component",
            "It binds a slot to the parent component",
            "It validates props automatically",
            "It disables event emission"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `count=10` and the button is clicked?",
        "c": "<template>\n  <button @click='double'>Double</button>\n</template>\n<script>\nexport default {\n  props: ['count'],\n  emits: ['update:count'],\n  methods: {\n    double() {\n      this.$emit('update:count', this.count * 2);\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:count with payload 20",
            "Emits update:count with payload 10",
            "Throws a type error",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a correct way to access multiple slot props in a parent component?",
        "o": [
            "<template v-slot='{ prop1, prop2 }'>{{ prop1 }} {{ prop2 }}</template>",
            "<template slot='prop1, prop2'>{{ prop1 }} {{ prop2 }}</template>",
            "<template v-bind='{ prop1, prop2 }'>{{ prop1 }} {{ prop2 }}</template>",
            "<template v-slot:props='{ prop1, prop2 }'>{{ prop1 }} {{ prop2 }}</template>"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that accepts multiple types?",
        "o": [
            "props: { value: { type: [String, Number] } }",
            "props: { value: { type: String | Number } }",
            "props: { value: { types: [String, Number] } }",
            "props: { value: { type: Array.of(String, Number) } }"
        ]
    },
    {
        "q": "What is the purpose of the `slot-scope` attribute in older Vue versions, and its equivalent in Vue 3?",
        "o": [
            "It was used to access slot props; in Vue 3, it's replaced by v-slot directive with destructuring",
            "It defined named slots; in Vue 3, it's the same",
            "It bound events to slots; in Vue 3, it's v-on on slots",
            "It validated slot content; in Vue 3, it's slot validation"
        ]
    },
    {
        "q": "What will happen when the following Vue component emits the event, assuming the parent listens to 'customEvent'?",
        "c": "<template>\n  <button @click='emitEvent'>Emit</button>\n</template>\n<script>\nexport default {\n  emits: ['customEvent'],\n  methods: {\n    emitEvent() {\n      this.$emit('customEvent', { data: 'info' });\n    }\n  }\n}\n</script>",
        "o": [
            "The parent receives the event with payload { data: 'info' }",
            "The parent receives the event without payload",
            "Vue throws a warning for undeclared event",
            "No event is received by the parent"
        ]
    },
    {
        "q": "Which of the following is a correct way to use dynamic slot names in a Vue component?",
        "o": [
            "<slot :name='dynamicName'>Default</slot>",
            "<slot name='dynamicName'>Default</slot>",
            "<slot v-name='dynamicName'>Default</slot>",
            "<slot dynamic-name='dynamicName'>Default</slot>"
        ]
    },
    {
        "q": "What is the effect of setting `inheritAttrs: false` in a Vue component?",
        "o": [
            "Non-prop attributes are not automatically bound to the root element",
            "Props are not inherited from parent components",
            "Slots do not inherit parent content",
            "Events are not inherited from child components"
        ]
    },
    {
        "q": "What is the output of the following Vue component when rendered with `<Child v-model='message' />` and initial message='Hello'?",
        "c": "<template>\n  <input :value='value' @input='$emit(\"update:value\", $event.target.value)' />\n</template>\n<script>\nexport default {\n  props: ['value'],\n  emits: ['update:value']\n}\n</script>",
        "o": [
            "Two-way binding works, updating parent when input changes",
            "Only one-way binding from parent to child",
            "Error: Invalid v-model usage",
            "Input is read-only"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a required prop without a type in a Vue Single-File Component?",
        "o": [
            "props: { id: { required: true } }",
            "props: { id: { type: Any, required: true } }",
            "props: { id: { mandatory: true } }",
            "props: { id: { default: undefined, required: true } }"
        ]
    },
    {
        "q": "What happens when a Vue component receives a prop of the wrong type in production mode?",
        "o": [
            "The prop is accepted without warning",
            "Vue throws a runtime error",
            "The component fails to mount",
            "The prop is converted to the correct type"
        ]
    },
    {
        "q": "What will be the behavior of the following Vue component when the default slot is provided with content?",
        "c": "<template>\n  <div>\n    <slot v-bind='{ info: \"details\" }'>Fallback</slot>\n  </div>\n</template>\n<script>\nexport default {}\n</script>",
        "o": [
            "The provided content has access to { info: 'details' } via v-slot",
            "The fallback is always rendered",
            "The slot props are ignored",
            "Error: Invalid slot binding"
        ]
    },
    {
        "q": "Which of the following is a correct way to emit a model update in a Vue component for v-model support?",
        "o": [
            "this.$emit('update:modelValue', newValue)",
            "this.$emit('model:update', newValue)",
            "this.$emit('v-model', newValue)",
            "this.$emit('update:value', newValue)"
        ]
    },
    {
        "q": "What is the purpose of using `v-bind='$attrs'` in a Vue component?",
        "o": [
            "To pass all non-prop attributes to a child element",
            "To bind all props to the root element",
            "To merge all events with the component",
            "To disable attribute inheritance"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `options={ a: 1, b: 2 }`?",
        "c": "<template>\n  <select>\n    <option v-for='(value, key) in options' :key='key' :value='key'>{{ value }}</option>\n  </select>\n</template>\n<script>\nexport default {\n  props: {\n    options: Object\n  }\n}\n</script>",
        "o": [
            "<select><option value='a'>1</option><option value='b'>2</option></select>",
            "<select><option value='1'>a</option><option value='2'>b</option></select>",
            "Error: Invalid prop type",
            "Empty select element"
        ]
    },
    {
        "q": "Which of the following is a correct way to customize the model prop and event for v-model in a Vue component?",
        "o": [
            "model: { prop: 'checked', event: 'change' }",
            "model: { value: 'checked', update: 'change' }",
            "emits: { model: 'checked', event: 'change' }",
            "props: { model: 'checked', event: 'change' }"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that accepts an array with a default empty array?",
        "o": [
            "props: { items: { type: Array, default: () => [] } }",
            "props: { items: { type: Array, default: [] } }",
            "props: { items: { type: Array, value: [] } }",
            "props: { items: { type: Array, default: null } }"
        ]
    },
    {
        "q": "What is the purpose of using the `v-slot` directive with a named slot in a Vue component?",
        "o": [
            "To specify which slot content to render in the parent component",
            "To bind props to the slot content",
            "To define a default slot in the child component",
            "To disable slot rendering"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Child><template v-slot:sidebar>Custom Sidebar</template></Child>`?",
        "c": "<template>\n  <div>\n    <slot name='sidebar'>Default Sidebar</slot>\n    <slot>Main Content</slot>\n  </div>\n</template>\n<script>\nexport default {}\n</script>",
        "o": [
            "Custom Sidebar and Main Content",
            "Default Sidebar and Main Content",
            "Custom Sidebar only",
            "Error: Invalid slot name"
        ]
    },
    {
        "q": "Which of the following is a correct way to emit an event with an array payload in a Vue component?",
        "o": [
            "this.$emit('update', [1, 2, 3])",
            "this.$emit('update', { values: [1, 2, 3] })",
            "this.emit('update', [1, 2, 3])",
            "this.$emit('update', 1, 2, 3)"
        ]
    },
    {
        "q": "What happens if a Vue component tries to emit an undeclared event in development mode with `emits` option defined?",
        "o": [
            "Vue logs a warning to the console",
            "The event is emitted silently",
            "The application crashes",
            "The event is automatically added to emits"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `text='Vue'` and clicks the button?",
        "c": "<template>\n  <button @click='updateText'>Update</button>\n</template>\n<script>\nexport default {\n  props: ['text'],\n  emits: ['update:text'],\n  methods: {\n    updateText() {\n      this.$emit('update:text', this.text.toUpperCase());\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:text with payload 'VUE'",
            "Emits update:text with payload 'Vue'",
            "Throws an error for modifying prop",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a valid way to pass a scoped slot prop to a parent component?",
        "o": [
            "<slot :data='value'>Default</slot>",
            "<slot data='value'>Default</slot>",
            "<slot v-bind:data='value'>Default</slot>",
            "<slot scope='value'>Default</slot>"
        ]
    },
    {
        "q": "What is the benefit of defining props with type checking in a Vue component?",
        "o": [
            "It provides runtime type validation and warnings in development mode",
            "It improves component rendering performance",
            "It automatically converts prop types",
            "It disables prop reactivity"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Child v-model='count' />` and initial count=5?",
        "c": "<template>\n  <button @click='$emit(\"update:modelValue\", modelValue + 1)'>Increment</button>\n</template>\n<script>\nexport default {\n  props: ['modelValue'],\n  emits: ['update:modelValue']\n}\n</script>",
        "o": [
            "Emits update:modelValue with payload 6 on click",
            "Emits update:modelValue with payload 5 on click",
            "Throws an error for invalid v-model",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a correct way to define a slot with a default fallback in a Vue component?",
        "o": [
            "<slot>Fallback Content</slot>",
            "<slot default>Fallback Content</slot>",
            "<slot name='default'>Fallback Content</slot>",
            "<slot v-default>Fallback Content</slot>"
        ]
    },
    {
        "q": "What is the purpose of using `expose` in a Vue 3 component?",
        "o": [
            "To define which properties and methods are accessible to parent components",
            "To expose all props to the template",
            "To make all slots publicly available",
            "To disable component encapsulation"
        ]
    },
    {
        "q": "What is the output of the following Vue component when rendered with `<Child :data='{ name: \"Test\" }' />`?",
        "c": "<template>\n  <div>{{ data.name }}</div>\n</template>\n<script>\nexport default {\n  props: {\n    data: {\n      type: Object,\n      required: true\n    }\n  }\n}\n</script>",
        "o": [
            "Test",
            "Error: Missing required prop",
            "{ name: 'Test' }",
            "Nothing is rendered"
        ]
    },
    {
        "q": "Which of the following is a correct way to handle multiple v-model bindings in a Vue 3 component?",
        "o": [
            "props: ['modelValue', 'secondValue'], emits: ['update:modelValue', 'update:secondValue']",
            "props: ['value1', 'value2'], emits: ['model:value1', 'model:value2']",
            "props: ['modelValue'], emits: ['update:modelValue', 'update:secondValue']",
            "props: ['modelValue', 'secondValue'], emits: ['update:model']"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that requires a specific object shape?",
        "o": [
            "props: { user: { type: Object, validator: obj => 'name' in obj && 'age' in obj } }",
            "props: { user: { type: Object, shape: { name: String, age: Number } } }",
            "props: { user: { type: Object, required: { name: String, age: Number } } }",
            "props: { user: { type: Object, default: { name: '', age: 0 } } }"
        ]
    },
    {
        "q": "What is the purpose of using the `v-bind` shorthand (`:`) when passing props to a Vue component?",
        "o": [
            "To dynamically bind JavaScript expressions to props",
            "To statically assign string values to props",
            "To bind events to the component",
            "To disable prop reactivity"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Child><template v-slot:default='slotProps'>{{ slotProps.count }}</template></Child>` and `value=10` passed as a prop?",
        "c": "<template>\n  <slot :count='value * 2'>Default</slot>\n</template>\n<script>\nexport default {\n  props: {\n    value: Number\n  }\n}\n</script>",
        "o": [
            "20",
            "10",
            "Default",
            "Error: Invalid slot props"
        ]
    },
    {
        "q": "Which of the following is a correct way to emit an event with a custom validator in a Vue 3 component?",
        "o": [
            "emits: { 'update:value': payload => payload >= 0 }",
            "emits: { 'update:value': { validate: payload => payload >= 0 } }",
            "emits: { 'update:value': payload => { return payload >= 0 } }",
            "emits: { 'update:value': { type: Number, validator: payload => payload >= 0 } }"
        ]
    },
    {
        "q": "What happens when a Vue component uses `v-bind='$attrs'` on a non-root element with `inheritAttrs: false`?",
        "o": [
            "Non-prop attributes are bound to the specified element instead of the root",
            "Non-prop attributes are ignored",
            "Vue throws a warning for invalid attribute binding",
            "Non-prop attributes are applied to the root element"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `items=['a', 'b']` and clicks the button?",
        "c": "<template>\n  <button @click='addItem'>Add</button>\n</template>\n<script>\nexport default {\n  props: ['items'],\n  emits: ['update:items'],\n  methods: {\n    addItem() {\n      this.$emit('update:items', [...this.items, 'c']);\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:items with payload ['a', 'b', 'c']",
            "Emits update:items with payload ['a', 'b']",
            "Throws an error for modifying prop",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a default slot with multiple bound props in a Vue component?",
        "o": [
            "<slot :prop1='value1' :prop2='value2'>Default</slot>",
            "<slot prop1='value1' prop2='value2'>Default</slot>",
            "<slot v-bind='{ prop1: value1, prop2: value2 }'>Default</slot>",
            "<slot props='{ prop1: value1, prop2: value2 }'>Default</slot>"
        ]
    },
    {
        "q": "What happens if a Vue component receives a prop with a value that fails its validator function in development mode?",
        "o": [
            "Vue logs a warning to the console",
            "The prop is set to its default value",
            "The component fails to render",
            "The prop is ignored silently"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when no content is provided for the named slot 'header'?",
        "c": "<template>\n  <div>\n    <slot name='header'>Default Header</slot>\n    <slot name='footer'>Default Footer</slot>\n  </div>\n</template>\n<script>\nexport default {}\n</script>",
        "o": [
            "Default Header and Default Footer",
            "Default Footer only",
            "Empty div",
            "Error: Missing slot content"
        ]
    },
    {
        "q": "Which of the following is a correct way to pass an object as a prop to a Vue component?",
        "o": [
            "<MyComponent :config='{ key: \"value\" }' />",
            "<MyComponent config='{ key: \"value\" }' />",
            "<MyComponent v-bind:config='key:value' />",
            "<MyComponent :config='[key, value]' />"
        ]
    },
    {
        "q": "What is the purpose of the `setup` script in a Vue 3 Single-File Component?",
        "o": [
            "To define reactive state, methods, and lifecycle hooks using the Composition API",
            "To automatically bind props to the template",
            "To configure global component settings",
            "To disable Options API in the component"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `score=50` and the button is clicked?",
        "c": "<template>\n  <button @click='updateScore'>Update</button>\n</template>\n<script>\nexport default {\n  props: ['score'],\n  emits: ['update:score'],\n  methods: {\n    updateScore() {\n      this.$emit('update:score', this.score + 10);\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:score with payload 60",
            "Emits update:score with payload 50",
            "Throws a type error",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a correct way to access a named slot's props in a parent component in Vue 3?",
        "o": [
            "<template v-slot:header='{ data }'>{{ data }}</template>",
            "<template slot:header='{ data }'>{{ data }}</template>",
            "<template v-bind:header='data'>{{ data }}</template>",
            "<template v-slot='header.data'>{{ data }}</template>"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that requires a number with a specific range?",
        "o": [
            "props: { age: { type: Number, validator: val => val >= 18 && val <= 100 } }",
            "props: { age: { type: Number, range: [18, 100] } }",
            "props: { age: { type: Number, min: 18, max: 100 } }",
            "props: { age: { type: Number, default: 18, max: 100 } }"
        ]
    },
    {
        "q": "What is the purpose of using the `v-bind='$slots'` in a Vue component?",
        "o": [
            "To pass all slots from a parent component to a child component",
            "To bind all props to slots",
            "To merge all slots into a single slot",
            "To disable slot rendering"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Child><template v-slot:default='slotProps'>{{ slotProps.text }}</template></Child>` and `message='Hello'` passed as a prop?",
        "c": "<template>\n  <slot :text='message.toUpperCase()'>Default Text</slot>\n</template>\n<script>\nexport default {\n  props: {\n    message: String\n  }\n}\n</script>",
        "o": [
            "HELLO",
            "Hello",
            "Default Text",
            "Error: Invalid slot props"
        ]
    },
    {
        "q": "Which of the following is a correct way to emit a custom event with no payload in a Vue component?",
        "o": [
            "this.$emit('toggle')",
            "this.$emit('toggle', null)",
            "this.emit('toggle')",
            "this.$emit('toggle', undefined)"
        ]
    },
    {
        "q": "What happens when a Vue component uses a slot without a name attribute?",
        "o": [
            "It becomes the default slot",
            "It is ignored during rendering",
            "Vue throws a warning in development mode",
            "It overrides all named slots"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `list=[1, 2]` and clicks the button?",
        "c": "<template>\n  <button @click='addToList'>Add</button>\n</template>\n<script>\nexport default {\n  props: ['list'],\n  emits: ['update:list'],\n  methods: {\n    addToList() {\n      this.$emit('update:list', [...this.list, this.list.length + 1]);\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:list with payload [1, 2, 3]",
            "Emits update:list with payload [1, 2]",
            "Throws an error for modifying prop",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a named slot with dynamic props in a Vue component?",
        "o": [
            "<slot name='content' :data='dynamicData'>Default</slot>",
            "<slot slot-name='content' :data='dynamicData'>Default</slot>",
            "<slot name='content' data='dynamicData'>Default</slot>",
            "<slot v-slot='content' :data='dynamicData'>Default</slot>"
        ]
    },
    {
        "q": "What happens if a Vue component declares a prop with `required: true` but the parent does not provide it?",
        "o": [
            "Vue logs a warning in development mode",
            "The component fails to render",
            "The prop is set to null",
            "The prop is ignored silently"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Child><template v-slot:footer>Custom Footer</template></Child>`?",
        "c": "<template>\n  <div>\n    <slot name='header'>Default Header</slot>\n    <slot name='footer'>Default Footer</slot>\n  </div>\n</template>\n<script>\nexport default {}\n</script>",
        "o": [
            "Default Header and Custom Footer",
            "Default Header and Default Footer",
            "Custom Footer only",
            "Error: Invalid slot configuration"
        ]
    },
    {
        "q": "Which of the following is a correct way to pass a computed property as a prop to a Vue component?",
        "o": [
            "<MyComponent :value='computedValue' />",
            "<MyComponent value='computedValue' />",
            "<MyComponent v-bind:value='computedValue()' />",
            "<MyComponent :value='computedValue()' />"
        ]
    },
    {
        "q": "What is the purpose of the `emits` option with a null validator in a Vue component?",
        "o": [
            "To declare an event without payload validation",
            "To disable event emission",
            "To automatically validate all event payloads",
            "To bind events to props"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `number=42` and the button is clicked?",
        "c": "<template>\n  <button @click='increment'>Increment</button>\n</template>\n<script>\nexport default {\n  props: ['number'],\n  emits: ['update:number'],\n  methods: {\n    increment() {\n      this.$emit('update:number', this.number + 1);\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:number with payload 43",
            "Emits update:number with payload 42",
            "Throws a type error",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a correct way to access multiple named slots in a parent component in Vue 3?",
        "o": [
            "<template v-slot:header>Header</template><template v-slot:footer>Footer</template>",
            "<template slot='header'>Header</template><template slot='footer'>Footer</template>",
            "<template v-bind:header>Header</template><template v-bind:footer>Footer</template>",
            "<template v-slot='{ header, footer }'>Header and Footer</template>"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that accepts a function as its value?",
        "o": [
            "props: { callback: { type: Function } }",
            "props: { callback: { type: Method } }",
            "props: { callback: { type: Function, default: null } }",
            "props: { callback: { type: Callable } }"
        ]
    },
    {
        "q": "What is the purpose of using the `provide` and `inject` in Vue components for dependency injection?",
        "o": [
            "To share data between a parent component and its descendants without prop drilling",
            "To bind props directly to child components",
            "To manage global state like Vuex",
            "To emit events to parent components"
        ]
    },
    {
        "q": "What will be the output of the following Vue component when the parent passes `config={ theme: 'dark' }`?",
        "c": "<template>\n  <div :class='config.theme'>Content</div>\n</template>\n<script>\nexport default {\n  props: {\n    config: {\n      type: Object,\n      required: true,\n      validator: obj => 'theme' in obj\n    }\n  }\n}\n</script>",
        "o": [
            "<div class='dark'>Content</div>",
            "<div>Content</div>",
            "Error: Invalid prop type",
            "Nothing is rendered"
        ]
    },
    {
        "q": "Which of the following is a correct way to use the `provide` function in a Vue 3 component to share data?",
        "o": [
            "provide('key', value)",
            "this.provide('key', value)",
            "provide: { key: value }",
            "this.$provide('key', value)"
        ]
    },
    {
        "q": "What happens when a Vue component uses `inject` to access a provided value that is not available in the ancestor chain?",
        "o": [
            "It returns undefined unless a default value is specified",
            "Vue throws a runtime error",
            "The component fails to mount",
            "It uses the prop value instead"
        ]
    },
    {
        "q": "What is the output of the following Vue component when used with `<Child v-model:custom='value' />` and initial value='test'?",
        "c": "<template>\n  <input :value='custom' @input='$emit(\"update:custom\", $event.target.value)' />\n</template>\n<script>\nexport default {\n  props: ['custom'],\n  emits: ['update:custom']\n}\n</script>",
        "o": [
            "Two-way binding works, updating parent when input changes",
            "One-way binding from parent to child",
            "Error: Invalid v-model modifier",
            "Input is read-only"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a reactive `provide` value in a Vue 3 Composition API component?",
        "o": [
            "provide('key', ref(value))",
            "provide('key', { value: reactive(value) })",
            "provide('key', computed(() => value))",
            "provide('key', toRef(value))"
        ]
    },
    {
        "q": "What is the purpose of the `expose` option in a Vue 3 component using the Composition API?",
        "o": [
            "To explicitly define which properties and methods are accessible to parent components",
            "To expose all slots to the parent component",
            "To automatically bind props to the template",
            "To disable reactive properties"
        ]
    },
    {
        "q": "What will happen in the following Vue component when the parent injects a value for 'theme' but no slot content is provided?",
        "c": "<template>\n  <div :class='theme'>\n    <slot>Default Content</slot>\n  </div>\n</template>\n<script>\nexport default {\n  inject: ['theme']\n}\n</script>",
        "o": [
            "Renders Default Content with the injected theme class",
            "Renders an empty div with the injected theme class",
            "Throws an error for missing injected value",
            "Renders Default Content without the theme class"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `inject` with a default value in a Vue 3 component?",
        "o": [
            "inject: ['key', { default: 'fallback' }]",
            "inject: { key: { default: 'fallback' } }",
            "inject: { key: 'fallback' }",
            "inject: ['key', 'fallback']"
        ]
    },
    {
        "q": "What is the behavior of the following Vue component when the parent provides `settings={ color: 'blue' }` via `provide`?",
        "c": "<template>\n  <div :style='{ color: settings.color }'>Text</div>\n</template>\n<script>\nexport default {\n  inject: ['settings']\n}\n</script>",
        "o": [
            "Renders Text with blue color",
            "Renders Text with default color",
            "Throws an error for invalid injection",
            "Nothing is rendered"
        ]
    },
    {
        "q": "Which of the following is a correct way to use dynamic component rendering with Vue components?",
        "o": [
            "<component :is='componentName' />",
            "<component v-bind='componentName' />",
            "<component name='componentName' />",
            "<component v-component='componentName' />"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `flag=true` and the button is clicked?",
        "c": "<template>\n  <button @click='toggleFlag'>Toggle</button>\n</template>\n<script>\nexport default {\n  props: ['flag'],\n  emits: ['update:flag'],\n  methods: {\n    toggleFlag() {\n      this.$emit('update:flag', !this.flag);\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:flag with payload false",
            "Emits update:flag with payload true",
            "Throws a type error",
            "No event is emitted"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that accepts either a string or null?",
        "o": [
            "props: { label: { type: [String, null] } }",
            "props: { label: { type: String, nullable: true } }",
            "props: { label: { type: String, default: null } }",
            "props: { label: { type: String, allowNull: true } }"
        ]
    },
    {
        "q": "What is the purpose of using the `teleport` component in Vue 3 with relation to component rendering?",
        "o": [
            "To render a component's content to a different part of the DOM outside its parent hierarchy",
            "To teleport props to a child component",
            "To move slots to a different component",
            "To disable component rendering"
        ]
    },
    {
        "q": "What will be the output of the following Vue component when the parent provides `theme='dark'` via `provide` and injects it?",
        "c": "<template>\n  <div :class='theme'>Content</div>\n</template>\n<script>\nexport default {\n  inject: {\n    theme: { default: 'light' }\n  }\n}\n</script>",
        "o": [
            "<div class='dark'>Content</div>",
            "<div class='light'>Content</div>",
            "Error: Invalid injection",
            "Nothing is rendered"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `teleport` in a Vue 3 component to render content to a specific DOM element?",
        "o": [
            "<teleport to='#modal'>Content</teleport>",
            "<teleport target='#modal'>Content</teleport>",
            "<teleport v-bind='#modal'>Content</teleport>",
            "<teleport move-to='#modal'>Content</teleport>"
        ]
    },
    {
        "q": "What happens when a Vue component uses `inject` with a required key that is not provided by any ancestor?",
        "o": [
            "Vue throws a warning in development mode",
            "The component fails to render",
            "The injected value is set to null",
            "The component uses the default prop value"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `active=false` and the button is clicked?",
        "c": "<template>\n  <button @click='toggle'>Toggle</button>\n</template>\n<script>\nexport default {\n  props: ['active'],\n  emits: ['update:active'],\n  methods: {\n    toggle() {\n      this.$emit('update:active', !this.active);\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:active with payload true",
            "Emits update:active with payload false",
            "Throws an error for invalid prop",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a valid way to use `provide` with a reactive value in a Vue 3 Composition API component?",
        "o": [
            "provide('key', reactive({ value: 0 }))",
            "provide('key', ref({ value: 0 }))",
            "provide('key', { reactive: true, value: 0 })",
            "provide('key', computed({ value: 0 }))"
        ]
    },
    {
        "q": "What is the purpose of the `Suspense` component in Vue 3 when used with async components?",
        "o": [
            "To handle loading states for components that are loaded asynchronously",
            "To suspend event emission in components",
            "To delay prop validation until rendering",
            "To disable async component rendering"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Suspense><Child /></Suspense>` and the component is async?",
        "c": "<template>\n  <div>{{ data }}</div>\n</template>\n<script>\nexport default {\n  async setup() {\n    const data = await new Promise(resolve => setTimeout(() => resolve('Loaded'), 1000));\n    return { data };\n  }\n}\n</script>",
        "o": [
            "Loaded after 1 second",
            "Nothing until an error occurs",
            "Error: Async setup failed",
            "Suspense fallback content"
        ]
    },
    {
        "q": "Which of the following is a correct way to define a dynamic component with props in a Vue 3 component?",
        "o": [
            "<component :is='componentName' v-bind='componentProps' />",
            "<component :is='componentName' :props='componentProps' />",
            "<component v-bind='componentName' :props='componentProps' />",
            "<component name='componentName' v-bind='componentProps' />"
        ]
    },
    {
        "q": "What is the behavior of the following Vue component when the parent provides `user={ id: 1 }` via `provide`?",
        "c": "<template>\n  <div>{{ user.id }}</div>\n</template>\n<script>\nexport default {\n  inject: ['user']\n}\n</script>",
        "o": [
            "Renders 1",
            "Renders undefined",
            "Throws an error for missing injection",
            "Nothing is rendered"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `Suspense` with a fallback in a Vue 3 component?",
        "o": [
            "<Suspense><template #default><Child /></template><template #fallback>Loading...</template></Suspense>",
            "<Suspense><Child /><template fallback>Loading...</template></Suspense>",
            "<Suspense><Child /><template v-fallback>Loading...</template></Suspense>",
            "<Suspense><Child />Loading...</Suspense>"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `options=['x', 'y']` and the button is clicked?",
        "c": "<template>\n  <button @click='addOption'>Add</button>\n</template>\n<script>\nexport default {\n  props: ['options'],\n  emits: ['update:options'],\n  methods: {\n    addOption() {\n      this.$emit('update:options', [...this.options, 'z']);\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:options with payload ['x', 'y', 'z']",
            "Emits update:options with payload ['x', 'y']",
            "Throws a type error",
            "No event is emitted"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that accepts a custom class instance?",
        "o": [
            "props: { instance: { type: Object, validator: val => val instanceof CustomClass } }",
            "props: { instance: { type: CustomClass } }",
            "props: { instance: { type: Object, class: CustomClass } }",
            "props: { instance: { type: Object, default: new CustomClass() } }"
        ]
    },
    {
        "q": "What is the purpose of the `keep-alive` component in Vue 3 when wrapping dynamic components?",
        "o": [
            "To cache component instances to preserve their state when switching",
            "To keep all components mounted simultaneously",
            "To prevent components from being destroyed",
            "To disable dynamic component rendering"
        ]
    },
    {
        "q": "What will be the output of the following Vue component when used with `<teleport to='#target'><Child /></teleport>` and the parent passes `text='Hello'`?",
        "c": "<template>\n  <div>{{ text }}</div>\n</template>\n<script>\nexport default {\n  props: {\n    text: String\n  }\n}\n</script>",
        "o": [
            "Renders 'Hello' in the #target DOM element",
            "Renders 'Hello' in the component's original position",
            "Throws an error for invalid teleport target",
            "Nothing is rendered"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `inject` with a reactive default value in a Vue 3 Composition API component?",
        "o": [
            "inject: { key: { default: () => ref(0) } }",
            "inject: { key: { default: 0 } }",
            "inject: { key: reactive(0) }",
            "inject: { key: computed(() => 0) }"
        ]
    },
    {
        "q": "What happens when a Vue component wrapped in `Suspense` throws an error during async setup?",
        "o": [
            "The Suspense fallback is displayed, and an error event is emitted",
            "The component renders with default content",
            "The application crashes",
            "The error is silently ignored"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `visible=true` and the button is clicked?",
        "c": "<template>\n  <button @click='hide'>Hide</button>\n</template>\n<script>\nexport default {\n  props: ['visible'],\n  emits: ['update:visible'],\n  methods: {\n    hide() {\n      this.$emit('update:visible', false);\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:visible with payload false",
            "Emits update:visible with payload true",
            "Throws an error for invalid prop",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a valid way to conditionally render a dynamic component in a Vue 3 component?",
        "o": [
            "<component :is='condition ? ComponentA : ComponentB' />",
            "<component :is='condition ? ComponentA' />",
            "<component v-if='condition' :is='ComponentA' />",
            "<component v-bind='condition ? ComponentA : ComponentB' />"
        ]
    },
    {
        "q": "What is the purpose of the `defineEmits` function in a Vue 3 Composition API component?",
        "o": [
            "To declare custom events for better type safety and documentation",
            "To automatically emit all events from the component",
            "To bind events to props",
            "To disable event emission"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when wrapped in `<keep-alive>` and switched to another component?",
        "c": "<template>\n  <div>{{ count }}</div>\n</template>\n<script>\nexport default {\n  data() {\n    return { count: 1 };\n  }\n}\n</script>",
        "o": [
            "Preserves count value when switched back",
            "Resets count to 1 when switched back",
            "Throws an error for invalid keep-alive usage",
            "Does not render when switched"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `provide` with a computed property in a Vue 3 Composition API component?",
        "o": [
            "provide('key', computed(() => value))",
            "provide('key', ref(value))",
            "provide('key', { computed: value })",
            "provide('key', toRef(value))"
        ]
    },
    {
        "q": "What is the behavior of the following Vue component when the parent provides `data={ name: 'Test' }` via `provide`?",
        "c": "<template>\n  <div>{{ data.name }}</div>\n</template>\n<script>\nexport default {\n  inject: {\n    data: { default: () => ({ name: 'Default' }) }\n  }\n}\n</script>",
        "o": [
            "Renders Test",
            "Renders Default",
            "Throws an error for invalid injection",
            "Nothing is rendered"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `Suspense` with an async component and a timeout in Vue 3?",
        "o": [
            "<Suspense timeout='1000'><template #default><Child /></template><template #fallback>Loading...</template></Suspense>",
            "<Suspense :timeout='1000'><Child /><template fallback>Loading...</template></Suspense>",
            "<Suspense v-timeout='1000'><Child /><template>Loading...</template></Suspense>",
            "<Suspense timeout='1000'><Child />Loading...</Suspense>"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `items={ a: 1, b: 2 }` and the button is clicked?",
        "c": "<template>\n  <button @click='updateItems'>Update</button>\n</template>\n<script>\nexport default {\n  props: ['items'],\n  emits: ['update:items'],\n  methods: {\n    updateItems() {\n      this.$emit('update:items', { ...this.items, c: 3 });\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:items with payload { a: 1, b: 2, c: 3 }",
            "Emits update:items with payload { a: 1, b: 2 }",
            "Throws a type error",
            "No event is emitted"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that accepts a Promise as its value?",
        "o": [
            "props: { promise: { type: Promise } }",
            "props: { promise: { type: Object, validator: val => val instanceof Promise } }",
            "props: { promise: { type: Async } }",
            "props: { promise: { type: Function, async: true } }"
        ]
    },
    {
        "q": "What is the purpose of using the `defineProps` macro in a Vue 3 Composition API component?",
        "o": [
            "To declare component props with type inference in script setup",
            "To automatically bind props to the template",
            "To define global props for the application",
            "To disable prop validation"
        ]
    },
    {
        "q": "What will be the output of the following Vue component when wrapped in `<keep-alive>` and the count is incremented before switching?",
        "c": "<template>\n  <div>{{ count }} <button @click='count++'>Inc</button></div>\n</template>\n<script>\nexport default {\n  data() {\n    return { count: 0 };\n  }\n}\n</script>",
        "o": [
            "Retains the incremented count when switched back",
            "Resets count to 0 when switched back",
            "Throws an error for invalid data usage",
            "Does not increment the count"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `defineEmits` in a Vue 3 Composition API component?",
        "o": [
            "const emit = defineEmits(['update:value'])",
            "defineEmits(['update:value'])",
            "const emit = defineEmits({ 'update:value': null })",
            "defineEmits({ 'update:value': payload => true })"
        ]
    },
    {
        "q": "What happens when a Vue component uses `teleport` with a non-existent target selector?",
        "o": [
            "The content is not rendered, and a warning is logged in development mode",
            "The content is rendered in the original position",
            "Vue throws a runtime error",
            "The target is created dynamically"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `content='World'` and clicks the button?",
        "c": "<template>\n  <button @click='updateContent'>Update</button>\n</template>\n<script>\nexport default {\n  props: ['content'],\n  emits: ['update:content'],\n  methods: {\n    updateContent() {\n      this.$emit('update:content', this.content + '!');\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:content with payload 'World!'",
            "Emits update:content with payload 'World'",
            "Throws an error for modifying prop",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a valid way to use `defineExpose` in a Vue 3 Composition API component?",
        "o": [
            "defineExpose({ method })",
            "defineExpose('method')",
            "defineExpose([method])",
            "defineExpose({ method: true })"
        ]
    },
    {
        "q": "What is the purpose of the `onErrorCaptured` lifecycle hook in a Vue component?",
        "o": [
            "To capture and handle errors from descendant components",
            "To handle errors in the component's own setup",
            "To capture global application errors",
            "To disable error propagation"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Suspense><template #default><Child /></template><template #fallback>Loading</template></Suspense>` and the child takes time to load?",
        "c": "<template>\n  <div>Loaded Content</div>\n</template>\n<script>\nexport default {\n  async setup() {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n  }\n}\n</script>",
        "o": [
            "Loading for 2 seconds, then Loaded Content",
            "Loaded Content immediately",
            "Error: Async setup timed out",
            "Fallback content permanently"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `provide` with a symbol key in a Vue 3 Composition API component?",
        "o": [
            "provide(Symbol('key'), value)",
            "provide('Symbol(key)', value)",
            "provide({ key: Symbol }, value)",
            "provide(Symbol, value)"
        ]
    },
    {
        "q": "What is the behavior of the following Vue component when the parent provides `settings=reactive({ mode: 'dark' })` via `provide`?",
        "c": "<template>\n  <div :class='settings.mode'>Content</div>\n</template>\n<script>\nexport default {\n  inject: ['settings']\n}\n</script>",
        "o": [
            "Renders Content with dark class, reactive to changes",
            "Renders Content with dark class, non-reactive",
            "Throws an error for invalid reactive injection",
            "Renders Content without class"
        ]
    },
    {
        "q": "Which of the following is a correct way to include/exclude components in `keep-alive` using props?",
        "o": [
            "<keep-alive :include='[/CompA/, /CompB/]' />",
            "<keep-alive include='CompA,CompB' />",
            "<keep-alive :exclude='[/CompC/]' />",
            "<keep-alive exclude='CompC' />"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `params={ id: 123 }` and the button is clicked?",
        "c": "<template>\n  <button @click='updateParams'>Update</button>\n</template>\n<script>\nexport default {\n  props: ['params'],\n  emits: ['update:params'],\n  methods: {\n    updateParams() {\n      this.$emit('update:params', { ...this.params, name: 'test' });\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:params with payload { id: 123, name: 'test' }",
            "Emits update:params with payload { id: 123 }",
            "Throws a type error",
            "No event is emitted"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that accepts a Symbol as its value?",
        "o": [
            "props: { sym: { type: Symbol } }",
            "props: { sym: { type: Object, validator: val => typeof val === 'symbol' } }",
            "props: { sym: { type: String, symbol: true } }",
            "props: { sym: { type: Function } }"
        ]
    },
    {
        "q": "What is the purpose of using the `defineAsyncComponent` function in Vue 3?",
        "o": [
            "To lazily load a component only when it is needed",
            "To define a component with async setup",
            "To automatically handle suspense for components",
            "To disable synchronous component rendering"
        ]
    },
    {
        "q": "What will be the output of the following Vue component when wrapped in `<keep-alive :max='2'>` and multiple components are switched?",
        "c": "<template>\n  <div>Component A</div>\n</template>\n<script>\nexport default {\n  name: 'ComponentA'\n}\n</script>",
        "o": [
            "Caches up to 2 component instances, destroying older ones",
            "Caches all component instances without limit",
            "Throws an error for invalid max prop",
            "Does not cache any components"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `defineProps` with type declarations in a Vue 3 <script setup> component?",
        "o": [
            "const props = defineProps<{ value: string }>()",
            "defineProps({ value: String })",
            "const props = defineProps({ value: String })",
            "defineProps<{ value: string }>()"
        ]
    },
    {
        "q": "What happens when a Vue component uses `teleport` with a disabled prop set to true?",
        "o": [
            "The teleport is disabled, and content renders in place",
            "The teleport always renders to the target",
            "Vue throws a warning for invalid prop",
            "The content is not rendered"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `settings={ theme: 'light' }` and clicks the button?",
        "c": "<template>\n  <button @click='updateTheme'>Update Theme</button>\n</template>\n<script>\nexport default {\n  props: ['settings'],\n  emits: ['update:settings'],\n  methods: {\n    updateTheme() {\n      this.$emit('update:settings', { ...this.settings, theme: 'dark' });\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:settings with payload { theme: 'dark' }",
            "Emits update:settings with payload { theme: 'light' }",
            "Throws an error for modifying prop",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a valid way to use `defineExpose` to expose a ref in a Vue 3 <script setup> component?",
        "o": [
            "const myRef = ref(0); defineExpose({ myRef })",
            "defineExpose(ref(0))",
            "const myRef = ref(0); defineExpose('myRef')",
            "defineExpose({ myRef: ref(0) })"
        ]
    },
    {
        "q": "What is the purpose of the `errorCaptured` option in a Vue component?",
        "o": [
            "To capture errors from descendant components and prevent propagation",
            "To handle errors in the component's own lifecycle",
            "To capture global errors in the application",
            "To disable error handling in components"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Suspense><Child /></Suspense>` and the child rejects the promise?",
        "c": "<template>\n  <div>{{ data }}</div>\n</template>\n<script>\nexport default {\n  async setup() {\n    const data = await new Promise((_, reject) => setTimeout(() => reject('Error'), 1000));\n    return { data };\n  }\n}\n</script>",
        "o": [
            "Suspense emits an error event after 1 second",
            "Renders 'Error' after 1 second",
            "Renders fallback content permanently",
            "Throws an unhandled promise rejection"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `inject` with a symbol key in a Vue 3 component?",
        "o": [
            "inject: { [Symbol('key')]: { default: null } }",
            "inject: [Symbol('key')] ",
            "inject: ['Symbol(key)']",
            "inject: { key: Symbol }"
        ]
    },
    {
        "q": "What is the behavior of the following Vue component when the parent provides `config=ref({ size: 'small' })` via `provide`?",
        "c": "<template>\n  <div :class='config.size'>Content</div>\n</template>\n<script>\nexport default {\n  inject: ['config']\n}\n</script>",
        "o": [
            "Renders Content with small class, reactive to changes in the ref",
            "Renders Content with small class, non-reactive",
            "Throws an error for ref injection",
            "Renders Content without class"
        ]
    },
    {
        "q": "Which of the following is a correct way to activate/deactivate caching in `keep-alive` using the `activated` and `deactivated` hooks?",
        "o": [
            "The hooks are called when the component is inserted/removed from the cache",
            "The hooks are called when the component is mounted/unmounted",
            "The hooks are called on every render",
            "The hooks disable caching automatically"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `filters=['active']` and the button is clicked?",
        "c": "<template>\n  <button @click='addFilter'>Add Filter</button>\n</template>\n<script>\nexport default {\n  props: ['filters'],\n  emits: ['update:filters'],\n  methods: {\n    addFilter() {\n      this.$emit('update:filters', [...this.filters, 'archived']);\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:filters with payload ['active', 'archived']",
            "Emits update:filters with payload ['active']",
            "Throws a type error",
            "No event is emitted"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that accepts a BigInt value?",
        "o": [
            "props: { bigNum: { type: BigInt } }",
            "props: { bigNum: { type: Number, big: true } }",
            "props: { bigNum: { type: Object, validator: val => typeof val === 'bigint' } }",
            "props: { bigNum: { type: Integer } }"
        ]
    },
    {
        "q": "What is the purpose of using the `shallowRef` in a Vue 3 Composition API component?",
        "o": [
            "To create a shallow reactive reference that only tracks changes to the root value",
            "To create a deep reactive reference for nested objects",
            "To disable reactivity entirely",
            "To automatically unwrap refs in templates"
        ]
    },
    {
        "q": "What will be the output of the following Vue component when wrapped in `<keep-alive>` and deactivated?",
        "c": "<template>\n  <div>{{ message }}</div>\n</template>\n<script>\nexport default {\n  data() {\n    return { message: 'Active' };\n  },\n  deactivated() {\n    this.message = 'Deactivated';\n  }\n}\n</script>",
        "o": [
            "Updates message to 'Deactivated' when cached",
            "Keeps message as 'Active' when cached",
            "Throws an error for invalid hook usage",
            "Does not update the message"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `defineAsyncComponent` with loading and error components in Vue 3?",
        "o": [
            "defineAsyncComponent({ loader: () => import('./Comp'), loadingComponent: Loading, errorComponent: Error })",
            "defineAsyncComponent(() => import('./Comp'), Loading, Error)",
            "defineAsyncComponent({ loader: './Comp', loading: Loading, error: Error })",
            "defineAsyncComponent(import('./Comp'), { loading: Loading, error: Error })"
        ]
    },
    {
        "q": "What happens when a Vue component uses `teleport` inside a v-if directive?",
        "o": [
            "The teleported content is conditionally rendered at the target",
            "The teleport is ignored when v-if is false",
            "Vue throws a rendering error",
            "The content is always rendered at the target"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `level=1` and clicks the button?",
        "c": "<template>\n  <button @click='increaseLevel'>Increase</button>\n</template>\n<script>\nexport default {\n  props: ['level'],\n  emits: ['update:level'],\n  methods: {\n    increaseLevel() {\n      this.$emit('update:level', this.level + 1);\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:level with payload 2",
            "Emits update:level with payload 1",
            "Throws an error for invalid prop",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a valid way to use `defineProps` with default values in a Vue 3 <script setup> component?",
        "o": [
            "const props = defineProps({ msg: { type: String, default: 'Hello' } })",
            "defineProps({ msg: { type: String, default: 'Hello' } })",
            "const props = defineProps<{ msg: string }>({ msg: 'Hello' })",
            "defineProps<{ msg: string }>({ default: 'Hello' })"
        ]
    },
    {
        "q": "What is the purpose of the `renderTracked` and `renderTriggered` hooks in a Vue component?",
        "o": [
            "To debug reactivity by logging dependencies and triggers during rendering",
            "To track and trigger manual renders",
            "To disable reactive rendering",
            "To handle render errors"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Suspense timeout='500'><Child /></Suspense>` and the child loads in 300ms?",
        "c": "<template>\n  <div>Content</div>\n</template>\n<script>\nexport default {\n  async setup() {\n    await new Promise(resolve => setTimeout(resolve, 300));\n  }\n}\n</script>",
        "o": [
            "Content after 300ms, without showing fallback",
            "Fallback for 500ms, then Content",
            "Error: Timeout exceeded",
            "Fallback permanently"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `inject` in a Vue 3 <script setup> component?",
        "o": [
            "const theme = inject('theme')",
            "inject('theme')",
            "const theme = inject<{ color: string }>('theme')",
            "defineInject('theme')"
        ]
    },
    {
        "q": "What is the behavior of the following Vue component when the parent provides `options=ref(['a', 'b'])` via `provide`?",
        "c": "<template>\n  <ul><li v-for='opt in options' :key='opt'>{{ opt }}</li></ul>\n</template>\n<script>\nexport default {\n  inject: ['options']\n}\n</script>",
        "o": [
            "Renders list items 'a' and 'b', reactive to changes in the ref",
            "Renders list items 'a' and 'b', non-reactive",
            "Throws an error for array injection",
            "Renders empty list"
        ]
    },
    {
        "q": "Which of the following is a correct way to use conditional include/exclude in `keep-alive`?",
        "o": [
            "<keep-alive :include='dynamicInclude' /> where dynamicInclude is a regex or array",
            "<keep-alive include='dynamicInclude' />",
            "<keep-alive v-include='dynamicInclude' />",
            "<keep-alive :exclude='false' />"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `data={ key: 'value' }` and the button is clicked?",
        "c": "<template>\n  <button @click='clearData'>Clear</button>\n</template>\n<script>\nexport default {\n  props: ['data'],\n  emits: ['update:data'],\n  methods: {\n    clearData() {\n      this.$emit('update:data', {});\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:data with payload {}",
            "Emits update:data with payload { key: 'value' }",
            "Throws a type error",
            "No event is emitted"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that accepts a Date object?",
        "o": [
            "props: { date: { type: Date } }",
            "props: { date: { type: Object, validator: val => val instanceof Date } }",
            "props: { date: { type: String, format: 'date' } }",
            "props: { date: { type: Number, timestamp: true } }"
        ]
    },
    {
        "q": "What is the purpose of using the `markRaw` function in a Vue 3 Composition API component?",
        "o": [
            "To mark an object as non-reactive to prevent Vue from making it reactive",
            "To create a raw reactive object without proxies",
            "To disable reactivity for refs",
            "To automatically unwrap raw values"
        ]
    },
    {
        "q": "What will be the output of the following Vue component when wrapped in `<keep-alive>` and activated after being deactivated?",
        "c": "<template>\n  <div>{{ status }}</div>\n</template>\n<script>\nexport default {\n  data() {\n    return { status: 'Inactive' };\n  },\n  activated() {\n    this.status = 'Active';\n  }\n}\n</script>",
        "o": [
            "Updates status to 'Active' when retrieved from cache",
            "Keeps status as 'Inactive' when cached",
            "Throws an error for invalid hook usage",
            "Does not update the status"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `defineAsyncComponent` with a delay in Vue 3?",
        "o": [
            "defineAsyncComponent({ loader: () => import('./Comp'), delay: 200 })",
            "defineAsyncComponent(() => import('./Comp'), { delay: 200 })",
            "defineAsyncComponent({ loader: './Comp', delay: 200 })",
            "defineAsyncComponent(import('./Comp'), delay=200)"
        ]
    },
    {
        "q": "What happens when a Vue component uses `teleport` inside a v-for loop?",
        "o": [
            "Each iterated teleport renders its content to the target in order",
            "Only the first teleport renders to the target",
            "Vue throws a rendering error for multiple teleports",
            "The teleports are ignored in loops"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `quantity=5` and clicks the button?",
        "c": "<template>\n  <button @click='decrease'>Decrease</button>\n</template>\n<script>\nexport default {\n  props: ['quantity'],\n  emits: ['update:quantity'],\n  methods: {\n    decrease() {\n      if (this.quantity > 0) this.$emit('update:quantity', this.quantity - 1);\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:quantity with payload 4",
            "Emits update:quantity with payload 5",
            "Throws an error for invalid prop",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a valid way to use `defineProps` with runtime validation in a Vue 3 <script setup> component?",
        "o": [
            "const props = defineProps({ age: { type: Number, validator: val => val > 0 } })",
            "defineProps({ age: { type: Number, validate: val => val > 0 } })",
            "const props = defineProps<{ age: number }>({ validator: val => val > 0 })",
            "defineProps<{ age: number }>({ age: val => val > 0 })"
        ]
    },
    {
        "q": "What is the purpose of the `watchEffect` function in a Vue 3 Composition API component?",
        "o": [
            "To run a reactive effect immediately and re-run it whenever its dependencies change",
            "To watch a specific reactive source and run a callback",
            "To effect changes without reactivity",
            "To disable watchers in components"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Suspense><Child /></Suspense>` and the child loads successfully?",
        "c": "<template>\n  <div>{{ greeting }}</div>\n</template>\n<script>\nexport default {\n  async setup() {\n    const greeting = await Promise.resolve('Hello');\n    return { greeting };\n  }\n}\n</script>",
        "o": [
            "Hello after suspense resolves",
            "Fallback content permanently",
            "Error: Promise rejected",
            "Nothing until timeout"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `provide` in a Vue 3 <script setup> component?",
        "o": [
            "provide('key', value)",
            "defineProvide('key', value)",
            "const provided = provide('key', value)",
            "provide({ key: value })"
        ]
    },
    {
        "q": "What is the behavior of the following Vue component when the parent provides `state=ref({ count: 0 })` via `provide` and increments it?",
        "c": "<template>\n  <div>{{ state.count }}</div>\n</template>\n<script>\nexport default {\n  inject: ['state']\n}\n</script>",
        "o": [
            "Re-renders with updated count when the ref changes",
            "Renders initial count 0, non-reactive",
            "Throws an error for ref injection",
            "Renders undefined"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `max` prop in `keep-alive` to limit cached instances?",
        "o": [
            "<keep-alive :max='5'><component :is='current' /></keep-alive>",
            "<keep-alive max='5'><component :is='current' /></keep-alive>",
            "<keep-alive v-max='5'><component :is='current' /></keep-alive>",
            "<keep-alive :limit='5'><component :is='current' /></keep-alive>"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `tags=['vue', 'js']` and the button is clicked?",
        "c": "<template>\n  <button @click='removeLast'>Remove Last</button>\n</template>\n<script>\nexport default {\n  props: ['tags'],\n  emits: ['update:tags'],\n  methods: {\n    removeLast() {\n      this.$emit('update:tags', this.tags.slice(0, -1));\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:tags with payload ['vue']",
            "Emits update:tags with payload ['vue', 'js']",
            "Throws a type error",
            "No event is emitted"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that accepts a Set object?",
        "o": [
            "props: { set: { type: Set } }",
            "props: { set: { type: Object, validator: val => val instanceof Set } }",
            "props: { set: { type: Array, set: true } }",
            "props: { set: { type: Collection } }"
        ]
    },
    {
        "q": "What is the purpose of the `isRef` utility function in a Vue 3 Composition API component?",
        "o": [
            "To check if a value is a Vue ref object",
            "To convert a value to a ref",
            "To check if a value is reactive",
            "To unwrap a ref in the template"
        ]
    },
    {
        "q": "What will be the output of the following Vue component when used with `<teleport to='body' disabled='true'>`?",
        "c": "<template>\n  <div>Teleported Content</div>\n</template>\n<script>\nexport default {}\n</script>",
        "o": [
            "Renders 'Teleported Content' in its original position",
            "Renders 'Teleported Content' in the body",
            "Throws an error for invalid teleport usage",
            "Does not render the content"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `watch` with a provided value in a Vue 3 <script setup> component?",
        "o": [
            "const provided = inject('key'); watch(provided, (newVal) => console.log(newVal))",
            "watch(inject('key'), (newVal) => console.log(newVal))",
            "const provided = inject('key'); watch('provided', (newVal) => console.log(newVal))",
            "watch(provided => inject('key'), (newVal) => console.log(newVal))"
        ]
    },
    {
        "q": "What happens when a Vue component uses `defineAsyncComponent` with a timeout and the loader exceeds it?",
        "o": [
            "The errorComponent is rendered if provided, otherwise an error is logged",
            "The loadingComponent is shown indefinitely",
            "Vue throws a runtime error",
            "The component renders as null"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `mode='edit'` and clicks the button?",
        "c": "<template>\n  <button @click='toggleMode'>Toggle</button>\n</template>\n<script>\nexport default {\n  props: ['mode'],\n  emits: ['update:mode'],\n  methods: {\n    toggleMode() {\n      this.$emit('update:mode', this.mode === 'edit' ? 'view' : 'edit');\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:mode with payload 'view'",
            "Emits update:mode with payload 'edit'",
            "Throws an error for invalid prop",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a valid way to use `toRef` with an injected value in a Vue 3 <script setup> component?",
        "o": [
            "const obj = inject('obj'); const prop = toRef(obj, 'prop')",
            "const prop = toRef(inject('obj'), 'prop')",
            "const prop = toRef('obj', 'prop')",
            "const obj = inject('obj'); const prop = toRef(obj.prop)"
        ]
    },
    {
        "q": "What is the purpose of the `customRef` function in a Vue 3 Composition API component?",
        "o": [
            "To create a custom ref with user-defined get/set behavior",
            "To create a ref that is automatically reactive",
            "To convert a reactive object to a ref",
            "To disable ref reactivity"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Suspense><Child /></Suspense>` and the child has a delayed setup?",
        "c": "<template>\n  <div>{{ result }}</div>\n</template>\n<script>\nexport default {\n  async setup() {\n    const result = await new Promise(resolve => setTimeout(() => resolve('Done'), 1500));\n    return { result };\n  }\n}\n</script>",
        "o": [
            "Done after 1.5 seconds with fallback during load",
            "Done immediately without fallback",
            "Error: Async setup failed",
            "Fallback content permanently"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `defineEmits` with type declarations in a Vue 3 <script setup> component?",
        "o": [
            "const emit = defineEmits<{ (e: 'update:value', value: string): void }>()",
            "defineEmits<{ update:value: string }>()",
            "const emit = defineEmits(['update:value', string])",
            "defineEmits({ 'update:value': string })"
        ]
    },
    {
        "q": "What is the behavior of the following Vue component when the parent provides `config=ref({ enabled: true })` via `provide`?",
        "c": "<template>\n  <div v-if='config.enabled'>Visible</div>\n</template>\n<script>\nexport default {\n  inject: ['config']\n}\n</script>",
        "o": [
            "Renders Visible, reactive to changes in config.enabled",
            "Renders Visible, non-reactive",
            "Throws an error for ref injection",
            "Does not render anything"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `include` with a string pattern in `keep-alive`?",
        "o": [
            "<keep-alive include='CompA,CompB' />",
            "<keep-alive :include='CompA,CompB' />",
            "<keep-alive :include='[CompA,CompB]' />",
            "<keep-alive include='[CompA,CompB]' />"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `options={ a: true, b: false }` and the button is clicked?",
        "c": "<template>\n  <button @click='toggleOption'>Toggle B</button>\n</template>\n<script>\nexport default {\n  props: ['options'],\n  emits: ['update:options'],\n  methods: {\n    toggleOption() {\n      this.$emit('update:options', { ...this.options, b: !this.options.b });\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:options with payload { a: true, b: true }",
            "Emits update:options with payload { a: true, b: false }",
            "Throws a type error",
            "No event is emitted"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that accepts a Map object?",
        "o": [
            "props: { map: { type: Map } }",
            "props: { map: { type: Object, validator: val => val instanceof Map } }",
            "props: { map: { type: Array, map: true } }",
            "props: { map: { type: Collection } }"
        ]
    },
    {
        "q": "What is the purpose of the `toRefs` function in a Vue 3 Composition API component?",
        "o": [
            "To convert a reactive object’s properties into individual refs",
            "To create a single ref from a reactive object",
            "To mark an object as non-reactive",
            "To unwrap refs in the template"
        ]
    },
    {
        "q": "What will be the output of the following Vue component when used with `<teleport to='#modal' :disabled='isDisabled'>` and isDisabled=true?",
        "c": "<template>\n  <div>Modal Content</div>\n</template>\n<script>\nexport default {\n  props: {\n    isDisabled: Boolean\n  }\n}\n</script>",
        "o": [
            "Renders 'Modal Content' in its original position",
            "Renders 'Modal Content' in #modal",
            "Throws an error for invalid teleport target",
            "Does not render the content"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `watchEffect` with an injected value in a Vue 3 <script setup> component?",
        "o": [
            "const injected = inject('key'); watchEffect(() => console.log(injected.value))",
            "watchEffect(inject('key'), () => console.log(injected))",
            "const injected = inject('key'); watchEffect(injected, () => console.log(injected))",
            "watchEffect(() => inject('key').value)"
        ]
    },
    {
        "q": "What happens when a Vue component uses `defineAsyncComponent` with a loadingComponent and the loader takes longer than expected?",
        "o": [
            "The loadingComponent is displayed until the loader resolves",
            "The component renders immediately without loading",
            "Vue throws a timeout error",
            "The errorComponent is shown immediately"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `status='pending'` and clicks the button?",
        "c": "<template>\n  <button @click='complete'>Complete</button>\n</template>\n<script>\nexport default {\n  props: ['status'],\n  emits: ['update:status'],\n  methods: {\n    complete() {\n      this.$emit('update:status', 'completed');\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:status with payload 'completed'",
            "Emits update:status with payload 'pending'",
            "Throws an error for invalid prop",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a valid way to use `customRef` in a Vue 3 <script setup> component?",
        "o": [
            "const myRef = customRef((track, trigger) => ({ get: () => { track(); return value; }, set: newVal => { value = newVal; trigger(); } }))",
            "const myRef = customRef({ get: () => value, set: newVal => value = newVal })",
            "const myRef = customRef(() => ({ value, set: newVal => value = newVal }))",
            "const myRef = customRef({ track: () => value, trigger: newVal => value = newVal })"
        ]
    },
    {
        "q": "What is the purpose of the `onRenderTracked` and `onRenderTriggered` hooks in a Vue 3 component?",
        "o": [
            "To debug reactive dependencies during rendering",
            "To trigger manual re-renders",
            "To handle errors during rendering",
            "To disable reactive updates"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Suspense><Child /></Suspense>` and the child has an async setup error?",
        "c": "<template>\n  <div>{{ data }}</div>\n</template>\n<script>\nexport default {\n  async setup() {\n    await new Promise((_, reject) => setTimeout(() => reject('Failed'), 1000));\n    return { data: 'Success' };\n  }\n}\n</script>",
        "o": [
            "Suspense emits an error event after 1 second",
            "Renders 'Success' after 1 second",
            "Renders fallback content permanently",
            "Renders 'Failed' after 1 second"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `defineProps` with a union type in a Vue 3 <script setup> component?",
        "o": [
            "const props = defineProps<{ value: string | number }>()",
            "defineProps({ value: String | Number })",
            "const props = defineProps({ value: [String, Number] })",
            "defineProps<{ value: Union<String, Number> }>()"
        ]
    },
    {
        "q": "What is the behavior of the following Vue component when the parent provides `settings=reactive({ visible: true })` via `provide`?",
        "c": "<template>\n  <div v-if='settings.visible'>Content</div>\n</template>\n<script>\nexport default {\n  inject: ['settings']\n}\n</script>",
        "o": [
            "Renders Content, reactive to changes in settings.visible",
            "Renders Content, non-reactive",
            "Throws an error for reactive injection",
            "Does not render anything"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `exclude` with a regex pattern in `keep-alive`?",
        "o": [
            "<keep-alive :exclude='/^Exclude/' />",
            "<keep-alive exclude='Exclude*' />",
            "<keep-alive :exclude='Exclude' />",
            "<keep-alive v-exclude='/^Exclude/' />"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `items=['x', 'y', 'z']` and the button is clicked?",
        "c": "<template>\n  <button @click='clearItems'>Clear</button>\n</template>\n<script>\nexport default {\n  props: ['items'],\n  emits: ['update:items'],\n  methods: {\n    clearItems() {\n      this.$emit('update:items', []);\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:items with payload []",
            "Emits update:items with payload ['x', 'y', 'z']",
            "Throws a type error",
            "No event is emitted"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that accepts a WeakMap object?",
        "o": [
            "props: { weakMap: { type: WeakMap } }",
            "props: { weakMap: { type: Object, validator: val => val instanceof WeakMap } }",
            "props: { weakMap: { type: Map, weak: true } }",
            "props: { weakMap: { type: Collection, weak: true } }"
        ]
    },
    {
        "q": "What is the purpose of the `reactive` function in a Vue 3 Composition API component?",
        "o": [
            "To create a deeply reactive object that tracks nested property changes",
            "To create a shallow reactive object",
            "To convert a ref to a reactive object",
            "To disable reactivity for an object"
        ]
    },
    {
        "q": "What will be the output of the following Vue component when used with `<teleport to='body'>` and a parent prop `message='Greetings'`?",
        "c": "<template>\n  <div>{{ message }}</div>\n</template>\n<script>\nexport default {\n  props: {\n    message: String\n  }\n}\n</script>",
        "o": [
            "Renders 'Greetings' in the body element",
            "Renders 'Greetings' in its original position",
            "Throws an error for invalid teleport usage",
            "Does not render the content"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `watch` with multiple sources in a Vue 3 <script setup> component?",
        "o": [
            "watch([ref1, ref2], ([new1, new2]) => console.log(new1, new2))",
            "watch(ref1, ref2, (new1, new2) => console.log(new1, new2))",
            "watch([ref1, ref2], () => console.log(ref1, ref2))",
            "watch({ ref1, ref2 }, ([new1, new2]) => console.log(new1, new2))"
        ]
    },
    {
        "q": "What happens when a Vue component uses `defineAsyncComponent` with an errorComponent and the loader rejects?",
        "o": [
            "The errorComponent is rendered with the error details",
            "The loadingComponent is shown indefinitely",
            "Vue throws an unhandled promise rejection",
            "The component renders as null"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `color='blue'` and clicks the button?",
        "c": "<template>\n  <button @click='changeColor'>Change</button>\n</template>\n<script>\nexport default {\n  props: ['color'],\n  emits: ['update:color'],\n  methods: {\n    changeColor() {\n      this.$emit('update:color', 'red');\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:color with payload 'red'",
            "Emits update:color with payload 'blue'",
            "Throws an error for invalid prop",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a valid way to use `toRef` in a Vue 3 <script setup> component to create a ref from a reactive object?",
        "o": [
            "const state = reactive({ count: 0 }); const countRef = toRef(state, 'count')",
            "const state = reactive({ count: 0 }); const countRef = toRef(state.count)",
            "const state = reactive({ count: 0 }); const countRef = toRef('count', state)",
            "const countRef = toRef(reactive({ count: 0 }), 'count')"
        ]
    },
    {
        "q": "What is the purpose of the `shallowReactive` function in a Vue 3 Composition API component?",
        "o": [
            "To create a reactive object with only top-level properties reactive",
            "To create a deeply reactive object",
            "To convert a ref to a reactive object",
            "To disable reactivity for nested properties"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Suspense><Child /></Suspense>` and a custom error component?",
        "c": "<template>\n  <div>{{ data }}</div>\n</template>\n<script>\nexport default {\n  async setup() {\n    await new Promise((_, reject) => reject('Error'));\n    return { data: 'Success' };\n  }\n}\n</script>",
        "o": [
            "Renders the error component if provided, otherwise logs an error",
            "Renders 'Success' immediately",
            "Renders fallback content permanently",
            "Renders 'Error' as the data"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `defineExpose` in a Vue 3 <script setup> component to expose a method?",
        "o": [
            "function myMethod() {}; defineExpose({ myMethod })",
            "defineExpose({ myMethod: () => {} })",
            "const myMethod = defineExpose(() => {})",
            "defineExpose(['myMethod'])"
        ]
    },
    {
        "q": "What is the behavior of the following Vue component when the parent provides `theme=reactive({ mode: 'light' })` via `provide`?",
        "c": "<template>\n  <div :class='theme.mode'>Styled</div>\n</template>\n<script>\nexport default {\n  inject: ['theme']\n}\n</script>",
        "o": [
            "Renders Styled with light class, reactive to theme.mode changes",
            "Renders Styled with light class, non-reactive",
            "Throws an error for reactive injection",
            "Renders Styled without class"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `activated` and `deactivated` hooks in a Vue component with `keep-alive`?",
        "o": [
            "activated() { console.log('Active'); }, deactivated() { console.log('Inactive'); }",
            "onActivated() { console.log('Active'); }, onDeactivated() { console.log('Inactive'); }",
            "active() { console.log('Active'); }, inactive() { console.log('Inactive'); }",
            "keepAlive() { console.log('Active'); }, unKeepAlive() { console.log('Inactive'); }"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `values=[1, 2, 3]` and the button is clicked?",
        "c": "<template>\n  <button @click='popValue'>Pop</button>\n</template>\n<script>\nexport default {\n  props: ['values'],\n  emits: ['update:values'],\n  methods: {\n    popValue() {\n      this.$emit('update:values', this.values.slice(0, -1));\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:values with payload [1, 2]",
            "Emits update:values with payload [1, 2, 3]",
            "Throws a type error",
            "No event is emitted"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that accepts a WeakSet object?",
        "o": [
            "props: { weakSet: { type: WeakSet } }",
            "props: { weakSet: { type: Object, validator: val => val instanceof WeakSet } }",
            "props: { weakSet: { type: Set, weak: true } }",
            "props: { weakSet: { type: Collection, weak: true } }"
        ]
    },
    {
        "q": "What is the purpose of the `unref` function in a Vue 3 Composition API component?",
        "o": [
            "To retrieve the raw value from a ref or return the value if not a ref",
            "To convert a value to a ref",
            "To make an object reactive",
            "To disable reactivity for a ref"
        ]
    },
    {
        "q": "What will be the output of the following Vue component when used with `<teleport to='#app'>` and a parent prop `title='Welcome'`?",
        "c": "<template>\n  <h1>{{ title }}</h1>\n</template>\n<script>\nexport default {\n  props: {\n    title: String\n  }\n}\n</script>",
        "o": [
            "Renders '<h1>Welcome</h1>' in the #app element",
            "Renders '<h1>Welcome</h1>' in its original position",
            "Throws an error for invalid teleport target",
            "Does not render the content"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `watch` with an immediate option in a Vue 3 <script setup> component?",
        "o": [
            "const value = ref(0); watch(value, (newVal) => console.log(newVal), { immediate: true })",
            "watch(ref(0), (newVal) => console.log(newVal), { run: 'immediate' })",
            "const value = ref(0); watch(value, (newVal) => console.log(newVal), { immediate: 'true' })",
            "watch(ref(0), (newVal) => console.log(newVal), immediate)"
        ]
    },
    {
        "q": "What happens when a Vue component uses `defineAsyncComponent` with a delay and the loader resolves quickly?",
        "o": [
            "The component renders immediately after the loader resolves",
            "The loadingComponent is shown for the full delay duration",
            "Vue throws a warning for early resolution",
            "The errorComponent is rendered"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `size='medium'` and clicks the button?",
        "c": "<template>\n  <button @click='resize'>Resize</button>\n</template>\n<script>\nexport default {\n  props: ['size'],\n  emits: ['update:size'],\n  methods: {\n    resize() {\n      this.$emit('update:size', this.size === 'medium' ? 'large' : 'medium');\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:size with payload 'large'",
            "Emits update:size with payload 'medium'",
            "Throws an error for invalid prop",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a valid way to use `toRefs` in a Vue 3 <script setup> component to convert an injected reactive object?",
        "o": [
            "const injected = inject('obj'); const { prop } = toRefs(injected)",
            "const injected = inject('obj'); const prop = toRefs(injected.prop)",
            "const prop = toRefs(inject('obj')).prop",
            "const injected = inject('obj'); const prop = toRefs('prop', injected)"
        ]
    },
    {
        "q": "What is the purpose of the `isReactive` function in a Vue 3 Composition API component?",
        "o": [
            "To check if an object is a Vue reactive proxy",
            "To make an object reactive",
            "To check if a value is a ref",
            "To unwrap reactive objects in templates"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Suspense><Child /></Suspense>` and a loading component?",
        "c": "<template>\n  <div>{{ data }}</div>\n</template>\n<script>\nexport default {\n  async setup() {\n    const data = await new Promise(resolve => setTimeout(() => resolve('Ready'), 2000));\n    return { data };\n  }\n}\n</script>",
        "o": [
            "Loading component for 2 seconds, then 'Ready'",
            "Loading component permanently",
            "Error: Async setup timed out",
            "'Ready' immediately"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `defineExpose` to expose a computed property in a Vue 3 <script setup> component?",
        "o": [
            "const computedVal = computed(() => 42); defineExpose({ computedVal })",
            "defineExpose(computed(() => 42))",
            "const computedVal = computed(() => 42); defineExpose('computedVal')",
            "defineExpose({ computed: () => 42 })"
        ]
    },
    {
        "q": "What is the behavior of the following Vue component when the parent provides `data=ref({ value: 10 })` via `provide`?",
        "c": "<template>\n  <div>{{ data.value }}</div>\n</template>\n<script>\nexport default {\n  inject: ['data']\n}\n</script>",
        "o": [
            "Renders 10, reactive to changes in data.value",
            "Renders 10, non-reactive",
            "Throws an error for ref injection",
            "Renders undefined"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `include` with a regex pattern in `keep-alive`?",
        "o": [
            "<keep-alive :include='/^Comp/' />",
            "<keep-alive include='/^Comp/' />",
            "<keep-alive :include='Comp*' />",
            "<keep-alive v-include='/^Comp/' />"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `flags={ a: true, b: true }` and the button is clicked?",
        "c": "<template>\n  <button @click='toggleFlag'>Toggle A</button>\n</template>\n<script>\nexport default {\n  props: ['flags'],\n  emits: ['update:flags'],\n  methods: {\n    toggleFlag() {\n      this.$emit('update:flags', { ...this.flags, a: !this.flags.a });\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:flags with payload { a: false, b: true }",
            "Emits update:flags with payload { a: true, b: true }",
            "Throws a type error",
            "No event is emitted"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that accepts a RegExp object?",
        "o": [
            "props: { pattern: { type: RegExp } }",
            "props: { pattern: { type: Object, validator: val => val instanceof RegExp } }",
            "props: { pattern: { type: String, regex: true } }",
            "props: { pattern: { type: Pattern } }"
        ]
    },
    {
        "q": "What is the purpose of the `readonly` function in a Vue 3 Composition API component?",
        "o": [
            "To create a readonly reactive object or ref that prevents mutations",
            "To make an object deeply reactive",
            "To convert a ref to a non-reactive value",
            "To enable mutations on a reactive object"
        ]
    },
    {
        "q": "What will be the output of the following Vue component when used with `<teleport to='#sidebar' :disabled='false'>` and a parent prop `content='Sidebar Item'`?",
        "c": "<template>\n  <li>{{ content }}</li>\n</template>\n<script>\nexport default {\n  props: {\n    content: String\n  }\n}\n</script>",
        "o": [
            "Renders '<li>Sidebar Item</li>' in the #sidebar element",
            "Renders '<li>Sidebar Item</li>' in its original position",
            "Throws an error for invalid teleport target",
            "Does not render the content"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `watchEffect` with cleanup in a Vue 3 <script setup> component?",
        "o": [
            "watchEffect((onCleanup) => { const timer = setTimeout(() => {}, 1000); onCleanup(() => clearTimeout(timer)); })",
            "watchEffect(() => { const timer = setTimeout(() => {}, 1000); return () => clearTimeout(timer); })",
            "watchEffect(() => { cleanup: () => clearTimeout(timer) })",
            "watchEffect((timer) => { return () => clearTimeout(timer); })"
        ]
    },
    {
        "q": "What happens when a Vue component uses `defineAsyncComponent` with a timeout and the loader exceeds it?",
        "o": [
            "The errorComponent is rendered if provided, with the timeout error",
            "The loadingComponent is shown indefinitely",
            "Vue throws a runtime error",
            "The component renders as null"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `priority='low'` and clicks the button?",
        "c": "<template>\n  <button @click='promote'>Promote</button>\n</template>\n<script>\nexport default {\n  props: ['priority'],\n  emits: ['update:priority'],\n  methods: {\n    promote() {\n      this.$emit('update:priority', 'high');\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:priority with payload 'high'",
            "Emits update:priority with payload 'low'",
            "Throws an error for invalid prop",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a valid way to use `isRef` in a Vue 3 <script setup> component?",
        "o": [
            "const value = ref(0); if (isRef(value)) { console.log(value.value); }",
            "const value = ref(0); if (isRef(value.value)) { console.log(value); }",
            "if (isRef(ref(0))) { console.log(0); }",
            "const value = ref(0); if (isRef('value')) { console.log(value); }"
        ]
    },
    {
        "q": "What is the purpose of the `effectScope` function in a Vue 3 Composition API component?",
        "o": [
            "To create a scope for reactive effects that can be stopped collectively",
            "To create a reactive effect without dependencies",
            "To scope refs to a specific component",
            "To disable effects in a component"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Suspense timeout='1000'><Child /></Suspense>` and the child loads in 800ms?",
        "c": "<template>\n  <div>{{ message }}</div>\n</template>\n<script>\nexport default {\n  async setup() {\n    const message = await new Promise(resolve => setTimeout(() => resolve('Success'), 800));\n    return { message };\n  }\n}\n</script>",
        "o": [
            "Success after 800ms, without timeout error",
            "Fallback for 1000ms, then Success",
            "Error: Timeout exceeded",
            "Fallback permanently"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `defineEmits` with validator in a Vue 3 <script setup> component?",
        "o": [
            "const emit = defineEmits({ 'update:value': (payload) => typeof payload === 'string' })",
            "defineEmits({ 'update:value': { validate: (payload) => typeof payload === 'string' } })",
            "const emit = defineEmits(['update:value'], { validate: payload => typeof payload === 'string' })",
            "defineEmits({ 'update:value': payload => typeof payload === 'string' })"
        ]
    },
    {
        "q": "What is the behavior of the following Vue component when the parent provides `options=reactive({ filter: 'all' })` via `provide`?",
        "c": "<template>\n  <div v-if='options.filter === \"all\"'>All Items</div>\n</template>\n<script>\nexport default {\n  inject: ['options']\n}\n</script>",
        "o": [
            "Renders All Items, reactive to changes in options.filter",
            "Renders All Items, non-reactive",
            "Throws an error for reactive injection",
            "Does not render anything"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `max` with a number in `keep-alive`?",
        "o": [
            "<keep-alive :max='3'><component :is='currentComp' /></keep-alive>",
            "<keep-alive max='3'><component :is='currentComp' /></keep-alive>",
            "<keep-alive :max='\"3\"'><component :is='currentComp' /></keep-alive>",
            "<keep-alive v-max='3'><component :is='currentComp' /></keep-alive>"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `scores={ math: 90, science: 85 }` and the button is clicked?",
        "c": "<template>\n  <button @click='updateScience'>Update Science</button>\n</template>\n<script>\nexport default {\n  props: ['scores'],\n  emits: ['update:scores'],\n  methods: {\n    updateScience() {\n      this.$emit('update:scores', { ...this.scores, science: 95 });\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:scores with payload { math: 90, science: 95 }",
            "Emits update:scores with payload { math: 90, science: 85 }",
            "Throws a type error",
            "No event is emitted"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that accepts a Proxy object?",
        "o": [
            "props: { proxy: { type: Object, validator: val => val instanceof Proxy } }",
            "props: { proxy: { type: Proxy } }",
            "props: { proxy: { type: Object, proxy: true } }",
            "props: { proxy: { type: Reactive } }"
        ]
    },
    {
        "q": "What is the purpose of the `effectScope` function in a Vue 3 Composition API component?",
        "o": [
            "To create a scope for reactive effects that can be stopped collectively",
            "To create a global effect for the component",
            "To disable effects in the component",
            "To track effects without reactivity"
        ]
    },
    {
        "q": "What will be the output of the following Vue component when used with `<teleport to='#sidebar' :disabled='false'>` and a parent prop `content='Sidebar'`?",
        "c": "<template>\n  <aside>{{ content }}</aside>\n</template>\n<script>\nexport default {\n  props: {\n    content: String\n  }\n}\n</script>",
        "o": [
            "Renders '<aside>Sidebar</aside>' in the #sidebar element",
            "Renders '<aside>Sidebar</aside>' in its original position",
            "Throws an error for invalid teleport target",
            "Does not render the content"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `watchPost` in a Vue 3 <script setup> component?",
        "o": [
            "watchPost(source, callback, { flush: 'post' })",
            "watch(source, callback, { immediate: false, flush: 'post' })",
            "watch(source, callback, post: true)",
            "watchEffect(callback, { flush: 'post' })"
        ]
    },
    {
        "q": "What happens when a Vue component uses `defineAsyncComponent` with a `suspensible: false` option?",
        "o": [
            "The component is not wrapped in Suspense and errors are thrown directly",
            "The component always uses Suspense",
            "Vue ignores the async loading",
            "The loadingComponent is disabled"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `priority=1` and clicks the button?",
        "c": "<template>\n  <button @click='promote'>Promote</button>\n</template>\n<script>\nexport default {\n  props: ['priority'],\n  emits: ['update:priority'],\n  methods: {\n    promote() {\n      this.$emit('update:priority', Math.min(this.priority + 1, 5));\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:priority with payload 2",
            "Emits update:priority with payload 1",
            "Throws an error for invalid prop",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a valid way to use `readonly` in a Vue 3 <script setup> component with an injected reactive object?",
        "o": [
            "const injected = inject('obj'); const readonlyObj = readonly(injected)",
            "readonly(inject('obj'))",
            "const injected = inject('obj'); readonly(injected.prop)",
            "const readonlyObj = readonly({ inject('obj') })"
        ]
    },
    {
        "q": "What is the purpose of the `isReadonly` function in a Vue 3 Composition API component?",
        "o": [
            "To check if an object is a readonly reactive proxy",
            "To make an object readonly",
            "To check if a value is reactive",
            "To unwrap readonly objects"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Suspense><template #default><Child1 /><Child2 /></template></Suspense>` and both children are async?",
        "c": "<template>\n  <div>Child Content</div>\n</template>\n<script>\nexport default {\n  async setup() {\n    await Promise.resolve();\n  }\n}\n</script>",
        "o": [
            "Fallback until all children resolve, then both contents",
            "Fallback until the first child resolves",
            "Error: Multiple async children not supported",
            "Fallback permanently"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `defineModel` in a Vue 3.4+ <script setup> component for v-model support?",
        "o": [
            "const modelValue = defineModel();",
            "const model = defineModel({ required: true });",
            "defineModel('value');",
            "const modelValue = defineModel({ type: String });"
        ]
    },
    {
        "q": "What is the behavior of the following Vue component when the parent provides `counter=ref(5)` via `provide` and the child updates it?",
        "c": "<template>\n  <button @click='counter++'>Increment</button>\n</template>\n<script>\nexport default {\n  inject: ['counter']\n}\n</script>",
        "o": [
            "Increments the ref and updates ancestors reactively",
            "Increments locally without affecting the ref",
            "Throws an error for modifying injected ref",
            "Does not increment"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `defineSlots` in a Vue 3 <script setup> component?",
        "o": [
            "const slots = defineSlots<{ default?: () => VNode; header?: () => VNode }>()",
            "defineSlots(['default', 'header'])",
            "const slots = defineSlots({ default: true, header: true })",
            "defineSlots<{ default, header }>()"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `config={ timeout: 3000 }` and the button is clicked?",
        "c": "<template>\n  <button @click='extendTimeout'>Extend</button>\n</template>\n<script>\nexport default {\n  props: ['config'],\n  emits: ['update:config'],\n  methods: {\n    extendTimeout() {\n      this.$emit('update:config', { ...this.config, timeout: 5000 });\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:config with payload { timeout: 5000 }",
            "Emits update:config with payload { timeout: 3000 }",
            "Throws a type error",
            "No event is emitted"
        ]
    },
    {
        "q": "How can you define a prop in a Vue Single-File Component that accepts an ArrayBuffer object?",
        "o": [
            "props: { buffer: { type: ArrayBuffer } }",
            "props: { buffer: { type: Object, validator: val => val instanceof ArrayBuffer } }",
            "props: { buffer: { type: Array, buffer: true } }",
            "props: { buffer: { type: Binary } }"
        ]
    },
    {
        "q": "What is the purpose of the `shallowRef` function in a Vue 3 Composition API component when used with objects?",
        "o": [
            "To create a ref where only the top-level value is reactive, not nested properties",
            "To make nested object properties reactive",
            "To convert an object to a readonly ref",
            "To disable reactivity for the ref"
        ]
    },
    {
        "q": "What will be the output of the following Vue component when used with `<teleport to='#footer'>` and a parent prop `label='Copyright'`?",
        "c": "<template>\n  <footer>{{ label }}</footer>\n</template>\n<script>\nexport default {\n  props: {\n    label: String\n  }\n}\n</script>",
        "o": [
            "Renders '<footer>Copyright</footer>' in the #footer element",
            "Renders '<footer>Copyright</footer>' in its original position",
            "Throws an error for invalid teleport target",
            "Does not render the content"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `watch` with a deep option in a Vue 3 <script setup> component?",
        "o": [
            "const obj = reactive({ a: 1 }); watch(obj, () => console.log('changed'), { deep: true })",
            "watch(reactive({ a: 1 }), () => console.log('changed'), { deep: 'true' })",
            "const obj = reactive({ a: 1 }); watch(obj, () => console.log('changed'), { depth: true })",
            "watch(reactive({ a: 1 }), () => console.log('changed'), deep)"
        ]
    },
    {
        "q": "What happens when a Vue component uses `defineAsyncComponent` with a delay and an errorComponent, but the loader resolves successfully?",
        "o": [
            "The component renders after the delay, ignoring the errorComponent",
            "The errorComponent is rendered regardless",
            "Vue throws a warning for unused errorComponent",
            "The loadingComponent is shown indefinitely"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `theme='dark'` and clicks the button?",
        "c": "<template>\n  <button @click='toggleTheme'>Toggle</button>\n</template>\n<script>\nexport default {\n  props: ['theme'],\n  emits: ['update:theme'],\n  methods: {\n    toggleTheme() {\n      this.$emit('update:theme', this.theme === 'dark' ? 'light' : 'dark');\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:theme with payload 'light'",
            "Emits update:theme with payload 'dark'",
            "Throws an error for invalid prop",
            "No event is emitted"
        ]
    },
    {
        "q": "Which of the following is a valid way to use `isReactive` in a Vue 3 <script setup> component?",
        "o": [
            "const obj = reactive({ a: 1 }); if (isReactive(obj)) { console.log('reactive'); }",
            "if (isReactive(ref(0))) { console.log('reactive'); }",
            "const obj = reactive({ a: 1 }); if (isReactive(obj.a)) { console.log('reactive'); }",
            "if (isReactive('obj')) { console.log('reactive'); }"
        ]
    },
    {
        "q": "What is the purpose of the `stop` method on an effectScope in a Vue 3 Composition API component?",
        "o": [
            "To stop all reactive effects within the scope",
            "To pause reactive effects temporarily",
            "To stop a single effect in the component",
            "To disable reactivity globally"
        ]
    },
    {
        "q": "What will be rendered by the following Vue component when used with `<Suspense timeout='2000'><Child /></Suspense>` and the child loads in 2500ms?",
        "c": "<template>\n  <div>{{ result }}</div>\n</template>\n<script>\nexport default {\n  async setup() {\n    const result = await new Promise(resolve => setTimeout(() => resolve('Loaded'), 2500));\n    return { result };\n  }\n}\n</script>",
        "o": [
            "Fallback for 2 seconds, then error if errorComponent is provided",
            "Loaded after 2.5 seconds",
            "Fallback permanently",
            "Error: Async setup failed"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `toRaw` in a Vue 3 <script setup> component?",
        "o": [
            "const reactiveObj = reactive({ a: 1 }); const raw = toRaw(reactiveObj)",
            "const reactiveObj = reactive({ a: 1 }); const raw = toRaw(reactiveObj.a)",
            "const reactiveObj = reactive({ a: 1 }); const raw = toRaw('reactiveObj')",
            "const raw = toRaw(ref({ a: 1 }))"
        ]
    },
    {
        "q": "What is the behavior of the following Vue component when the parent provides `state=ref({ active: false })` via `provide`?",
        "c": "<template>\n  <div v-if='state.active'>Active</div>\n</template>\n<script>\nexport default {\n  inject: ['state']\n}\n</script>",
        "o": [
            "Does not render, reactive to changes in state.active",
            "Renders Active, reactive to changes",
            "Throws an error for ref injection",
            "Renders Active, non-reactive"
        ]
    },
    {
        "q": "Which of the following is a correct way to use `activated` hook in a Vue component with `keep-alive`?",
        "o": [
            "activated() { this.status = 'active'; }",
            "onActivated() { this.status = 'active'; }",
            "active() { this.status = 'active'; }",
            "keepAliveActivated() { this.status = 'active'; }"
        ]
    },
    {
        "q": "What is the output of the following Vue component when the parent passes `settings={ volume: 50 }` and the button is clicked?",
        "c": "<template>\n  <button @click='increaseVolume'>Increase</button>\n</template>\n<script>\nexport default {\n  props: ['settings'],\n  emits: ['update:settings'],\n  methods: {\n    increaseVolume() {\n      this.$emit('update:settings', { ...this.settings, volume: this.settings.volume + 10 });\n    }\n  }\n}\n</script>",
        "o": [
            "Emits update:settings with payload { volume: 60 }",
            "Emits update:settings with payload { volume: 50 }",
            "Throws a type error",
            "No event is emitted"
        ]
    }
]