[
    {
        "q": "Which Vue.js directive is used to conditionally render an element based on a truthy value?",
        "o": [
            "v-if",
            "v-for",
            "v-on",
            "v-bind"
        ]
    },
    {
        "q": "What is the purpose of the v-for directive in Vue.js?",
        "o": [
            "To loop through a list or array",
            "To bind an attribute to an element",
            "To handle events",
            "To conditionally show an element"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-if='isVisible'>Hello, Vue!</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        isVisible: true\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-if='isVisible'>Hello, Vue!</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        isVisible: true\n      }\n    }\n  }\n</script>",
        "o": [
            "Hello, Vue!",
            "Nothing is displayed",
            "Error",
            "isVisible"
        ]
    },
    {
        "q": "Which directive is used to attach an event listener to an element in Vue.js?",
        "o": [
            "v-on",
            "v-if",
            "v-for",
            "v-bind"
        ]
    },
    {
        "q": "What does the v-else directive require to function correctly?",
        "o": [
            "It must follow a v-if or v-else-if directive",
            "It must be used with v-for",
            "It must be used standalone",
            "It must be used with v-on"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <ul>\n    <li v-for='item in items'>{{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        items: ['Apple', 'Banana', 'Orange']\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <ul>\n    <li v-for='item in items'>{{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        items: ['Apple', 'Banana', 'Orange']\n      }\n    }\n  }\n</script>",
        "o": [
            "Apple Banana Orange",
            "Nothing is displayed",
            "Error",
            "[Apple, Banana, Orange]"
        ]
    },
    {
        "q": "Which syntax is correct for binding a click event using v-on in Vue.js?",
        "o": [
            "v-on:click='methodName'",
            "v-on.click='methodName'",
            "v-click='methodName'",
            "v-bind:click='methodName'"
        ]
    },
    {
        "q": "What is the purpose of a custom directive in Vue.js?",
        "o": [
            "To create reusable custom behavior for DOM elements",
            "To replace built-in directives",
            "To handle HTTP requests",
            "To manage component lifecycle"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code if the condition is false?\n<template>\n  <div>\n    <span v-if='show'>Visible</span>\n    <span v-else>Not Visible</span>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        show: false\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div>\n    <span v-if='show'>Visible</span>\n    <span v-else>Not Visible</span>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        show: false\n      }\n    }\n  }\n</script>",
        "o": [
            "Not Visible",
            "Visible",
            "Both Visible and Not Visible",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which hook is commonly used in a custom Vue.js directive to manipulate the DOM when the directive is bound to an element?",
        "o": [
            "bind",
            "inserted",
            "update",
            "componentUpdated"
        ]
    },
    {
        "q": "What is the correct syntax for using v-for with an index in Vue.js?",
        "o": [
            "v-for='(item, index) in items'",
            "v-for='item in items, index'",
            "v-for='item, index in items'",
            "v-for='(index, item) in items'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:click='count += 1'>Click me</button>\n  <p>{{ count }}</p>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        count: 0\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:click='count += 1'>Click me</button>\n  <p>{{ count }}</p>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        count: 0\n      }\n    }\n  }\n</script>",
        "o": [
            "Increments count each time the button is clicked",
            "Always displays 0",
            "Throws an error",
            "Displays count as undefined"
        ]
    },
    {
        "q": "Which of the following is a valid shorthand for the v-on directive?",
        "o": [
            "@",
            ":",
            "#",
            "&"
        ]
    },
    {
        "q": "Which Vue.js directive is used to conditionally render an element only if the previous v-if condition is false and its own condition is true?",
        "o": [
            "v-else-if",
            "v-else",
            "v-if",
            "v-show"
        ]
    },
    {
        "q": "What is the key difference between v-if and v-show in Vue.js?",
        "o": [
            "v-if removes the element from the DOM, v-show toggles visibility with CSS",
            "v-if toggles visibility with CSS, v-show removes the element from the DOM",
            "v-if is used for events, v-show is for conditionals",
            "v-if and v-show both remove elements from the DOM"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-if='number > 5'>Greater than 5</div>\n  <div v-else>Less than or equal to 5</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        number: 3\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-if='number > 5'>Greater than 5</div>\n  <div v-else>Less than or equal to 5</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        number: 3\n      }\n    }\n  }\n</script>",
        "o": [
            "Less than or equal to 5",
            "Greater than 5",
            "Nothing is displayed",
            "Error"
        ]
    },
    {
        "q": "Which directive is used to bind an attribute to an expression in Vue.js?",
        "o": [
            "v-bind",
            "v-on",
            "v-for",
            "v-if"
        ]
    },
    {
        "q": "What is the purpose of the 'key' attribute when using v-for in Vue.js?",
        "o": [
            "To help Vue track elements for efficient rendering",
            "To define the loop variable",
            "To bind an event to each element",
            "To conditionally render the list"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <ul>\n    <li v-for='(item, index) in fruits' :key='index'>{{ index }}: {{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        fruits: ['Mango', 'Pineapple']\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <ul>\n    <li v-for='(item, index) in fruits' :key='index'>{{ index }}: {{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        fruits: ['Mango', 'Pineapple']\n      }\n    }\n  }\n</script>",
        "o": [
            "0: Mango, 1: Pineapple",
            "Mango, Pineapple",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which shorthand is used for the v-bind directive in Vue.js?",
        "o": [
            ":",
            "@",
            "#",
            "&"
        ]
    },
    {
        "q": "What is a requirement for creating a custom directive in Vue.js?",
        "o": [
            "Register it using Vue.directive or directives object",
            "Define it in the template with v-custom",
            "Use it with v-bind",
            "Include it in the data object"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <div v-show='isActive'>Show Me</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        isActive: false\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-show='isActive'>Show Me</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        isActive: false\n      }\n    }\n  }\n</script>",
        "o": [
            "Element is hidden but remains in the DOM",
            "Element is removed from the DOM",
            "Show Me is displayed",
            "Error"
        ]
    },
    {
        "q": "Which hook in a custom Vue.js directive is triggered when the element is inserted into the DOM?",
        "o": [
            "inserted",
            "bind",
            "update",
            "unbind"
        ]
    },
    {
        "q": "What is the correct syntax for binding a keypress event in Vue.js?",
        "o": [
            "v-on:keypress='handleKeypress'",
            "v-bind:keypress='handleKeypress'",
            "v-on:keypress.handle='handleKeypress'",
            "v-keypress='handleKeypress'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:class='status'>Status</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        status: 'active'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:class='status'>Status</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        status: 'active'\n      }\n    }\n  }\n</script>",
        "o": [
            "Element with class 'active'",
            "Element with no class",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about v-for when iterating over an object in Vue.js?",
        "o": [
            "It can access key, value, and index",
            "It only accesses the value",
            "It requires a custom directive",
            "It cannot iterate over objects"
        ]
    },
    {
        "q": "Which Vue.js directive is used to toggle the visibility of an element without removing it from the DOM?",
        "o": [
            "v-show",
            "v-if",
            "v-else",
            "v-for"
        ]
    },
    {
        "q": "What happens when you use v-for without a :key attribute in Vue.js?",
        "o": [
            "Vue may inefficiently update the DOM",
            "It throws an error",
            "The list does not render",
            "It works the same as with a key"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-if='score >= 10'>Pass</div>\n  <div v-else-if='score >= 5'>Probation</div>\n  <div v-else>Fail</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        score: 7\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-if='score >= 10'>Pass</div>\n  <div v-else-if='score >= 5'>Probation</div>\n  <div v-else>Fail</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        score: 7\n      }\n    }\n  }\n</script>",
        "o": [
            "Probation",
            "Pass",
            "Fail",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which directive in Vue.js is used to dynamically bind one or more attributes to an element?",
        "o": [
            "v-bind",
            "v-on",
            "v-model",
            "v-for"
        ]
    },
    {
        "q": "What is the purpose of the v-once directive in Vue.js?",
        "o": [
            "To render an element only once and skip future updates",
            "To bind an event listener",
            "To loop through data",
            "To conditionally render an element"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-for='number in numbers'>{{ number }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        numbers: [1, 2, 3]\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-for='number in numbers'>{{ number }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        numbers: [1, 2, 3]\n      }\n    }\n  }\n</script>",
        "o": [
            "1 2 3",
            "[1, 2, 3]",
            "Nothing is displayed",
            "Error"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to prevent the default behavior of an event in Vue.js?",
        "o": [
            ".prevent",
            ".stop",
            ".once",
            ".capture"
        ]
    },
    {
        "q": "What is a characteristic of a custom directive's 'update' hook in Vue.js?",
        "o": [
            "Called when the bound element’s value or expression updates",
            "Called when the element is inserted into the DOM",
            "Called when the component is mounted",
            "Called when the directive is unbound"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <input v-model='message' />\n  <p>{{ message }}</p>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        message: ''\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <input v-model='message' />\n  <p>{{ message }}</p>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        message: ''\n      }\n    }\n  }\n</script>",
        "o": [
            "Text typed in the input appears in the paragraph",
            "The paragraph remains empty",
            "Error",
            "The input is disabled"
        ]
    },
    {
        "q": "Which Vue.js directive is used to create two-way data binding on form input elements?",
        "o": [
            "v-model",
            "v-bind",
            "v-on",
            "v-if"
        ]
    },
    {
        "q": "What is the correct syntax for iterating over an object’s properties using v-for in Vue.js?",
        "o": [
            "v-for='(value, key) in object'",
            "v-for='value in object'",
            "v-for='(key, value) in object'",
            "v-for='key in object, value'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:click.once='increment'>Click me</button>\n  <p>{{ count }}</p>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        count: 0\n      }\n    },\n    methods: {\n      increment() {\n        this.count++;\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:click.once='increment'>Click me</button>\n  <p>{{ count }}</p>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        count: 0\n      }\n    },\n    methods: {\n      increment() {\n        this.count++;\n      }\n    }\n  }\n</script>",
        "o": [
            "Count increments only once on click",
            "Count increments on every click",
            "Error",
            "Nothing happens on click"
        ]
    },
    {
        "q": "Which hook in a custom Vue.js directive is called when the directive is removed from the element?",
        "o": [
            "unbind",
            "inserted",
            "bind",
            "update"
        ]
    },
    {
        "q": "Which Vue.js directive is used to render an element and its children only if a condition is true, and completely removes it from the DOM otherwise?",
        "o": [
            "v-if",
            "v-show",
            "v-once",
            "v-pre"
        ]
    },
    {
        "q": "What is the purpose of the v-cloak directive in Vue.js?",
        "o": [
            "To hide uncompiled templates until Vue is ready",
            "To bind an attribute dynamically",
            "To handle form input binding",
            "To loop through a list"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-if='count % 2 === 0'>Even</div>\n  <div v-else>Odd</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        count: 5\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-if='count % 2 === 0'>Even</div>\n  <div v-else>Odd</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        count: 5\n      }\n    }\n  }\n</script>",
        "o": [
            "Odd",
            "Even",
            "Nothing is displayed",
            "Error"
        ]
    },
    {
        "q": "Which Vue.js directive allows you to dynamically bind multiple classes to an element using an object syntax?",
        "o": [
            "v-bind:class",
            "v-on:class",
            "v-model:class",
            "v-for:class"
        ]
    },
    {
        "q": "What happens when you use the .capture modifier with v-on in Vue.js?",
        "o": [
            "The event is handled during the capture phase",
            "The event is triggered only once",
            "The event’s default behavior is prevented",
            "The event propagation is stopped"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <ul>\n    <li v-for='(value, key) in info'>{{ key }}: {{ value }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        info: { name: 'Vue', version: 3 }\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <ul>\n    <li v-for='(value, key) in info'>{{ key }}: {{ value }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        info: { name: 'Vue', version: 3 }\n      }\n    }\n  }\n</script>",
        "o": [
            "name: Vue, version: 3",
            "Vue, 3",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to create a two-way binding specifically for form inputs like checkboxes or radio buttons?",
        "o": [
            "v-model",
            "v-bind",
            "v-on",
            "v-for"
        ]
    },
    {
        "q": "What is the purpose of the 'componentUpdated' hook in a custom Vue.js directive?",
        "o": [
            "Called after the component and its children have updated",
            "Called when the directive is first bound",
            "Called when the element is inserted into the DOM",
            "Called when the directive is removed"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <div v-once>{{ message }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        message: 'Initial'\n      }\n    },\n    mounted() {\n      this.message = 'Updated';\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-once>{{ message }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        message: 'Initial'\n      }\n    },\n    mounted() {\n      this.message = 'Updated';\n    }\n  }\n</script>",
        "o": [
            "Initial",
            "Updated",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which modifier can be used with v-model to trim whitespace from input values in Vue.js?",
        "o": [
            ".trim",
            ".lazy",
            ".number",
            ".stop"
        ]
    },
    {
        "q": "What is the correct syntax for binding a mouseover event in Vue.js?",
        "o": [
            "v-on:mouseover='handleMouseover'",
            "v-bind:mouseover='handleMouseover'",
            "v-on.mouseover='handleMouseover'",
            "v-mouseover='handleMouseover'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:class='{ active: isActive, hidden: !isActive }'>Toggle</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        isActive: true\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:class='{ active: isActive, hidden: !isActive }'>Toggle</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        isActive: true\n      }\n    }\n  }\n</script>",
        "o": [
            "Element with class 'active'",
            "Element with class 'hidden'",
            "Element with both 'active' and 'hidden' classes",
            "Element with no classes"
        ]
    },
    {
        "q": "Which of the following is true about the v-html directive in Vue.js?",
        "o": [
            "It renders raw HTML content",
            "It binds a value to an attribute",
            "It loops through an array",
            "It creates a custom directive"
        ]
    },
    {
        "q": "Which Vue.js directive is used to render raw HTML content in an element?",
        "o": [
            "v-html",
            "v-text",
            "v-bind",
            "v-show"
        ]
    },
    {
        "q": "What is the effect of using the .lazy modifier with v-model in Vue.js?",
        "o": [
            "Updates the data only after a change event",
            "Trims whitespace from input",
            "Converts input to a number",
            "Prevents default behavior"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-if='temperature > 25'>Hot</div>\n  <div v-else-if='temperature > 15'>Mild</div>\n  <div v-else>Cold</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        temperature: 20\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-if='temperature > 25'>Hot</div>\n  <div v-else-if='temperature > 15'>Mild</div>\n  <div v-else>Cold</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        temperature: 20\n      }\n    }\n  }\n</script>",
        "o": [
            "Mild",
            "Hot",
            "Cold",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to display plain text content instead of HTML?",
        "o": [
            "v-text",
            "v-html",
            "v-bind",
            "v-model"
        ]
    },
    {
        "q": "What is the purpose of the v-slot directive in Vue.js?",
        "o": [
            "To define named slots for component content",
            "To bind attributes dynamically",
            "To handle events",
            "To loop through data"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-for='color in colors' :key='color'>{{ color }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        colors: ['Red', 'Blue']\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-for='color in colors' :key='color'>{{ color }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        colors: ['Red', 'Blue']\n      }\n    }\n  }\n</script>",
        "o": [
            "Red Blue",
            "[Red, Blue]",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to handle events during the capture phase in Vue.js?",
        "o": [
            ".capture",
            ".once",
            ".prevent",
            ".stop"
        ]
    },
    {
        "q": "What is the purpose of the 'inserted' hook in a custom Vue.js directive?",
        "o": [
            "Called when the bound element is inserted into the parent DOM",
            "Called when the directive’s value updates",
            "Called when the directive is first bound",
            "Called when the component is destroyed"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <div v-html='rawHtml'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        rawHtml: '<strong>Bold Text</strong>'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-html='rawHtml'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        rawHtml: '<strong>Bold Text</strong>'\n      }\n    }\n  }\n</script>",
        "o": [
            "Bold Text rendered as bold",
            "Plain text '<strong>Bold Text</strong>'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which modifier can be used with v-model to automatically convert input values to numbers in Vue.js?",
        "o": [
            ".number",
            ".trim",
            ".lazy",
            ".capture"
        ]
    },
    {
        "q": "What is the correct syntax for binding a submit event to a form in Vue.js?",
        "o": [
            "v-on:submit='handleSubmit'",
            "v-bind:submit='handleSubmit'",
            "v-on.submit='handleSubmit'",
            "v-submit='handleSubmit'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-text='message'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        message: '<span>Hello</span>'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-text='message'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        message: '<span>Hello</span>'\n      }\n    }\n  }\n</script>",
        "o": [
            "Plain text '<span>Hello</span>'",
            "Hello rendered as a span",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-for directive when used with a range in Vue.js?",
        "o": [
            "It can iterate over a numeric range like v-for='n in 10'",
            "It only works with arrays and objects",
            "It requires a custom directive",
            "It cannot use an index"
        ]
    },
    {
        "q": "What is the purpose of the v-cloak directive in Vue.js?",
        "o": [
            "To hide an element until Vue.js has finished compiling",
            "To bind a class dynamically",
            "To create a two-way data binding",
            "To render raw HTML content"
        ]
    },
    {
        "q": "Which Vue.js directive is used to define a slot’s content in a component?",
        "o": [
            "v-slot",
            "v-bind",
            "v-model",
            "v-on"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-cloak>{{ message }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        message: 'Loading...'\n      }\n    }\n  }\n</script>\n<style>\n  [v-cloak] { display: none; }\n</style>",
        "c": "<template>\n  <div v-cloak>{{ message }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        message: 'Loading...'\n      }\n    }\n  }\n</script>\n<style>\n  [v-cloak] { display: none; }\n</style>",
        "o": [
            "Loading... after compilation",
            "Nothing is displayed",
            "Error",
            "Loading... before compilation"
        ]
    },
    {
        "q": "Which Vue.js directive is used to create a custom directive that can be globally registered?",
        "o": [
            "Vue.directive",
            "v-custom",
            "v-bind",
            "v-on"
        ]
    },
    {
        "q": "What is the effect of using the .self modifier with v-on in Vue.js?",
        "o": [
            "Triggers the event only if the event target is the element itself",
            "Prevents event propagation",
            "Triggers the event only once",
            "Captures the event in the parent element"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <component v-slot='{ text }'>{{ text }}</component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        text: 'Dynamic Content'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <component v-slot='{ text }'>{{ text }}</component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        text: 'Dynamic Content'\n      }\n    }\n  }\n</script>",
        "o": [
            "Dynamic Content",
            "Nothing is displayed",
            "Error",
            "[object Object]"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when a specific key, like Enter, is pressed?",
        "o": [
            ".enter",
            ".key",
            ".press",
            ".input"
        ]
    },
    {
        "q": "What is the purpose of the 'update' hook in a custom Vue.js directive?",
        "o": [
            "Called when the directive’s value or binding updates",
            "Called when the element is inserted into the DOM",
            "Called when the directive is first bound",
            "Called when the component is destroyed"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <div v-pre>{{ message }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        message: 'Hello Vue'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-pre>{{ message }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        message: 'Hello Vue'\n      }\n    }\n  }\n</script>",
        "o": [
            "Plain text '{{ message }}'",
            "Hello Vue",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to prevent XSS attacks when rendering content?",
        "o": [
            "v-text",
            "v-html",
            "v-pre",
            "v-cloak"
        ]
    },
    {
        "q": "What is the correct syntax for using v-slot with a named slot in Vue.js?",
        "o": [
            "v-slot:name='slotProps'",
            "v-slot='name'",
            "v-slot.name='slotProps'",
            "v-bind:slot='name'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:click.self='handleClick'>Click me</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleClick() {\n        alert('Clicked');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:click.self='handleClick'>Click me</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleClick() {\n        alert('Clicked');\n      }\n    }\n  }\n</script>",
        "o": [
            "Alert triggers only when clicking the button directly",
            "Alert triggers on any click in the component",
            "Error",
            "Nothing happens on click"
        ]
    },
    {
        "q": "Which of the following is true about the v-for directive when used with a range in Vue.js?",
        "o": [
            "It starts from 1 by default",
            "It requires a key attribute",
            "It only works with arrays",
            "It cannot use an index"
        ]
    },
    {
        "q": "Which Vue.js directive is used to bypass Vue’s template compiler and display raw mustache syntax?",
        "o": [
            "v-pre",
            "v-once",
            "v-html",
            "v-text"
        ]
    },
    {
        "q": "What is the effect of using the .exact modifier with v-on in Vue.js?",
        "o": [
            "Triggers the event only when the exact combination of modifiers is pressed",
            "Prevents the event from bubbling",
            "Triggers the event only once",
            "Ensures the event is captured in the parent"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-html='content'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        content: '<p>Formatted Text</p>'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-html='content'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        content: '<p>Formatted Text</p>'\n      }\n    }\n  }\n</script>",
        "o": [
            "Formatted Text as a paragraph",
            "Plain text '<p>Formatted Text</p>'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to bind an attribute to an expression that updates dynamically?",
        "o": [
            "v-bind",
            "v-model",
            "v-on",
            "v-slot"
        ]
    },
    {
        "q": "What is the purpose of the v-is directive in Vue.js?",
        "o": [
            "To dynamically switch between components",
            "To conditionally render an element",
            "To bind an event listener",
            "To loop through an array"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-for='n in 3'>{{ n }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {}\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-for='n in 3'>{{ n }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {}\n    }\n  }\n</script>",
        "o": [
            "1 2 3",
            "0 1 2",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the left mouse button is clicked?",
        "o": [
            ".left",
            ".right",
            ".middle",
            ".click"
        ]
    },
    {
        "q": "What is the role of the 'unbind' hook in a custom Vue.js directive?",
        "o": [
            "Called when the directive is removed from the element",
            "Called when the element is inserted into the DOM",
            "Called when the directive’s value updates",
            "Called when the component is mounted"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <input v-model.trim='name'>\n  <p>{{ name }}</p>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        name: ''\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <input v-model.trim='name'>\n  <p>{{ name }}</p>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        name: ''\n      }\n    }\n  }\n</script>",
        "o": [
            "Input text is trimmed and displayed in the paragraph",
            "Input text is displayed with whitespace intact",
            "Error",
            "Paragraph remains empty"
        ]
    },
    {
        "q": "Which Vue.js directive is used to dynamically render a component based on a string name or component definition?",
        "o": [
            "v-is",
            "v-bind",
            "v-slot",
            "v-model"
        ]
    },
    {
        "q": "What is the correct syntax for using v-on with a keyup event for the Enter key in Vue.js?",
        "o": [
            "v-on:keyup.enter='handleEnter'",
            "v-on:enter='handleEnter'",
            "v-on:keyup='handleEnter.enter'",
            "v-bind:keyup='handleEnter'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-is='componentName'></div>\n</template>\n<script>\n  import MyComponent from './MyComponent.vue';\n  export default {\n    data() {\n      return {\n        componentName: MyComponent\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-is='componentName'></div>\n</template>\n<script>\n  import MyComponent from './MyComponent.vue';\n  export default {\n    data() {\n      return {\n        componentName: MyComponent\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders MyComponent",
            "Renders an empty div",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-text directive in Vue.js?",
        "o": [
            "It updates the element’s text content without parsing HTML",
            "It renders raw HTML content",
            "It creates a two-way binding",
            "It is used for looping"
        ]
    },
    {
        "q": "Which Vue.js directive is used to dynamically switch between components based on a string or component reference?",
        "o": [
            "v-is",
            "v-if",
            "v-show",
            "v-slot"
        ]
    },
    {
        "q": "What is the effect of using the .number modifier with v-model in Vue.js?",
        "o": [
            "Converts input value to a number",
            "Trims whitespace from input",
            "Delays binding until change event",
            "Prevents default input behavior"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-text='greeting'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        greeting: 'Welcome to Vue.js'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-text='greeting'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        greeting: 'Welcome to Vue.js'\n      }\n    }\n  }\n</script>",
        "o": [
            "Welcome to Vue.js",
            "<div>Welcome to Vue.js</div>",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to prevent an element and its children from being compiled by Vue?",
        "o": [
            "v-pre",
            "v-once",
            "v-cloak",
            "v-html"
        ]
    },
    {
        "q": "What is the purpose of the .passive modifier when used with v-on in Vue.js?",
        "o": [
            "Improves scrolling performance for touch and wheel events",
            "Triggers the event only once",
            "Stops event propagation",
            "Captures the event in the parent element"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <form v-on:submit.prevent='handleSubmit'>\n    <button>Submit</button>\n  </form>\n</template>\n<script>\n  export default {\n    methods: {\n      handleSubmit() {\n        console.log('Submitted');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <form v-on:submit.prevent='handleSubmit'>\n    <button>Submit</button>\n  </form>\n</template>\n<script>\n  export default {\n    methods: {\n      handleSubmit() {\n        console.log('Submitted');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Submitted' without page reload",
            "Submits the form and reloads the page",
            "Error",
            "Nothing happens"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to handle the right mouse button click in Vue.js?",
        "o": [
            ".right",
            ".left",
            ".middle",
            ".click"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeUpdate' hook in a custom Vue.js directive?",
        "o": [
            "Called before the directive’s value or binding updates",
            "Called when the element is inserted into the DOM",
            "Called when the directive is first bound",
            "Called when the directive is removed"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <input v-model.number='age'>\n  <p>{{ typeof age }}</p>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        age: ''\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <input v-model.number='age'>\n  <p>{{ typeof age }}</p>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        age: ''\n      }\n    }\n  }\n</script>",
        "o": [
            "number when a valid number is entered",
            "string for all inputs",
            "Error",
            "undefined"
        ]
    },
    {
        "q": "Which Vue.js directive is used to provide a way to pass content to a component’s named slots?",
        "o": [
            "v-slot",
            "v-bind",
            "v-is",
            "v-model"
        ]
    },
    {
        "q": "What is the correct syntax for binding a keydown event for the Esc key in Vue.js?",
        "o": [
            "v-on:keydown.esc='handleEscape'",
            "v-on:esc='handleEscape'",
            "v-on:keydown='handleEscape.esc'",
            "v-bind:keydown='handleEscape'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-cloak>{{ status }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        status: 'Ready'\n      }\n    }\n  }\n</script>\n<style>\n  [v-cloak] { display: none; }\n</style>",
        "c": "<template>\n  <div v-cloak>{{ status }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        status: 'Ready'\n      }\n    }\n  }\n</script>\n<style>\n  [v-cloak] { display: none; }\n</style>",
        "o": [
            "Ready after compilation",
            "Nothing is displayed",
            "Error",
            "Ready before compilation"
        ]
    },
    {
        "q": "Which of the following is true about the v-on directive when used with custom events in Vue.js?",
        "o": [
            "It can listen to custom events emitted by child components",
            "It only works with native DOM events",
            "It cannot use modifiers",
            "It requires a v-model binding"
        ]
    },
    {
        "q": "Which Vue.js directive is used to prevent flickering of uncompiled templates during page load?",
        "o": [
            "v-cloak",
            "v-pre",
            "v-once",
            "v-show"
        ]
    },
    {
        "q": "What is the effect of using the .native modifier with v-on in Vue.js when applied to a component?",
        "o": [
            "Listens to native DOM events on the component’s root element",
            "Triggers the event only once",
            "Prevents event propagation",
            "Binds a custom directive"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-if='isActive'>Active</div>\n  <div v-else-if='isPending'>Pending</div>\n  <div v-else>Inactive</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        isActive: false,\n        isPending: true\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-if='isActive'>Active</div>\n  <div v-else-if='isPending'>Pending</div>\n  <div v-else>Inactive</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        isActive: false,\n        isPending: true\n      }\n    }\n  }\n</script>",
        "o": [
            "Pending",
            "Active",
            "Inactive",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to dynamically bind a component to a string or component definition?",
        "o": [
            "v-is",
            "v-slot",
            "v-bind",
            "v-model"
        ]
    },
    {
        "q": "What is the purpose of the .sync modifier when used with v-bind in Vue.js?",
        "o": [
            "Enables two-way binding for a prop on a component",
            "Prevents default event behavior",
            "Triggers the event only once",
            "Captures events in the parent element"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-for='item in list' :key='item.id'>{{ item.text }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        list: [{ id: 1, text: 'First' }, { id: 2, text: 'Second' }]\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-for='item in list' :key='item.id'>{{ item.text }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        list: [{ id: 1, text: 'First' }, { id: 2, text: 'Second' }]\n      }\n    }\n  }\n</script>",
        "o": [
            "First Second",
            "[First, Second]",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the middle mouse button is clicked?",
        "o": [
            ".middle",
            ".left",
            ".right",
            ".click"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeMount' hook in a custom Vue.js directive?",
        "o": [
            "Called before the element is mounted to the DOM",
            "Called when the directive’s value updates",
            "Called when the directive is unbound",
            "Called when the component is updated"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <input v-model.lazy='inputText'>\n  <p>{{ inputText }}</p>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        inputText: ''\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <input v-model.lazy='inputText'>\n  <p>{{ inputText }}</p>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        inputText: ''\n      }\n    }\n  }\n</script>",
        "o": [
            "Paragraph updates only after input loses focus",
            "Paragraph updates with every keystroke",
            "Error",
            "Paragraph remains empty"
        ]
    },
    {
        "q": "Which Vue.js directive is used to render text content without interpreting it as HTML?",
        "o": [
            "v-text",
            "v-html",
            "v-pre",
            "v-cloak"
        ]
    },
    {
        "q": "What is the correct syntax for binding a custom event emitted by a child component in Vue.js?",
        "o": [
            "v-on:customEvent='handleCustom'",
            "v-bind:customEvent='handleCustom'",
            "v-on.customEvent='handleCustom'",
            "v-custom='handleCustom'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-is='dynamicComponent'></div>\n</template>\n<script>\n  import CustomComponent from './CustomComponent.vue';\n  export default {\n    data() {\n      return {\n        dynamicComponent: CustomComponent\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-is='dynamicComponent'></div>\n</template>\n<script>\n  import CustomComponent from './CustomComponent.vue';\n  export default {\n    data() {\n      return {\n        dynamicComponent: CustomComponent\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders CustomComponent",
            "Renders an empty div",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-slot directive in Vue.js?",
        "o": [
            "It allows passing content to named slots in a component",
            "It dynamically binds attributes",
            "It creates two-way data bindings",
            "It listens for DOM events"
        ]
    },
    {
        "q": "Which Vue.js directive is used to create a two-way binding between a component prop and a parent component?",
        "o": [
            "v-bind with .sync modifier",
            "v-model",
            "v-on",
            "v-slot"
        ]
    },
    {
        "q": "What is the effect of using the .native modifier with v-on on a custom component in Vue.js?",
        "o": [
            "It listens for native DOM events on the component's root element",
            "It prevents the event from propagating",
            "It triggers the event only once",
            "It captures the event in capturing mode"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-for='(value, key, index) in object'>{{ index }} - {{ key }}: {{ value }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        object: { a: 1, b: 2 }\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-for='(value, key, index) in object'>{{ index }} - {{ key }}: {{ value }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        object: { a: 1, b: 2 }\n      }\n    }\n  }\n</script>",
        "o": [
            "0 - a: 1, 1 - b: 2",
            "a: 1, b: 2",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to hide an element until the Vue instance is fully compiled?",
        "o": [
            "v-cloak",
            "v-pre",
            "v-once",
            "v-show"
        ]
    },
    {
        "q": "What is the purpose of the v-on directive with the .passive modifier in Vue.js?",
        "o": [
            "Improves performance for scroll events by not blocking the UI thread",
            "Prevents the default behavior of the event",
            "Stops event propagation",
            "Triggers the event only once"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:click.middle='handleMiddleClick'>Middle Click</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleMiddleClick() {\n        console.log('Middle clicked');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:click.middle='handleMiddleClick'>Middle Click</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleMiddleClick() {\n        console.log('Middle clicked');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Middle clicked' only on middle mouse button click",
            "Logs on any mouse click",
            "Error",
            "Nothing happens"
        ]
    },
    {
        "q": "Which hook in a custom Vue.js directive is called right before the bound element is inserted into the DOM?",
        "o": [
            "beforeMount",
            "inserted",
            "bind",
            "update"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive with the .camel modifier in Vue.js?",
        "o": [
            "Converts kebab-case attribute names to camelCase",
            "Binds the attribute as a prop",
            "Prevents automatic attribute binding",
            "Applies only to style bindings"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <child-component v-bind:value.sync='parentValue'></child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        parentValue: ''\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <child-component v-bind:value.sync='parentValue'></child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        parentValue: ''\n      }\n    }\n  }\n</script>",
        "o": [
            "Two-way binding between parent and child value prop",
            "One-way binding from parent to child",
            "Error",
            "No binding occurs"
        ]
    },
    {
        "q": "Which Vue.js directive is used to render a component dynamically based on a variable?",
        "o": [
            "v-is",
            "v-for",
            "v-if",
            "v-slot"
        ]
    },
    {
        "q": "What is the correct syntax for using v-on to listen for a custom event from a child component?",
        "o": [
            "@custom-event='handleCustom'",
            "v-on:custom-event='handleCustom'",
            "v-bind:custom-event='handleCustom'",
            "v-custom='handleCustom'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-pre>Hello {{ name }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        name: 'Vue'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-pre>Hello {{ name }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        name: 'Vue'\n      }\n    }\n  }\n</script>",
        "o": [
            "Hello {{ name }}",
            "Hello Vue",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-html directive in Vue.js?",
        "o": [
            "It can pose security risks if used with untrusted content",
            "It escapes HTML content",
            "It is used for text only",
            "It compiles Vue templates"
        ]
    },
    {
        "q": "Which Vue.js directive is used to bind a prop to a child component with two-way binding using the .sync modifier?",
        "o": [
            "v-bind",
            "v-model",
            "v-on",
            "v-slot"
        ]
    },
    {
        "q": "What is the effect of using the .exact modifier with v-on in Vue.js when combined with key modifiers?",
        "o": [
            "Triggers the event only when the exact key combination is pressed",
            "Prevents event propagation",
            "Captures the event in the parent element",
            "Triggers the event only once"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-text='content'>Fallback</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        content: 'Dynamic Text'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-text='content'>Fallback</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        content: 'Dynamic Text'\n      }\n    }\n  }\n</script>",
        "o": [
            "Dynamic Text",
            "Fallback",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to pass content to a specific slot in a child component?",
        "o": [
            "v-slot",
            "v-is",
            "v-bind",
            "v-model"
        ]
    },
    {
        "q": "What is the purpose of the .prop modifier when used with v-bind in Vue.js?",
        "o": [
            "Sets the value as a DOM property instead of an attribute",
            "Enables two-way binding",
            "Prevents attribute inheritance",
            "Converts kebab-case to camelCase"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:keyup.enter='submitForm'>Submit</button>\n</template>\n<script>\n  export default {\n    methods: {\n      submitForm() {\n        console.log('Form submitted');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:keyup.enter='submitForm'>Submit</button>\n</template>\n<script>\n  export default {\n    methods: {\n      submitForm() {\n        console.log('Form submitted');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Form submitted' when Enter key is pressed",
            "Logs on any key press",
            "Error",
            "Nothing happens"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the Shift key is held down?",
        "o": [
            ".shift",
            ".ctrl",
            ".alt",
            ".meta"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeDestroy' hook in a custom Vue.js directive?",
        "o": [
            "Called before the bound element is removed from the DOM",
            "Called when the directive is first bound",
            "Called when the element is inserted into the DOM",
            "Called when the directive’s value updates"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <child-component v-on:custom-event='handleCustom'></child-component>\n</template>\n<script>\n  export default {\n    methods: {\n      handleCustom(payload) {\n        console.log(payload);\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <child-component v-on:custom-event='handleCustom'></child-component>\n</template>\n<script>\n  export default {\n    methods: {\n      handleCustom(payload) {\n        console.log(payload);\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs the payload when custom-event is emitted by the child",
            "Logs nothing until a native event occurs",
            "Error",
            "Logs the child component"
        ]
    },
    {
        "q": "Which Vue.js directive is used to prevent rendering of HTML content and display it as plain text?",
        "o": [
            "v-text",
            "v-html",
            "v-pre",
            "v-cloak"
        ]
    },
    {
        "q": "What is the correct syntax for using v-slot with a default slot in Vue.js?",
        "o": [
            "v-slot='slotProps'",
            "v-slot:default='slotProps'",
            "v-slot.default='slotProps'",
            "v-bind:slot='default'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:style='{ fontSize: size + \"px\" }'>Text</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        size: 16\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:style='{ fontSize: size + \"px\" }'>Text</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        size: 16\n      }\n    }\n  }\n</script>",
        "o": [
            "Text with font size 16px",
            "Text with default font size",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-for directive when used with a Set in Vue.js?",
        "o": [
            "It iterates over the Set’s values",
            "It cannot iterate over a Set",
            "It requires a custom directive",
            "It iterates over keys only"
        ]
    },
    {
        "q": "Which Vue.js directive is used to dynamically bind a property to an element instead of an attribute?",
        "o": [
            "v-bind with .prop modifier",
            "v-bind with .sync modifier",
            "v-model",
            "v-on"
        ]
    },
    {
        "q": "What is the effect of using the .ctrl modifier with v-on in Vue.js?",
        "o": [
            "Triggers the event only when the Ctrl key is held down",
            "Prevents the default event behavior",
            "Stops event propagation",
            "Triggers the event only once"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-is='currentComponent'></div>\n</template>\n<script>\n  import DynamicComp from './DynamicComp.vue';\n  export default {\n    data() {\n      return {\n        currentComponent: DynamicComp\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-is='currentComponent'></div>\n</template>\n<script>\n  import DynamicComp from './DynamicComp.vue';\n  export default {\n    data() {\n      return {\n        currentComponent: DynamicComp\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders DynamicComp",
            "Renders an empty div",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to render content as plain text, preventing HTML interpretation?",
        "o": [
            "v-text",
            "v-html",
            "v-pre",
            "v-cloak"
        ]
    },
    {
        "q": "What is the purpose of the .camel modifier when used with v-bind in Vue.js?",
        "o": [
            "Converts kebab-case attribute names to camelCase",
            "Enables two-way binding for props",
            "Sets the value as a DOM property",
            "Prevents attribute inheritance"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:keydown.alt='handleAltKey'>Press Alt</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleAltKey() {\n        console.log('Alt key pressed');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:keydown.alt='handleAltKey'>Press Alt</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleAltKey() {\n        console.log('Alt key pressed');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Alt key pressed' when Alt key is pressed",
            "Logs on any key press",
            "Error",
            "Nothing happens"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the Meta key (Command on Mac) is pressed?",
        "o": [
            ".meta",
            ".shift",
            ".ctrl",
            ".alt"
        ]
    },
    {
        "q": "What is the purpose of the 'mounted' hook in a custom Vue.js directive?",
        "o": [
            "Called after the bound element is inserted into the DOM",
            "Called before the element is mounted",
            "Called when the directive’s value updates",
            "Called when the directive is unbound"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <child-component v-slot:header='slotProps'>{{ slotProps.text }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        text: 'Header Content'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <child-component v-slot:header='slotProps'>{{ slotProps.text }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        text: 'Header Content'\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders Header Content in the header slot",
            "Renders nothing",
            "Error",
            "Renders slotProps.text as plain text"
        ]
    },
    {
        "q": "Which Vue.js directive is used to handle custom events emitted by a child component?",
        "o": [
            "v-on",
            "v-bind",
            "v-model",
            "v-is"
        ]
    },
    {
        "q": "What is the correct syntax for binding a mouse wheel event in Vue.js?",
        "o": [
            "v-on:wheel='handleWheel'",
            "v-on:mousewheel='handleWheel'",
            "v-bind:wheel='handleWheel'",
            "v-on:scroll='handleWheel'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind.prop='dataProp'>Test</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        dataProp: 'custom-value'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind.prop='dataProp'>Test</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        dataProp: 'custom-value'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets custom-value as a DOM property",
            "Sets custom-value as an attribute",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-for directive when used with a Map in Vue.js?",
        "o": [
            "It iterates over the Map’s entries as [key, value] pairs",
            "It cannot iterate over a Map",
            "It iterates only over values",
            "It requires a custom directive"
        ]
    },
    {
        "q": "Which Vue.js directive is used to dynamically bind a DOM property rather than an HTML attribute?",
        "o": [
            "v-bind with .prop modifier",
            "v-bind with .attr modifier",
            "v-model",
            "v-on"
        ]
    },
    {
        "q": "What is the effect of using the .exact modifier with v-on and multiple key modifiers in Vue.js?",
        "o": [
            "Triggers only when the exact key combination is pressed without additional keys",
            "Triggers the event on any key press",
            "Prevents event propagation",
            "Captures the event in the parent"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind.camel='dataAttr'>Content</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        dataAttr: 'myValue'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind.camel='dataAttr'>Content</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        dataAttr: 'myValue'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets attribute as myValue in camelCase",
            "Sets attribute as my-value in kebab-case",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to define content for a named slot in a child component?",
        "o": [
            "v-slot",
            "v-is",
            "v-bind",
            "v-on"
        ]
    },
    {
        "q": "What is the purpose of the .attr modifier when used with v-bind in Vue.js?",
        "o": [
            "Forces the binding to be set as an HTML attribute",
            "Converts the binding to a DOM property",
            "Enables two-way binding",
            "Converts kebab-case to camelCase"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-on:wheel.passive='handleScroll'>Scroll me</div>\n</template>\n<script>\n  export default {\n    methods: {\n      handleScroll() {\n        console.log('Scrolled');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-on:wheel.passive='handleScroll'>Scroll me</div>\n</template>\n<script>\n  export default {\n    methods: {\n      handleScroll() {\n        console.log('Scrolled');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Scrolled' on mouse wheel with optimized performance",
            "Logs 'Scrolled' on any mouse event",
            "Error",
            "Nothing happens"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the Alt key is pressed?",
        "o": [
            ".alt",
            ".shift",
            ".ctrl",
            ".meta"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeUpdate' hook in a custom Vue.js directive?",
        "o": [
            "Called before the directive’s binding updates",
            "Called when the element is inserted into the DOM",
            "Called when the directive is first bound",
            "Called when the component is mounted"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <child-component v-slot:footer='slotProps'>{{ slotProps.footerText }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        footerText: 'Footer Content'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <child-component v-slot:footer='slotProps'>{{ slotProps.footerText }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        footerText: 'Footer Content'\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders Footer Content in the footer slot",
            "Renders nothing",
            "Error",
            "Renders footerText as plain text"
        ]
    },
    {
        "q": "Which Vue.js directive is used to register a custom directive globally?",
        "o": [
            "Vue.directive",
            "v-custom",
            "v-bind",
            "v-on"
        ]
    },
    {
        "q": "What is the correct syntax for binding a custom event with the .native modifier on a component in Vue.js?",
        "o": [
            "v-on:click.native='handleClick'",
            "v-on:click='handleClick.native'",
            "v-bind:click='handleClick'",
            "v-on:native.click='handleClick'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:aria-label.prop='label'>Accessible</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        label: 'Dynamic Label'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:aria-label.prop='label'>Accessible</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        label: 'Dynamic Label'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets ariaLabel as a DOM property to 'Dynamic Label'",
            "Sets aria-label as an attribute to 'Dynamic Label'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-for directive when used with a range like 'n in 5' in Vue.js?",
        "o": [
            "It iterates from 1 to 5 inclusive",
            "It iterates from 0 to 5 exclusive",
            "It cannot use a numeric range",
            "It requires a custom directive"
        ]
    },
    {
        "q": "Which Vue.js directive is used to attach a custom directive locally to a component?",
        "o": [
            "directives option",
            "v-custom",
            "Vue.directive",
            "v-bind"
        ]
    },
    {
        "q": "What is the effect of using the .exact modifier with v-on and a single key modifier like .shift in Vue.js?",
        "o": [
            "Triggers only when Shift is pressed without other modifier keys",
            "Triggers when Shift is pressed with any other keys",
            "Stops event propagation",
            "Captures the event in the parent element"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:tabindex.prop='index'>Focusable</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        index: 0\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:tabindex.prop='index'>Focusable</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        index: 0\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets tabindex as a DOM property to 0",
            "Sets tabindex as an attribute to 0",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to pass scoped slot content to a child component?",
        "o": [
            "v-slot",
            "v-is",
            "v-bind",
            "v-on"
        ]
    },
    {
        "q": "What is the purpose of the .attr modifier when used with v-bind in Vue.js?",
        "o": [
            "Ensures the binding is set as an HTML attribute",
            "Converts the binding to a DOM property",
            "Enables two-way binding",
            "Applies camelCase conversion"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:keyup.ctrl.enter='handleKey'>Ctrl+Enter</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleKey() {\n        console.log('Ctrl+Enter pressed');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:keyup.ctrl.enter='handleKey'>Ctrl+Enter</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleKey() {\n        console.log('Ctrl+Enter pressed');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Ctrl+Enter pressed' when Ctrl and Enter are pressed together",
            "Logs on any key press",
            "Error",
            "Nothing happens"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the Tab key is pressed?",
        "o": [
            ".tab",
            ".esc",
            ".enter",
            ".space"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeMount' hook in a custom Vue.js directive?",
        "o": [
            "Called before the bound element is inserted into the DOM",
            "Called when the directive’s value updates",
            "Called when the directive is unbound",
            "Called after the component updates"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <child-component v-slot:default='{ data }'>{{ data.message }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        data: { message: 'Scoped Slot' }\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <child-component v-slot:default='{ data }'>{{ data.message }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        data: { message: 'Scoped Slot' }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Scoped Slot' in the default slot",
            "Renders nothing",
            "Error",
            "Renders data.message as plain text"
        ]
    },
    {
        "q": "Which Vue.js directive is used to prevent XSS vulnerabilities when rendering user input?",
        "o": [
            "v-text",
            "v-html",
            "v-pre",
            "v-cloak"
        ]
    },
    {
        "q": "What is the correct syntax for registering a local custom directive in a Vue.js component?",
        "o": [
            "directives: { name: { bind() {} } }",
            "v-directive: name",
            "Vue.directive('name', {})",
            "v-bind:directive='name'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-custom.camel='value'>Test</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        value: 'example'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-custom.camel='value'>Test</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        value: 'example'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets attribute dataCustom to 'example'",
            "Sets attribute data-custom to 'example'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-slot directive when used with a shorthand in Vue.js?",
        "o": [
            "It uses # as a shorthand",
            "It uses @ as a shorthand",
            "It uses : as a shorthand",
            "It cannot use a shorthand"
        ]
    },
    {
        "q": "Which Vue.js directive is used to register a custom directive globally before the Vue instance is created?",
        "o": [
            "Vue.directive",
            "v-custom",
            "directives option",
            "v-bind"
        ]
    },
    {
        "q": "What is the effect of using the .prevent modifier with v-on in a form submission event in Vue.js?",
        "o": [
            "Prevents the default form submission behavior",
            "Stops event propagation",
            "Triggers the event only once",
            "Captures the event in the parent element"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-info.prop='info'>Info</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        info: 'custom-data'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-info.prop='info'>Info</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        info: 'custom-data'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets dataInfo as a DOM property to 'custom-data'",
            "Sets data-info as an attribute to 'custom-data'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to provide content to a component’s default or named slots?",
        "o": [
            "v-slot",
            "v-is",
            "v-bind",
            "v-on"
        ]
    },
    {
        "q": "What is the purpose of the .sync modifier when used with v-bind on a component prop in Vue.js?",
        "o": [
            "Creates a two-way binding between parent and child prop",
            "Forces the binding to be an attribute",
            "Converts the prop to camelCase",
            "Prevents prop updates"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:keydown.tab='handleTab'>Tab Key</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleTab() {\n        console.log('Tab pressed');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:keydown.tab='handleTab'>Tab Key</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleTab() {\n        console.log('Tab pressed');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Tab pressed' when Tab key is pressed",
            "Logs on any key press",
            "Error",
            "Nothing happens"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the Space key is pressed?",
        "o": [
            ".space",
            ".enter",
            ".tab",
            ".esc"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeDestroy' hook in a custom Vue.js directive?",
        "o": [
            "Called before the bound element is removed from the DOM",
            "Called when the directive is first bound",
            "Called when the element is inserted into the DOM",
            "Called when the directive’s value updates"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <child-component #header='{ headerData }'>{{ headerData.title }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        headerData: { title: 'Header Title' }\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <child-component #header='{ headerData }'>{{ headerData.title }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        headerData: { title: 'Header Title' }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Header Title' in the header slot",
            "Renders nothing",
            "Error",
            "Renders headerData.title as plain text"
        ]
    },
    {
        "q": "Which Vue.js directive is used to avoid rendering HTML content as actual HTML and treat it as plain text?",
        "o": [
            "v-text",
            "v-html",
            "v-pre",
            "v-cloak"
        ]
    },
    {
        "q": "What is the correct syntax for defining a local custom directive in a Vue.js component?",
        "o": [
            "directives: { myDirective: { bind(el) {} } }",
            "Vue.directive('myDirective', {})",
            "v-directive: myDirective",
            "v-bind:directive='myDirective'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-test.attr='testValue'>Test</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        testValue: 'attribute-data'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-test.attr='testValue'>Test</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        testValue: 'attribute-data'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets data-test as an attribute to 'attribute-data'",
            "Sets dataTest as a DOM property to 'attribute-data'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-on directive when used with the .native modifier on a component?",
        "o": [
            "It listens for native DOM events on the component’s root element",
            "It only works with custom events",
            "It prevents event binding",
            "It requires a scoped slot"
        ]
    },
    {
        "q": "Which Vue.js directive is used to create a shorthand for v-slot when defining slot content?",
        "o": [
            "#",
            "@",
            ":",
            "&"
        ]
    },
    {
        "q": "What is the effect of using the .stop modifier with v-on in Vue.js?",
        "o": [
            "Prevents event propagation to parent elements",
            "Prevents the default event behavior",
            "Triggers the event only once",
            "Ensures the event is captured in the parent"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:aria-hidden.prop='isHidden'>Content</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        isHidden: true\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:aria-hidden.prop='isHidden'>Content</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        isHidden: true\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets ariaHidden DOM property to true",
            "Sets aria-hidden attribute to true",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to dynamically render a component based on a variable or string name?",
        "o": [
            "v-is",
            "v-slot",
            "v-bind",
            "v-on"
        ]
    },
    {
        "q": "What is the purpose of the .native modifier when used with v-on on a custom component in Vue.js?",
        "o": [
            "Listens for native DOM events on the component’s root element",
            "Enables two-way binding for events",
            "Prevents event propagation",
            "Converts event names to camelCase"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:keyup.space='handleSpace'>Space Key</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleSpace() {\n        console.log('Space pressed');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:keyup.space='handleSpace'>Space Key</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleSpace() {\n        console.log('Space pressed');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Space pressed' when Space key is pressed",
            "Logs on any key press",
            "Error",
            "Nothing happens"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the Delete key is pressed?",
        "o": [
            ".delete",
            ".backspace",
            ".esc",
            ".enter"
        ]
    },
    {
        "q": "What is the purpose of the 'created' hook in a custom Vue.js directive?",
        "o": [
            "Called when the directive is first created",
            "Called when the element is inserted into the DOM",
            "Called when the directive’s value updates",
            "Called before the element is removed"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <child-component #default='{ content }'>{{ content.text }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        content: { text: 'Default Slot' }\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <child-component #default='{ content }'>{{ content.text }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        content: { text: 'Default Slot' }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Default Slot' in the default slot",
            "Renders nothing",
            "Error",
            "Renders content.text as plain text"
        ]
    },
    {
        "q": "Which Vue.js directive is used to ensure content is displayed as plain text to avoid rendering HTML?",
        "o": [
            "v-text",
            "v-html",
            "v-pre",
            "v-cloak"
        ]
    },
    {
        "q": "What is the correct syntax for binding a mouseenter event in Vue.js?",
        "o": [
            "v-on:mouseenter='handleMouseEnter'",
            "v-on:mouse-enter='handleMouseEnter'",
            "v-bind:mouseenter='handleMouseEnter'",
            "v-on.mouseenter='handleMouseEnter'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-custom.attr='customData'>Custom</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        customData: 'test-value'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-custom.attr='customData'>Custom</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        customData: 'test-value'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets data-custom attribute to 'test-value'",
            "Sets dataCustom DOM property to 'test-value'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-bind directive with the .sync modifier in Vue.js?",
        "o": [
            "It enables two-way binding for a prop on a child component",
            "It only works with native DOM elements",
            "It prevents prop updates",
            "It requires a scoped slot"
        ]
    },
    {
        "q": "Which Vue.js directive is used to create a shorthand for v-on when binding events?",
        "o": [
            "@",
            "#",
            ":",
            "&"
        ]
    },
    {
        "q": "What is the effect of using the .meta modifier with v-on in Vue.js?",
        "o": [
            "Triggers the event only when the Meta (Command) key is pressed",
            "Prevents the default event behavior",
            "Stops event propagation",
            "Triggers the event only once"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:role.prop='roleValue'>Role</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        roleValue: 'button'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:role.prop='roleValue'>Role</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        roleValue: 'button'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets role DOM property to 'button'",
            "Sets role attribute to 'button'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to pass content to a component’s named or default slots?",
        "o": [
            "v-slot",
            "v-is",
            "v-bind",
            "v-on"
        ]
    },
    {
        "q": "What is the purpose of the .attr modifier when used with v-bind in Vue.js?",
        "o": [
            "Ensures the binding is set as an HTML attribute",
            "Converts the binding to a DOM property",
            "Enables two-way binding",
            "Applies camelCase conversion"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:keydown.delete='handleDelete'>Delete Key</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleDelete() {\n        console.log('Delete pressed');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:keydown.delete='handleDelete'>Delete Key</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleDelete() {\n        console.log('Delete pressed');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Delete pressed' when Delete key is pressed",
            "Logs on any key press",
            "Error",
            "Nothing happens"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the right mouse button is clicked?",
        "o": [
            ".right",
            ".left",
            ".middle",
            ".click"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeUpdate' hook in a custom Vue.js directive?",
        "o": [
            "Called before the directive’s binding or value updates",
            "Called when the element is inserted into the DOM",
            "Called when the directive is first bound",
            "Called when the component is destroyed"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <child-component v-bind:prop-name.sync='parentProp'></child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        parentProp: 'initial'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <child-component v-bind:prop-name.sync='parentProp'></child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        parentProp: 'initial'\n      }\n    }\n  }\n</script>",
        "o": [
            "Two-way binding between parentProp and child prop-name",
            "One-way binding from parent to child",
            "Error",
            "No binding occurs"
        ]
    },
    {
        "q": "Which Vue.js directive is used to dynamically switch between components based on a variable?",
        "o": [
            "v-is",
            "v-slot",
            "v-bind",
            "v-on"
        ]
    },
    {
        "q": "What is the correct syntax for binding a mouseleave event in Vue.js?",
        "o": [
            "v-on:mouseleave='handleMouseLeave'",
            "v-on:mouse-leave='handleMouseLeave'",
            "v-bind:mouseleave='handleMouseLeave'",
            "v-on.mouseleave='handleMouseLeave'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-info.camel='info'>Info</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        info: 'test-data'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-info.camel='info'>Info</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        info: 'test-data'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets dataInfo attribute to 'test-data'",
            "Sets data-info attribute to 'test-data'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-slot directive when used with a named slot in Vue.js?",
        "o": [
            "It allows passing content to a specific named slot",
            "It dynamically binds attributes",
            "It creates a two-way binding",
            "It listens for DOM events"
        ]
    },
    {
        "q": "Which Vue.js directive is used to define a custom directive locally within a component?",
        "o": [
            "directives option",
            "Vue.directive",
            "v-custom",
            "v-bind"
        ]
    },
    {
        "q": "What is the effect of using the .passive modifier with v-on for touch events in Vue.js?",
        "o": [
            "Improves performance by not blocking the UI thread for touch events",
            "Prevents the default touch behavior",
            "Stops touch event propagation",
            "Triggers the touch event only once"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:aria-describedby.prop='descId'>Described</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        descId: 'description'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:aria-describedby.prop='descId'>Described</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        descId: 'description'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets ariaDescribedby DOM property to 'description'",
            "Sets aria-describedby attribute to 'description'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to pass dynamic content to a component’s slot?",
        "o": [
            "v-slot",
            "v-is",
            "v-bind",
            "v-on"
        ]
    },
    {
        "q": "What is the purpose of the .camel modifier when used with v-bind in Vue.js?",
        "o": [
            "Converts kebab-case attribute names to camelCase",
            "Forces the binding as a DOM property",
            "Enables two-way binding",
            "Prevents attribute inheritance"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:keyup.esc='handleEscape'>Escape Key</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleEscape() {\n        console.log('Escape pressed');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:keyup.esc='handleEscape'>Escape Key</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleEscape() {\n        console.log('Escape pressed');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Escape pressed' when Escape key is pressed",
            "Logs on any key press",
            "Error",
            "Nothing happens"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the Ctrl and Shift keys are pressed together?",
        "o": [
            ".ctrl.shift",
            ".ctrl-shift",
            ".control.shift",
            ".meta.shift"
        ]
    },
    {
        "q": "What is the purpose of the 'componentUpdated' hook in a custom Vue.js directive?",
        "o": [
            "Called after the component and its children have updated",
            "Called when the directive is first bound",
            "Called before the element is mounted",
            "Called when the element is inserted into the DOM"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <child-component #content='{ data }'>{{ data.value }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        data: { value: 'Slot Content' }\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <child-component #content='{ data }'>{{ data.value }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        data: { value: 'Slot Content' }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Slot Content' in the content slot",
            "Renders nothing",
            "Error",
            "Renders data.value as plain text"
        ]
    },
    {
        "q": "Which Vue.js directive is used to prevent rendering of raw HTML and display it as plain text?",
        "o": [
            "v-text",
            "v-html",
            "v-pre",
            "v-cloak"
        ]
    },
    {
        "q": "What is the correct syntax for binding a touchstart event in Vue.js?",
        "o": [
            "v-on:touchstart='handleTouchStart'",
            "v-on:touch-start='handleTouchStart'",
            "v-bind:touchstart='handleTouchStart'",
            "v-on.touchstart='handleTouchStart'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-label.attr='label'>Labeled</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        label: 'custom-label'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-label.attr='label'>Labeled</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        label: 'custom-label'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets data-label attribute to 'custom-label'",
            "Sets dataLabel DOM property to 'custom-label'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-on directive when used with the .native modifier in Vue.js?",
        "o": [
            "It allows listening to native DOM events on a component’s root",
            "It only works with custom events",
            "It prevents event binding",
            "It requires a v-slot directive"
        ]
    },
    {
        "q": "Which Vue.js directive is used to create a two-way binding for a prop on a child component?",
        "o": [
            "v-bind with .sync modifier",
            "v-model",
            "v-on",
            "v-slot"
        ]
    },
    {
        "q": "What is the effect of using the .capture modifier with v-on in Vue.js?",
        "o": [
            "Handles the event during the capture phase",
            "Prevents the default event behavior",
            "Stops event propagation",
            "Triggers the event only once"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-status.camel='status'>Status</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        status: 'active'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-status.camel='status'>Status</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        status: 'active'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets dataStatus attribute to 'active'",
            "Sets data-status attribute to 'active'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to define content for a specific slot in a child component?",
        "o": [
            "v-slot",
            "v-is",
            "v-bind",
            "v-on"
        ]
    },
    {
        "q": "What is the purpose of the .prop modifier when used with v-bind in Vue.js?",
        "o": [
            "Sets the value as a DOM property instead of an attribute",
            "Converts attribute names to camelCase",
            "Enables two-way binding",
            "Prevents attribute inheritance"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:keydown.shift.enter='handleShiftEnter'>Shift+Enter</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleShiftEnter() {\n        console.log('Shift+Enter pressed');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:keydown.shift.enter='handleShiftEnter'>Shift+Enter</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleShiftEnter() {\n        console.log('Shift+Enter pressed');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Shift+Enter pressed' when Shift and Enter are pressed together",
            "Logs on any key press",
            "Error",
            "Nothing happens"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the Backspace key is pressed?",
        "o": [
            ".backspace",
            ".delete",
            ".esc",
            ".space"
        ]
    },
    {
        "q": "What is the purpose of the 'inserted' hook in a custom Vue.js directive?",
        "o": [
            "Called when the bound element is inserted into the parent DOM",
            "Called before the directive’s value updates",
            "Called when the directive is first bound",
            "Called when the component is destroyed"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <child-component #sidebar='{ sidebarData }'>{{ sidebarData.title }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        sidebarData: { title: 'Sidebar Title' }\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <child-component #sidebar='{ sidebarData }'>{{ sidebarData.title }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        sidebarData: { title: 'Sidebar Title' }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Sidebar Title' in the sidebar slot",
            "Renders nothing",
            "Error",
            "Renders sidebarData.title as plain text"
        ]
    },
    {
        "q": "Which Vue.js directive is used to display raw mustache syntax without compilation?",
        "o": [
            "v-pre",
            "v-text",
            "v-html",
            "v-cloak"
        ]
    },
    {
        "q": "What is the correct syntax for binding a touchend event in Vue.js?",
        "o": [
            "v-on:touchend='handleTouchEnd'",
            "v-on:touch-end='handleTouchEnd'",
            "v-bind:touchend='handleTouchEnd'",
            "v-on.touchend='handleTouchEnd'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-value.attr='value'>Value</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        value: 'custom-value'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-value.attr='value'>Value</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        value: 'custom-value'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets data-value attribute to 'custom-value'",
            "Sets dataValue DOM property to 'custom-value'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-bind directive with the .camel modifier in Vue.js?",
        "o": [
            "It converts kebab-case attributes to camelCase for binding",
            "It forces the binding as a DOM property",
            "It prevents attribute updates",
            "It requires a scoped slot"
        ]
    },
    {
        "q": "Which Vue.js directive is used to listen for custom events emitted by a child component?",
        "o": [
            "v-on",
            "v-bind",
            "v-slot",
            "v-is"
        ]
    },
    {
        "q": "What is the effect of using the .once modifier with v-on in Vue.js?",
        "o": [
            "Triggers the event handler only once",
            "Prevents the default event behavior",
            "Stops event propagation",
            "Captures the event in the parent element"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-test-id.camel='testId'>Test</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        testId: 'unique-id'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-test-id.camel='testId'>Test</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        testId: 'unique-id'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets dataTestId attribute to 'unique-id'",
            "Sets data-test-id attribute to 'unique-id'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to define content for a component’s default slot?",
        "o": [
            "v-slot",
            "v-is",
            "v-bind",
            "v-on"
        ]
    },
    {
        "q": "What is the purpose of the .sync modifier when used with v-bind in Vue.js?",
        "o": [
            "Enables two-way binding for a prop on a child component",
            "Forces the binding as an HTML attribute",
            "Converts the binding to camelCase",
            "Prevents prop updates"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:keydown.ctrl.alt='handleCtrlAlt'>Ctrl+Alt</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleCtrlAlt() {\n        console.log('Ctrl+Alt pressed');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:keydown.ctrl.alt='handleCtrlAlt'>Ctrl+Alt</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleCtrlAlt() {\n        console.log('Ctrl+Alt pressed');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Ctrl+Alt pressed' when Ctrl and Alt are pressed together",
            "Logs on any key press",
            "Error",
            "Nothing happens"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the Arrow Up key is pressed?",
        "o": [
            ".up",
            ".down",
            ".left",
            ".right"
        ]
    },
    {
        "q": "What is the purpose of the 'bind' hook in a custom Vue.js directive?",
        "o": [
            "Called when the directive is first bound to the element",
            "Called when the element is inserted into the DOM",
            "Called when the directive’s value updates",
            "Called when the directive is removed"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <child-component #main='{ mainData }'>{{ mainData.content }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        mainData: { content: 'Main Content' }\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <child-component #main='{ mainData }'>{{ mainData.content }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        mainData: { content: 'Main Content' }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Main Content' in the main slot",
            "Renders nothing",
            "Error",
            "Renders mainData.content as plain text"
        ]
    },
    {
        "q": "Which Vue.js directive is used to prevent compilation of an element and display raw template code?",
        "o": [
            "v-pre",
            "v-text",
            "v-html",
            "v-cloak"
        ]
    },
    {
        "q": "What is the correct syntax for binding a touchmove event in Vue.js?",
        "o": [
            "v-on:touchmove='handleTouchMove'",
            "v-on:touch-move='handleTouchMove'",
            "v-bind:touchmove='handleTouchMove'",
            "v-on.touchmove='handleTouchMove'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-custom-value.attr='customValue'>Custom</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        customValue: 'data-value'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-custom-value.attr='customValue'>Custom</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        customValue: 'data-value'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets data-custom-value attribute to 'data-value'",
            "Sets dataCustomValue DOM property to 'data-value'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-is directive in Vue.js?",
        "o": [
            "It dynamically renders a component based on a variable or string",
            "It creates a two-way binding",
            "It listens for custom events",
            "It defines slot content"
        ]
    },
    {
        "q": "Which Vue.js directive is used to create a shorthand for v-bind when binding attributes?",
        "o": [
            ":",
            "@",
            "#",
            "&"
        ]
    },
    {
        "q": "What is the effect of using the .self modifier with v-on in Vue.js?",
        "o": [
            "Triggers the event only if the target is the element itself",
            "Prevents the default event behavior",
            "Stops event propagation",
            "Captures the event in the parent element"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:aria-label.prop='label'>Labelled</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        label: 'custom-label'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:aria-label.prop='label'>Labelled</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        label: 'custom-label'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets ariaLabel DOM property to 'custom-label'",
            "Sets aria-label attribute to 'custom-label'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to dynamically bind a component based on a string or component object?",
        "o": [
            "v-is",
            "v-slot",
            "v-bind",
            "v-on"
        ]
    },
    {
        "q": "What is the purpose of the .native modifier when used with v-on in Vue.js?",
        "o": [
            "Listens for native DOM events on a component’s root element",
            "Enables two-way binding for events",
            "Prevents event propagation",
            "Converts event names to camelCase"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:keydown.up='handleUp'>Arrow Up</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleUp() {\n        console.log('Up pressed');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:keydown.up='handleUp'>Arrow Up</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleUp() {\n        console.log('Up pressed');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Up pressed' when Arrow Up key is pressed",
            "Logs on any key press",
            "Error",
            "Nothing happens"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the Arrow Down key is pressed?",
        "o": [
            ".down",
            ".up",
            ".left",
            ".right"
        ]
    },
    {
        "q": "What is the purpose of the 'update' hook in a custom Vue.js directive?",
        "o": [
            "Called when the directive’s value or binding updates",
            "Called when the element is inserted into the DOM",
            "Called when the directive is first bound",
            "Called when the component is destroyed"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <child-component #footer='{ footerData }'>{{ footerData.text }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        footerData: { text: 'Footer Text' }\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <child-component #footer='{ footerData }'>{{ footerData.text }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        footerData: { text: 'Footer Text' }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Footer Text' in the footer slot",
            "Renders nothing",
            "Error",
            "Renders footerData.text as plain text"
        ]
    },
    {
        "q": "Which Vue.js directive is used to display raw template code without compilation?",
        "o": [
            "v-pre",
            "v-text",
            "v-html",
            "v-cloak"
        ]
    },
    {
        "q": "What is the correct syntax for binding a focus event in Vue.js?",
        "o": [
            "v-on:focus='handleFocus'",
            "v-on:focus-event='handleFocus'",
            "v-bind:focus='handleFocus'",
            "v-on.focus='handleFocus'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-info.attr='info'>Info</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        info: 'attribute-info'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-info.attr='info'>Info</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        info: 'attribute-info'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets data-info attribute to 'attribute-info'",
            "Sets dataInfo DOM property to 'attribute-info'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-slot directive when used with scoped slots in Vue.js?",
        "o": [
            "It allows access to data from the child component",
            "It dynamically binds attributes",
            "It creates a two-way binding",
            "It listens for DOM events"
        ]
    },
    {
        "q": "Which Vue.js directive is used to prevent an element from rendering until the Vue instance is fully compiled?",
        "o": [
            "v-cloak",
            "v-pre",
            "v-once",
            "v-show"
        ]
    },
    {
        "q": "What is the effect of using the .native modifier with v-on when applied to a custom component in Vue.js?",
        "o": [
            "Listens to native DOM events on the component’s root element",
            "Triggers custom events only",
            "Prevents event propagation",
            "Converts event names to camelCase"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-custom-id.camel='customId'>Custom</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        customId: 'test-id'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-custom-id.camel='customId'>Custom</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        customId: 'test-id'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets dataCustomId attribute to 'test-id'",
            "Sets data-custom-id attribute to 'test-id'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to dynamically switch between components based on a variable or string name?",
        "o": [
            "v-is",
            "v-slot",
            "v-bind",
            "v-on"
        ]
    },
    {
        "q": "What is the purpose of the .exact modifier when used with v-on and key modifiers in Vue.js?",
        "o": [
            "Ensures the event triggers only with the exact key combination",
            "Prevents the default key behavior",
            "Stops key event propagation",
            "Triggers the event only once"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:touchstart.passive='handleTouch'>Touch me</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleTouch() {\n        console.log('Touched');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:touchstart.passive='handleTouch'>Touch me</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleTouch() {\n        console.log('Touched');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Touched' on touchstart with optimized performance",
            "Logs 'Touched' on any touch event",
            "Error",
            "Nothing happens"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the Arrow Left key is pressed?",
        "o": [
            ".left",
            ".right",
            ".up",
            ".down"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeMount' hook in a custom Vue.js directive?",
        "o": [
            "Called before the bound element is inserted into the DOM",
            "Called when the directive’s value updates",
            "Called when the directive is unbound",
            "Called after the component updates"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <child-component v-slot:body='{ bodyData }'>{{ bodyData.message }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        bodyData: { message: 'Body Content' }\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <child-component v-slot:body='{ bodyData }'>{{ bodyData.message }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        bodyData: { message: 'Body Content' }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Body Content' in the body slot",
            "Renders nothing",
            "Error",
            "Renders bodyData.message as plain text"
        ]
    },
    {
        "q": "Which Vue.js directive is used to ensure content is displayed as plain text, avoiding HTML rendering?",
        "o": [
            "v-text",
            "v-html",
            "v-pre",
            "v-cloak"
        ]
    },
    {
        "q": "What is the correct syntax for binding a blur event in Vue.js?",
        "o": [
            "v-on:blur='handleBlur'",
            "v-on:blur-event='handleBlur'",
            "v-bind:blur='handleBlur'",
            "v-on.blur='handleBlur'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-aria-label.attr='ariaLabel'>Accessible</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        ariaLabel: 'accessible-content'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-aria-label.attr='ariaLabel'>Accessible</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        ariaLabel: 'accessible-content'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets data-aria-label attribute to 'accessible-content'",
            "Sets dataAriaLabel DOM property to 'accessible-content'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-is directive when used with a string in Vue.js?",
        "o": [
            "It renders a component based on its registered name",
            "It creates a two-way binding",
            "It defines slot content",
            "It listens for custom events"
        ]
    },
    {
        "q": "Which Vue.js directive is used to hide an element until the Vue instance is fully compiled, typically paired with CSS?",
        "o": [
            "v-cloak",
            "v-pre",
            "v-once",
            "v-show"
        ]
    },
    {
        "q": "What is the effect of using the .native modifier with v-on when binding an event to a custom component in Vue.js?",
        "o": [
            "Listens to native DOM events on the component’s root element",
            "Triggers custom events only",
            "Prevents event propagation",
            "Converts event names to kebab-case"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-user-id.camel='userId'>User</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        userId: '12345'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-user-id.camel='userId'>User</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        userId: '12345'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets dataUserId attribute to '12345'",
            "Sets data-user-id attribute to '12345'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to dynamically render a component based on a registered component name or object?",
        "o": [
            "v-is",
            "v-slot",
            "v-bind",
            "v-on"
        ]
    },
    {
        "q": "What is the purpose of the .passive modifier when used with v-on for wheel events in Vue.js?",
        "o": [
            "Improves performance by not blocking the UI thread for wheel events",
            "Prevents the default wheel behavior",
            "Stops wheel event propagation",
            "Triggers the wheel event only once"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:keydown.right='handleRight'>Arrow Right</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleRight() {\n        console.log('Right pressed');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:keydown.right='handleRight'>Arrow Right</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleRight() {\n        console.log('Right pressed');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Right pressed' when Arrow Right key is pressed",
            "Logs on any key press",
            "Error",
            "Nothing happens"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the Arrow Right key is pressed?",
        "o": [
            ".right",
            ".left",
            ".up",
            ".down"
        ]
    },
    {
        "q": "What is the purpose of the 'componentUpdated' hook in a custom Vue.js directive?",
        "o": [
            "Called after the component and its children have updated",
            "Called when the directive is first bound",
            "Called before the element is mounted",
            "Called when the element is inserted into the DOM"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <child-component v-slot:header='{ headerData }'>{{ headerData.value }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        headerData: { value: 'Header Value' }\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <child-component v-slot:header='{ headerData }'>{{ headerData.value }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        headerData: { value: 'Header Value' }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Header Value' in the header slot",
            "Renders nothing",
            "Error",
            "Renders headerData.value as plain text"
        ]
    },
    {
        "q": "Which Vue.js directive is used to render content as plain text to prevent HTML injection?",
        "o": [
            "v-text",
            "v-html",
            "v-pre",
            "v-cloak"
        ]
    },
    {
        "q": "What is the correct syntax for binding a mouseover event in Vue.js?",
        "o": [
            "v-on:mouseover='handleMouseOver'",
            "v-on:mouse-over='handleMouseOver'",
            "v-bind:mouseover='handleMouseOver'",
            "v-on.mouseover='handleMouseOver'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-track.attr='trackId'>Track</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        trackId: 'track-001'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-track.attr='trackId'>Track</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        trackId: 'track-001'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets data-track attribute to 'track-001'",
            "Sets dataTrack DOM property to 'track-001'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-on directive when used with custom events in Vue.js?",
        "o": [
            "It can listen to events emitted by child components using $emit",
            "It only works with native DOM events",
            "It requires a v-slot directive",
            "It prevents event binding"
        ]
    },
    {
        "q": "Which Vue.js directive is used to globally register a custom directive before creating a Vue instance?",
        "o": [
            "Vue.directive",
            "v-custom",
            "directives option",
            "v-bind"
        ]
    },
    {
        "q": "What is the effect of using the .left modifier with v-on in Vue.js?",
        "o": [
            "Triggers the event only when the left mouse button is clicked",
            "Triggers the event only when the Arrow Left key is pressed",
            "Stops event propagation",
            "Captures the event in the parent element"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-session-id.camel='sessionId'>Session</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        sessionId: 'sess-123'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-session-id.camel='sessionId'>Session</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        sessionId: 'sess-123'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets dataSessionId attribute to 'sess-123'",
            "Sets data-session-id attribute to 'sess-123'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to pass content to a named slot in a child component?",
        "o": [
            "v-slot",
            "v-is",
            "v-bind",
            "v-on"
        ]
    },
    {
        "q": "What is the purpose of the .sync modifier when used with v-bind on a component prop in Vue.js?",
        "o": [
            "Creates a two-way binding between parent and child prop",
            "Forces the binding as a DOM property",
            "Converts the prop to kebab-case",
            "Prevents prop updates"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:keydown.left='handleLeft'>Arrow Left</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleLeft() {\n        console.log('Left pressed');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:keydown.left='handleLeft'>Arrow Left</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleLeft() {\n        console.log('Left pressed');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Left pressed' when Arrow Left key is pressed",
            "Logs on any key press",
            "Error",
            "Nothing happens"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the Enter key is pressed without other modifiers?",
        "o": [
            ".enter.exact",
            ".enter",
            ".submit",
            ".key.enter"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeUpdate' hook in a custom Vue.js directive?",
        "o": [
            "Called before the directive’s binding or value updates",
            "Called when the element is inserted into the DOM",
            "Called when the directive is first bound",
            "Called when the component is destroyed"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <child-component v-slot:nav='{ navData }'>{{ navData.label }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        navData: { label: 'Nav Label' }\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <child-component v-slot:nav='{ navData }'>{{ navData.label }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        navData: { label: 'Nav Label' }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Nav Label' in the nav slot",
            "Renders nothing",
            "Error",
            "Renders navData.label as plain text"
        ]
    },
    {
        "q": "Which Vue.js directive is used to ensure content is rendered as plain text instead of HTML?",
        "o": [
            "v-text",
            "v-html",
            "v-pre",
            "v-cloak"
        ]
    },
    {
        "q": "What is the correct syntax for binding a contextmenu event in Vue.js?",
        "o": [
            "v-on:contextmenu='handleContextMenu'",
            "v-on:context-menu='handleContextMenu'",
            "v-bind:contextmenu='handleContextMenu'",
            "v-on.contextmenu='handleContextMenu'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-track-id.attr='trackId'>Track</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        trackId: 'track-456'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-track-id.attr='trackId'>Track</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        trackId: 'track-456'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets data-track-id attribute to 'track-456'",
            "Sets dataTrackId DOM property to 'track-456'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-slot directive when used with dynamic slot names in Vue.js?",
        "o": [
            "It supports dynamic slot names using v-slot:[dynamicName]",
            "It only works with static slot names",
            "It requires a v-bind directive",
            "It cannot pass scoped slot data"
        ]
    },
    {
        "q": "Which Vue.js directive is used to prevent rendering of an element until the Vue instance is fully compiled, often paired with CSS styling?",
        "o": [
            "v-cloak",
            "v-pre",
            "v-once",
            "v-if"
        ]
    },
    {
        "q": "What is the effect of using the .exact modifier with v-on when combined with key modifiers like .ctrl in Vue.js?",
        "o": [
            "Triggers only when Ctrl is pressed without other modifier keys",
            "Triggers when Ctrl is pressed with any key",
            "Prevents event propagation",
            "Captures the event in the parent"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-record-id.camel='recordId'>Record</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        recordId: 'rec-789'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-record-id.camel='recordId'>Record</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        recordId: 'rec-789'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets dataRecordId attribute to 'rec-789'",
            "Sets data-record-id attribute to 'rec-789'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which Vue.js directive is used to dynamically assign content to a named or default slot in a component?",
        "o": [
            "v-slot",
            "v-is",
            "v-bind",
            "v-on"
        ]
    },
    {
        "q": "What is the purpose of the .attr modifier when used with v-bind in Vue.js?",
        "o": [
            "Forces the binding to be set as an HTML attribute",
            "Converts the binding to a DOM property",
            "Enables two-way binding",
            "Converts camelCase to kebab-case"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <button v-on:touchend.passive='handleTouchEnd'>Touch End</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleTouchEnd() {\n        console.log('Touch ended');\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <button v-on:touchend.passive='handleTouchEnd'>Touch End</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleTouchEnd() {\n        console.log('Touch ended');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Touch ended' on touchend with optimized performance",
            "Logs 'Touch ended' on any touch event",
            "Error",
            "Nothing happens"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the Arrow Up key is pressed without other modifiers?",
        "o": [
            ".up.exact",
            ".up",
            ".arrow-up",
            ".key.up"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeDestroy' hook in a custom Vue.js directive?",
        "o": [
            "Called before the bound element is removed from the DOM",
            "Called when the directive is first bound",
            "Called when the element is inserted into the DOM",
            "Called when the directive’s value updates"
        ]
    },
    {
        "q": "What will happen in the following Vue.js code?\n<template>\n  <child-component v-slot:sidebar='{ sidebarData }'>{{ sidebarData.label }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        sidebarData: { label: 'Sidebar Label' }\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <child-component v-slot:sidebar='{ sidebarData }'>{{ sidebarData.label }}</child-component>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        sidebarData: { label: 'Sidebar Label' }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Sidebar Label' in the sidebar slot",
            "Renders nothing",
            "Error",
            "Renders sidebarData.label as plain text"
        ]
    },
    {
        "q": "Which Vue.js directive is used to render raw template code without compilation?",
        "o": [
            "v-pre",
            "v-text",
            "v-html",
            "v-cloak"
        ]
    },
    {
        "q": "What is the correct syntax for binding a double-click event in Vue.js?",
        "o": [
            "v-on:dblclick='handleDoubleClick'",
            "v-on:double-click='handleDoubleClick'",
            "v-bind:dblclick='handleDoubleClick'",
            "v-on.dblclick='handleDoubleClick'"
        ]
    },
    {
        "q": "What will be the output of the following Vue.js code?\n<template>\n  <div v-bind:data-event-id.attr='eventId'>Event</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        eventId: 'evt-101'\n      }\n    }\n  }\n</script>",
        "c": "<template>\n  <div v-bind:data-event-id.attr='eventId'>Event</div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        eventId: 'evt-101'\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets data-event-id attribute to 'evt-101'",
            "Sets dataEventId DOM property to 'evt-101'",
            "Error",
            "Nothing is displayed"
        ]
    },
    {
        "q": "Which of the following is true about the v-is directive when used with a component object in Vue.js?",
        "o": [
            "It dynamically renders the component referenced by the object",
            "It creates a two-way binding",
            "It defines slot content",
            "It listens for custom events"
        ]
    },
    {
        "q": "What is the purpose of the v-if directive in Vue.js?",
        "o": [
            "Conditionally renders an element based on a truthy expression",
            "Loops through an array to render elements",
            "Binds an event listener to an element",
            "Creates a custom directive"
        ]
    },
    {
        "q": "What is the output of the following code using v-if and v-else?",
        "c": "<template>\n  <div>\n    <span v-if='count > 5'>High</span>\n    <span v-else>Low</span>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return { count: 3 };\n    }\n  }\n</script>",
        "o": [
            "Low",
            "High",
            "Nothing is rendered",
            "Error"
        ]
    },
    {
        "q": "How does v-for prioritize rendering when used with v-if on the same element?",
        "o": [
            "v-for has higher priority than v-if",
            "v-if has higher priority than v-for",
            "They are evaluated simultaneously",
            "It causes a compilation error"
        ]
    },
    {
        "q": "What is the output of the following v-for directive?",
        "c": "<template>\n  <ul>\n    <li v-for='(item, index) in items' :key='index'>{{ index }}: {{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: ['a', 'b', 'c'] };\n    }\n  }\n</script>",
        "o": [
            "0: a, 1: b, 2: c",
            "a, b, c",
            "1: a, 2: b, 3: c",
            "Error"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to prevent the default behavior of an event?",
        "o": [
            ".prevent",
            ".stop",
            ".capture",
            ".self"
        ]
    },
    {
        "q": "What happens when the following code with v-on is executed?",
        "c": "<template>\n  <button v-on:click='handleClick'>Click me</button>\n</template>\n<script>\n  export default {\n    methods: {\n      handleClick() {\n        console.log('Clicked!');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Clicked!' to the console",
            "Renders a button without any action",
            "Throws an error",
            "Refreshes the page"
        ]
    },
    {
        "q": "How do you define a custom directive in Vue.js?",
        "o": [
            "Vue.directive('name', { bind: function(el, binding) {} })",
            "Vue.customDirective('name', { bind: function() {} })",
            "Vue.defineDirective('name', { bind: function() {} })",
            "Vue.addDirective('name', { bind: function() {} })"
        ]
    },
    {
        "q": "What is the role of the 'bind' hook in a custom Vue.js directive?",
        "o": [
            "Called when the directive is first bound to the element",
            "Called when the directive's value updates",
            "Called when the element is inserted into the DOM",
            "Called when the directive is removed from the element"
        ]
    },
    {
        "q": "What is the output of the following code using a custom directive?",
        "c": "<template>\n  <div v-custom='color'>Test</div>\n</template>\n<script>\n  export default {\n    data() {\n      return { color: 'red' };\n    },\n    directives: {\n      custom: {\n        bind(el, binding) {\n          el.style.color = binding.value;\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Test' in red color",
            "Renders 'Test' in default color",
            "Throws an error",
            "Does not render anything"
        ]
    },
    {
        "q": "Which directive is used to bind an attribute dynamically to an element in Vue.js?",
        "o": [
            "v-bind",
            "v-on",
            "v-model",
            "v-if"
        ]
    },
    {
        "q": "What happens if you use v-if and v-else-if without a v-else in a template?",
        "o": [
            "It works fine, rendering only the first true condition",
            "It throws a compilation error",
            "It renders all conditions that are true",
            "It renders nothing"
        ]
    },
    {
        "q": "What is the purpose of the :key attribute in a v-for loop?",
        "o": [
            "Helps Vue track elements for efficient DOM updates",
            "Binds a unique identifier to the data source",
            "Prevents the loop from rendering",
            "Triggers a custom directive"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a modifier?",
        "c": "<template>\n  <form @submit.prevent='onSubmit'>\n    <button type='submit'>Submit</button>\n  </form>\n</template>\n<script>\n  export default {\n    methods: {\n      onSubmit() {\n        console.log('Submitted');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Submitted' without page reload",
            "Reloads the page",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What happens when you use v-if and v-for on the same element, and why is it discouraged?",
        "o": [
            "v-for takes precedence, but it can cause unexpected rendering issues",
            "v-if takes precedence, leading to efficient rendering",
            "Both directives are ignored, causing an error",
            "They work harmoniously without any issues"
        ]
    },
    {
        "q": "What is the output of the following code using v-if with a complex condition?",
        "c": "<template>\n  <div>\n    <span v-if='user.age >= 18 && user.active'>Adult User</span>\n    <span v-else>Restricted</span>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        user: { age: 16, active: true }\n      };\n    }\n  }\n</script>",
        "o": [
            "Restricted",
            "Adult User",
            "Nothing is rendered",
            "Error"
        ]
    },
    {
        "q": "Which v-on modifier ensures an event listener is triggered only if the event target is the element itself?",
        "o": [
            ".self",
            ".stop",
            ".prevent",
            ".once"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with an object?",
        "c": "<template>\n  <ul>\n    <li v-for='(value, key) in user' :key='key'>{{ key }}: {{ value }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        user: { name: 'Alice', age: 25 }\n      };\n    }\n  }\n</script>",
        "o": [
            "name: Alice, age: 25",
            "Alice, 25",
            "key: name, key: age",
            "Error"
        ]
    },
    {
        "q": "What is the purpose of the 'update' hook in a custom Vue.js directive?",
        "o": [
            "Called when the directive's value or bindings update",
            "Called when the directive is first bound to the element",
            "Called when the element is removed from the DOM",
            "Called when the directive is initially defined"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with dynamic arguments?",
        "c": "<template>\n  <div v-custom:background='color'>Content</div>\n</template>\n<script>\n  export default {\n    data() {\n      return { color: 'blue' };\n    },\n    directives: {\n      custom: {\n        bind(el, binding) {\n          el.style[binding.arg] = binding.value;\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets the background color to blue",
            "Sets the text color to blue",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "Which directive is used to create two-way data binding on form inputs?",
        "o": [
            "v-model",
            "v-bind",
            "v-on",
            "v-for"
        ]
    },
    {
        "q": "What is the output of the following code using v-else-if?",
        "c": "<template>\n  <div>\n    <span v-if='score > 80'>Excellent</span>\n    <span v-else-if='score > 50'>Good</span>\n    <span v-else>Needs Improvement</span>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return { score: 75 };\n    }\n  }\n</script>",
        "o": [
            "Good",
            "Excellent",
            "Needs Improvement",
            "Nothing is rendered"
        ]
    },
    {
        "q": "What is the effect of the .once modifier when used with v-on?",
        "o": [
            "The event handler is triggered only once",
            "The event propagates to parent elements once",
            "The event is prevented from triggering",
            "The event is bound to the element permanently"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property?",
        "c": "<template>\n  <ul>\n    <li v-for='item in filteredItems' :key='item.id'>{{ item.name }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        items: [{ id: 1, name: 'Apple' }, { id: 2, name: 'Banana' }]\n      };\n    },\n    computed: {\n      filteredItems() {\n        return this.items.filter(item => item.name.startsWith('A'));\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Apple'",
            "Renders 'Apple' and 'Banana'",
            "Renders nothing",
            "Throws an error"
        ]
    },
    {
        "q": "Which lifecycle hook is NOT available in a custom directive?",
        "o": [
            "mounted",
            "bind",
            "inserted",
            "update"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a dynamic attribute?",
        "o": [
            "Binds an attribute dynamically to an element's property",
            "Triggers an event based on the attribute value",
            "Loops through a list of attributes",
            "Conditionally renders the attribute"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a key modifier?",
        "c": "<template>\n  <input @keyup.enter='submit' />\n</template>\n<script>\n  export default {\n    methods: {\n      submit() {\n        console.log('Enter key pressed');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Enter key pressed' when Enter is pressed",
            "Logs 'Enter key pressed' on any key press",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What happens when you use v-if inside a v-for loop without a unique key?",
        "o": [
            "Vue may render elements inefficiently, causing DOM update issues",
            "It throws a compilation error",
            "It works perfectly without any issues",
            "The v-if directive is ignored"
        ]
    },
    {
        "q": "What is the output of the following code using v-if with a computed property?",
        "c": "<template>\n  <div>\n    <span v-if='isValid'>Valid</span>\n    <span v-else>Invalid</span>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return { value: 42 };\n    },\n    computed: {\n      isValid() {\n        return this.value > 0;\n      }\n    }\n  }\n</script>",
        "o": [
            "Valid",
            "Invalid",
            "Nothing is rendered",
            "Error"
        ]
    },
    {
        "q": "Which v-on modifier stops event propagation to parent elements?",
        "o": [
            ".stop",
            ".prevent",
            ".capture",
            ".self"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a nested array?",
        "c": "<template>\n  <div>\n    <p v-for='item in matrix' :key='item[0]'>{{ item[1] }}</p>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        matrix: [[1, 'One'], [2, 'Two'], [3, 'Three']]\n      };\n    }\n  }\n</script>",
        "o": [
            "One, Two, Three",
            "1, 2, 3",
            "[1, 'One'], [2, 'Two'], [3, 'Three']",
            "Error"
        ]
    },
    {
        "q": "What is the purpose of the 'inserted' hook in a custom Vue.js directive?",
        "o": [
            "Called when the bound element is inserted into the parent DOM",
            "Called when the directive's value updates",
            "Called when the directive is first bound to the element",
            "Called when the element is removed from the DOM"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with modifiers?",
        "c": "<template>\n  <div v-custom.uppercase>Test</div>\n</template>\n<script>\n  export default {\n    directives: {\n      custom: {\n        bind(el, binding) {\n          if (binding.modifiers.uppercase) {\n            el.textContent = el.textContent.toUpperCase();\n          }\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'TEST'",
            "Renders 'Test'",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "Which directive can be used to conditionally bind a class to an element?",
        "o": [
            "v-bind:class",
            "v-model:class",
            "v-on:class",
            "v-if:class"
        ]
    },
    {
        "q": "What is the output of the following code using v-else-if with multiple conditions?",
        "c": "<template>\n  <div>\n    <span v-if='temp < 0'>Freezing</span>\n    <span v-else-if='temp < 20'>Cool</span>\n    <span v-else-if='temp < 30'>Warm</span>\n    <span v-else>Hot</span>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return { temp: 25 };\n    }\n  }\n</script>",
        "o": [
            "Warm",
            "Cool",
            "Hot",
            "Freezing"
        ]
    },
    {
        "q": "What is the effect of the .capture modifier when used with v-on?",
        "o": [
            "Triggers the event handler during the capture phase",
            "Prevents the event from bubbling",
            "Triggers the event only once",
            "Restricts the event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a Set?",
        "c": "<template>\n  <ul>\n    <li v-for='item in uniqueItems' :key='item'>{{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        uniqueItems: new Set(['apple', 'banana', 'apple'])\n      };\n    }\n  }\n</script>",
        "o": [
            "Renders 'apple, banana'",
            "Renders 'apple, banana, apple'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which hook in a custom directive is called when the element is removed from the DOM?",
        "o": [
            "unbind",
            "bind",
            "inserted",
            "update"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a style attribute?",
        "o": [
            "Dynamically binds inline CSS styles to an element",
            "Triggers a style-related event",
            "Conditionally renders the style attribute",
            "Loops through a list of styles"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with multiple events?",
        "c": "<template>\n  <button @click='logClick' @mouseover='logHover'>Click or Hover</button>\n</template>\n<script>\n  export default {\n    methods: {\n      logClick() {\n        console.log('Clicked');\n      },\n      logHover() {\n        console.log('Hovered');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Clicked' on click and 'Hovered' on mouseover",
            "Logs 'Clicked' on both click and mouseover",
            "Logs 'Hovered' on both click and mouseover",
            "Throws an error"
        ]
    },
    {
        "q": "What happens when v-if and v-show are used together on the same element?",
        "o": [
            "v-if takes precedence, and v-show is ignored",
            "v-show takes precedence, and v-if is ignored",
            "Both directives work together, applying both conditions",
            "It causes a compilation error"
        ]
    },
    {
        "q": "What is the output of the following code using v-if with a method?",
        "c": "<template>\n  <div>\n    <span v-if='isEven(number)'>Even</span>\n    <span v-else>Odd</span>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return { number: 4 };\n    },\n    methods: {\n      isEven(num) {\n        return num % 2 === 0;\n      }\n    }\n  }\n</script>",
        "o": [
            "Even",
            "Odd",
            "Nothing is rendered",
            "Error"
        ]
    },
    {
        "q": "Which v-on modifier ensures an event is triggered only once?",
        "o": [
            ".once",
            ".stop",
            ".prevent",
            ".capture"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with an object and destructuring?",
        "c": "<template>\n  <ul>\n    <li v-for='({ name, id }, index) in users' :key='id'>{{ index }}: {{ name }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        users: [{ id: 1, name: 'Alice' }, { id: 2, name: 'Bob' }]\n      };\n    }\n  }\n</script>",
        "o": [
            "0: Alice, 1: Bob",
            "1: Alice, 2: Bob",
            "Alice, Bob",
            "Error"
        ]
    },
    {
        "q": "What is the purpose of the 'component' hook in a custom Vue.js directive?",
        "o": [
            "Called when the component's VNode is updated",
            "Called when the directive is first bound",
            "Called when the element is inserted into the DOM",
            "Called when the directive is removed"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with expression?",
        "c": "<template>\n  <div v-custom='fontSize + \"px\"'>Text</div>\n</template>\n<script>\n  export default {\n    data() {\n      return { fontSize: 16 };\n    },\n    directives: {\n      custom: {\n        bind(el, binding) {\n          el.style.fontSize = binding.expression;\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets font size to 'fontSize + \"px\"' literally",
            "Sets font size to 16px",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic property to an element's attribute?",
        "o": [
            "v-bind:[attribute]",
            "v-on:[attribute]",
            "v-model:[attribute]",
            "v-if:[attribute]"
        ]
    },
    {
        "q": "What is the output of the following code using v-else with no v-if?",
        "c": "<template>\n  <div>\n    <span v-else>Else Content</span>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {};\n    }\n  }\n</script>",
        "o": [
            "Throws a compilation error",
            "Renders 'Else Content'",
            "Renders nothing",
            "Renders an empty div"
        ]
    },
    {
        "q": "What is the effect of the .passive modifier when used with v-on?",
        "o": [
            "Improves scrolling performance for touch/wheel events",
            "Prevents the event from bubbling",
            "Triggers the event only once",
            "Restricts the event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a Map?",
        "c": "<template>\n  <ul>\n    <li v-for='[key, value] in map' :key='key'>{{ key }}: {{ value }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        map: new Map([['a', 1], ['b', 2]])\n      };\n    }\n  }\n</script>",
        "o": [
            "Renders 'a: 1, b: 2'",
            "Renders '1, 2'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called when the component's VNode is updated but may not have been re-rendered?",
        "o": [
            "componentUpdated",
            "bind",
            "inserted",
            "unbind"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with multiple attributes?",
        "o": [
            "Binds an object of attributes to an element",
            "Triggers multiple events simultaneously",
            "Conditionally renders multiple attributes",
            "Loops through attributes to apply them"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a custom event?",
        "c": "<template>\n  <my-component @custom-event='handleEvent'></my-component>\n</template>\n<script>\n  export default {\n    methods: {\n      handleEvent(payload) {\n        console.log(payload);\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs the payload emitted by the custom event",
            "Logs 'custom-event'",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What happens when you use v-if with a dynamic condition based on a prop in a component?",
        "o": [
            "The element renders only if the prop evaluates to true",
            "The prop is ignored, and the element always renders",
            "It causes a runtime warning",
            "The element renders regardless of the prop value"
        ]
    },
    {
        "q": "What is the output of the following code using v-if with a ref and toggle method?",
        "c": "<template>\n  <div>\n    <p v-if='isVisible'>Shown</p>\n    <button @click='toggle'>Toggle</button>\n  </div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const isVisible = ref(true);\n      const toggle = () => { isVisible.value = !isVisible.value; };\n      return { isVisible, toggle };\n    }\n  }\n</script>",
        "o": [
            "Renders 'Shown' initially, toggles to nothing on click",
            "Renders nothing initially, toggles to 'Shown' on click",
            "Throws an error",
            "Renders 'Shown' without toggling"
        ]
    },
    {
        "q": "Which v-on modifier is used to handle events only during the bubbling phase?",
        "o": [
            "No specific modifier is needed; bubbling is default",
            ".capture",
            ".bubble",
            ".once"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a nested v-for?",
        "c": "<template>\n  <div>\n    <div v-for='group in groups' :key='group.id'>\n      <p v-for='item in group.items' :key='item'>{{ item }}</p>\n    </div>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        groups: [{ id: 1, items: ['A', 'B'] }, { id: 2, items: ['C'] }]\n      };\n    }\n  }\n</script>",
        "o": [
            "Renders 'A, B, C' in separate paragraphs",
            "Renders 'A, B' in one div, 'C' in another",
            "Renders '1: A, B, 2: C'",
            "Throws an error"
        ]
    },
    {
        "q": "What is the role of the 'modifiers' property in a custom directive's binding object?",
        "o": [
            "Holds an object of modifier flags passed to the directive",
            "Stores the directive's expression value",
            "Contains the element's attributes",
            "Provides the directive's argument"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a dynamic value?",
        "c": "<template>\n  <span v-resize='size'>Resizable</span>\n</template>\n<script>\n  export default {\n    data() {\n      return { size: 20 };\n    },\n    directives: {\n      resize: {\n        bind(el, binding) {\n          el.style.fontSize = `${binding.value}px`;\n        },\n        update(el, binding) {\n          el.style.fontSize = `${binding.value}px`;\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders text with 20px font size",
            "Renders text with default font size",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which directive can be used to bind a dynamic style object to an element?",
        "o": [
            "v-bind:style",
            "v-model:style",
            "v-on:style",
            "v-if:style"
        ]
    },
    {
        "q": "What is the output of the following code using v-else-if with a reactive object?",
        "c": "<template>\n  <div>\n    <span v-if='user.status === \"admin\"'>Admin</span>\n    <span v-else-if='user.status === \"user\"'>User</span>\n    <span v-else>Guest</span>\n  </div>\n</template>\n<script>\n  import { reactive } from 'vue';\n  export default {\n    setup() {\n      const user = reactive({ status: 'user' });\n      return { user };\n    }\n  }\n</script>",
        "o": [
            "User",
            "Admin",
            "Guest",
            "Nothing is rendered"
        ]
    },
    {
        "q": "What is the effect of the .exact modifier when used with v-on for key modifiers?",
        "o": [
            "Ensures the event triggers only with the exact key combination",
            "Allows the event to trigger with any key",
            "Prevents the event from triggering",
            "Propagates the event to parent elements"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and sorting?",
        "c": "<template>\n  <ul>\n    <li v-for='item in sortedItems' :key='item'>{{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: ['banana', 'apple', 'cherry'] };\n    },\n    computed: {\n      sortedItems() {\n        return [...this.items].sort();\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'apple, banana, cherry'",
            "Renders 'banana, apple, cherry'",
            "Renders 'cherry, banana, apple'",
            "Throws an error"
        ]
    },
    {
        "q": "Which custom directive hook is called after the element is inserted into the DOM?",
        "o": [
            "inserted",
            "bind",
            "update",
            "componentUpdated"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a boolean attribute?",
        "o": [
            "Conditionally includes or excludes the attribute based on truthiness",
            "Triggers a boolean event",
            "Binds a boolean value to a style",
            "Loops through boolean attributes"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a mouse modifier?",
        "c": "<template>\n  <div @click.right='handleRightClick'>Right Click Me</div>\n</template>\n<script>\n  export default {\n    methods: {\n      handleRightClick() {\n        console.log('Right clicked');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Right clicked' on right mouse click",
            "Logs 'Right clicked' on any mouse click",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the behavior of v-show compared to v-if when toggling visibility?",
        "o": [
            "v-show toggles CSS display property, v-if removes/adds element from DOM",
            "v-show removes/adds element from DOM, v-if toggles CSS display",
            "Both directives toggle CSS visibility property",
            "Both directives remove/add element from DOM"
        ]
    },
    {
        "q": "What is the output of the following code using v-show with a reactive reference?",
        "c": "<template>\n  <div>\n    <p v-show='isActive.value'>Active</p>\n    <button @click='isActive.value = !isActive.value'>Toggle</button>\n  </div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const isActive = ref(false);\n      return { isActive };\n    }\n  }\n</script>",
        "o": [
            "Initially hidden, toggles to show 'Active' on click",
            "Initially shows 'Active', toggles to hidden on click",
            "Throws an error",
            "Always shows 'Active'"
        ]
    },
    {
        "q": "Which v-on modifier combination ensures a key event only triggers with Ctrl and no other modifiers?",
        "o": [
            ".ctrl.exact",
            ".ctrl",
            ".exact.ctrl",
            ".strict.ctrl"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a dynamic key?",
        "c": "<template>\n  <ul>\n    <li v-for='item in items' :key='item.id + \"-item\"'>{{ item.name }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        items: [{ id: 1, name: 'Apple' }, { id: 2, name: 'Banana' }]\n      };\n    }\n  }\n</script>",
        "o": [
            "Renders 'Apple, Banana' with unique keys",
            "Renders 'Apple, Banana' without keys",
            "Throws a key-related warning",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'oldValue' property in a custom directive's update hook?",
        "o": [
            "Provides the previous value of the directive's binding",
            "Holds the current value of the directive's binding",
            "Contains the element's previous attributes",
            "Stores the directive's previous modifiers"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a dynamic modifier?",
        "c": "<template>\n  <div v-format:[styleType]='value'>Formatted</div>\n</template>\n<script>\n  export default {\n    data() {\n      return { styleType: 'color', value: 'green' };\n    },\n    directives: {\n      format: {\n        bind(el, binding) {\n          el.style[binding.arg] = binding.value;\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets the text color to green",
            "Sets the background color to green",
            "Throws an error",
            "Renders without styling"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic class based on an object?",
        "o": [
            "v-bind:class",
            "v-model:class",
            "v-on:class",
            "v-if:class"
        ]
    },
    {
        "q": "What is the output of the following code using v-show with a computed property?",
        "c": "<template>\n  <div>\n    <span v-show='isHighScore'>High Score</span>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return { score: 85 };\n    },\n    computed: {\n      isHighScore() {\n        return this.score > 80;\n      }\n    }\n  }\n</script>",
        "o": [
            "Displays 'High Score'",
            "Hides 'High Score'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .left modifier when used with v-on for mouse events?",
        "o": [
            "Triggers the event only on left mouse button clicks",
            "Triggers the event on any mouse button click",
            "Prevents the event from triggering",
            "Propagates the event to parent elements"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with an empty array?",
        "c": "<template>\n  <ul>\n    <li v-for='item in items' :key='item.id'>{{ item.name }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [] };\n    }\n  }\n</script>",
        "o": [
            "Renders an empty ul element",
            "Throws a key-related error",
            "Renders a single empty li element",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called before the element is inserted into the DOM?",
        "o": [
            "beforeMount",
            "inserted",
            "bind",
            "update"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a custom component prop?",
        "o": [
            "Dynamically passes data to a component's prop",
            "Triggers a prop-related event",
            "Conditionally renders the prop",
            "Binds a static value to the prop"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a wheel event?",
        "c": "<template>\n  <div @wheel.passive='handleScroll'>Scroll Me</div>\n</template>\n<script>\n  export default {\n    methods: {\n      handleScroll() {\n        console.log('Scrolled');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Scrolled' on mouse wheel movement",
            "Logs 'Scrolled' on any mouse event",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What happens when v-show is used with a transition effect in Vue.js?",
        "o": [
            "It toggles visibility with CSS transitions, keeping the element in the DOM",
            "It removes/adds the element from the DOM with transitions",
            "It causes a compilation error with transitions",
            "It ignores the transition effect entirely"
        ]
    },
    {
        "q": "What is the output of the following code using v-show with a reactive object?",
        "c": "<template>\n  <div>\n    <span v-show='state.visible'>Displayed</span>\n  </div>\n</template>\n<script>\n  import { reactive } from 'vue';\n  export default {\n    setup() {\n      const state = reactive({ visible: true });\n      return { state };\n    }\n  }\n</script>",
        "o": [
            "Displays 'Displayed'",
            "Hides 'Displayed'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when Shift is pressed without other modifiers?",
        "o": [
            ".shift.exact",
            ".shift",
            ".exact.shift",
            ".strict.shift"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a custom key based on index and property?",
        "c": "<template>\n  <ul>\n    <li v-for='(item, index) in items' :key='`${index}-${item.id}`'>{{ item.name }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        items: [{ id: 1, name: 'Cat' }, { id: 2, name: 'Dog' }]\n      };\n    }\n  }\n</script>",
        "o": [
            "Renders 'Cat, Dog' with unique keys",
            "Renders 'Cat, Dog' without keys",
            "Throws a key-related warning",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'vnode' parameter in a custom directive's hooks?",
        "o": [
            "Provides access to the virtual node of the bound element",
            "Holds the directive's previous binding value",
            "Contains the element's attributes",
            "Stores the directive's modifiers"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a conditional modifier?",
        "c": "<template>\n  <div v-style:[property].bold='value'>Styled</div>\n</template>\n<script>\n  export default {\n    data() {\n      return { property: 'fontSize', value: '18px' };\n    },\n    directives: {\n      style: {\n        bind(el, binding) {\n          el.style[binding.arg] = binding.value;\n          if (binding.modifiers.bold) el.style.fontWeight = 'bold';\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets font size to 18px and font weight to bold",
            "Sets font size to 18px only",
            "Sets font weight to bold only",
            "Throws an error"
        ]
    },
    {
        "q": "Which directive is used to dynamically bind an array of classes to an element?",
        "o": [
            "v-bind:class",
            "v-model:class",
            "v-on:class",
            "v-for:class"
        ]
    },
    {
        "q": "What is the output of the following code using v-show with a method?",
        "c": "<template>\n  <div>\n    <span v-show='checkStatus()'>Online</span>\n  </div>\n</template>\n<script>\n  export default {\n    methods: {\n      checkStatus() {\n        return false;\n      }\n    }\n  }\n</script>",
        "o": [
            "Hides 'Online'",
            "Displays 'Online'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .middle modifier when used with v-on for mouse events?",
        "o": [
            "Triggers the event only on middle mouse button clicks",
            "Triggers the event on any mouse button click",
            "Prevents the event from bubbling",
            "Restricts the event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and an empty result?",
        "c": "<template>\n  <ul>\n    <li v-for='item in filteredItems' :key='item.id'>{{ item.name }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        items: [{ id: 1, name: 'Apple', type: 'fruit' }, { id: 2, name: 'Carrot', type: 'vegetable' }]\n      };\n    },\n    computed: {\n      filteredItems() {\n        return this.items.filter(item => item.type === 'meat');\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders an empty ul element",
            "Throws a key-related error",
            "Renders 'Apple, Carrot'",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called after the component's VNode is updated?",
        "o": [
            "componentUpdated",
            "beforeUpdate",
            "inserted",
            "bind"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a custom HTML attribute?",
        "o": [
            "Dynamically binds a custom attribute to an element",
            "Triggers a custom event",
            "Conditionally renders the attribute",
            "Loops through custom attributes"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a touch event?",
        "c": "<template>\n  <div @touchstart='handleTouch'>Touch Me</div>\n</template>\n<script>\n  export default {\n    methods: {\n      handleTouch() {\n        console.log('Touched');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Touched' on touch start",
            "Logs 'Touched' on any touch event",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the behavior of v-cloak when used in Vue.js?",
        "o": [
            "Hides the element until Vue compilation is complete",
            "Shows the element only during compilation",
            "Toggles element visibility based on a condition",
            "Applies a CSS transition effect"
        ]
    },
    {
        "q": "What is the output of the following code using v-show with a dynamic expression?",
        "c": "<template>\n  <div>\n    <span v-show='count > 5 && enabled'>Visible</span>\n  </div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const count = ref(7);\n      const enabled = ref(false);\n      return { count, enabled };\n    }\n  }\n</script>",
        "o": [
            "Hides 'Visible'",
            "Displays 'Visible'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when no modifiers like Ctrl or Shift are pressed?",
        "o": [
            ".exact",
            ".none",
            ".solo",
            ".strict"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a dynamic index offset?",
        "c": "<template>\n  <ul>\n    <li v-for='(item, index) in items' :key='index + 1'>{{ index + 1 }}: {{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: ['X', 'Y', 'Z'] };\n    }\n  }\n</script>",
        "o": [
            "1: X, 2: Y, 3: Z",
            "0: X, 1: Y, 2: Z",
            "X, Y, Z",
            "Throws a key-related warning"
        ]
    },
    {
        "q": "What is the role of the 'instance' parameter in a custom directive's hooks?",
        "o": [
            "Provides access to the Vue component instance",
            "Holds the directive's binding value",
            "Contains the element's parent node",
            "Stores the directive's previous modifiers"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a computed property?",
        "c": "<template>\n  <div v-scale='scaleFactor'>Scaled</div>\n</template>\n<script>\n  export default {\n    data() {\n      return { factor: 2 };\n    },\n    computed: {\n      scaleFactor() {\n        return this.factor * 10;\n      }\n    },\n    directives: {\n      scale: {\n        bind(el, binding) {\n          el.style.transform = `scale(${binding.value / 10})`;\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Scales the element by a factor of 2",
            "Scales the element by a factor of 20",
            "Throws an error",
            "Renders without scaling"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic attribute name and value pair to an element?",
        "o": [
            "v-bind:[name]='value'",
            "v-on:[name]='value'",
            "v-model:[name]='value'",
            "v-if:[name]='value'"
        ]
    },
    {
        "q": "What is the output of the following code using v-show with a ternary expression?",
        "c": "<template>\n  <div>\n    <span v-show='score > 50 ? true : false'>Above Average</span>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return { score: 45 };\n    }\n  }\n</script>",
        "o": [
            "Hides 'Above Average'",
            "Displays 'Above Average'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .right.exact modifier when used with v-on for mouse events?",
        "o": [
            "Triggers only on right mouse button clicks with no other modifiers",
            "Triggers on any right mouse button click",
            "Prevents the event from triggering",
            "Propagates the event to parent elements"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a filtered Map?",
        "c": "<template>\n  <ul>\n    <li v-for='[key, value] in filteredMap' :key='key'>{{ value }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { map: new Map([['a', 1], ['b', 2], ['c', 3]]) };\n    },\n    computed: {\n      filteredMap() {\n        return new Map([...this.map].filter(([key]) => key !== 'b'));\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders '1, 3'",
            "Renders '1, 2, 3'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called when the directive's binding value changes?",
        "o": [
            "update",
            "bind",
            "inserted",
            "beforeMount"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with an object for multiple attributes?",
        "o": [
            "Binds multiple attributes from an object to an element",
            "Triggers multiple events from an object",
            "Conditionally renders multiple attributes",
            "Loops through object properties"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a drag event?",
        "c": "<template>\n  <div @dragstart='handleDrag'>Drag Me</div>\n</template>\n<script>\n  export default {\n    methods: {\n      handleDrag() {\n        console.log('Dragging');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Dragging' on drag start",
            "Logs 'Dragging' on any drag event",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the effect of using v-cloak in conjunction with a CSS rule to prevent FOUC (Flash of Unstyled Content)?",
        "o": [
            "Hides the element until Vue is fully loaded, then removes the v-cloak attribute",
            "Applies a permanent CSS style to hide the element",
            "Triggers a transition effect during compilation",
            "Causes a compilation error when combined with CSS"
        ]
    },
    {
        "q": "What is the output of the following code using v-show with a computed property and multiple conditions?",
        "c": "<template>\n  <div>\n    <span v-show='isEligible'>Eligible</span>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return { age: 20, registered: true };\n    },\n    computed: {\n      isEligible() {\n        return this.age >= 18 && this.registered;\n      }\n    }\n  }\n</script>",
        "o": [
            "Displays 'Eligible'",
            "Hides 'Eligible'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when the Alt key is pressed without other modifiers?",
        "o": [
            ".alt.exact",
            ".alt",
            ".exact.alt",
            ".strict.alt"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a sparse array?",
        "c": "<template>\n  <ul>\n    <li v-for='(item, index) in sparseArray' :key='index'>{{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { sparseArray: [, 'A', , 'B'] };\n    }\n  }\n</script>",
        "o": [
            "Renders 'A, B'",
            "Renders 'undefined, A, undefined, B'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'expression' property in a custom directive's binding object?",
        "o": [
            "Holds the raw expression passed to the directive",
            "Contains the evaluated value of the directive",
            "Stores the directive's modifiers",
            "Provides the element's attributes"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a reactive value?",
        "c": "<template>\n  <div v-highlight='highlightColor'>Highlighted</div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const highlightColor = ref('yellow');\n      return { highlightColor };\n    },\n    directives: {\n      highlight: {\n        bind(el, binding) {\n          el.style.backgroundColor = binding.value;\n        },\n        update(el, binding) {\n          el.style.backgroundColor = binding.value;\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Sets background color to yellow",
            "Sets background color to default",
            "Throws an error",
            "Renders without background color"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic inline style based on an object?",
        "o": [
            "v-bind:style",
            "v-model:style",
            "v-on:style",
            "v-if:style"
        ]
    },
    {
        "q": "What is the output of the following code using v-show with a method and dynamic data?",
        "c": "<template>\n  <div>\n    <span v-show='isValidUser()'>Valid User</span>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return { user: { role: 'guest' } };\n    },\n    methods: {\n      isValidUser() {\n        return this.user.role === 'admin';\n      }\n    }\n  }\n</script>",
        "o": [
            "Hides 'Valid User'",
            "Displays 'Valid User'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .meta.exact modifier when used with v-on for key events?",
        "o": [
            "Triggers only when the Meta key is pressed without other modifiers",
            "Triggers on any Meta key press",
            "Prevents the event from bubbling",
            "Restricts the event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and dynamic filtering?",
        "c": "<template>\n  <ul>\n    <li v-for='item in filteredProducts' :key='item.id'>{{ item.name }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        products: [{ id: 1, name: 'Shirt', category: 'clothing' }, { id: 2, name: 'Laptop', category: 'electronics' }],\n        selectedCategory: 'clothing'\n      };\n    },\n    computed: {\n      filteredProducts() {\n        return this.products.filter(item => item.category === this.selectedCategory);\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Shirt'",
            "Renders 'Shirt, Laptop'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called just before the directive is unbound from the element?",
        "o": [
            "beforeUnmount",
            "update",
            "inserted",
            "bind"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a data attribute?",
        "o": [
            "Dynamically binds a data attribute to an element",
            "Triggers a data-related event",
            "Conditionally renders the data attribute",
            "Loops through data attributes"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a focus event?",
        "c": "<template>\n  <input @focus='handleFocus' placeholder='Focus Me' />\n</template>\n<script>\n  export default {\n    methods: {\n      handleFocus() {\n        console.log('Focused');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Focused' when the input gains focus",
            "Logs 'Focused' on any input event",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the behavior of the v-once directive in Vue.js?",
        "o": [
            "Renders the element once and does not update on data changes",
            "Renders the element only if a condition is true",
            "Triggers a one-time event listener",
            "Caches the element's template for performance"
        ]
    },
    {
        "q": "What is the output of the following code using v-once with a reactive reference?",
        "c": "<template>\n  <div>\n    <span v-once>{{ counter.value }}</span>\n    <button @click='counter.value++'>Increment</button>\n  </div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const counter = ref(1);\n      return { counter };\n    }\n  }\n</script>",
        "o": [
            "Displays '1' and does not update on button clicks",
            "Displays '1' and updates on button clicks",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when the Space key is pressed without other modifiers?",
        "o": [
            ".space.exact",
            ".space",
            ".exact.space",
            ".strict.space"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a dynamic key based on a computed property?",
        "c": "<template>\n  <ul>\n    <li v-for='item in items' :key='uniqueKey(item)'>{{ item.name }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [{ id: 1, name: 'Pen' }, { id: 2, name: 'Book' }] };\n    },\n    methods: {\n      uniqueKey(item) {\n        return `item-${item.id}`;\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Pen, Book' with unique keys",
            "Renders 'Pen, Book' without keys",
            "Throws a key-related warning",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'value' property in a custom directive's binding object?",
        "o": [
            "Holds the evaluated value passed to the directive",
            "Contains the raw expression of the directive",
            "Stores the directive's argument",
            "Provides the element's parent node"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a dynamic argument and modifier?",
        "c": "<template>\n  <div v-custom:[attribute].uppercase='text'>Content</div>\n</template>\n<script>\n  export default {\n    data() {\n      return { attribute: 'textTransform', text: 'uppercase' };\n    },\n    directives: {\n      custom: {\n        bind(el, binding) {\n          el.style[binding.arg] = binding.value;\n          if (binding.modifiers.uppercase) {\n            el.textContent = el.textContent.toUpperCase();\n          }\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'CONTENT' with text-transform uppercase",
            "Renders 'Content' with text-transform uppercase",
            "Throws an error",
            "Renders without styling"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic event handler to a custom component?",
        "o": [
            "v-on:[eventName]",
            "v-bind:[eventName]",
            "v-model:[eventName]",
            "v-if:[eventName]"
        ]
    },
    {
        "q": "What is the output of the following code using v-once with a computed property?",
        "c": "<template>\n  <div>\n    <span v-once>{{ displayText }}</span>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return { text: 'Initial' };\n    },\n    computed: {\n      displayText() {\n        return this.text.toUpperCase();\n      }\n    }\n  }\n</script>",
        "o": [
            "Displays 'INITIAL' and does not update",
            "Displays 'Initial' and updates on text change",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .tab.exact modifier when used with v-on for key events?",
        "o": [
            "Triggers only when the Tab key is pressed without other modifiers",
            "Triggers on any Tab key press",
            "Prevents the Tab key event from bubbling",
            "Restricts the Tab key event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and a Set?",
        "c": "<template>\n  <ul>\n    <li v-for='item in uniqueItems' :key='item'>{{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { values: ['apple', 'banana', 'apple', 'cherry'] };\n    },\n    computed: {\n      uniqueItems() {\n        return new Set(this.values);\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'apple, banana, cherry'",
            "Renders 'apple, banana, apple, cherry'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called when the directive is first bound to the element?",
        "o": [
            "bind",
            "inserted",
            "update",
            "componentUpdated"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a boolean prop in a component?",
        "o": [
            "Conditionally includes the prop based on a truthy value",
            "Triggers a boolean event",
            "Binds a static boolean value",
            "Loops through boolean props"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a blur event?",
        "c": "<template>\n  <input @blur='handleBlur' placeholder='Blur Me' />\n</template>\n<script>\n  export default {\n    methods: {\n      handleBlur() {\n        console.log('Blurred');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Blurred' when the input loses focus",
            "Logs 'Blurred' on any input event",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the effect of using the v-pre directive in Vue.js?",
        "o": [
            "Skips compilation for the element and its children, rendering raw mustache tags",
            "Pre-renders the element before Vue initialization",
            "Caches the element for performance optimization",
            "Triggers a one-time rendering of the element"
        ]
    },
    {
        "q": "What is the output of the following code using v-pre with a template?",
        "c": "<template>\n  <div v-pre>\n    <span>{{ message }}</span>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return { message: 'Hello' };\n    }\n  }\n</script>",
        "o": [
            "Renders '{{ message }}' as plain text",
            "Renders 'Hello'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when the Enter key is pressed with Ctrl?",
        "o": [
            ".enter.ctrl",
            ".ctrl.enter",
            ".enter.ctrl.exact",
            ".strict.enter.ctrl"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a dynamic range based on a reactive reference?",
        "c": "<template>\n  <ul>\n    <li v-for='n in limit.value' :key='n'>Item {{ n }}</li>\n  </ul>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const limit = ref(2);\n      return { limit };\n    }\n  }\n</script>",
        "o": [
            "Renders 'Item 1, Item 2'",
            "Renders 'Item 0, Item 1'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'arg' and 'modifiers' properties together in a custom directive's binding object?",
        "o": [
            "Allow dynamic attribute application with conditional modifier logic",
            "Store the directive's expression and value",
            "Provide access to the element's parent and attributes",
            "Contain the previous and current binding values"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a computed property and modifier?",
        "c": "<template>\n  <div v-format.bold='styleValue'>Text</div>\n</template>\n<script>\n  export default {\n    data() {\n      return { size: 14 };\n    },\n    computed: {\n      styleValue() {\n        return `${this.size}px`;\n      }\n    },\n    directives: {\n      format: {\n        bind(el, binding) {\n          el.style.fontSize = binding.value;\n          if (binding.modifiers.bold) el.style.fontWeight = 'bold';\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders text with 14px size and bold weight",
            "Renders text with 14px size only",
            "Throws an error",
            "Renders text with default styling"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic prop to a custom component with a kebab-case name?",
        "o": [
            "v-bind:[prop-name]",
            "v-on:[prop-name]",
            "v-model:[prop-name]",
            "v-if:[prop-name]"
        ]
    },
    {
        "q": "What is the output of the following code using v-pre with a nested v-for?",
        "c": "<template>\n  <div v-pre>\n    <ul>\n      <li v-for='item in items'>{{ item }}</li>\n    </ul>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: ['A', 'B'] };\n    }\n  }\n</script>",
        "o": [
            "Renders '<li v-for='item in items'>{{ item }}</li>' as plain text",
            "Renders 'A, B' in a list",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .esc.exact modifier when used with v-on for key events?",
        "o": [
            "Triggers only when the Escape key is pressed without other modifiers",
            "Triggers on any Escape key press",
            "Prevents the Escape key event from bubbling",
            "Restricts the Escape key event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and a reversed array?",
        "c": "<template>\n  <ul>\n    <li v-for='item in reversedItems' :key='item'>{{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: ['X', 'Y', 'Z'] };\n    },\n    computed: {\n      reversedItems() {\n        return [...this.items].reverse();\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Z, Y, X'",
            "Renders 'X, Y, Z'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called after the element is unbound from the DOM?",
        "o": [
            "unmounted",
            "beforeUnmount",
            "bind",
            "update"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with an ARIA attribute?",
        "o": [
            "Dynamically binds an accessibility attribute to an element",
            "Triggers an accessibility-related event",
            "Conditionally renders the ARIA attribute",
            "Loops through ARIA attributes"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a change event?",
        "c": "<template>\n  <select @change='handleChange'>\n    <option value='option1'>Option 1</option>\n    <option value='option2'>Option 2</option>\n  </select>\n</template>\n<script>\n  export default {\n    methods: {\n      handleChange() {\n        console.log('Selection changed');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Selection changed' when the select value changes",
            "Logs 'Selection changed' on any select interaction",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the effect of using the v-html directive with untrusted content?",
        "o": [
            "It can lead to XSS vulnerabilities if the content contains malicious scripts",
            "It automatically sanitizes the HTML content",
            "It renders the content as plain text without parsing",
            "It throws a security error at runtime"
        ]
    },
    {
        "q": "What is the output of the following code using v-html with a reactive string?",
        "c": "<template>\n  <div v-html='htmlContent'></div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const htmlContent = ref('<strong>Bold</strong>');\n      return { htmlContent };\n    }\n  }\n</script>",
        "o": [
            "Renders 'Bold' in bold text",
            "Renders '<strong>Bold</strong>' as plain text",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when the Backspace key is pressed with Shift?",
        "o": [
            ".backspace.shift",
            ".shift.backspace",
            ".backspace.shift.exact",
            ".strict.backspace.shift"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a key that is a computed property?",
        "c": "<template>\n  <ul>\n    <li v-for='item in items' :key='getKey(item)'>{{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [1, 2, 3] };\n    },\n    methods: {\n      getKey(item) {\n        return `key-${item}`;\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders '1, 2, 3' with unique keys",
            "Renders '1, 2, 3' without keys",
            "Throws a key-related warning",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'def' property in a custom directive's binding object?",
        "o": [
            "Provides the directive definition object",
            "Holds the evaluated value of the directive",
            "Contains the directive's modifiers",
            "Stores the element's attributes"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with an object value?",
        "c": "<template>\n  <div v-apply='styles'>Styled</div>\n</template>\n<script>\n  export default {\n    data() {\n      return { styles: { color: 'red', fontSize: '16px' } };\n    },\n    directives: {\n      apply: {\n        bind(el, binding) {\n          Object.assign(el.style, binding.value);\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Applies red color and 16px font size",
            "Applies only red color",
            "Throws an error",
            "Renders without styling"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic slot name in a component?",
        "o": [
            "v-bind:slot",
            "v-slot:[name]",
            "v-model:slot",
            "v-if:slot"
        ]
    },
    {
        "q": "What is the output of the following code using v-html with a method return?",
        "c": "<template>\n  <div v-html='getHtml()'></div>\n</template>\n<script>\n  export default {\n    methods: {\n      getHtml() {\n        return '<em>Italic</em>';\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Italic' in italic text",
            "Renders '<em>Italic</em>' as plain text",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .delete.exact modifier when used with v-on for key events?",
        "o": [
            "Triggers only when the Delete key is pressed without other modifiers",
            "Triggers on any Delete key press",
            "Prevents the Delete key event from bubbling",
            "Restricts the Delete key event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and mapping?",
        "c": "<template>\n  <ul>\n    <li v-for='item in mappedItems' :key='item.id'>{{ item.value }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { numbers: [10, 20, 30] };\n    },\n    computed: {\n      mappedItems() {\n        return this.numbers.map((n, i) => ({ id: i, value: n * 2 }));\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders '20, 40, 60'",
            "Renders '10, 20, 30'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called before the component's VNode is updated?",
        "o": [
            "beforeUpdate",
            "update",
            "inserted",
            "bind"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a SVG attribute?",
        "o": [
            "Dynamically binds an attribute to an SVG element",
            "Triggers an SVG-related event",
            "Conditionally renders the SVG attribute",
            "Loops through SVG attributes"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a submit event and modifier?",
        "c": "<template>\n  <form @submit.prevent='handleSubmit'>\n    <button type='submit'>Submit</button>\n  </form>\n</template>\n<script>\n  export default {\n    methods: {\n      handleSubmit() {\n        console.log('Form submitted without reload');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Form submitted without reload' without page refresh",
            "Logs 'Form submitted without reload' and refreshes the page",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the effect of using the v-text directive in Vue.js?",
        "o": [
            "Updates the element's textContent with the provided value",
            "Renders raw HTML content",
            "Toggles the element's visibility",
            "Binds an attribute to the element"
        ]
    },
    {
        "q": "What is the output of the following code using v-text with a reactive reference?",
        "c": "<template>\n  <div v-text='message.value'></div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const message = ref('Welcome');\n      return { message };\n    }\n  }\n</script>",
        "o": [
            "Renders 'Welcome' as plain text",
            "Renders 'message.value' as plain text",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when the ArrowUp key is pressed without other modifiers?",
        "o": [
            ".up.exact",
            ".arrow-up",
            ".exact.up",
            ".strict.up"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a computed property and object destructuring?",
        "c": "<template>\n  <ul>\n    <li v-for='{ name, id } in formattedItems' :key='id'>{{ name }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [{ id: 1, label: 'Apple' }, { id: 2, label: 'Banana' }] };\n    },\n    computed: {\n      formattedItems() {\n        return this.items.map(item => ({ id: item.id, name: item.label.toUpperCase() }));\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'APPLE, BANANA'",
            "Renders 'Apple, Banana'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'oldVnode' parameter in a custom directive's update hook?",
        "o": [
            "Provides access to the previous virtual node of the element",
            "Holds the current virtual node of the element",
            "Contains the directive's current binding value",
            "Stores the element's previous attributes"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a dynamic value and no modifiers?",
        "c": "<template>\n  <div v-border='borderStyle'>Bordered</div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const borderStyle = ref('2px solid blue');\n      return { borderStyle };\n    },\n    directives: {\n      border: {\n        bind(el, binding) {\n          el.style.border = binding.value;\n        },\n        update(el, binding) {\n          el.style.border = binding.value;\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders with a 2px solid blue border",
            "Renders without a border",
            "Throws an error",
            "Renders with a default border"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic attribute to a custom component using camelCase naming?",
        "o": [
            "v-bind:[camelCaseAttr]",
            "v-on:[camelCaseAttr]",
            "v-model:[camelCaseAttr]",
            "v-if:[camelCaseAttr]"
        ]
    },
    {
        "q": "What is the output of the following code using v-text with a computed property?",
        "c": "<template>\n  <div v-text='formattedMessage'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return { text: 'hello' };\n    },\n    computed: {\n      formattedMessage() {\n        return this.text.toUpperCase();\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'HELLO'",
            "Renders 'hello'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .down.exact modifier when used with v-on for key events?",
        "o": [
            "Triggers only when the ArrowDown key is pressed without other modifiers",
            "Triggers on any ArrowDown key press",
            "Prevents the ArrowDown key event from bubbling",
            "Restricts the ArrowDown key event to the target element"
        ]
    },
    {
        "q": "What is the effect of using the v-once directive with a dynamic binding in Vue.js?",
        "o": [
            "Renders the binding once and ignores subsequent data changes",
            "Updates the binding on every data change",
            "Caches the binding for performance",
            "Causes a compilation error"
        ]
    },
    {
        "q": "What is the output of the following code using v-text with a method?",
        "c": "<template>\n  <div v-text='getMessage()'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return { text: 'Vue' };\n    },\n    methods: {\n      getMessage() {\n        return this.text + ' is awesome!';\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Vue is awesome!'",
            "Renders 'Vue'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when the PageUp key is pressed without other modifiers?",
        "o": [
            ".page-up.exact",
            ".page-up",
            ".exact.page-up",
            ".strict.page-up"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a computed property and string transformation?",
        "c": "<template>\n  <ul>\n    <li v-for='item in transformedItems' :key='item.id'>{{ item.text }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [{ id: 1, value: 'cat' }, { id: 2, value: 'dog' }] };\n    },\n    computed: {\n      transformedItems() {\n        return this.items.map(item => ({ id: item.id, text: item.value.toUpperCase() }));\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'CAT, DOG'",
            "Renders 'cat, dog'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'name' property in a custom directive's binding object?",
        "o": [
            "Provides the name of the directive without the 'v-' prefix",
            "Holds the directive's evaluated value",
            "Contains the directive's modifiers",
            "Stores the element's tag name"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a boolean value?",
        "c": "<template>\n  <div v-visibility='isVisible'>Content</div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const isVisible = ref(true);\n      return { isVisible };\n    },\n    directives: {\n      visibility: {\n        bind(el, binding) {\n          el.style.display = binding.value ? 'block' : 'none';\n        },\n        update(el, binding) {\n          el.style.display = binding.value ? 'block' : 'none';\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Content' with display block",
            "Renders 'Content' with display none",
            "Throws an error",
            "Renders without styling"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic attribute to a custom component with a hyphenated name?",
        "o": [
            "v-bind:[attr-name]",
            "v-on:[attr-name]",
            "v-model:[attr-name]",
            "v-if:[attr-name]"
        ]
    },
    {
        "q": "What is the output of the following code using v-once with a method?",
        "c": "<template>\n  <div v-once>{{ getCount() }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return { count: 5 };\n    },\n    methods: {\n      getCount() {\n        return this.count;\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders '5' and does not update",
            "Renders '5' and updates on count change",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .left.exact modifier when used with v-on for mouse events?",
        "o": [
            "Triggers only when the left mouse button is pressed without other modifiers",
            "Triggers on any left mouse button press",
            "Prevents the left mouse event from bubbling",
            "Restricts the left mouse event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and slicing?",
        "c": "<template>\n  <ul>\n    <li v-for='item in slicedItems' :key='item'>{{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: ['A', 'B', 'C', 'D'] };\n    },\n    computed: {\n      slicedItems() {\n        return this.items.slice(0, 2);\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'A, B'",
            "Renders 'A, B, C, D'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called when the element is inserted into its parent DOM?",
        "o": [
            "inserted",
            "bind",
            "update",
            "beforeMount"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a title attribute?",
        "o": [
            "Dynamically binds a tooltip title to an element",
            "Triggers a title-related event",
            "Conditionally renders the title attribute",
            "Loops through title values"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a mouseover event?",
        "c": "<template>\n  <div @mouseover='handleMouseOver'>Hover Me</div>\n</template>\n<script>\n  export default {\n    methods: {\n      handleMouseOver() {\n        console.log('Mouse hovered');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Mouse hovered' on mouseover",
            "Logs 'Mouse hovered' on any mouse event",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the effect of using the v-pre directive with a dynamic binding in Vue.js?",
        "o": [
            "Renders the binding as raw text, ignoring Vue compilation",
            "Processes the binding as a Vue expression",
            "Caches the binding for performance",
            "Causes a compilation error"
        ]
    },
    {
        "q": "What is the output of the following code using v-html with a computed property?",
        "c": "<template>\n  <div v-html='formattedText'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return { text: 'Vue' };\n    },\n    computed: {\n      formattedText() {\n        return `<b>${this.text}</b>`;\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Vue' in bold",
            "Renders '<b>Vue</b>' as plain text",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when the PageDown key is pressed without other modifiers?",
        "o": [
            ".page-down.exact",
            ".page-down",
            ".exact.page-down",
            ".strict.page-down"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a computed property and unique filtering?",
        "c": "<template>\n  <ul>\n    <li v-for='item in uniqueItems' :key='item'>{{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: ['a', 'b', 'a', 'c'] };\n    },\n    computed: {\n      uniqueItems() {\n        return [...new Set(this.items)];\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'a, b, c'",
            "Renders 'a, b, a, c'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'rawName' property in a custom directive's binding object?",
        "o": [
            "Provides the full directive name including 'v-' prefix",
            "Holds the evaluated directive value",
            "Contains the directive's modifiers",
            "Stores the element's tag name"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a dynamic value and conditional logic?",
        "c": "<template>\n  <div v-shadow='shadowValue'>Shadowed</div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const shadowValue = ref(true);\n      return { shadowValue };\n    },\n    directives: {\n      shadow: {\n        bind(el, binding) {\n          el.style.boxShadow = binding.value ? '2px 2px 5px rgba(0,0,0,0.3)' : 'none';\n        },\n        update(el, binding) {\n          el.style.boxShadow = binding.value ? '2px 2px 5px rgba(0,0,0,0.3)' : 'none';\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders with a box shadow",
            "Renders without a box shadow",
            "Throws an error",
            "Renders with a default shadow"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic prop to a component using a computed property?",
        "o": [
            "v-bind:[propName]",
            "v-on:[propName]",
            "v-model:[propName]",
            "v-if:[propName]"
        ]
    },
    {
        "q": "What is the output of the following code using v-text with a reactive object?",
        "c": "<template>\n  <div v-text='state.message'></div>\n</template>\n<script>\n  import { reactive } from 'vue';\n  export default {\n    setup() {\n      const state = reactive({ message: 'Hello World' });\n      return { state };\n    }\n  }\n</script>",
        "o": [
            "Renders 'Hello World'",
            "Renders 'state.message'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .home.exact modifier when used with v-on for key events?",
        "o": [
            "Triggers only when the Home key is pressed without other modifiers",
            "Triggers on any Home key press",
            "Prevents the Home key event from bubbling",
            "Restricts the Home key event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and concatenation?",
        "c": "<template>\n  <ul>\n    <li v-for='item in combinedItems' :key='item'>{{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { list1: ['A', 'B'], list2: ['C'] };\n    },\n    computed: {\n      combinedItems() {\n        return [...this.list1, ...this.list2];\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'A, B, C'",
            "Renders 'A, B'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called when the directive's value or bindings change?",
        "o": [
            "update",
            "bind",
            "inserted",
            "beforeMount"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a role attribute for accessibility?",
        "o": [
            "Dynamically binds an accessibility role to an element",
            "Triggers a role-related event",
            "Conditionally renders the role attribute",
            "Loops through role values"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a mouseleave event?",
        "c": "<template>\n  <div @mouseleave='handleMouseLeave'>Leave Me</div>\n</template>\n<script>\n  export default {\n    methods: {\n      handleMouseLeave() {\n        console.log('Mouse left');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Mouse left' when the mouse leaves the div",
            "Logs 'Mouse left' on any mouse event",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the effect of using the v-once directive with a v-html binding in Vue.js?",
        "o": [
            "Renders the HTML content once and ignores subsequent updates",
            "Updates the HTML content on every data change",
            "Prevents HTML rendering for security",
            "Causes a compilation error"
        ]
    },
    {
        "q": "What is the output of the following code using v-text with a dynamic method?",
        "c": "<template>\n  <div v-text='getDynamicText()'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return { prefix: 'Vue', suffix: 'Rocks' };\n    },\n    methods: {\n      getDynamicText() {\n        return `${this.prefix} ${this.suffix}`;\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Vue Rocks'",
            "Renders 'prefix suffix'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when the End key is pressed without other modifiers?",
        "o": [
            ".end.exact",
            ".end",
            ".exact.end",
            ".strict.end"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a computed property and conditional mapping?",
        "c": "<template>\n  <ul>\n    <li v-for='item in filteredItems' :key='item.id'>{{ item.name }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [{ id: 1, name: 'Apple', active: true }, { id: 2, name: 'Banana', active: false }] };\n    },\n    computed: {\n      filteredItems() {\n        return this.items.filter(item => item.active).map(item => ({ id: item.id, name: item.name.toUpperCase() }));\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'APPLE'",
            "Renders 'APPLE, BANANA'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'isCustomElement' property in a custom directive's binding object?",
        "o": [
            "Indicates if the bound element is a custom element",
            "Holds the directive's evaluated value",
            "Contains the directive's modifiers",
            "Stores the element's tag name"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a dynamic array value?",
        "c": "<template>\n  <div v-style='styles'>Styled Content</div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const styles = ref(['color: blue', 'font-weight: bold']);\n      return { styles };\n    },\n    directives: {\n      style: {\n        bind(el, binding) {\n          el.style.cssText = binding.value.join(';');\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders with blue text and bold font",
            "Renders with default styling",
            "Throws an error",
            "Renders without styling"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic attribute to a native HTML element with a computed name?",
        "o": [
            "v-bind:[attrName]",
            "v-on:[attrName]",
            "v-model:[attrName]",
            "v-if:[attrName]"
        ]
    },
    {
        "q": "What is the output of the following code using v-html with a reactive reference?",
        "c": "<template>\n  <div v-html='content.value'></div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const content = ref('<p>Hello Vue</p>');\n      return { content };\n    }\n  }\n</script>",
        "o": [
            "Renders a paragraph with 'Hello Vue'",
            "Renders '<p>Hello Vue</p>' as plain text",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .insert.exact modifier when used with v-on for key events?",
        "o": [
            "Triggers only when the Insert key is pressed without other modifiers",
            "Triggers on any Insert key press",
            "Prevents the Insert key event from bubbling",
            "Restricts the Insert key event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and object transformation?",
        "c": "<template>\n  <ul>\n    <li v-for='item in transformedItems' :key='item.key'>{{ item.label }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [{ key: 'a', value: 'Apple' }, { key: 'b', value: 'Banana' }] };\n    },\n    computed: {\n      transformedItems() {\n        return this.items.map(item => ({ key: item.key, label: item.value + '!' }));\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Apple!, Banana!'",
            "Renders 'Apple, Banana'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called before the element is unbound from the DOM?",
        "o": [
            "beforeUnmount",
            "unmounted",
            "bind",
            "update"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a data-test attribute for testing?",
        "o": [
            "Dynamically binds a test identifier to an element",
            "Triggers a test-related event",
            "Conditionally renders the test attribute",
            "Loops through test attributes"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a mousedown event?",
        "c": "<template>\n  <div @mousedown='handleMouseDown'>Click Me</div>\n</template>\n<script>\n  export default {\n    methods: {\n      handleMouseDown() {\n        console.log('Mouse down');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Mouse down' on mouse button press",
            "Logs 'Mouse down' on any mouse event",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the effect of using the v-pre directive with a v-bind attribute in Vue.js?",
        "o": [
            "Renders the v-bind attribute as plain text without processing",
            "Processes the v-bind attribute as a dynamic binding",
            "Caches the attribute for performance",
            "Causes a compilation error"
        ]
    },
    {
        "q": "What is the output of the following code using v-text with a computed property and conditional logic?",
        "c": "<template>\n  <div v-text='displayText'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return { status: 'active' };\n    },\n    computed: {\n      displayText() {\n        return this.status === 'active' ? 'Online' : 'Offline';\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Online'",
            "Renders 'Offline'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when the ArrowLeft key is pressed without other modifiers?",
        "o": [
            ".left.exact",
            ".arrow-left",
            ".exact.left",
            ".strict.left"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a computed property and array reversal?",
        "c": "<template>\n  <ul>\n    <li v-for='item in reversedItems' :key='item.id'>{{ item.name }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [{ id: 1, name: 'Apple' }, { id: 2, name: 'Banana' }, { id: 3, name: 'Cherry' }] };\n    },\n    computed: {\n      reversedItems() {\n        return [...this.items].reverse();\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Cherry, Banana, Apple'",
            "Renders 'Apple, Banana, Cherry'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'isInline' property in a custom directive's binding object?",
        "o": [
            "Indicates if the directive is used in an inline template",
            "Holds the directive's evaluated value",
            "Contains the directive's modifiers",
            "Stores the element's inline styles"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a reactive object?",
        "c": "<template>\n  <div v-format='styleObject'>Formatted</div>\n</template>\n<script>\n  import { reactive } from 'vue';\n  export default {\n    setup() {\n      const styleObject = reactive({ color: 'purple', fontSize: '18px' });\n      return { styleObject };\n    },\n    directives: {\n      format: {\n        bind(el, binding) {\n          Object.assign(el.style, binding.value);\n        },\n        update(el, binding) {\n          Object.assign(el.style, binding.value);\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders with purple text and 18px font size",
            "Renders with default styling",
            "Throws an error",
            "Renders without styling"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic prop to a component using a method?",
        "o": [
            "v-bind:[getPropName()]",
            "v-on:[getPropName()]",
            "v-model:[getPropName()]",
            "v-if:[getPropName()]"
        ]
    },
    {
        "q": "What is the output of the following code using v-html with a method and conditional logic?",
        "c": "<template>\n  <div v-html='getContent()'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return { isBold: true };\n    },\n    methods: {\n      getContent() {\n        return this.isBold ? '<b>Bold Text</b>' : '<i>Italic Text</i>';\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Bold Text' in bold",
            "Renders 'Italic Text' in italic",
            "Renders '<b>Bold Text</b>' as plain text",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .right.exact modifier when used with v-on for mouse events?",
        "o": [
            "Triggers only when the right mouse button is pressed without other modifiers",
            "Triggers on any right mouse button press",
            "Prevents the right mouse event from bubbling",
            "Restricts the right mouse event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and grouping?",
        "c": "<template>\n  <ul>\n    <li v-for='group in groupedItems' :key='group.key'>{{ group.values.join(', ') }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [{ key: 'fruit', value: 'Apple' }, { key: 'fruit', value: 'Banana' }, { key: 'vegetable', value: 'Carrot' }] };\n    },\n    computed: {\n      groupedItems() {\n        const groups = {};\n        this.items.forEach(item => {\n          if (!groups[item.key]) groups[item.key] = { key: item.key, values: [] };\n          groups[item.key].values.push(item.value);\n        });\n        return Object.values(groups);\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Apple, Banana', 'Carrot'",
            "Renders 'Apple, Banana, Carrot'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called when the component's VNode is updated but not necessarily re-rendered?",
        "o": [
            "componentUpdated",
            "beforeUpdate",
            "inserted",
            "bind"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a custom data attribute for analytics?",
        "o": [
            "Dynamically binds a data attribute for tracking purposes",
            "Triggers an analytics-related event",
            "Conditionally renders the data attribute",
            "Loops through data attributes"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a keydown event?",
        "c": "<template>\n  <input @keydown='handleKeyDown' placeholder='Type Here' />\n</template>\n<script>\n  export default {\n    methods: {\n      handleKeyDown() {\n        console.log('Key pressed');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Key pressed' on any key press",
            "Logs 'Key pressed' only on specific keys",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the effect of using the v-cloak directive with a CSS rule in Vue.js?",
        "o": [
            "Hides the element until Vue compilation is complete, then removes the v-cloak attribute",
            "Applies a permanent CSS style to the element",
            "Triggers a one-time rendering of the element",
            "Caches the element's content for performance"
        ]
    },
    {
        "q": "What is the output of the following code using v-html with a reactive array?",
        "c": "<template>\n  <div v-html='listContent.value'></div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const listContent = ref('<ul><li>Item 1</li><li>Item 2</li></ul>');\n      return { listContent };\n    }\n  }\n</script>",
        "o": [
            "Renders an unordered list with 'Item 1' and 'Item 2'",
            "Renders '<ul><li>Item 1</li><li>Item 2</li></ul>' as plain text",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when the ArrowRight key is pressed without other modifiers?",
        "o": [
            ".right.exact",
            ".arrow-right",
            ".exact.right",
            ".strict.right"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a computed property and object filtering?",
        "c": "<template>\n  <ul>\n    <li v-for='item in filteredItems' :key='item.id'>{{ item.name }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [{ id: 1, name: 'Apple', type: 'fruit' }, { id: 2, name: 'Carrot', type: 'vegetable' }, { id: 3, name: 'Banana', type: 'fruit' }] };\n    },\n    computed: {\n      filteredItems() {\n        return this.items.filter(item => item.type === 'fruit');\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Apple, Banana'",
            "Renders 'Apple, Carrot, Banana'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'vnode' parameter in a custom directive's componentUpdated hook?",
        "o": [
            "Provides access to the current virtual node of the bound element",
            "Holds the previous virtual node of the element",
            "Contains the directive's current binding value",
            "Stores the element's attributes"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a dynamic modifier and computed value?",
        "c": "<template>\n  <div v-transform:[property].scale='size'>Transformed</div>\n</template>\n<script>\n  export default {\n    data() {\n      return { property: 'scale', size: 1.5 };\n    },\n    directives: {\n      transform: {\n        bind(el, binding) {\n          if (binding.modifiers.scale) {\n            el.style.transform = `${binding.arg}(${binding.value})`;\n          }\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders with a scale transform of 1.5",
            "Renders without any transform",
            "Throws an error",
            "Renders with a default transform"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic attribute to an element with a computed property name?",
        "o": [
            "v-bind:[getAttrName()]",
            "v-on:[getAttrName()]",
            "v-model:[getAttrName()]",
            "v-if:[getAttrName()]"
        ]
    },
    {
        "q": "What is the output of the following code using v-text with a reactive reference and method?",
        "c": "<template>\n  <div v-text='getStatusText()'></div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const status = ref('on');\n      const getStatusText = () => status.value === 'on' ? 'Active' : 'Inactive';\n      return { status, getStatusText };\n    }\n  }\n</script>",
        "o": [
            "Renders 'Active'",
            "Renders 'Inactive'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .f1.exact modifier when used with v-on for key events?",
        "o": [
            "Triggers only when the F1 key is pressed without other modifiers",
            "Triggers on any F1 key press",
            "Prevents the F1 key event from bubbling",
            "Restricts the F1 key event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and dynamic slicing?",
        "c": "<template>\n  <ul>\n    <li v-for='item in slicedItems' :key='item'>{{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: ['A', 'B', 'C', 'D', 'E'], limit: 3 };\n    },\n    computed: {\n      slicedItems() {\n        return this.items.slice(0, this.limit);\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'A, B, C'",
            "Renders 'A, B, C, D, E'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called after the directive is initially bound to the element?",
        "o": [
            "inserted",
            "bind",
            "update",
            "beforeMount"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a custom attribute for styling?",
        "o": [
            "Dynamically binds a custom styling attribute to an element",
            "Triggers a style-related event",
            "Conditionally renders the style attribute",
            "Loops through style attributes"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a mouseup event?",
        "c": "<template>\n  <div @mouseup='handleMouseUp'>Release Me</div>\n</template>\n<script>\n  export default {\n    methods: {\n      handleMouseUp() {\n        console.log('Mouse released');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Mouse released' on mouse button release",
            "Logs 'Mouse released' on any mouse event",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the effect of combining v-once with v-pre in a Vue.js template?",
        "o": [
            "Renders the content once as raw text, ignoring Vue compilation",
            "Renders the content once and updates on data changes",
            "Causes a compilation error",
            "Caches the content for performance"
        ]
    },
    {
        "q": "What is the output of the following code using v-text with a reactive computed property?",
        "c": "<template>\n  <div v-text='statusText'></div>\n</template>\n<script>\n  import { ref, computed } from 'vue';\n  export default {\n    setup() {\n      const isActive = ref(true);\n      const statusText = computed(() => isActive.value ? 'Enabled' : 'Disabled');\n      return { statusText };\n    }\n  }\n</script>",
        "o": [
            "Renders 'Enabled'",
            "Renders 'Disabled'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when the Tab key is pressed with Ctrl and no other modifiers?",
        "o": [
            ".tab.ctrl.exact",
            ".ctrl.tab",
            ".tab.ctrl",
            ".strict.tab.ctrl"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a computed property and conditional transformation?",
        "c": "<template>\n  <ul>\n    <li v-for='item in processedItems' :key='item.id'>{{ item.label }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [{ id: 1, value: 5 }, { id: 2, value: 15 }] };\n    },\n    computed: {\n      processedItems() {\n        return this.items.map(item => ({ id: item.id, label: item.value > 10 ? 'High' : 'Low' }));\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Low, High'",
            "Renders '5, 15'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'modifiers' property in a custom directive's binding object when used with multiple modifiers?",
        "o": [
            "Provides an object with boolean flags for each modifier",
            "Holds the directive's evaluated value",
            "Contains the element's attributes",
            "Stores the directive's raw expression"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a reactive value and multiple modifiers?",
        "c": "<template>\n  <div v-decorate.bold.underline='color'>Decorated</div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const color = ref('green');\n      return { color };\n    },\n    directives: {\n      decorate: {\n        bind(el, binding) {\n          el.style.color = binding.value;\n          if (binding.modifiers.bold) el.style.fontWeight = 'bold';\n          if (binding.modifiers.underline) el.style.textDecoration = 'underline';\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders with green text, bold, and underlined",
            "Renders with green text only",
            "Throws an error",
            "Renders without styling"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic attribute to an element using a reactive reference?",
        "o": [
            "v-bind:[attr.value]",
            "v-on:[attr.value]",
            "v-model:[attr.value]",
            "v-if:[attr.value]"
        ]
    },
    {
        "q": "What is the output of the following code using v-html with a computed property and sanitization?",
        "c": "<template>\n  <div v-html='safeContent'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return { rawContent: '<script>alert(\"test\")</script><p>Safe</p>' };\n    },\n    computed: {\n      safeContent() {\n        return this.rawContent.replace(/<script.*?>.*?</script>/g, '');\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders a paragraph with 'Safe'",
            "Renders '<script>alert(\"test\")</script><p>Safe</p>' as plain text",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .enter.exact modifier when used with v-on for key events?",
        "o": [
            "Triggers only when the Enter key is pressed without other modifiers",
            "Triggers on any Enter key press",
            "Prevents the Enter key event from bubbling",
            "Restricts the Enter key event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and array chunking?",
        "c": "<template>\n  <ul>\n    <li v-for='chunk in chunkedItems' :key='chunk[0]'>{{ chunk.join(', ') }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [1, 2, 3, 4] };\n    },\n    computed: {\n      chunkedItems() {\n        const result = [];\n        for (let i = 0; i < this.items.length; i += 2) {\n          result.push(this.items.slice(i, i + 2));\n        }\n        return result;\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders '1, 2', '3, 4'",
            "Renders '1, 2, 3, 4'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called just before the directive's value is updated?",
        "o": [
            "beforeUpdate",
            "update",
            "inserted",
            "bind"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a custom event attribute?",
        "o": [
            "Dynamically binds a custom event attribute to an element",
            "Triggers a custom event",
            "Conditionally renders the event attribute",
            "Loops through event attributes"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a mouseenter event?",
        "c": "<template>\n  <div @mouseenter='handleMouseEnter'>Enter Me</div>\n</template>\n<script>\n  export default {\n    methods: {\n      handleMouseEnter() {\n        console.log('Mouse entered');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Mouse entered' when the mouse enters the div",
            "Logs 'Mouse entered' on any mouse event",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the effect of using the v-html directive with a computed property containing script tags?",
        "o": [
            "Renders the HTML but executes script tags, posing a security risk",
            "Automatically sanitizes and removes script tags",
            "Renders the content as plain text",
            "Throws a compilation error"
        ]
    },
    {
        "q": "What is the output of the following code using v-text with a reactive array join?",
        "c": "<template>\n  <div v-text='listText.value'></div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const listText = ref(['Vue', 'is', 'great'].join(' '));\n      return { listText };\n    }\n  }\n</script>",
        "o": [
            "Renders 'Vue is great'",
            "Renders 'Vue, is, great'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when the ArrowUp key is pressed with Alt and no other modifiers?",
        "o": [
            ".up.alt.exact",
            ".alt.up",
            ".up.alt",
            ".strict.up.alt"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a computed property and object sorting?",
        "c": "<template>\n  <ul>\n    <li v-for='item in sortedItems' :key='item.id'>{{ item.name }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [{ id: 1, name: 'Banana' }, { id: 2, name: 'Apple' }, { id: 3, name: 'Cherry' }] };\n    },\n    computed: {\n      sortedItems() {\n        return [...this.items].sort((a, b) => a.name.localeCompare(b.name));\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Apple, Banana, Cherry'",
            "Renders 'Banana, Apple, Cherry'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'is' property in a custom directive's binding object?",
        "o": [
            "Indicates the component name for dynamic components",
            "Holds the directive's evaluated value",
            "Contains the directive's modifiers",
            "Stores the element's tag name"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a reactive boolean and modifier?",
        "c": "<template>\n  <div v-toggle.visible='isShown'>Toggle</div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const isShown = ref(false);\n      return { isShown };\n    },\n    directives: {\n      toggle: {\n        bind(el, binding) {\n          if (binding.modifiers.visible) {\n            el.style.visibility = binding.value ? 'visible' : 'hidden';\n          }\n        },\n        update(el, binding) {\n          if (binding.modifiers.visible) {\n            el.style.visibility = binding.value ? 'visible' : 'hidden';\n          }\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders with visibility hidden",
            "Renders with visibility visible",
            "Throws an error",
            "Renders without visibility styling"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic prop to a component with a computed property value?",
        "o": [
            "v-bind:[propName()]",
            "v-on:[propName()]",
            "v-model:[propName()]",
            "v-if:[propName()]"
        ]
    },
    {
        "q": "What is the output of the following code using v-text with a method and conditional logic?",
        "c": "<template>\n  <div v-text='getStatus()'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return { isOnline: false };\n    },\n    methods: {\n      getStatus() {\n        return this.isOnline ? 'Online' : 'Offline';\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Offline'",
            "Renders 'Online'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .f2.exact modifier when used with v-on for key events?",
        "o": [
            "Triggers only when the F2 key is pressed without other modifiers",
            "Triggers on any F2 key press",
            "Prevents the F2 key event from bubbling",
            "Restricts the F2 key event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and array deduplication?",
        "c": "<template>\n  <ul>\n    <li v-for='item in uniqueItems' :key='item'>{{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: ['A', 'B', 'A', 'C', 'B'] };\n    },\n    computed: {\n      uniqueItems() {\n        return [...new Set(this.items)];\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'A, B, C'",
            "Renders 'A, B, A, C, B'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called after the element is inserted into the parent DOM?",
        "o": [
            "inserted",
            "bind",
            "update",
            "beforeMount"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a custom data attribute for state tracking?",
        "o": [
            "Dynamically binds a data attribute for state management",
            "Triggers a state-related event",
            "Conditionally renders the data attribute",
            "Loops through state attributes"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a contextmenu event?",
        "c": "<template>\n  <div @contextmenu='handleContextMenu'>Right Click</div>\n</template>\n<script>\n  export default {\n    methods: {\n      handleContextMenu() {\n        console.log('Context menu opened');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Context menu opened' on right-click",
            "Logs 'Context menu opened' on any click",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the effect of using the v-pre directive with a v-model binding in Vue.js?",
        "o": [
            "Renders the v-model binding as raw text, ignoring Vue processing",
            "Processes the v-model binding for two-way data binding",
            "Causes a compilation error",
            "Caches the v-model binding for performance"
        ]
    },
    {
        "q": "What is the output of the following code using v-text with a reactive computed property and string manipulation?",
        "c": "<template>\n  <div v-text='formattedName'></div>\n</template>\n<script>\n  import { ref, computed } from 'vue';\n  export default {\n    setup() {\n      const name = ref('john');\n      const formattedName = computed(() => name.value.charAt(0).toUpperCase() + name.value.slice(1));\n      return { formattedName };\n    }\n  }\n</script>",
        "o": [
            "Renders 'John'",
            "Renders 'john'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when the Space key is pressed with Shift and no other modifiers?",
        "o": [
            ".space.shift.exact",
            ".shift.space",
            ".space.shift",
            ".strict.space.shift"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a computed property and array filtering with multiple conditions?",
        "c": "<template>\n  <ul>\n    <li v-for='item in filteredItems' :key='item.id'>{{ item.name }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [{ id: 1, name: 'Apple', price: 10 }, { id: 2, name: 'Banana', price: 20 }, { id: 3, name: 'Cherry', price: 15 }] };\n    },\n    computed: {\n      filteredItems() {\n        return this.items.filter(item => item.price > 12 && item.name.startsWith('B'));\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Banana'",
            "Renders 'Apple, Banana, Cherry'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'oldValue' property in a custom directive's componentUpdated hook?",
        "o": [
            "Provides the previous value of the directive's binding",
            "Holds the current value of the directive's binding",
            "Contains the directive's modifiers",
            "Stores the element's previous virtual node"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a dynamic value and multiple modifiers?",
        "c": "<template>\n  <div v-style.bold.italic='textStyle'>Styled</div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const textStyle = ref('red');\n      return { textStyle };\n    },\n    directives: {\n      style: {\n        bind(el, binding) {\n          el.style.color = binding.value;\n          if (binding.modifiers.bold) el.style.fontWeight = 'bold';\n          if (binding.modifiers.italic) el.style.fontStyle = 'italic';\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders with red text, bold, and italic",
            "Renders with red text only",
            "Throws an error",
            "Renders without styling"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic attribute to an element using a computed property?",
        "o": [
            "v-bind:[getAttr()]",
            "v-on:[getAttr()]",
            "v-model:[getAttr()]",
            "v-if:[getAttr()]"
        ]
    },
    {
        "q": "What is the output of the following code using v-html with a reactive method return?",
        "c": "<template>\n  <div v-html='getDynamicHtml()'></div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const isActive = ref(true);\n      const getDynamicHtml = () => isActive.value ? '<span>Active</span>' : '<span>Inactive</span>';\n      return { getDynamicHtml };\n    }\n  }\n</script>",
        "o": [
            "Renders 'Active' in a span",
            "Renders 'Inactive' in a span",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .f3.exact modifier when used with v-on for key events?",
        "o": [
            "Triggers only when the F3 key is pressed without other modifiers",
            "Triggers on any F3 key press",
            "Prevents the F3 key event from bubbling",
            "Restricts the F3 key event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and array partitioning?",
        "c": "<template>\n  <ul>\n    <li v-for='group in partitionedItems' :key='group[0]'>{{ group.join(', ') }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [1, 2, 3, 4, 5] };\n    },\n    computed: {\n      partitionedItems() {\n        return [this.items.slice(0, 3), this.items.slice(3)];\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders '1, 2, 3', '4, 5'",
            "Renders '1, 2, 3, 4, 5'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called after the component's virtual node is updated?",
        "o": [
            "componentUpdated",
            "beforeUpdate",
            "inserted",
            "bind"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a custom attribute for metadata?",
        "o": [
            "Dynamically binds a metadata attribute to an element",
            "Triggers a metadata-related event",
            "Conditionally renders the metadata attribute",
            "Loops through metadata attributes"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a keyup event?",
        "c": "<template>\n  <input @keyup='handleKeyUp' placeholder='Type Here' />\n</template>\n<script>\n  export default {\n    methods: {\n      handleKeyUp() {\n        console.log('Key released');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Key released' on any key release",
            "Logs 'Key released' only on specific keys",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the effect of using the v-once directive with a v-slot directive in Vue.js?",
        "o": [
            "Renders the slot content once and prevents further updates",
            "Updates the slot content on every data change",
            "Causes a compilation error due to conflicting directives",
            "Ignores the v-slot directive"
        ]
    },
    {
        "q": "What is the output of the following code using v-text with a reactive computed property and string truncation?",
        "c": "<template>\n  <div v-text='truncatedText'></div>\n</template>\n<script>\n  import { ref, computed } from 'vue';\n  export default {\n    setup() {\n      const text = ref('This is a long string');\n      const truncatedText = computed(() => text.value.length > 10 ? text.value.slice(0, 10) + '...' : text.value);\n      return { truncatedText };\n    }\n  }\n</script>",
        "o": [
            "Renders 'This is a ...'",
            "Renders 'This is a long string'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when the CapsLock key is pressed without other modifiers?",
        "o": [
            ".capslock.exact",
            ".caps-lock",
            ".exact.capslock",
            ".strict.capslock"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a computed property and array grouping by property?",
        "c": "<template>\n  <ul>\n    <li v-for='group in groupedItems' :key='group.category'>{{ group.category }}: {{ group.items.join(', ') }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [{ name: 'Apple', category: 'fruit' }, { name: 'Carrot', category: 'vegetable' }, { name: 'Banana', category: 'fruit' }] };\n    },\n    computed: {\n      groupedItems() {\n        const groups = {};\n        this.items.forEach(item => {\n          if (!groups[item.category]) groups[item.category] = { category: item.category, items: [] };\n          groups[item.category].items.push(item.name);\n        });\n        return Object.values(groups);\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'fruit: Apple, Banana', 'vegetable: Carrot'",
            "Renders 'Apple, Carrot, Banana'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'directives' property in a custom directive's binding object?",
        "o": [
            "Provides access to other directives on the same element",
            "Holds the directive's evaluated value",
            "Contains the element's attributes",
            "Stores the directive's modifiers"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a reactive array and modifier?",
        "c": "<template>\n  <div v-border.thick='borderStyles'>Bordered</div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const borderStyles = ref(['2px', 'solid', 'black']);\n      return { borderStyles };\n    },\n    directives: {\n      border: {\n        bind(el, binding) {\n          el.style.border = binding.value.join(' ');\n          if (binding.modifiers.thick) el.style.borderWidth = '4px';\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders with a 4px solid black border",
            "Renders with a 2px solid black border",
            "Throws an error",
            "Renders without a border"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic slot to a component using a computed property?",
        "o": [
            "v-slot:[slotName()]",
            "v-bind:[slotName()]",
            "v-model:[slotName()]",
            "v-if:[slotName()]"
        ]
    },
    {
        "q": "What is the output of the following code using v-html with a method and array mapping?",
        "c": "<template>\n  <div v-html='getListHtml()'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: ['Item 1', 'Item 2'] };\n    },\n    methods: {\n      getListHtml() {\n        return '<ul>' + this.items.map(item => `<li>${item}</li>`).join('') + '</ul>';\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders an unordered list with 'Item 1', 'Item 2'",
            "Renders '<ul><li>Item 1</li><li>Item 2</li></ul>' as plain text",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .num-lock.exact modifier when used with v-on for key events?",
        "o": [
            "Triggers only when the NumLock key is pressed without other modifiers",
            "Triggers on any NumLock key press",
            "Prevents the NumLock key event from bubbling",
            "Restricts the NumLock key event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and array flattening?",
        "c": "<template>\n  <ul>\n    <li v-for='item in flatItems' :key='item'>{{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { nestedItems: [['A', 'B'], ['C'], ['D', 'E']] };\n    },\n    computed: {\n      flatItems() {\n        return this.nestedItems.flat();\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'A, B, C, D, E'",
            "Renders '[A, B], [C], [D, E]'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called when the element is about to be inserted into the DOM?",
        "o": [
            "beforeMount",
            "inserted",
            "bind",
            "update"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a custom attribute for animation?",
        "o": [
            "Dynamically binds an animation-related attribute to an element",
            "Triggers an animation event",
            "Conditionally renders the animation attribute",
            "Loops through animation attributes"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a wheel event and passive modifier?",
        "c": "<template>\n  <div @wheel.passive='handleWheel'>Scroll Me</div>\n</template>\n<script>\n  export default {\n    methods: {\n      handleWheel() {\n        console.log('Wheel scrolled');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Wheel scrolled' on mouse wheel movement without preventing default",
            "Logs 'Wheel scrolled' and prevents default scrolling",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the effect of using the v-pre directive with a v-on event binding in Vue.js?",
        "o": [
            "Renders the v-on binding as raw text without processing the event",
            "Processes the v-on binding as an event listener",
            "Causes a compilation error due to conflicting directives",
            "Caches the event binding for performance"
        ]
    },
    {
        "q": "What is the output of the following code using v-text with a reactive computed property and string padding?",
        "c": "<template>\n  <div v-text='paddedText'></div>\n</template>\n<script>\n  import { ref, computed } from 'vue';\n  export default {\n    setup() {\n      const text = ref('Vue');\n      const paddedText = computed(() => text.value.padEnd(10, '*'));\n      return { paddedText };\n    }\n  }\n</script>",
        "o": [
            "Renders 'Vue*******'",
            "Renders 'Vue'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when the ScrollLock key is pressed without other modifiers?",
        "o": [
            ".scroll-lock.exact",
            ".scrolllock",
            ".exact.scroll-lock",
            ".strict.scroll-lock"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a computed property and array reduction?",
        "c": "<template>\n  <ul>\n    <li v-for='item in summarizedItems' :key='item.key'>{{ item.total }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [{ key: 'A', value: 10 }, { key: 'A', value: 20 }, { key: 'B', value: 15 }] };\n    },\n    computed: {\n      summarizedItems() {\n        const summary = {};\n        this.items.forEach(item => {\n          if (!summary[item.key]) summary[item.key] = { key: item.key, total: 0 };\n          summary[item.key].total += item.value;\n        });\n        return Object.values(summary);\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders '30, 15'",
            "Renders '10, 20, 15'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'context' parameter in a custom directive's hooks in Vue 3?",
        "o": [
            "Provides access to the Vue instance or component context",
            "Holds the directive's current binding value",
            "Contains the element's attributes",
            "Stores the directive's modifiers"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a reactive number value and modifier?",
        "c": "<template>\n  <div v-resize.large='fontSize'>Resized</div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const fontSize = ref(16);\n      return { fontSize };\n    },\n    directives: {\n      resize: {\n        bind(el, binding) {\n          el.style.fontSize = `${binding.value}px`;\n          if (binding.modifiers.large) el.style.fontSize = `${binding.value * 1.5}px`;\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders with a 24px font size",
            "Renders with a 16px font size",
            "Throws an error",
            "Renders without font size styling"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic slot to a component using a reactive reference?",
        "o": [
            "v-slot:[slot.value]",
            "v-bind:[slot.value]",
            "v-model:[slot.value]",
            "v-if:[slot.value]"
        ]
    },
    {
        "q": "What is the output of the following code using v-html with a method and string concatenation?",
        "c": "<template>\n  <div v-html='getFormattedHtml()'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return { prefix: 'Welcome to ', suffix: 'Vue' };\n    },\n    methods: {\n      getFormattedHtml() {\n        return `<strong>${this.prefix}${this.suffix}</strong>`;\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Welcome to Vue' in bold",
            "Renders '<strong>Welcome to Vue</strong>' as plain text",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .pause.exact modifier when used with v-on for key events?",
        "o": [
            "Triggers only when the Pause key is pressed without other modifiers",
            "Triggers on any Pause key press",
            "Prevents the Pause key event from bubbling",
            "Restricts the Pause key event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and array mapping with indices?",
        "c": "<template>\n  <ul>\n    <li v-for='item in indexedItems' :key='item.index'>{{ item.value }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: ['X', 'Y', 'Z'] };\n    },\n    computed: {\n      indexedItems() {\n        return this.items.map((value, index) => ({ index, value: `${value}-${index}` }));\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'X-0, Y-1, Z-2'",
            "Renders 'X, Y, Z'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called when the directive is initially bound to the element?",
        "o": [
            "bind",
            "inserted",
            "update",
            "beforeMount"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a custom attribute for accessibility labels?",
        "o": [
            "Dynamically binds an accessibility label attribute to an element",
            "Triggers an accessibility-related event",
            "Conditionally renders the accessibility attribute",
            "Loops through accessibility attributes"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a touchend event?",
        "c": "<template>\n  <div @touchend='handleTouchEnd'>Touch Me</div>\n</template>\n<script>\n  export default {\n    methods: {\n      handleTouchEnd() {\n        console.log('Touch ended');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Touch ended' when the touch is released",
            "Logs 'Touch ended' on any touch event",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the effect of using the v-pre directive with a v-if directive in Vue.js?",
        "o": [
            "Renders the v-if directive as raw text without processing the condition",
            "Processes the v-if directive and conditionally renders the element",
            "Causes a compilation error due to conflicting directives",
            "Caches the v-if condition for performance"
        ]
    },
    {
        "q": "What is the output of the following code using v-text with a reactive computed property and string replacement?",
        "c": "<template>\n  <div v-text='replacedText'></div>\n</template>\n<script>\n  import { ref, computed } from 'vue';\n  export default {\n    setup() {\n      const text = ref('Hello World');\n      const replacedText = computed(() => text.value.replace('World', 'Vue'));\n      return { replacedText };\n    }\n  }\n</script>",
        "o": [
            "Renders 'Hello Vue'",
            "Renders 'Hello World'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when the F4 key is pressed without other modifiers?",
        "o": [
            ".f4.exact",
            ".f4",
            ".exact.f4",
            ".strict.f4"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a computed property and array sorting by a nested property?",
        "c": "<template>\n  <ul>\n    <li v-for='item in sortedItems' :key='item.id'>{{ item.details.name }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [{ id: 1, details: { name: 'Banana' } }, { id: 2, details: { name: 'Apple' } }, { id: 3, details: { name: 'Cherry' } }] };\n    },\n    computed: {\n      sortedItems() {\n        return [...this.items].sort((a, b) => a.details.name.localeCompare(b.details.name));\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Apple, Banana, Cherry'",
            "Renders 'Banana, Apple, Cherry'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'el' parameter in a custom directive's hooks?",
        "o": [
            "References the DOM element the directive is bound to",
            "Holds the directive's evaluated value",
            "Contains the directive's modifiers",
            "Stores the virtual node of the element"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a reactive object and conditional modifier?",
        "c": "<template>\n  <div v-format.upper='textOptions'>Text</div>\n</template>\n<script>\n  import { reactive } from 'vue';\n  export default {\n    setup() {\n      const textOptions = reactive({ color: 'blue' });\n      return { textOptions };\n    },\n    directives: {\n      format: {\n        bind(el, binding) {\n          Object.assign(el.style, binding.value);\n          if (binding.modifiers.upper) el.textContent = el.textContent.toUpperCase();\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'TEXT' with blue color",
            "Renders 'Text' with blue color",
            "Throws an error",
            "Renders without styling"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic attribute to an element using a method return?",
        "o": [
            "v-bind:[getAttrName()]",
            "v-on:[getAttrName()]",
            "v-model:[getAttrName()]",
            "v-if:[getAttrName()]"
        ]
    },
    {
        "q": "What is the output of the following code using v-html with a reactive computed property and conditional HTML?",
        "c": "<template>\n  <div v-html='conditionalHtml'></div>\n</template>\n<script>\n  import { ref, computed } from 'vue';\n  export default {\n    setup() {\n      const isError = ref(true);\n      const conditionalHtml = computed(() => isError.value ? '<span class=\"error\">Error</span>' : '<span>Success</span>');\n      return { conditionalHtml };\n    }\n  }\n</script>",
        "o": [
            "Renders 'Error' with error class",
            "Renders 'Success'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .f5.exact modifier when used with v-on for key events?",
        "o": [
            "Triggers only when the F5 key is pressed without other modifiers",
            "Triggers on any F5 key press",
            "Prevents the F5 key event from bubbling",
            "Restricts the F5 key event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and array filtering by index?",
        "c": "<template>\n  <ul>\n    <li v-for='item in evenIndexedItems' :key='item'>{{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: ['A', 'B', 'C', 'D'] };\n    },\n    computed: {\n      evenIndexedItems() {\n        return this.items.filter((_, index) => index % 2 === 0);\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'A, C'",
            "Renders 'A, B, C, D'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called when the directive's binding is updated but before the DOM is re-rendered?",
        "o": [
            "beforeUpdate",
            "update",
            "inserted",
            "componentUpdated"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a custom attribute for tooltip content?",
        "o": [
            "Dynamically binds tooltip content to an element",
            "Triggers a tooltip-related event",
            "Conditionally renders the tooltip attribute",
            "Loops through tooltip attributes"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a touchmove event?",
        "c": "<template>\n  <div @touchmove='handleTouchMove'>Move Touch</div>\n</template>\n<script>\n  export default {\n    methods: {\n      handleTouchMove() {\n        console.log('Touch moved');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Touch moved' during touch movement",
            "Logs 'Touch moved' on any touch event",
            "Throws an error",
            "Does nothing"
        ]
    },
    {
        "q": "What is the effect of using the v-cloak directive with a v-html binding in Vue.js?",
        "o": [
            "Hides the element until compilation is complete, then renders the HTML content",
            "Renders the v-html content as plain text until compilation",
            "Causes a compilation error due to conflicting directives",
            "Ignores the v-html binding entirely"
        ]
    },
    {
        "q": "What is the output of the following code using v-text with a reactive computed property and string concatenation?",
        "c": "<template>\n  <div v-text='fullName'></div>\n</template>\n<script>\n  import { ref, computed } from 'vue';\n  export default {\n    setup() {\n      const firstName = ref('Jane');\n      const lastName = ref('Doe');\n      const fullName = computed(() => `${firstName.value} ${lastName.value}`);\n      return { fullName };\n    }\n  }\n</script>",
        "o": [
            "Renders 'Jane Doe'",
            "Renders 'Jane'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which v-on modifier ensures a key event triggers only when the F6 key is pressed without other modifiers?",
        "o": [
            ".f6.exact",
            ".f6",
            ".exact.f6",
            ".strict.f6"
        ]
    },
    {
        "q": "What is the output of the following v-for loop with a computed property and array transformation with prefixing?",
        "c": "<template>\n  <ul>\n    <li v-for='item in prefixedItems' :key='item.id'>{{ item.text }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: [{ id: 1, value: 'Apple' }, { id: 2, value: 'Banana' }] };\n    },\n    computed: {\n      prefixedItems() {\n        return this.items.map(item => ({ id: item.id, text: `Item: ${item.value}` }));\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Item: Apple, Item: Banana'",
            "Renders 'Apple, Banana'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the role of the 'binding' parameter in a custom directive's hooks?",
        "o": [
            "Provides access to the directive's binding details like value and modifiers",
            "References the DOM element the directive is bound to",
            "Holds the virtual node of the element",
            "Stores the component's context"
        ]
    },
    {
        "q": "What is the result of the following code using a custom directive with a reactive string and conditional modifier?",
        "c": "<template>\n  <div v-colorize.bright='color'>Colored</div>\n</template>\n<script>\n  import { ref } from 'vue';\n  export default {\n    setup() {\n      const color = ref('blue');\n      return { color };\n    },\n    directives: {\n      colorize: {\n        bind(el, binding) {\n          el.style.color = binding.modifiers.bright ? `light${binding.value}` : binding.value;\n        }\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders with lightblue text color",
            "Renders with blue text color",
            "Throws an error",
            "Renders without color styling"
        ]
    },
    {
        "q": "Which directive is used to bind a dynamic attribute to an element using a reactive computed property?",
        "o": [
            "v-bind:[computedAttr()]",
            "v-on:[computedAttr()]",
            "v-model:[computedAttr()]",
            "v-if:[computedAttr()]"
        ]
    },
    {
        "q": "What is the output of the following code using v-html with a method and dynamic tag generation?",
        "c": "<template>\n  <div v-html='getTagContent()'></div>\n</template>\n<script>\n  export default {\n    data() {\n      return { isImportant: true };\n    },\n    methods: {\n      getTagContent() {\n        return this.isImportant ? '<h1>Important</h1>' : '<p>Normal</p>';\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Important' as a heading",
            "Renders 'Normal' as a paragraph",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "What is the effect of the .f7.exact modifier when used with v-on for key events?",
        "o": [
            "Triggers only when the F7 key is pressed without other modifiers",
            "Triggers on any F7 key press",
            "Prevents the F7 key event from bubbling",
            "Restricts the F7 key event to the target element"
        ]
    },
    {
        "q": "What happens in the following code when using v-for with a computed property and array sorting by length?",
        "c": "<template>\n  <ul>\n    <li v-for='item in sortedItems' :key='item'>{{ item }}</li>\n  </ul>\n</template>\n<script>\n  export default {\n    data() {\n      return { items: ['Apple', 'Ban', 'Cherry'] };\n    },\n    computed: {\n      sortedItems() {\n        return [...this.items].sort((a, b) => a.length - b.length);\n      }\n    }\n  }\n</script>",
        "o": [
            "Renders 'Ban, Apple, Cherry'",
            "Renders 'Apple, Ban, Cherry'",
            "Throws an error",
            "Renders nothing"
        ]
    },
    {
        "q": "Which custom directive hook is called after the directive is unbound from the element?",
        "o": [
            "unmounted",
            "beforeUnmount",
            "bind",
            "update"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive when used with a custom attribute for tracking user interactions?",
        "o": [
            "Dynamically binds a tracking attribute to an element",
            "Triggers a tracking-related event",
            "Conditionally renders the tracking attribute",
            "Loops through tracking attributes"
        ]
    },
    {
        "q": "What is the output of the following code using v-on with a touchstart event and stop modifier?",
        "c": "<template>\n  <div @touchstart.stop='handleTouchStart'>Touch Me</div>\n</template>\n<script>\n  export default {\n    methods: {\n      handleTouchStart() {\n        console.log('Touch started');\n      }\n    }\n  }\n</script>",
        "o": [
            "Logs 'Touch started' and prevents event propagation",
            "Logs 'Touch started' and allows event propagation",
            "Throws an error",
            "Does nothing"
        ]
    }
]