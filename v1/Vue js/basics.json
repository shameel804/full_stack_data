[
    {
        "q": "What is the main purpose of the Vue instance in Vue.js?",
        "o": [
            "To create a new Vue application",
            "To define CSS styles",
            "To manage server-side logic",
            "To handle HTTP requests"
        ]
    },
    {
        "q": "Which property in the Vue instance is used to store reactive data?",
        "o": [
            "data",
            "methods",
            "computed",
            "watch"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({ el: '#app', data: { message: 'Hello Vue!' } }); // In template: <div id='app'>{{ message }}</div>",
        "o": [
            "Hello Vue!",
            "message",
            "undefined",
            "None"
        ]
    },
    {
        "q": "Which directive is used for two-way data binding in Vue.js?",
        "o": [
            "v-model",
            "v-bind",
            "v-on",
            "v-if"
        ]
    },
    {
        "q": "What does the v-bind directive do in Vue.js?",
        "o": [
            "Binds an attribute to an expression",
            "Creates a new Vue instance",
            "Listens for DOM events",
            "Conditionally renders an element"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({ el: '#app', data: { count: 5 }, computed: { doubled() { return this.count * 2; } } }); // In template: <div id='app'>{{ doubled }}</div>",
        "o": [
            "10",
            "5",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is a computed property in Vue.js?",
        "o": [
            "A property that calculates a value based on reactive data",
            "A static property defined in the template",
            "A method for handling events",
            "A property for styling components"
        ]
    },
    {
        "q": "Which of the following is true about computed properties in Vue.js?",
        "o": [
            "They are cached based on their reactive dependencies",
            "They are executed every time the template renders",
            "They cannot access data properties",
            "They are used for DOM manipulation"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({ el: '#app', data: { isActive: true } }); // In template: <div id='app' v-bind:class='{ active: isActive }'>Test</div>",
        "o": [
            "Class 'active' is applied to the div",
            "Class 'active' is not applied",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which directive is used to bind an attribute dynamically in Vue.js?",
        "o": [
            "v-bind",
            "v-model",
            "v-on",
            "v-for"
        ]
    },
    {
        "q": "What happens when you use v-model on an input element?",
        "o": [
            "It creates a two-way binding between the input and data property",
            "It only updates the input value",
            "It only updates the data property",
            "It prevents input changes"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({ el: '#app', data: { name: 'Vue' } }); // In template: <input id='app' v-model='name'> // User types 'Test'",
        "o": [
            "name becomes 'Test'",
            "name remains 'Vue'",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a characteristic of the Vue instance's data object?",
        "o": [
            "It is reactive",
            "It is static",
            "It cannot be accessed in the template",
            "It is only used for computed properties"
        ]
    },
    {
        "q": "What is the role of the 'el' property in a Vue instance?",
        "o": [
            "It specifies the DOM element to mount the Vue instance",
            "It defines the data properties",
            "It sets up event listeners",
            "It configures computed properties"
        ]
    },
    {
        "q": "Which directive is used to conditionally render an element in Vue.js?",
        "o": [
            "v-if",
            "v-bind",
            "v-model",
            "v-on"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({ el: '#app', data: { text: 'Welcome' } }); // In template: <div id='app'>{{ text.toUpperCase() }}</div>",
        "o": [
            "WELCOME",
            "Welcome",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the main difference between computed properties and methods in Vue.js?",
        "o": [
            "Computed properties are cached, methods are not",
            "Methods are cached, computed properties are not",
            "Computed properties cannot access data, methods can",
            "There is no difference"
        ]
    },
    {
        "q": "Which of the following is a valid syntax for v-bind in Vue.js?",
        "o": [
            ":class",
            "v:class",
            "bind:class",
            "v-bind-class"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({ el: '#app', data: { show: false } }); // In template: <div id='app' v-if='show'>Hello</div>",
        "o": [
            "Nothing is rendered",
            "Hello",
            "An error occurs",
            "undefined"
        ]
    },
    {
        "q": "What does the v-model directive do with a checkbox input?",
        "o": [
            "Binds the checked state to a data property",
            "Binds the value attribute to a data property",
            "Disables the checkbox",
            "Hides the checkbox"
        ]
    },
    {
        "q": "Which of the following is true about Vue.js directives?",
        "o": [
            "They are special attributes with the 'v-' prefix",
            "They are used to define data properties",
            "They are only used in computed properties",
            "They cannot be used in templates"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({ el: '#app', data: { number: 10 }, computed: { squared() { return this.number * this.number; } } }); // In template: <div id='app'>{{ squared }}</div>",
        "o": [
            "100",
            "10",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What happens if you try to directly modify a computed property in Vue.js?",
        "o": [
            "It throws an error because computed properties are read-only by default",
            "It updates the computed property",
            "It updates the data property",
            "Nothing happens"
        ]
    },
    {
        "q": "Which directive would you use to bind a style dynamically in Vue.js?",
        "o": [
            "v-bind:style",
            "v-model:style",
            "v-on:style",
            "v-if:style"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({ el: '#app', data: { color: 'red' } }); // In template: <div id='app' v-bind:style='{ color: color }'>Text</div>",
        "o": [
            "Text is colored red",
            "Text is colored black",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'methods' option in a Vue instance?",
        "o": [
            "To define reusable functions for event handling or logic",
            "To store reactive data",
            "To cache computed properties",
            "To define CSS styles"
        ]
    },
    {
        "q": "What is the purpose of the 'template' option in a Vue instance?",
        "o": [
            "To define the HTML structure for the Vue instance",
            "To store reactive data",
            "To define computed properties",
            "To handle HTTP requests"
        ]
    },
    {
        "q": "Which directive is used to loop through an array in Vue.js?",
        "o": [
            "v-for",
            "v-if",
            "v-bind",
            "v-model"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({ el: '#app', data: { items: ['Apple', 'Banana'] } }); // In template: <ul id='app'><li v-for='item in items'>{{ item }}</li></ul>",
        "o": [
            "Apple and Banana in a list",
            "Nothing is rendered",
            "An error occurs",
            "undefined"
        ]
    },
    {
        "q": "What does the v-on directive do in Vue.js?",
        "o": [
            "Listens for DOM events and executes methods",
            "Binds attributes to expressions",
            "Creates two-way data binding",
            "Conditionally renders elements"
        ]
    },
    {
        "q": "Which of the following is a valid shorthand for v-on in Vue.js?",
        "o": [
            "@",
            ":",
            "&",
            "#"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({ el: '#app', data: { count: 0 }, methods: { increment() { this.count++; } } }); // In template: <button id='app' v-on:click='increment'>Click</button> // User clicks once",
        "o": [
            "count becomes 1",
            "count remains 0",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the difference between v-bind and v-model in Vue.js?",
        "o": [
            "v-bind is one-way binding, v-model is two-way binding",
            "v-bind is two-way binding, v-model is one-way binding",
            "Both are two-way binding",
            "Both are one-way binding"
        ]
    },
    {
        "q": "Which of the following is true about reactive data in Vue.js?",
        "o": [
            "Changes to data automatically update the DOM",
            "Data is static and cannot be changed",
            "Data can only be updated in methods",
            "Data cannot be accessed in templates"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({ el: '#app', data: { isVisible: true } }); // In template: <div id='app' v-show='isVisible'>Hello</div>",
        "o": [
            "Hello is displayed",
            "Nothing is displayed",
            "An error occurs",
            "undefined"
        ]
    },
    {
        "q": "What is the main difference between v-if and v-show in Vue.js?",
        "o": [
            "v-if removes the element from the DOM, v-show toggles visibility",
            "v-show removes the element from the DOM, v-if toggles visibility",
            "Both remove the element from the DOM",
            "Both toggle visibility without affecting the DOM"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({ el: '#app', data: { price: 5 }, computed: { withTax() { return this.price * 1.1; } } }); // In template: <div id='app'>{{ withTax }}</div>",
        "o": [
            "5.5",
            "5",
            "undefined",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a computed property in Vue.js?",
        "o": [
            "computed: { total() { return this.value; } }",
            "methods: { total() { return this.value; } }",
            "data: { total() { return this.value; } }",
            "None of the options"
        ]
    },
    {
        "q": "What happens when a reactive data property is updated in Vue.js?",
        "o": [
            "The DOM updates automatically to reflect the change",
            "The DOM does not update",
            "An error occurs",
            "The computed properties are reset"
        ]
    },
    {
        "q": "What is the purpose of the 'watch' option in a Vue instance?",
        "o": [
            "To observe and react to data changes",
            "To define computed properties",
            "To bind attributes dynamically",
            "To handle DOM events"
        ]
    },
    {
        "q": "Which directive is used to prevent the default behavior of an event in Vue.js?",
        "o": [
            "v-on:prevent",
            "v-bind:prevent",
            "v-model:prevent",
            "v-if:prevent"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({ el: '#app', data: { message: 'Hello' } }); // In template: <div id='app'>{{ message.length }}</div>",
        "o": [
            "5",
            "Hello",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What does the v-html directive do in Vue.js?",
        "o": [
            "Renders raw HTML content",
            "Binds an attribute to an expression",
            "Creates a two-way binding",
            "Loops through an array"
        ]
    },
    {
        "q": "Which of the following is true about the Vue instance's lifecycle hooks?",
        "o": [
            "They allow you to run code at specific stages of the instance's lifecycle",
            "They are used to define reactive data",
            "They are only available in computed properties",
            "They cannot access data properties"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({ el: '#app', data: { active: false } }); // In template: <div id='app' v-bind:class='active ? \"on\" : \"off\"'>Status</div>",
        "o": [
            "Class 'off' is applied to the div",
            "Class 'on' is applied to the div",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'key' attribute when using v-for in Vue.js?",
        "o": [
            "To help Vue track elements for efficient rendering",
            "To define the loop variable",
            "To bind data to the element",
            "To prevent rendering of the element"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({ el: '#app', data: { numbers: [1, 2, 3] }, computed: { sum() { return this.numbers.reduce((a, b) => a + b, 0); } } }); // In template: <div id='app'>{{ sum }}</div>",
        "o": [
            "6",
            "1, 2, 3",
            "undefined",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to bind an event handler in Vue.js?",
        "o": [
            "@click='handleClick'",
            "v-bind:click='handleClick'",
            "v-on:click='handleClick'",
            "Both @click and v-on:click"
        ]
    },
    {
        "q": "What happens if you use v-model on a select element in Vue.js?",
        "o": [
            "It binds the selected option's value to a data property",
            "It disables the select element",
            "It only updates the select element's value",
            "It prevents selection changes"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({ el: '#app', data: { text: '' } }); // In template: <input id='app' v-model='text'> // User types 'Vue'",
        "o": [
            "text becomes 'Vue'",
            "text remains empty",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about Vue.js computed properties?",
        "o": [
            "They depend on reactive data and update when it changes",
            "They are executed only once",
            "They cannot be used in templates",
            "They are used for event handling"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({ el: '#app', data: { items: ['A', 'B'] } }); // In template: <div id='app' v-for='(item, index) in items'>{{ index }}</div>",
        "o": [
            "0 and 1",
            "A and B",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'created' lifecycle hook in a Vue instance?",
        "o": [
            "To run code after the instance is created but before it is mounted",
            "To define reactive data",
            "To handle DOM events",
            "To render the template"
        ]
    },
    {
        "q": "Which directive is used to bind a value to an element's attribute only once in Vue.js?",
        "o": [
            "v-once",
            "v-bind",
            "v-model",
            "v-if"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { name: 'Vue.js' }\n}); // In template: <div id='app'>{{ name.split('.').join('') }}</div>",
        "o": [
            "Vuejs",
            "Vue.js",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What does the v-cloak directive do in Vue.js?",
        "o": [
            "Hides the element until Vue.js has finished compiling",
            "Binds an attribute dynamically",
            "Creates a two-way binding",
            "Conditionally renders an element"
        ]
    },
    {
        "q": "Which of the following is true about the Vue instance's 'data' option?",
        "o": [
            "It must be a function in a component",
            "It must be an object in a component",
            "It cannot be accessed in computed properties",
            "It is not reactive"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { isToggled: true }\n}); // In template: <div id='app' v-if='isToggled'>Visible</div>",
        "o": [
            "Visible is rendered",
            "Nothing is rendered",
            "An error occurs",
            "undefined"
        ]
    },
    {
        "q": "What is the purpose of the 'v-else' directive in Vue.js?",
        "o": [
            "To render an element if the v-if condition is false",
            "To loop through an array",
            "To bind an attribute dynamically",
            "To handle events"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { value: 3 },\n  computed: { tripled() { return this.value * 3; } }\n}); // In template: <div id='app'>{{ tripled }}</div>",
        "o": [
            "9",
            "3",
            "undefined",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to use v-for with an object in Vue.js?",
        "o": [
            "v-for='(value, key) in object'",
            "v-for='value in object.values'",
            "v-for='key in object.keys'",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use v-bind with a boolean attribute like 'disabled' in Vue.js?",
        "o": [
            "The attribute is included if the value is true, removed if false",
            "The attribute is always included",
            "The attribute is always removed",
            "An error occurs"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { checked: false }\n}); // In template: <input id='app' type='checkbox' v-model='checked'> // User checks the checkbox",
        "o": [
            "checked becomes true",
            "checked remains false",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about Vue.js event modifiers?",
        "o": [
            "They simplify event handling logic like preventing default behavior",
            "They are used to define reactive data",
            "They cannot be used with v-on",
            "They are only for computed properties"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { fruits: ['Orange', 'Grape'] }\n}); // In template: <div id='app' v-for='fruit in fruits'>{{ fruit.toUpperCase() }}</div>",
        "o": [
            "ORANGE and GRAPE",
            "Orange and Grape",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'mounted' lifecycle hook in a Vue instance?",
        "o": [
            "To run code after the instance is mounted to the DOM",
            "To define reactive data",
            "To initialize computed properties",
            "To handle HTTP requests"
        ]
    },
    {
        "q": "Which directive is used to render a list of elements based on an array in Vue.js?",
        "o": [
            "v-for",
            "v-if",
            "v-bind",
            "v-model"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { text: 'Hello World' }\n}); // In template: <div id='app'>{{ text.substring(0, 5) }}</div>",
        "o": [
            "Hello",
            "World",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What does the v-once directive do in Vue.js?",
        "o": [
            "Renders the element only once and prevents further updates",
            "Binds an attribute dynamically",
            "Creates a two-way binding",
            "Conditionally hides an element"
        ]
    },
    {
        "q": "Which of the following is true about Vue.js computed properties with setters?",
        "o": [
            "They allow both getting and setting a value",
            "They are read-only by default",
            "They cannot depend on reactive data",
            "They are only used for event handling"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { isActive: false }\n}); // In template: <div id='app' v-bind:class='{ active: isActive }'>Content</div>",
        "o": [
            "Class 'active' is not applied",
            "Class 'active' is applied",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'v-else-if' directive in Vue.js?",
        "o": [
            "To provide additional conditional rendering after v-if",
            "To loop through an array",
            "To bind an event handler",
            "To create a two-way binding"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { num: 4 },\n  computed: { squared() { return this.num * this.num; } }\n}); // In template: <div id='app'>{{ squared }}</div>",
        "o": [
            "16",
            "4",
            "undefined",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to bind a style dynamically in Vue.js?",
        "o": [
            ":style='{ fontSize: size + \"px\" }'",
            "v-bind:style='fontSize: size'",
            "v-style='{ fontSize: size }'",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use v-model with a number input in Vue.js?",
        "o": [
            "It binds the input value as a number to a data property",
            "It binds the input value as a string",
            "It prevents input changes",
            "It disables the input"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { counter: 0 },\n  methods: { increment() { this.counter++; } }\n}); // In template: <button id='app' @click='increment'>Click</button> // User clicks twice",
        "o": [
            "counter becomes 2",
            "counter remains 0",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about Vue.js directives like v-bind and v-on?",
        "o": [
            "They can accept modifiers to alter their behavior",
            "They cannot be used together",
            "They are only for computed properties",
            "They are not reactive"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { colors: ['Red', 'Blue'] }\n}); // In template: <div id='app' v-for='color in colors' :key='color'>{{ color }}</div>",
        "o": [
            "Red and Blue",
            "Nothing is rendered",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeCreate' lifecycle hook in a Vue instance?",
        "o": [
            "To run code before the instance is initialized",
            "To render the template",
            "To define computed properties",
            "To handle DOM events"
        ]
    },
    {
        "q": "Which directive in Vue.js is used to stop event propagation?",
        "o": [
            "v-on:stop",
            "v-bind:stop",
            "v-model:stop",
            "v-if:stop"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { message: 'Vue' }\n}); // In template: <div id='app' v-html='message'></div>",
        "o": [
            "Vue",
            "<p>Vue</p>",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the role of the 'watch' property in a Vue instance?",
        "o": [
            "To execute code when a specific data property changes",
            "To define static data",
            "To bind attributes dynamically",
            "To loop through arrays"
        ]
    },
    {
        "q": "Which of the following is true about the 'v-pre' directive in Vue.js?",
        "o": [
            "It skips compilation for the element and its children",
            "It creates a two-way binding",
            "It conditionally renders an element",
            "It binds an event handler"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { user: { name: 'John' } }\n}); // In template: <div id='app'>{{ user.name }}</div>",
        "o": [
            "John",
            "user.name",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'updated' lifecycle hook in Vue.js?",
        "o": [
            "To run code after the DOM is updated",
            "To initialize reactive data",
            "To define event handlers",
            "To create computed properties"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { obj: { key: 'value' } }\n}); // In template: <div id='app' v-for='(val, key) in obj'>{{ key }}</div>",
        "o": [
            "key",
            "value",
            "undefined",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to use a modifier with v-on in Vue.js?",
        "o": [
            "@click.stop='handleClick'",
            "v-on:click.stop='handleClick'",
            "@click.prevent='handleClick'",
            "All of the above"
        ]
    },
    {
        "q": "What happens when you use the 'v-text' directive in Vue.js?",
        "o": [
            "It updates the element's text content",
            "It updates the element's HTML content",
            "It binds an attribute dynamically",
            "It creates a two-way binding"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { count: 0 },\n  watch: { count(newVal) { this.count = newVal + 1; } }\n}); // In script: vm.count = 1;",
        "o": [
            "count becomes 2",
            "count becomes 1",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which lifecycle hook is triggered just before a Vue instance is destroyed?",
        "o": [
            "beforeDestroy",
            "destroyed",
            "beforeMount",
            "mounted"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { flag: false }\n}); // In template: <div id='app' v-if='flag'>Show</div><div v-else>Hide</div>",
        "o": [
            "Hide",
            "Show",
            "Both Show and Hide",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'destroyed' lifecycle hook in a Vue instance?",
        "o": [
            "To run code after the instance is destroyed",
            "To initialize reactive data",
            "To bind attributes dynamically",
            "To define computed properties"
        ]
    },
    {
        "q": "Which directive in Vue.js is used to capture an event instead of letting it bubble up?",
        "o": [
            "v-on:capture",
            "v-bind:capture",
            "v-model:capture",
            "v-if:capture"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { title: '<b>Bold</b>' }\n}); // In template: <div id='app' v-html='title'></div>",
        "o": [
            "Bold text in bold",
            "<b>Bold</b>",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the role of the 'deep' option in a Vue.js watcher?",
        "o": [
            "To watch for changes in nested object properties",
            "To define a computed property",
            "To prevent event propagation",
            "To render raw HTML"
        ]
    },
    {
        "q": "Which of the following is true about the 'v-slot' directive in Vue.js?",
        "o": [
            "It is used to define named slots in components",
            "It binds an attribute dynamically",
            "It creates a two-way binding",
            "It conditionally renders elements"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { items: [{ id: 1, name: 'Item1' }] }\n}); // In template: <div id='app' v-for='item in items'>{{ item.name }}</div>",
        "o": [
            "Item1",
            "1",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeMount' lifecycle hook in Vue.js?",
        "o": [
            "To run code before the instance is mounted to the DOM",
            "To handle DOM events",
            "To define reactive data",
            "To loop through arrays"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { person: { age: 25 } },\n  watch: { 'person.age': function(newVal) { this.person.age = newVal + 1; } }\n}); // In script: vm.person.age = 26;",
        "o": [
            "age becomes 27",
            "age becomes 26",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to use a computed property with a setter in Vue.js?",
        "o": [
            "computed: { fullName: { get() { return this.firstName + ' ' + this.lastName; }, set(newVal) { [this.firstName, this.lastName] = newVal.split(' '); } } }",
            "computed: { fullName() { return this.firstName + ' ' + this.lastName; } }",
            "data: { fullName: { get() { return this.firstName; } } }",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the 'v-text' directive with an empty string in Vue.js?",
        "o": [
            "The element's text content is cleared",
            "The element is hidden",
            "An error occurs",
            "The element's HTML content is updated"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { condition: true }\n}); // In template: <div id='app' v-if='condition'>True</div><div v-else-if='!condition'>False</div>",
        "o": [
            "True",
            "False",
            "Both True and False",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'immediate' option in a Vue.js watcher?",
        "o": [
            "It triggers the watcher immediately upon setup",
            "It prevents the watcher from triggering",
            "It only watches computed properties",
            "It disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { styles: { backgroundColor: 'blue' } }\n}); // In template: <div id='app' v-bind:style='styles'>Box</div>",
        "o": [
            "Box with blue background",
            "Box with default background",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeUpdate' lifecycle hook in a Vue instance?",
        "o": [
            "To run code before the DOM is updated",
            "To initialize computed properties",
            "To define event handlers",
            "To render the template"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only once in Vue.js?",
        "o": [
            ".once",
            ".stop",
            ".prevent",
            ".capture"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { greeting: 'Hello' }\n}); // In template: <div id='app' v-text='greeting'></div>",
        "o": [
            "Hello",
            "<p>Hello</p>",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'provide' and 'inject' options in Vue.js?",
        "o": [
            "To share data between components without props",
            "To define reactive data",
            "To handle DOM events",
            "To create computed properties"
        ]
    },
    {
        "q": "Which of the following is true about the 'v-is' directive in Vue.js?",
        "o": [
            "It dynamically binds a component to an element",
            "It creates a two-way binding",
            "It loops through an array",
            "It prevents event propagation"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { scores: [10, 20, 30] }\n}); // In template: <div id='app' v-for='score in scores' :key='score'>{{ score * 2 }}</div>",
        "o": [
            "20, 40, 60",
            "10, 20, 30",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'activated' lifecycle hook in Vue.js?",
        "o": [
            "To run code when a component is activated in keep-alive",
            "To initialize reactive data",
            "To bind attributes dynamically",
            "To define watchers"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { user: { name: 'Alice' } },\n  watch: { user: { handler() { this.user.name = 'Bob'; }, deep: true } }\n}); // In script: vm.user.name = 'Charlie';",
        "o": [
            "name becomes Bob",
            "name becomes Charlie",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to use v-model with a custom component in Vue.js?",
        "o": [
            "v-model='value' on a component emitting input event",
            "v-bind='value' on a component",
            "v-on='value' on a component",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the 'v-pre' directive on an element in Vue.js?",
        "o": [
            "Vue skips compilation for that element and its children",
            "The element is hidden",
            "The element is rendered conditionally",
            "The element is bound dynamically"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { toggle: false }\n}); // In template: <div id='app' v-if='toggle'>On</div><div v-else-if='!toggle'>Off</div>",
        "o": [
            "Off",
            "On",
            "Both On and Off",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'keep-alive' component in Vue.js?",
        "o": [
            "It caches components to preserve their state",
            "It destroys components after use",
            "It prevents reactivity",
            "It disables event handling"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { attrs: { title: 'Tooltip' } }\n}); // In template: <div id='app' v-bind='attrs'>Hover</div>",
        "o": [
            "Div with title attribute 'Tooltip'",
            "Div without any attributes",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'deactivated' lifecycle hook in Vue.js?",
        "o": [
            "To run code when a component is deactivated in keep-alive",
            "To initialize reactive data",
            "To bind event handlers",
            "To define computed properties"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event on a specific key press, like Enter, in Vue.js?",
        "o": [
            ".enter",
            ".key",
            ".press",
            ".input"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { info: 'Vue.js' }\n}); // In template: <div id='app' v-text='info.toUpperCase()'></div>",
        "o": [
            "VUE.JS",
            "Vue.js",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'filters' option in Vue.js 2.x?",
        "o": [
            "To format data for display in templates",
            "To define reactive data",
            "To handle DOM events",
            "To create computed properties"
        ]
    },
    {
        "q": "Which of the following is true about the 'v-bind' directive with object syntax in Vue.js?",
        "o": [
            "It allows binding multiple attributes at once",
            "It creates a two-way binding",
            "It only works with single attributes",
            "It prevents attribute updates"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { numbers: [1, 2, 3] }\n}); // In template: <div id='app' v-for='num in numbers'>{{ num + 1 }}</div>",
        "o": [
            "2, 3, 4",
            "1, 2, 3",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'errorCaptured' lifecycle hook in Vue.js?",
        "o": [
            "To capture errors in child components",
            "To define reactive data",
            "To bind styles dynamically",
            "To loop through arrays"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { settings: { theme: 'dark' } },\n  watch: { 'settings.theme': function(newVal) { this.settings.theme = newVal + '-mode'; } }\n}); // In script: vm.settings.theme = 'light';",
        "o": [
            "theme becomes light-mode",
            "theme becomes light",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to use a dynamic argument with v-bind in Vue.js?",
        "o": [
            "v-bind:[attrName]='value'",
            "v-bind.attrName='value'",
            "v-bind='attrName:value'",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the 'v-once' directive with a computed property in Vue.js?",
        "o": [
            "The computed property renders once and does not update",
            "The computed property updates normally",
            "An error occurs",
            "The computed property is ignored"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { status: true }\n}); // In template: <div id='app' v-if='status'>Active</div><div v-else>Inactive</div>",
        "o": [
            "Active",
            "Inactive",
            "Both Active and Inactive",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'provide' option in a Vue.js component?",
        "o": [
            "It makes data available to all descendant components",
            "It defines reactive data for the component",
            "It triggers lifecycle hooks",
            "It binds attributes dynamically"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { classes: { highlight: true, hidden: false } }\n}); // In template: <div id='app' v-bind:class='classes'>Text</div>",
        "o": [
            "Text with highlight class",
            "Text with hidden class",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'renderError' lifecycle hook in Vue.js?",
        "o": [
            "To handle errors during component rendering",
            "To define reactive data",
            "To bind event handlers",
            "To initialize computed properties"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the exact key combination is pressed in Vue.js?",
        "o": [
            ".exact",
            ".strict",
            ".only",
            ".key"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { label: 'Click Me' }\n}); // In template: <button id='app' v-text='label'></button>",
        "o": [
            "Click Me",
            "<button>Click Me</button>",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'inheritAttrs' option in a Vue.js component?",
        "o": [
            "To control whether attributes are automatically inherited by the root element",
            "To define reactive data",
            "To handle DOM events",
            "To create computed properties"
        ]
    },
    {
        "q": "Which of the following is true about the 'v-bind.sync' modifier in Vue.js?",
        "o": [
            "It enables two-way binding for a prop in a component",
            "It prevents prop updates",
            "It only works with v-model",
            "It disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { tags: ['vue', 'js'] }\n}); // In template: <div id='app' v-for='tag in tags'>{{ tag.toUpperCase() }}</div>",
        "o": [
            "VUE, JS",
            "vue, js",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeEach' global navigation guard in Vue Router?",
        "o": [
            "To run code before each route navigation",
            "To define reactive data",
            "To bind styles dynamically",
            "To initialize watchers"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { item: { count: 5 } },\n  watch: { 'item.count': { handler(newVal) { this.item.count = newVal + 2; }, immediate: true } }\n}); // In template: <div id='app'>{{ item.count }}</div>",
        "o": [
            "7",
            "5",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to dynamically bind an event in Vue.js?",
        "o": [
            "v-on:[eventName]='handler'",
            "v-bind:[eventName]='handler'",
            "v-on='eventName:handler'",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the 'v-cloak' directive in Vue.js?",
        "o": [
            "The element is hidden until Vue compilation is complete",
            "The element is rendered conditionally",
            "The element is bound to a data property",
            "An error occurs"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { show: false }\n}); // In template: <div id='app' v-if='show'>Yes</div><div v-else>No</div>",
        "o": [
            "No",
            "Yes",
            "Both Yes and No",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'mixins' option in Vue.js?",
        "o": [
            "It allows sharing reusable code between components",
            "It defines reactive data",
            "It prevents component rendering",
            "It disables event handling"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { styles: { color: 'green', fontWeight: 'bold' } }\n}); // In template: <div id='app' :style='styles'>Styled</div>",
        "o": [
            "Styled text in green and bold",
            "Styled text in default style",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'render' function in a Vue.js component?",
        "o": [
            "To programmatically define the component's template",
            "To initialize reactive data",
            "To handle DOM events",
            "To create watchers"
        ]
    },
    {
        "q": "Which modifier can be used with v-model to trim whitespace from input in Vue.js?",
        "o": [
            ".trim",
            ".strip",
            ".clean",
            ".format"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { text: 'Vue is awesome' }\n}); // In template: <div id='app' v-text='text.split(\" \")[0]'></div>",
        "o": [
            "Vue",
            "Vue is awesome",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'props' option in a Vue.js component?",
        "o": [
            "To define data passed from a parent component",
            "To create computed properties",
            "To bind event handlers",
            "To define static data"
        ]
    },
    {
        "q": "Which of the following is true about the 'scoped' attribute in Vue.js component styles?",
        "o": [
            "It ensures styles only apply to the component's elements",
            "It makes styles global",
            "It disables component styling",
            "It binds styles dynamically"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { values: [5, 10, 15] }\n}); // In template: <div id='app' v-for='value in values'>{{ value * 3 }}</div>",
        "o": [
            "15, 30, 45",
            "5, 10, 15",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'name' option in a Vue.js component?",
        "o": [
            "To allow recursive components or debugging",
            "To define reactive data",
            "To bind attributes dynamically",
            "To handle lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { config: { size: 16 } },\n  watch: { 'config.size': function(newVal) { this.config.size = newVal + 1; } }\n}); // In script: vm.config.size = 20;",
        "o": [
            "size becomes 21",
            "size becomes 20",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to use a dynamic slot name in Vue.js?",
        "o": [
            "v-slot:[slotName]",
            "v-bind:slot='slotName'",
            "v-slot='slotName'",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the '.lazy' modifier with v-model in Vue.js?",
        "o": [
            "It updates the data only after the input loses focus",
            "It prevents input updates",
            "It trims whitespace from input",
            "It disables the input"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { visible: true }\n}); // In template: <div id='app' v-show='visible'>Visible</div>",
        "o": [
            "Visible",
            "Nothing is displayed",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'functional' option in a Vue.js component?",
        "o": [
            "It creates a stateless, instance-less component",
            "It defines reactive data",
            "It enables two-way binding",
            "It disables rendering"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { attrs: { id: 'test', class: 'example' } }\n}); // In template: <div id='app' v-bind='attrs'>Test</div>",
        "o": [
            "Div with id 'test' and class 'example'",
            "Div without attributes",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'components' option in a Vue.js component?",
        "o": [
            "To register child components for use in the template",
            "To define reactive data",
            "To handle event listeners",
            "To create computed properties"
        ]
    },
    {
        "q": "Which modifier can be used with v-model to convert input to a number in Vue.js?",
        "o": [
            ".number",
            ".numeric",
            ".int",
            ".float"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { phrase: 'Vue is great' }\n}); // In template: <div id='app' v-text='phrase.split(\" \")[2]'></div>",
        "o": [
            "great",
            "Vue is great",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'directives' option in a Vue.js component?",
        "o": [
            "To define custom directives for the component",
            "To bind attributes dynamically",
            "To create two-way bindings",
            "To define reactive data"
        ]
    },
    {
        "q": "Which of the following is true about the 'transition' component in Vue.js?",
        "o": [
            "It provides animated transitions for elements or components",
            "It defines static styles",
            "It prevents DOM updates",
            "It disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { items: ['A', 'B', 'C'] }\n}); // In template: <div id='app' v-for='item in items.slice(0, 2)'>{{ item }}</div>",
        "o": [
            "A, B",
            "A, B, C",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'model' option in a Vue.js component?",
        "o": [
            "To customize the prop and event for v-model on a component",
            "To define reactive data",
            "To bind styles dynamically",
            "To create lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { data: { value: 10 } },\n  watch: { 'data.value': { handler(newVal) { this.data.value = newVal * 2; }, immediate: true } }\n}); // In template: <div id='app'>{{ data.value }}</div>",
        "o": [
            "20",
            "10",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a custom directive in Vue.js?",
        "o": [
            "directives: { focus: { inserted(el) { el.focus(); } } }",
            "directives: { focus() { this.focus(); } }",
            "methods: { focus: { inserted(el) { el.focus(); } } }",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the '.passive' modifier with v-on in Vue.js?",
        "o": [
            "It indicates that the event listener will not call preventDefault",
            "It stops event propagation",
            "It triggers the event only once",
            "It disables the event listener"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { display: true }\n}); // In template: <div id='app' v-show='display'>Shown</div>",
        "o": [
            "Shown",
            "Nothing is displayed",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'extends' option in Vue.js?",
        "o": [
            "It allows a component to inherit from another component",
            "It defines reactive data",
            "It binds attributes dynamically",
            "It disables component rendering"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { options: { type: 'text', placeholder: 'Enter text' } }\n}); // In template: <input id='app' v-bind='options'>",
        "o": [
            "Input with type 'text' and placeholder 'Enter text'",
            "Input without attributes",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeRouteEnter' navigation guard in Vue Router?",
        "o": [
            "To run code before navigating to a route",
            "To define reactive data",
            "To bind event handlers",
            "To create computed properties"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only on a specific mouse button in Vue.js?",
        "o": [
            ".left",
            ".click",
            ".mouse",
            ".button"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { content: 'Vue.js rocks' }\n}); // In template: <div id='app' v-text='content.slice(0, 3)'></div>",
        "o": [
            "Vue",
            "Vue.js rocks",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'computed' option in a Vue.js component?",
        "o": [
            "To define reactive properties that cache based on dependencies",
            "To handle DOM events",
            "To define static data",
            "To create custom directives"
        ]
    },
    {
        "q": "Which of the following is true about the 'keep-alive' component's 'include' and 'exclude' props in Vue.js?",
        "o": [
            "They control which components are cached",
            "They define reactive data",
            "They bind styles dynamically",
            "They prevent component rendering"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { list: [1, 2, 3, 4] }\n}); // In template: <div id='app' v-for='num in list.filter(n => n % 2 === 0)'>{{ num }}</div>",
        "o": [
            "2, 4",
            "1, 2, 3, 4",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'propsData' option when testing Vue.js components?",
        "o": [
            "To pass props during component testing",
            "To define reactive data",
            "To bind attributes dynamically",
            "To handle lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { obj: { count: 1 } },\n  watch: { 'obj.count': function(newVal) { this.obj.count = newVal + 3; } }\n}); // In script: vm.obj.count = 2;",
        "o": [
            "count becomes 5",
            "count becomes 2",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a custom directive's 'bind' hook in Vue.js?",
        "o": [
            "directives: { custom: { bind(el, binding) { el.style.color = binding.value; } } }",
            "directives: { custom() { this.style.color = value; } }",
            "methods: { custom: { bind(el) { el.style.color = value; } } }",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the '.number' modifier with v-model on a text input in Vue.js?",
        "o": [
            "It converts the input value to a number",
            "It trims whitespace from the input",
            "It prevents input updates",
            "It disables the input"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { showContent: false }\n}); // In template: <div id='app' v-if='showContent'>Content</div><div v-else>No Content</div>",
        "o": [
            "No Content",
            "Content",
            "Both Content and No Content",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'delimiters' option in Vue.js?",
        "o": [
            "It customizes the interpolation delimiters for templates",
            "It defines reactive data",
            "It binds event handlers",
            "It disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { styles: { border: '1px solid black' } }\n}); // In template: <div id='app' :style='styles'>Bordered</div>",
        "o": [
            "Div with a black border",
            "Div without a border",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeRouteUpdate' navigation guard in Vue Router?",
        "o": [
            "To run code before updating the current route",
            "To define reactive data",
            "To create computed properties",
            "To bind event handlers"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event on self only in Vue.js?",
        "o": [
            ".self",
            ".target",
            ".only",
            ".direct"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { message: 'Hello Vue' }\n}); // In template: <div id='app' v-text='message.slice(-3)'></div>",
        "o": [
            "Vue",
            "Hello Vue",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'emits' option in a Vue.js component?",
        "o": [
            "To declare events the component can emit",
            "To define reactive data",
            "To bind attributes dynamically",
            "To create custom directives"
        ]
    },
    {
        "q": "Which of the following is true about the 'teleport' component in Vue.js?",
        "o": [
            "It moves an element to another part of the DOM",
            "It defines static styles",
            "It prevents DOM updates",
            "It disables event handling"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { items: ['x', 'y', 'z'] }\n}); // In template: <div id='app' v-for='item in items.slice(1)'>{{ item }}</div>",
        "o": [
            "y, z",
            "x, y, z",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'setup' function in the Vue.js Composition API?",
        "o": [
            "To define reactive state and logic for a component",
            "To bind styles dynamically",
            "To define global directives",
            "To handle lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { counter: { value: 3 } },\n  watch: { 'counter.value': function(newVal) { this.counter.value = newVal + 4; } }\n}); // In script: vm.counter.value = 5;",
        "o": [
            "value becomes 9",
            "value becomes 5",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a custom directive's 'update' hook in Vue.js?",
        "o": [
            "directives: { custom: { update(el, binding) { el.style.background = binding.value; } } }",
            "directives: { custom() { this.style.background = value; } }",
            "methods: { custom: { update(el) { el.style.background = value; } } }",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the '.sync' modifier with a prop in Vue.js?",
        "o": [
            "It enables two-way binding for the prop",
            "It prevents prop updates",
            "It converts the prop to a number",
            "It disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { active: false }\n}); // In template: <div id='app' v-if='active'>On</div><div v-else>Off</div>",
        "o": [
            "Off",
            "On",
            "Both On and Off",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'watchEffect' function in Vue.js Composition API?",
        "o": [
            "It automatically tracks reactive dependencies and runs when they change",
            "It defines static data",
            "It binds event handlers",
            "It disables component rendering"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { attributes: { type: 'button', disabled: true } }\n}); // In template: <button id='app' v-bind='attributes'>Click</button>",
        "o": [
            "Disabled button with type 'button'",
            "Enabled button with no attributes",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeRouteLeave' navigation guard in Vue Router?",
        "o": [
            "To run code before navigating away from a route",
            "To initialize reactive data",
            "To define custom directives",
            "To bind styles dynamically"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to handle an event only on specific keyboard modifiers like Ctrl in Vue.js?",
        "o": [
            ".ctrl",
            ".key",
            ".mod",
            ".shift"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { text: 'Learning Vue' }\n}); // In template: <div id='app' v-text='text.replace(\"Vue\", \"JavaScript\")'></div>",
        "o": [
            "Learning JavaScript",
            "Learning Vue",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'expose' option in a Vue.js component using the Composition API?",
        "o": [
            "To specify which properties are publicly accessible",
            "To define reactive data",
            "To create event handlers",
            "To bind attributes dynamically"
        ]
    },
    {
        "q": "Which of the following is true about the 'Suspense' component in Vue.js?",
        "o": [
            "It renders a fallback UI while waiting for async components",
            "It defines static styles",
            "It prevents reactivity",
            "It disables event handling"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { numbers: [4, 7, 2, 9] }\n}); // In template: <div id='app' v-for='num in numbers.sort((a, b) => a - b)'>{{ num }}</div>",
        "o": [
            "2, 4, 7, 9",
            "4, 7, 2, 9",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'ref' attribute in Vue.js templates?",
        "o": [
            "To register a reference to a DOM element or component",
            "To define reactive data",
            "To bind styles dynamically",
            "To create custom directives"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { settings: { volume: 50 } },\n  watch: { 'settings.volume': function(newVal) { this.settings.volume = newVal + 10; } }\n}); // In script: vm.settings.volume = 60;",
        "o": [
            "volume becomes 70",
            "volume becomes 60",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a custom directive's 'unbind' hook in Vue.js?",
        "o": [
            "directives: { custom: { unbind(el) { el.removeAttribute('style'); } } }",
            "directives: { custom() { this.removeAttribute('style'); } }",
            "methods: { custom: { unbind(el) { el.removeAttribute('style'); } } }",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the '.camel' modifier with v-bind in Vue.js?",
        "o": [
            "It converts kebab-case attributes to camelCase",
            "It prevents attribute binding",
            "It converts attributes to lowercase",
            "It disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { toggle: true }\n}); // In template: <div id='app' v-if='toggle'>Enabled</div><div v-else>Disabled</div>",
        "o": [
            "Enabled",
            "Disabled",
            "Both Enabled and Disabled",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'reactive' function in Vue.js Composition API?",
        "o": [
            "It creates a deeply reactive object",
            "It defines static data",
            "It binds event handlers",
            "It disables component rendering"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { attrs: { 'data-test': 'example', role: 'button' } }\n}); // In template: <div id='app' v-bind='attrs'>Test</div>",
        "o": [
            "Div with data-test='example' and role='button'",
            "Div without attributes",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeRouteLeave' navigation guard in Vue Router?",
        "o": [
            "To execute code before leaving a route",
            "To define reactive data",
            "To create computed properties",
            "To bind styles dynamically"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to handle an event only when the Alt key is pressed in Vue.js?",
        "o": [
            ".alt",
            ".meta",
            ".option",
            ".modifier"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { text: 'Vue Framework' }\n}); // In template: <div id='app' v-text='text.split(\" \")[1].toLowerCase()'></div>",
        "o": [
            "framework",
            "Vue Framework",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'is' attribute in Vue.js templates?",
        "o": [
            "To dynamically render a component or HTML element",
            "To define reactive data",
            "To handle event listeners",
            "To create custom directives"
        ]
    },
    {
        "q": "Which of the following is true about the 'v-model.lazy' modifier in Vue.js?",
        "o": [
            "It syncs data after input blur instead of on change",
            "It prevents data updates",
            "It converts input to a number",
            "It trims whitespace"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { items: [10, 20, 30, 40] }\n}); // In template: <div id='app' v-for='item in items.filter(n => n > 15)'>{{ item }}</div>",
        "o": [
            "20, 30, 40",
            "10, 20, 30, 40",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'toRefs' function in Vue.js Composition API?",
        "o": [
            "To convert reactive object properties into individual refs",
            "To define computed properties",
            "To bind attributes dynamically",
            "To create lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { settings: { brightness: 10 } },\n  watch: { 'settings.brightness': function(newVal) { this.settings.brightness = newVal + 5; } }\n}); // In script: vm.settings.brightness = 15;",
        "o": [
            "brightness becomes 20",
            "brightness becomes 15",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a custom directive's 'componentUpdated' hook in Vue.js?",
        "o": [
            "directives: { custom: { componentUpdated(el, binding) { el.style.opacity = binding.value; } } }",
            "directives: { custom() { this.style.opacity = value; } }",
            "methods: { custom: { componentUpdated(el) { el.style.opacity = value; } } }",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the 'v-bind.prop' modifier in Vue.js?",
        "o": [
            "It binds a value as a DOM property instead of an attribute",
            "It prevents binding updates",
            "It converts attributes to camelCase",
            "It disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { visible: false }\n}); // In template: <div id='app' v-if='visible'>Show</div><div v-else>Hide</div>",
        "o": [
            "Hide",
            "Show",
            "Both Show and Hide",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'shallowReactive' function in Vue.js Composition API?",
        "o": [
            "It creates a reactive object with only top-level reactivity",
            "It defines deeply reactive objects",
            "It binds event handlers",
            "It disables component rendering"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { props: { 'aria-label': 'button', type: 'submit' } }\n}); // In template: <button id='app' v-bind='props'>Submit</button>",
        "o": [
            "Button with aria-label='button' and type='submit'",
            "Button without attributes",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeRouteEnter' navigation guard in Vue Router?",
        "o": [
            "To execute code before entering a route",
            "To define computed properties",
            "To bind styles dynamically",
            "To create reactive data"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the Shift key is pressed in Vue.js?",
        "o": [
            ".shift",
            ".key",
            ".mod",
            ".alt"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { phrase: 'Vue.js is fun' }\n}); // In template: <div id='app' v-text='phrase.split(\" \")[0] + \"!\"'></div>",
        "o": [
            "Vue.js!",
            "Vue.js is fun",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'ref' function in Vue.js Composition API?",
        "o": [
            "To create a reactive reference to a value",
            "To define custom directives",
            "To bind event handlers",
            "To create computed properties"
        ]
    },
    {
        "q": "Which of the following is true about the 'dynamic components' feature in Vue.js?",
        "o": [
            "It allows switching components dynamically using <component :is>",
            "It prevents component rendering",
            "It disables reactivity",
            "It defines static data"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { nums: [1, 3, 5, 7] }\n}); // In template: <div id='app' v-for='num in nums.filter(n => n < 5)'>{{ num }}</div>",
        "o": [
            "1, 3",
            "1, 3, 5, 7",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'computed' function in Vue.js Composition API?",
        "o": [
            "To create reactive computed properties",
            "To define static data",
            "To bind attributes dynamically",
            "To handle lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { config: { level: 1 } },\n  watch: { 'config.level': function(newVal) { this.config.level = newVal + 2; } }\n}); // In script: vm.config.level = 3;",
        "o": [
            "level becomes 5",
            "level becomes 3",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a custom directive's 'inserted' hook in Vue.js?",
        "o": [
            "directives: { custom: { inserted(el, binding) { el.innerText = binding.value; } } }",
            "directives: { custom() { this.innerText = value; } }",
            "methods: { custom: { inserted(el) { el.innerText = value; } } }",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the '.native' modifier with v-on on a custom component in Vue.js?",
        "o": [
            "It listens for native DOM events on the component's root element",
            "It prevents event propagation",
            "It converts events to lowercase",
            "It disables event handling"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { state: true }\n}); // In template: <div id='app' v-if='state'>Active</div><div v-else>Inactive</div>",
        "o": [
            "Active",
            "Inactive",
            "Both Active and Inactive",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'shallowRef' function in Vue.js Composition API?",
        "o": [
            "It creates a ref with shallow reactivity",
            "It creates a deeply reactive object",
            "It defines event handlers",
            "It disables component rendering"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { attrs: { title: 'Tooltip', 'data-id': '123' } }\n}); // In template: <div id='app' v-bind='attrs'>Hover</div>",
        "o": [
            "Div with title='Tooltip' and data-id='123'",
            "Div without attributes",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'afterEach' navigation guard in Vue Router?",
        "o": [
            "To execute code after each route navigation",
            "To define reactive data",
            "To create custom directives",
            "To bind event handlers"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to handle an event only when the Meta key is pressed in Vue.js?",
        "o": [
            ".meta",
            ".cmd",
            ".ctrl",
            ".option"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { str: 'Vue.js App' }\n}); // In template: <div id='app' v-text='str.split(\".\")[0]'></div>",
        "o": [
            "Vue",
            "Vue.js App",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'watch' function in Vue.js Composition API?",
        "o": [
            "To observe and react to changes in reactive data",
            "To define computed properties",
            "To bind attributes dynamically",
            "To create lifecycle hooks"
        ]
    },
    {
        "q": "Which of the following is true about the 'slot-scope' attribute in Vue.js 2.x?",
        "o": [
            "It allows access to scoped slot data in templates",
            "It prevents slot rendering",
            "It disables reactivity",
            "It defines static data"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { values: [2, 4, 6, 8] }\n}); // In template: <div id='app' v-for='val in values.filter(n => n % 4 === 0)'>{{ val }}</div>",
        "o": [
            "4, 8",
            "2, 4, 6, 8",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'onBeforeMount' function in Vue.js Composition API?",
        "o": [
            "To run code before the component is mounted",
            "To define reactive data",
            "To bind styles dynamically",
            "To create custom directives"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { data: { score: 100 } },\n  watch: { 'data.score': function(newVal) { this.data.score = newVal + 50; } }\n}); // In script: vm.data.score = 150;",
        "o": [
            "score becomes 200",
            "score becomes 150",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a custom directive's 'beforeMount' hook in Vue.js 3?",
        "o": [
            "directives: { custom: { beforeMount(el, binding) { el.style.display = binding.value; } } }",
            "directives: { custom() { this.style.display = value; } }",
            "methods: { custom: { beforeMount(el) { el.style.display = value; } } }",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the 'v-bind.attr' modifier in Vue.js?",
        "o": [
            "It forces binding as a DOM attribute",
            "It converts attributes to camelCase",
            "It prevents attribute binding",
            "It disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { enabled: false }\n}); // In template: <div id='app' v-if='enabled'>On</div><div v-else>Off</div>",
        "o": [
            "Off",
            "On",
            "Both On and Off",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'toRef' function in Vue.js Composition API?",
        "o": [
            "It creates a reactive ref for a specific object property",
            "It defines deeply reactive objects",
            "It binds event handlers",
            "It disables component rendering"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { props: { 'data-value': 'test', tabindex: '0' } }\n}); // In template: <div id='app' v-bind='props'>Focus</div>",
        "o": [
            "Div with data-value='test' and tabindex='0'",
            "Div without attributes",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeEach' global navigation guard in Vue Router?",
        "o": [
            "To execute code before any route navigation",
            "To define reactive data",
            "To bind styles dynamically",
            "To create computed properties"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to handle an event only when the right mouse button is clicked in Vue.js?",
        "o": [
            ".right",
            ".mouse",
            ".click",
            ".button"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { message: 'Welcome to Vue' }\n}); // In template: <div id='app' v-text='message.substring(0, 7)'></div>",
        "o": [
            "Welcome",
            "Welcome to Vue",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'onUnmounted' function in Vue.js Composition API?",
        "o": [
            "To run code when a component is unmounted",
            "To define custom directives",
            "To bind event handlers",
            "To create reactive data"
        ]
    },
    {
        "q": "Which of the following is true about the 'v-model' directive when used with a custom component in Vue.js?",
        "o": [
            "It requires a value prop and input event by default",
            "It only works with native DOM elements",
            "It prevents two-way binding",
            "It disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { items: ['cat', 'dog', 'bird'] }\n}); // In template: <div id='app' v-for='item in items.reverse()'>{{ item }}</div>",
        "o": [
            "bird, dog, cat",
            "cat, dog, bird",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'provide' function in Vue.js Composition API?",
        "o": [
            "To provide data to descendant components",
            "To define computed properties",
            "To bind attributes dynamically",
            "To create lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { config: { opacity: 0.5 } },\n  watch: { 'config.opacity': function(newVal) { this.config.opacity = newVal + 0.1; } }\n}); // In script: vm.config.opacity = 0.6;",
        "o": [
            "opacity becomes 0.7",
            "opacity becomes 0.6",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a custom directive's 'mounted' hook in Vue.js 3?",
        "o": [
            "directives: { custom: { mounted(el, binding) { el.style.fontSize = binding.value + 'px'; } } }",
            "directives: { custom() { this.style.fontSize = value; } }",
            "methods: { custom: { mounted(el) { el.style.fontSize = value; } } }",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the '.capture' modifier with v-on in Vue.js?",
        "o": [
            "It captures the event in the capturing phase",
            "It prevents event propagation",
            "It triggers the event only once",
            "It disables the event listener"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { active: true }\n}); // In template: <div id='app' v-if='active'>Yes</div><div v-else>No</div>",
        "o": [
            "Yes",
            "No",
            "Both Yes and No",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'inject' function in Vue.js Composition API?",
        "o": [
            "It retrieves data provided by ancestor components",
            "It defines reactive data",
            "It binds event handlers",
            "It disables component rendering"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { attrs: { 'data-type': 'info', role: 'alert' } }\n}); // In template: <div id='app' v-bind='attrs'>Alert</div>",
        "o": [
            "Div with data-type='info' and role='alert'",
            "Div without attributes",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'beforeResolve' navigation guard in Vue Router?",
        "o": [
            "To run code after route components are fetched but before navigation is confirmed",
            "To define reactive data",
            "To create custom directives",
            "To bind event handlers"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only when the middle mouse button is clicked in Vue.js?",
        "o": [
            ".middle",
            ".mouse",
            ".click",
            ".button"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { content: 'Vue is powerful' }\n}); // In template: <div id='app' v-text='content.replace(\"powerful\", \"awesome\")'></div>",
        "o": [
            "Vue is awesome",
            "Vue is powerful",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'onMounted' function in Vue.js Composition API?",
        "o": [
            "To run code after the component is mounted to the DOM",
            "To define reactive data",
            "To bind styles dynamically",
            "To create computed properties"
        ]
    },
    {
        "q": "Which of the following is true about the 'v-bind' directive with array syntax in Vue.js?",
        "o": [
            "It allows binding multiple classes or styles dynamically",
            "It prevents class binding",
            "It only works with single attributes",
            "It disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { numbers: [3, 6, 9, 12] }\n}); // In template: <div id='app' v-for='num in numbers.map(n => n / 3)'>{{ num }}</div>",
        "o": [
            "1, 2, 3, 4",
            "3, 6, 9, 12",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'onBeforeUpdate' function in Vue.js Composition API?",
        "o": [
            "To run code before the component's DOM is updated",
            "To define custom directives",
            "To bind event handlers",
            "To create reactive data"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { settings: { speed: 100 } },\n  watch: { 'settings.speed': function(newVal) { this.settings.speed = newVal + 20; } }\n}); // In script: vm.settings.speed = 120;",
        "o": [
            "speed becomes 140",
            "speed becomes 120",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a custom directive's 'beforeUpdate' hook in Vue.js 3?",
        "o": [
            "directives: { custom: { beforeUpdate(el, binding) { el.style.border = binding.value; } } }",
            "directives: { custom() { this.style.border = value; } }",
            "methods: { custom: { beforeUpdate(el) { el.style.border = value; } } }",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the '.self' modifier with v-on in Vue.js?",
        "o": [
            "It triggers the event only if the event target is the element itself",
            "It captures the event in the capturing phase",
            "It prevents event propagation",
            "It disables the event listener"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { visible: true }\n}); // In template: <div id='app' v-if='visible'>Display</div><div v-else>Hidden</div>",
        "o": [
            "Display",
            "Hidden",
            "Both Display and Hidden",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'markRaw' function in Vue.js Composition API?",
        "o": [
            "It marks an object as non-reactive",
            "It creates a deeply reactive object",
            "It binds event handlers",
            "It defines computed properties"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { attrs: { 'aria-hidden': 'true', role: 'dialog' } }\n}); // In template: <div id='app' v-bind='attrs'>Dialog</div>",
        "o": [
            "Div with aria-hidden='true' and role='dialog'",
            "Div without attributes",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'onUpdated' function in Vue.js Composition API?",
        "o": [
            "To run code after the component's DOM is updated",
            "To define reactive data",
            "To bind attributes dynamically",
            "To create custom directives"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to prevent the default behavior of an event in Vue.js?",
        "o": [
            ".prevent",
            ".stop",
            ".once",
            ".capture"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { title: 'Vue Title' }\n}); // In template: <div id='app' v-text='title.toLowerCase()'></div>",
        "o": [
            "vue title",
            "Vue Title",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'onBeforeUnmount' function in Vue.js Composition API?",
        "o": [
            "To run code before the component is unmounted",
            "To handle DOM events",
            "To define computed properties",
            "To bind styles dynamically"
        ]
    },
    {
        "q": "Which of the following is true about the 'v-for' directive when used with a range in Vue.js?",
        "o": [
            "It can loop over a numerical range like v-for='n in 10'",
            "It only works with arrays",
            "It prevents looping over objects",
            "It disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { list: ['one', 'two', 'three'] }\n}); // In template: <div id='app' v-for='item in list.join(\", \")'>{{ item }}</div>",
        "o": [
            "o,n,e,,, ,t,w,o,,, ,t,h,r,e,e",
            "one, two, three",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'effectScope' function in Vue.js Composition API?",
        "o": [
            "To create a scope for managing reactive effects",
            "To define reactive data",
            "To bind event handlers",
            "To create lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { data: { points: 0 } },\n  watch: { 'data.points': function(newVal) { this.data.points = newVal + 5; } }\n}); // In script: vm.data.points = 10;",
        "o": [
            "points becomes 15",
            "points becomes 10",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a custom directive's 'updated' hook in Vue.js 3?",
        "o": [
            "directives: { custom: { updated(el, binding) { el.style.color = binding.value; } } }",
            "directives: { custom() { this.style.color = value; } }",
            "methods: { custom: { updated(el) { el.style.color = value; } } }",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the '.stop' modifier with v-on in Vue.js?",
        "o": [
            "It stops event propagation",
            "It prevents the default behavior",
            "It triggers the event only once",
            "It captures the event"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { show: false }\n}); // In template: <div id='app' v-if='show'>True</div><div v-else>False</div>",
        "o": [
            "False",
            "True",
            "Both True and False",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'customRef' function in Vue.js Composition API?",
        "o": [
            "It allows creating a custom ref with explicit control over dependency tracking and triggering",
            "It creates a shallow ref",
            "It defines computed properties",
            "It disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { attrs: { id: 'main', 'data-role': 'container' } }\n}); // In template: <div id='app' v-bind='attrs'>Main</div>",
        "o": [
            "Div with id='main' and data-role='container'",
            "Div without attributes",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'onErrorCaptured' function in Vue.js Composition API?",
        "o": [
            "To capture errors from descendant components",
            "To define reactive data",
            "To bind event handlers",
            "To create computed properties"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to stop event propagation in Vue.js?",
        "o": [
            ".stop",
            ".prevent",
            ".once",
            ".self"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { name: 'Vue.js' }\n}); // In template: <div id='app' v-text='name.charAt(0)'></div>",
        "o": [
            "V",
            "Vue.js",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'onActivated' function in Vue.js Composition API?",
        "o": [
            "To run code when a kept-alive component is activated",
            "To handle DOM events",
            "To define custom directives",
            "To bind styles dynamically"
        ]
    },
    {
        "q": "Which of the following is true about the 'v-for' directive with an object in Vue.js?",
        "o": [
            "It iterates over the object's properties",
            "It only works with arrays",
            "It prevents rendering lists",
            "It disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { obj: { a: 1, b: 2 } }\n}); // In template: <div id='app' v-for='(value, key) in obj'>{{ value }}</div>",
        "o": [
            "1 and 2",
            "a and b",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'onDeactivated' function in Vue.js Composition API?",
        "o": [
            "To run code when a kept-alive component is deactivated",
            "To define reactive data",
            "To bind attributes dynamically",
            "To create lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { info: { temp: 25 } },\n  watch: { 'info.temp': function(newVal) { this.info.temp = newVal + 5; } }\n}); // In script: vm.info.temp = 30;",
        "o": [
            "temp becomes 35",
            "temp becomes 30",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a custom directive's 'beforeUnmount' hook in Vue.js 3?",
        "o": [
            "directives: { custom: { beforeUnmount(el) { el.removeEventListener('click'); } } }",
            "directives: { custom() { this.removeEventListener('click'); } }",
            "methods: { custom: { beforeUnmount(el) { el.removeEventListener('click'); } } }",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the '.once' modifier with v-on in Vue.js?",
        "o": [
            "The event handler is called only once",
            "It stops event propagation",
            "It prevents the default behavior",
            "It captures the event"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { toggle: false }\n}); // In template: <div id='app' v-if='toggle'>On</div><div v-else>Off</div>",
        "o": [
            "Off",
            "On",
            "Both On and Off",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'isProxy' function in Vue.js?",
        "o": [
            "It checks if an object is a reactive proxy",
            "It creates a reactive object",
            "It defines computed properties",
            "It disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { attrs: { href: '#', target: '_blank' } }\n}); // In template: <a id='app' v-bind='attrs'>Link</a>",
        "o": [
            "Link with href='#' and target='_blank'",
            "Link without attributes",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'onServerPrefetch' function in Vue.js Composition API?",
        "o": [
            "To prefetch data on the server during SSR",
            "To define reactive data",
            "To bind event handlers",
            "To create custom directives"
        ]
    },
    {
        "q": "Which modifier can be used with v-on to trigger an event only on a specific key, like Tab, in Vue.js?",
        "o": [
            ".tab",
            ".key",
            ".press",
            ".input"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { message: 'Hello World' }\n}); // In template: <div id='app' v-text='message.split(\" \")[1]'></div>",
        "o": [
            "World",
            "Hello World",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'onRenderTracked' function in Vue.js Composition API?",
        "o": [
            "To debug dependency tracking during rendering",
            "To handle DOM events",
            "To define computed properties",
            "To bind styles dynamically"
        ]
    },
    {
        "q": "Which of the following is true about the 'v-html' directive in Vue.js?",
        "o": [
            "It inserts raw HTML into the element",
            "It inserts text content",
            "It binds attributes dynamically",
            "It creates two-way binding"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { colors: { red: 255, green: 0, blue: 0 } }\n}); // In template: <div id='app' v-for='(val, color) in colors'>{{ color }}</div>",
        "o": [
            "red, green, blue",
            "255, 0, 0",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'onRenderTriggered' function in Vue.js Composition API?",
        "o": [
            "To debug what triggers a re-render",
            "To define reactive data",
            "To bind attributes dynamically",
            "To create lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { user: { id: 1 } },\n  watch: { 'user.id': function(newVal) { this.user.id = newVal + 10; } }\n}); // In script: vm.user.id = 2;",
        "o": [
            "id becomes 12",
            "id becomes 2",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a custom directive's 'unmounted' hook in Vue.js 3?",
        "o": [
            "directives: { custom: { unmounted(el) { el.remove(); } } }",
            "directives: { custom() { this.remove(); } }",
            "methods: { custom: { unmounted(el) { el.remove(); } } }",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the 'v-text' directive in Vue.js?",
        "o": [
            "It sets the element's text content",
            "It sets the element's HTML content",
            "It binds an attribute dynamically",
            "It creates a two-way binding"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { flag: true }\n}); // In template: <div id='app' v-if='flag'>Positive</div><div v-else>Negative</div>",
        "o": [
            "Positive",
            "Negative",
            "Both Positive and Negative",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'unref' function in Vue.js?",
        "o": [
            "It returns the value of a ref or the original value",
            "It creates a reactive ref",
            "It defines computed properties",
            "It disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { attrs: { src: 'image.jpg', alt: 'Image' } }\n}); // In template: <img id='app' v-bind='attrs'>",
        "o": [
            "Img with src='image.jpg' and alt='Image'",
            "Img without attributes",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'nextTick' method in Vue.js?",
        "o": [
            "To execute a function after the next DOM update cycle",
            "To define reactive data",
            "To bind event handlers",
            "To create computed properties"
        ]
    },
    {
        "q": "Which directive in Vue.js is used to conditionally add or remove an element from the DOM?",
        "o": [
            "v-if",
            "v-show",
            "v-bind",
            "v-model"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { text: 'Vue.js' }\n}); // In template: <div id='app' v-text='text + \"!\"'></div>",
        "o": [
            "Vue.js!",
            "Vue.js",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the '$el' property in a Vue instance?",
        "o": [
            "To reference the DOM element the instance is mounted to",
            "To store reactive data",
            "To define methods",
            "To create watchers"
        ]
    },
    {
        "q": "Which of the following is true about the 'v-show' directive in Vue.js?",
        "o": [
            "It toggles the display CSS property",
            "It removes the element from the DOM",
            "It binds attributes dynamically",
            "It creates two-way binding"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { person: { name: 'Bob', age: 30 } }\n}); // In template: <div id='app' v-for='(value, key) in person'>{{ key }}: {{ value }}</div>",
        "o": [
            "name: Bob and age: 30",
            "Bob and 30",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the '$refs' property in a Vue instance?",
        "o": [
            "To access DOM elements or child components directly",
            "To define reactive data",
            "To bind styles dynamically",
            "To create computed properties"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { counter: 5 },\n  watch: { counter(newVal) { this.counter = newVal + 1; } }\n}); // In script: vm.counter = 6;",
        "o": [
            "counter becomes 7",
            "counter becomes 6",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which lifecycle hook is called right after the Vue instance is initialized?",
        "o": [
            "beforeCreate",
            "created",
            "beforeMount",
            "mounted"
        ]
    },
    {
        "q": "What happens when you use v-bind on the 'style' attribute in Vue.js?",
        "o": [
            "It dynamically binds inline styles",
            "It binds class names",
            "It creates a two-way binding",
            "It conditionally renders the element"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { condition: false }\n}); // In template: <div id='app' v-if='condition'>If</div><div v-else>Else</div>",
        "o": [
            "Else",
            "If",
            "Both If and Else",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'data' option in a Vue component?",
        "o": [
            "It should be a function to avoid sharing data between instances",
            "It must be an object",
            "It cannot be reactive",
            "It is used for computed properties"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { classes: ['class1', 'class2'] }\n}); // In template: <div id='app' v-bind:class='classes'>Classes</div>",
        "o": [
            "Div with class1 and class2",
            "Div without classes",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the '$emit' method in a Vue.js component?",
        "o": [
            "To emit custom events to parent components",
            "To define reactive data",
            "To bind styles dynamically",
            "To create computed properties"
        ]
    },
    {
        "q": "Which modifier can be used with v-model to prevent automatic updates until a specific event in Vue.js?",
        "o": [
            ".lazy",
            ".trim",
            ".number",
            ".update"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { text: 'Vue is cool' }\n}); // In template: <div id='app' v-text='text.split(\" \")[2].toUpperCase()'></div>",
        "o": [
            "COOL",
            "Vue is cool",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the '$nextTick' function in Vue.js Composition API?",
        "o": [
            "To execute code after the next DOM update",
            "To handle event listeners",
            "To define custom directives",
            "To bind attributes dynamically"
        ]
    },
    {
        "q": "Which of the following is true about the 'v-on' directive with object syntax in Vue.js?",
        "o": [
            "It allows binding multiple event listeners at once",
            "It prevents event handling",
            "It only works with single events",
            "It disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { numbers: [5, 10, 15, 20] }\n}); // In template: <div id='app' v-for='num in numbers.filter(n => n >= 10)'>{{ num }}</div>",
        "o": [
            "10, 15, 20",
            "5, 10, 15, 20",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'onBeforeCreate' function in Vue.js Composition API?",
        "o": [
            "To run code before the component is initialized",
            "To define reactive data",
            "To bind styles dynamically",
            "To create computed properties"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { config: { size: 12 } },\n  watch: { 'config.size': function(newVal) { this.config.size = newVal + 3; } }\n}); // In script: vm.config.size = 15;",
        "o": [
            "size becomes 18",
            "size becomes 15",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which of the following is a valid way to define a custom directive's 'created' hook in Vue.js 3?",
        "o": [
            "directives: { custom: { created(el, binding) { el.style.backgroundColor = binding.value; } } }",
            "directives: { custom() { this.style.backgroundColor = value; } }",
            "methods: { custom: { created(el) { el.style.backgroundColor = value; } } }",
            "None of the options"
        ]
    },
    {
        "q": "What happens when you use the '.exact' modifier with v-on in Vue.js?",
        "o": [
            "It ensures the event triggers only with exact modifier keys",
            "It stops event propagation",
            "It triggers the event only once",
            "It captures the event"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { visible: true }\n}); // In template: <div id='app' v-if='visible'>Visible</div><div v-else>Hidden</div>",
        "o": [
            "Visible",
            "Hidden",
            "Both Visible and Hidden",
            "None"
        ]
    },
    {
        "q": "Which of the following is true about the 'reactive' function in Vue.js Composition API?",
        "o": [
            "It creates a deeply reactive object",
            "It creates a shallow reactive object",
            "It defines event handlers",
            "It disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { attrs: { 'data-label': 'test', title: 'Tooltip' } }\n}); // In template: <div id='app' v-bind='attrs'>Label</div>",
        "o": [
            "Div with data-label='test' and title='Tooltip'",
            "Div without attributes",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'methods' property in a Vue instance?",
        "o": [
            "To define functions that can be called in the template or other methods",
            "To store reactive data",
            "To define computed properties",
            "To watch for data changes"
        ]
    },
    {
        "q": "Which directive is used to attach event listeners in Vue.js?",
        "o": [
            "v-on",
            "v-bind",
            "v-model",
            "v-if"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { message: 'Hello' }\n}); // In template: <div id='app'>{{ message + ' Vue!' }}</div>",
        "o": [
            "Hello Vue!",
            "Hello",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'watch' property in a Vue instance?",
        "o": [
            "To react to changes in data properties",
            "To define reusable logic",
            "To bind attributes dynamically",
            "To render lists"
        ]
    },
    {
        "q": "Which of the following is a shorthand for v-on in Vue.js?",
        "o": [
            "@",
            ":",
            "v@",
            "on:"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { count: 0 },\n  methods: { increment() { this.count++; } }\n}); // In template: <button id='app' @click='increment'>{{ count }}</button> // After one click",
        "o": [
            "1",
            "0",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the main difference between props and data in a Vue component?",
        "o": [
            "Props are passed from parent, data is internal state",
            "Data is passed from parent, props are internal",
            "Both are the same",
            "Props are reactive, data is not"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { isActive: true }\n}); // In template: <div id='app' :class='{ active: isActive }'>Class Bind</div>",
        "o": [
            "Div with class 'active'",
            "Div without class",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which lifecycle hook is called after the DOM is rendered in Vue.js?",
        "o": [
            "mounted",
            "created",
            "beforeCreate",
            "beforeMount"
        ]
    },
    {
        "q": "What happens if you define a computed property without a getter?",
        "o": [
            "It throws an error",
            "It uses a default getter",
            "It becomes a method",
            "It is ignored"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { style: { color: 'blue' } }\n}); // In template: <div id='app' :style='style'>Styled Text</div>",
        "o": [
            "Text in blue color",
            "Text in default color",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'key' attribute in v-for loops?",
        "o": [
            "To provide a unique identifier for efficient DOM updates",
            "To define the loop index",
            "To bind data properties",
            "To prevent rendering"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { items: [1, 2, 3] }\n}); // In template: <ul id='app'><li v-for='(item, index) in items' :key='index'>{{ item }}</li></ul>",
        "o": [
            "List with 1, 2, 3",
            "Empty list",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the '$parent' property in a Vue.js component?",
        "o": [
            "To access the parent component instance",
            "To define reactive data",
            "To bind event handlers",
            "To create computed properties"
        ]
    },
    {
        "q": "Which directive in Vue.js is used to toggle an element's visibility without removing it from the DOM?",
        "o": [
            "v-show",
            "v-if",
            "v-bind",
            "v-model"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { greeting: 'Hi there' }\n}); // In template: <div id='app'>{{ greeting + '!' }}</div>",
        "o": [
            "Hi there!",
            "Hi there",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'computed' property in a Vue instance?",
        "o": [
            "To define reactive properties that depend on other data",
            "To handle DOM events",
            "To store static data",
            "To loop through arrays"
        ]
    },
    {
        "q": "Which of the following is a shorthand for v-bind in Vue.js?",
        "o": [
            ":",
            "@",
            "v:",
            "bind:"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { quantity: 1 },\n  methods: { increase() { this.quantity++; } }\n}); // In template: <button id='app' @click='increase'>{{ quantity }}</button> // After two clicks",
        "o": [
            "3",
            "1",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the main difference between v-if and v-show in Vue.js?",
        "o": [
            "v-if removes the element from the DOM, v-show toggles visibility",
            "v-show removes the element, v-if toggles visibility",
            "Both remove the element from the DOM",
            "Both toggle visibility without DOM changes"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { isEnabled: false }\n}); // In template: <div id='app' :class='{ enabled: isEnabled }'>Status</div>",
        "o": [
            "Div without class 'enabled'",
            "Div with class 'enabled'",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which lifecycle hook is triggered just before a Vue instance is destroyed?",
        "o": [
            "beforeDestroy",
            "destroyed",
            "beforeUpdate",
            "updated"
        ]
    },
    {
        "q": "What happens if you try to access a non-reactive property in a Vue.js template?",
        "o": [
            "It renders without reactivity",
            "It throws an error",
            "It becomes reactive automatically",
            "It prevents rendering"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { style: { fontSize: '16px' } }\n}); // In template: <div id='app' :style='style'>Text</div>",
        "o": [
            "Text with font size 16px",
            "Text with default font size",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'v-once' directive in Vue.js?",
        "o": [
            "To render an element only once and prevent updates",
            "To bind attributes dynamically",
            "To create two-way binding",
            "To loop through arrays"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { items: ['apple', 'banana'] }\n}); // In template: <ul id='app'><li v-for='item in items' :key='item'>{{ item.toUpperCase() }}</li></ul>",
        "o": [
            "List with APPLE, BANANA",
            "List with apple, banana",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'props' property in a Vue.js component?",
        "o": [
            "To receive data from the parent component",
            "To define internal state",
            "To compute derived values",
            "To watch for changes"
        ]
    },
    {
        "q": "Which directive is used for one-way data binding in Vue.js?",
        "o": [
            "v-bind",
            "v-model",
            "v-on",
            "v-if"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { name: 'Vue' }\n}); // In template: <div id='app'>{{ name + '.js' }}</div>",
        "o": [
            "Vue.js",
            "Vue",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'mounted' lifecycle hook in Vue.js?",
        "o": [
            "To perform actions after the instance is attached to the DOM",
            "To initialize data",
            "To destroy the instance",
            "To update data"
        ]
    },
    {
        "q": "Which of the following is true about Vue.js components?",
        "o": [
            "They are reusable Vue instances",
            "They cannot have their own data",
            "They must be global",
            "They cannot receive props"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { counter: 0 },\n  methods: { decrement() { this.counter--; } }\n}); // In template: <button id='app' @click='decrement'>{{ counter }}</button> // After one click",
        "o": [
            "-1",
            "0",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the difference between a method and a computed property in Vue.js?",
        "o": [
            "Computed properties are cached, methods are called every time",
            "Methods are cached, computed properties are not",
            "Both are the same",
            "Computed properties cannot access data"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { hasError: true }\n}); // In template: <div id='app' :class='{ error: hasError }'>Error Check</div>",
        "o": [
            "Div with class 'error'",
            "Div without class",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which lifecycle hook is called right before the Vue instance is destroyed?",
        "o": [
            "beforeDestroy",
            "destroyed",
            "beforeUpdate",
            "updated"
        ]
    },
    {
        "q": "What happens if you add a new property to the data object after the Vue instance is created?",
        "o": [
            "It is not reactive unless using Vue.set",
            "It is automatically reactive",
            "It throws an error",
            "It updates the DOM immediately"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { style: { backgroundColor: 'yellow' } }\n}); // In template: <div id='app' :style='style'>Background</div>",
        "o": [
            "Div with yellow background",
            "Div with default background",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'v-pre' directive in Vue.js?",
        "o": [
            "To skip compilation for an element and its children",
            "To bind attributes dynamically",
            "To create two-way binding",
            "To conditionally render elements"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { fruits: ['orange', 'grape'] }\n}); // In template: <ul id='app'><li v-for='(fruit, index) in fruits' :key='index'>{{ fruit }}</li></ul>",
        "o": [
            "List with orange, grape",
            "Empty list",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'el' option in a Vue.js instance?",
        "o": [
            "To specify the DOM element where the Vue instance will be mounted",
            "To define reactive data",
            "To define methods",
            "To compute values"
        ]
    },
    {
        "q": "Which directive is used for one-way binding of attributes in Vue.js?",
        "o": [
            "v-bind",
            "v-model",
            "v-on",
            "v-for"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { text: 'Vue' }\n}); // In template: <div id='app'>{{ text + '.js' }}</div>",
        "o": [
            "Vue.js",
            "Vue",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is a computed property in Vue.js used for?",
        "o": [
            "To create reactive derived values",
            "To handle events",
            "To bind data two-way",
            "To loop over arrays"
        ]
    },
    {
        "q": "Which of the following is a valid shorthand for v-bind in Vue.js?",
        "o": [
            ":",
            "@",
            "v:",
            "bind:"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { value: 0 },\n  methods: { add() { this.value += 1; } }\n}); // In template: <button id='app' @click='add'>{{ value }}</button> // After one click",
        "o": [
            "1",
            "0",
            "undefined",
            "None"
        ]
    },
    {
        "q": "What is the main benefit of using computed properties over methods in Vue.js?",
        "o": [
            "Computed properties are cached based on dependencies",
            "Methods are cached, computed are not",
            "Computed properties cannot be used in templates",
            "There is no benefit"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { hasBorder: true }\n}); // In template: <div id='app' :class='{ border: hasBorder }'>Border Check</div>",
        "o": [
            "Div with class 'border'",
            "Div without class",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "Which lifecycle hook is called after the Vue instance has finished updating the DOM?",
        "o": [
            "updated",
            "beforeUpdate",
            "mounted",
            "created"
        ]
    },
    {
        "q": "What happens when you change a reactive data property in Vue.js?",
        "o": [
            "The DOM updates automatically",
            "You must call a method to update",
            "It throws an error",
            "Nothing happens"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { style: { textAlign: 'center' } }\n}); // In template: <div id='app' :style='style'>Centered</div>",
        "o": [
            "Centered text",
            "Left-aligned text",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the purpose of the 'v-cloak' directive in Vue.js?",
        "o": [
            "To hide elements until Vue.js has compiled them",
            "To bind attributes dynamically",
            "To create two-way binding",
            "To conditionally render elements"
        ]
    },
    {
        "q": "What is the output of the following code",
        "c": "new Vue({\n  el: '#app',\n  data: { animals: ['lion', 'tiger'] }\n}); // In template: <ul id='app'><li v-for='animal in animals' :key='animal'>{{ animal }}</li></ul>",
        "o": [
            "List with lion, tiger",
            "Empty list",
            "An error occurs",
            "None"
        ]
    },
    {
        "q": "What is the primary role of the Vue instance in a Vue.js application?",
        "o": [
            "It serves as the root of the application and manages the entire component tree",
            "It handles HTTP requests to the server",
            "It compiles templates into static HTML",
            "It manages global state without reactivity"
        ]
    },
    {
        "q": "Which directive is used to bind an attribute to an expression in Vue.js?",
        "o": [
            "v-bind",
            "v-model",
            "v-on",
            "v-if"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<div>{{ message.toUpperCase() }}</div>\", \"data\": function() { return { message: 'hello' }; }}",
        "o": [
            "HELLO",
            "hello",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "How does v-model differ from v-bind in Vue.js?",
        "o": [
            "v-model provides two-way data binding, while v-bind provides one-way data binding",
            "v-model is used for event handling, while v-bind is for data binding",
            "v-model is for attribute binding, while v-bind is for form inputs",
            "v-model and v-bind are interchangeable"
        ]
    },
    {
        "q": "What happens when a computed property in Vue.js depends on a reactive data property?",
        "o": [
            "The computed property automatically updates when the reactive data changes",
            "The computed property remains static until manually updated",
            "The computed property throws an error if the data changes",
            "The computed property is only recalculated on page refresh"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<div>{{ fullName }}</div>\", \"data\": function() { return { firstName: 'John', lastName: 'Doe' }; }, \"computed\": { fullName: function() { return this.firstName + ' ' + this.lastName; } }}",
        "o": [
            "John Doe",
            "John",
            "Doe",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about computed properties in Vue.js?",
        "o": [
            "They are cached based on their reactive dependencies",
            "They are recalculated on every render",
            "They cannot access data properties",
            "They are only used for event handling"
        ]
    },
    {
        "q": "What will happen if you try to directly modify a prop inside a child component in Vue.js?",
        "o": [
            "It will throw a warning and not update the prop",
            "It will update the prop and reflect in the parent",
            "It will cause the component to re-render infinitely",
            "It will silently update the prop without warnings"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<input v-model='text' />\", \"data\": function() { return { text: 'Vue' }; }}",
        "o": [
            "The input field displays 'Vue' and updates with user input",
            "The input field is empty and does not update",
            "The input field displays 'Vue' but does not update",
            "An error occurs due to invalid v-model usage"
        ]
    },
    {
        "q": "Which lifecycle hook is called after the Vue instance has been mounted to the DOM?",
        "o": [
            "mounted",
            "created",
            "beforeMount",
            "updated"
        ]
    },
    {
        "q": "What is the purpose of the v-bind directive in Vue.js?",
        "o": [
            "To dynamically bind attributes or props to expressions",
            "To create two-way data binding for form inputs",
            "To conditionally render elements",
            "To handle DOM events"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<div>{{ reversedMessage }}</div>\", \"data\": function() { return { message: 'Hello' }; }, \"computed\": { reversedMessage: function() { return this.message.split('').reverse().join(''); } }}",
        "o": [
            "olleH",
            "Hello",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "How does Vue.js ensure reactivity in data binding?",
        "o": [
            "By using Object.defineProperty or Proxy to track changes",
            "By manually updating the DOM on every change",
            "By polling the data properties periodically",
            "By using event listeners on all data properties"
        ]
    },
    {
        "q": "What is the significance of the `el` property in a Vue instance?",
        "o": [
            "It specifies the DOM element where the Vue instance is mounted",
            "It defines the event listeners for the Vue instance",
            "It sets the initial data object for the Vue instance",
            "It configures the template compiler for the Vue instance"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<div>{{ count + 1 }}</div>\", \"data\": function() { return { count: 5 }; }}",
        "o": [
            "6",
            "5",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "Which directive in Vue.js is used to create two-way data binding on form input elements?",
        "o": [
            "v-model",
            "v-bind",
            "v-on",
            "v-for"
        ]
    },
    {
        "q": "What happens when a computed property has a setter in Vue.js?",
        "o": [
            "It allows the computed property to be updated and triggers reactive updates",
            "It prevents the computed property from being cached",
            "It throws an error when the computed property is accessed",
            "It disables reactivity for the computed property"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<div v-bind:class='className'>Test</div>\", \"data\": function() { return { className: 'active' }; }}",
        "o": [
            "The div has the class 'active'",
            "The div has no class",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the role of the `data` function in a Vue instance?",
        "o": [
            "It returns an object that Vue makes reactive for data binding",
            "It defines the computed properties for the instance",
            "It specifies the DOM events to listen for",
            "It configures the routing for the Vue application"
        ]
    },
    {
        "q": "Which of the following is true about Vue.js directives?",
        "o": [
            "Directives are special attributes with the 'v-' prefix that provide reactive behavior",
            "Directives are used to define component templates",
            "Directives are only used for event handling",
            "Directives cannot be used with expressions"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<div>{{ isActive ? 'Active' : 'Inactive' }}</div>\", \"data\": function() { return { isActive: true }; }}",
        "o": [
            "Active",
            "Inactive",
            "true",
            "undefined"
        ]
    },
    {
        "q": "What happens if you define a computed property that depends on a non-reactive property in Vue.js?",
        "o": [
            "The computed property will not update when the non-reactive property changes",
            "The computed property will still update reactively",
            "Vue throws a warning about non-reactive dependencies",
            "The computed property becomes a method instead"
        ]
    },
    {
        "q": "Which lifecycle hook is called immediately after the Vue instance is created?",
        "o": [
            "created",
            "mounted",
            "beforeCreate",
            "beforeMount"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<input v-model='message' />\", \"data\": function() { return { message: '' }; }}",
        "o": [
            "The input field is empty and updates with user input",
            "The input field displays 'message' and does not update",
            "The input field throws an error",
            "The input field is not rendered"
        ]
    },
    {
        "q": "How does Vue.js handle reactivity for arrays when using methods like push()?",
        "o": [
            "Vue wraps array methods to ensure reactivity",
            "Arrays are non-reactive by default",
            "Vue requires manual updates for array changes",
            "Vue uses a separate observer for arrays"
        ]
    },
    {
        "q": "What is the purpose of the `v-bind:style` directive in Vue.js?",
        "o": [
            "To dynamically bind inline CSS styles to an element",
            "To bind class names to an element",
            "To handle style-related events",
            "To conditionally render style tags"
        ]
    },
    {
        "q": "What is the purpose of the `methods` property in a Vue instance?",
        "o": [
            "To define functions that can be called in response to events or expressions",
            "To define reactive data properties",
            "To cache computed properties",
            "To specify lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<div>{{ doubledValue }}</div>\", \"data\": function() { return { value: 10 }; }, \"computed\": { doubledValue: function() { return this.value * 2; } }}",
        "o": [
            "20",
            "10",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "Which directive is used to conditionally render an element in Vue.js?",
        "o": [
            "v-if",
            "v-bind",
            "v-model",
            "v-on"
        ]
    },
    {
        "q": "What happens when you use `v-bind` with a boolean attribute like `disabled` in Vue.js?",
        "o": [
            "The attribute is added or removed based on the truthiness of the bound expression",
            "The attribute is always added regardless of the expression",
            "The attribute is ignored unless explicitly set to true",
            "Vue throws an error for boolean attributes"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<div v-bind:id='dynamicId'>Content</div>\", \"data\": function() { return { dynamicId: 'test-id' }; }}",
        "o": [
            "The div has the id 'test-id'",
            "The div has no id",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "How does a computed property differ from a method in Vue.js?",
        "o": [
            "Computed properties are cached based on dependencies, while methods run every time they are called",
            "Computed properties can only return strings, while methods return any type",
            "Computed properties are non-reactive, while methods are reactive",
            "Computed properties cannot access data properties, unlike methods"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<div>{{ messageLength }}</div>\", \"data\": function() { return { message: 'Vue' }; }, \"computed\": { messageLength: function() { return this.message.length; } }}",
        "o": [
            "3",
            "Vue",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "What happens if you try to add a new reactive property to a Vue instance after it has been created?",
        "o": [
            "Vue cannot make the new property reactive unless set with Vue.set",
            "The new property is automatically reactive",
            "Vue throws an error when adding new properties",
            "The new property is reactive but not accessible in templates"
        ]
    },
    {
        "q": "Which lifecycle hook is called just before a Vue instance is destroyed?",
        "o": [
            "beforeDestroy",
            "destroyed",
            "beforeUpdate",
            "mounted"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<input v-model='number' type='number' />\", \"data\": function() { return { number: 42 }; }}",
        "o": [
            "The input field displays '42' and updates with user input",
            "The input field is empty and does not update",
            "The input field displays '42' but does not update",
            "An error occurs due to invalid v-model usage"
        ]
    },
    {
        "q": "What is the role of the `v-on` directive in Vue.js?",
        "o": [
            "To bind event listeners to DOM events",
            "To create two-way data binding",
            "To conditionally render elements",
            "To bind attributes to expressions"
        ]
    },
    {
        "q": "How does Vue.js handle reactivity for objects when adding new properties?",
        "o": [
            "New properties are not reactive unless added with Vue.set",
            "All new properties are automatically reactive",
            "Vue throws an error when new properties are added",
            "New properties are reactive only in development mode"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<div>{{ formattedPrice }}</div>\", \"data\": function() { return { price: 100 }; }, \"computed\": { formattedPrice: function() { return '$' + this.price; } }}",
        "o": [
            "$100",
            "100",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "What is the purpose of the `watch` property in a Vue instance?",
        "o": [
            "To observe and react to data property changes",
            "To define computed properties",
            "To handle DOM events",
            "To configure template rendering"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<div>{{ greeting }}</div>\", \"data\": function() { return { name: 'World' }; }, \"computed\": { greeting: function() { return 'Hello, ' + this.name + '!'; } }}",
        "o": [
            "Hello, World!",
            "World",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "Which directive is used to loop through a list of items in Vue.js?",
        "o": [
            "v-for",
            "v-if",
            "v-bind",
            "v-model"
        ]
    },
    {
        "q": "What happens when you use `v-model` on a component in Vue.js?",
        "o": [
            "It creates a two-way binding between the parent and the component's value prop",
            "It binds an attribute to the component",
            "It triggers an event without binding data",
            "It causes an error as v-model is not supported on components"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<div v-bind:style='styleObject'>Content</div>\", \"data\": function() { return { styleObject: { color: 'blue' } }; }}",
        "o": [
            "The div has blue text color",
            "The div has no styling",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "How does Vue.js handle reactivity when an array element is modified directly by index?",
        "o": [
            "Direct index modifications are not reactive unless using Vue.set",
            "Direct index modifications are automatically reactive",
            "Vue throws an error for direct index modifications",
            "Direct index modifications trigger a full re-render"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<div>{{ isEven ? 'Even' : 'Odd' }}</div>\", \"data\": function() { return { number: 4 }; }, \"computed\": { isEven: function() { return this.number % 2 === 0; } }}",
        "o": [
            "Even",
            "Odd",
            "4",
            "undefined"
        ]
    },
    {
        "q": "What is the role of the `beforeCreate` lifecycle hook in Vue.js?",
        "o": [
            "It is called before the Vue instance is initialized, before reactivity is set up",
            "It is called after the instance is mounted to the DOM",
            "It is called after the instance is destroyed",
            "It is called when a computed property is updated"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<input v-model='text' placeholder='Enter text' />\", \"data\": function() { return { text: 'Hello' }; }}",
        "o": [
            "The input field displays 'Hello' and updates with user input",
            "The input field displays 'Enter text' and does not update",
            "The input field is empty and does not update",
            "An error occurs due to invalid v-model usage"
        ]
    },
    {
        "q": "Which of the following is true about the `v-bind` directive shorthand in Vue.js?",
        "o": [
            "It can be written as ':' followed by the attribute name",
            "It requires the full 'v-bind' syntax",
            "It is only used for class and style bindings",
            "It cannot be used with props"
        ]
    },
    {
        "q": "What happens when a computed property depends on another computed property in Vue.js?",
        "o": [
            "It is reactive and updates when the dependent computed property changes",
            "It causes an infinite loop error",
            "It is not reactive and remains static",
            "It throws a warning about nested computed properties"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\"template\": \"<div>{{ capitalized }}</div>\", \"data\": function() { return { text: 'vue' }; }, \"computed\": { capitalized: function() { return this.text.charAt(0).toUpperCase() + this.text.slice(1); } }}",
        "o": [
            "Vue",
            "vue",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "How does Vue.js ensure that computed properties are efficient?",
        "o": [
            "By caching their values and only recomputing when dependencies change",
            "By recalculating them on every render",
            "By using a separate thread for computation",
            "By limiting their access to data properties"
        ]
    },
    {
        "q": "What is the purpose of the `props` option in a Vue.js component?",
        "o": [
            "To define data passed from a parent component to a child component",
            "To define reactive data within the component",
            "To specify computed properties for the component",
            "To handle DOM events within the component"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ totalPrice }}</div>\",\n  \"data\": function() { return { price: 50, quantity: 2 }; },\n  \"computed\": { totalPrice: function() { return this.price * this.quantity; } }\n}",
        "o": [
            "100",
            "50",
            "2",
            "undefined"
        ]
    },
    {
        "q": "Which directive in Vue.js is used to conditionally toggle an element's visibility without removing it from the DOM?",
        "o": [
            "v-show",
            "v-if",
            "v-bind",
            "v-model"
        ]
    },
    {
        "q": "What happens when you use `v-model` with a non-input element in Vue.js?",
        "o": [
            "It throws an error as v-model is only for form inputs or components",
            "It creates a one-way binding automatically",
            "It silently ignores the directive",
            "It binds the element's inner text to the data"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-bind:title='tooltipText'>Hover me</div>\",\n  \"data\": function() { return { tooltipText: 'Info' }; }\n}",
        "o": [
            "The div has a title attribute of 'Info'",
            "The div has no title attribute",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the difference between a computed property and a watcher in Vue.js?",
        "o": [
            "Computed properties are cached and synchronous, while watchers can handle asynchronous tasks",
            "Computed properties are asynchronous, while watchers are synchronous",
            "Computed properties cannot access data, while watchers can",
            "Computed properties are used for events, while watchers are for data binding"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ status }}</div>\",\n  \"data\": function() { return { count: 5 }; },\n  \"computed\": { status: function() { return this.count > 0 ? 'Positive' : 'Non-positive'; } }\n}",
        "o": [
            "Positive",
            "Non-positive",
            "5",
            "undefined"
        ]
    },
    {
        "q": "What is the role of the `updated` lifecycle hook in Vue.js?",
        "o": [
            "It is called after the DOM is updated due to reactive data changes",
            "It is called before the instance is created",
            "It is called when a computed property is defined",
            "It is called when a prop is updated"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<input v-model='inputValue' />\",\n  \"data\": function() { return { inputValue: 'Test' }; }\n}",
        "o": [
            "The input field displays 'Test' and updates with user input",
            "The input field is empty and does not update",
            "The input field displays 'Test' but does not update",
            "An error occurs due to invalid v-model usage"
        ]
    },
    {
        "q": "What is the effect of using `v-bind:class` with an object in Vue.js?",
        "o": [
            "It applies classes conditionally based on the object's key-value pairs",
            "It applies all classes listed in the object regardless of values",
            "It throws an error if the object contains false values",
            "It only applies the first class in the object"
        ]
    },
    {
        "q": "What happens if you define a computed property without dependencies in Vue.js?",
        "o": [
            "It is computed once and cached until the component is destroyed",
            "It is recomputed on every render",
            "It throws an error for missing dependencies",
            "It becomes a non-reactive data property"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ truncatedText }}</div>\",\n  \"data\": function() { return { text: 'Vue.js' }; },\n  \"computed\": { truncatedText: function() { return this.text.slice(0, 3); } }\n}",
        "o": [
            "Vue",
            "Vue.js",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "How does Vue.js handle reactivity for nested objects?",
        "o": [
            "Vue automatically makes nested objects reactive when the parent is reactive",
            "Nested objects are non-reactive by default",
            "Vue requires manual reactivity setup for nested objects",
            "Vue throws an error for nested objects"
        ]
    },
    {
        "q": "What is the purpose of the `key` attribute when using `v-for` in Vue.js?",
        "o": [
            "It helps Vue efficiently update the DOM by tracking element identity",
            "It defines the index of the looped items",
            "It binds data properties to the loop",
            "It triggers re-rendering of the entire list"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ formattedNumber }}</div>\",\n  \"data\": function() { return { number: 42 }; },\n  \"computed\": { formattedNumber: function() { return this.number.toString().padStart(3, '0'); } }\n}",
        "o": [
            "042",
            "42",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "Which directive in Vue.js is used to attach an event listener to an element?",
        "o": [
            "v-on",
            "v-bind",
            "v-model",
            "v-if"
        ]
    },
    {
        "q": "What happens if you modify a reactive data property inside a computed property in Vue.js?",
        "o": [
            "It causes a warning as computed properties should be side-effect free",
            "It automatically updates the DOM without issues",
            "It triggers an infinite loop",
            "It silently allows the modification"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-bind:data-test='testId'>Content</div>\",\n  \"data\": function() { return { testId: 'custom-id' }; }\n}",
        "o": [
            "The div has a data-test attribute of 'custom-id'",
            "The div has no data-test attribute",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the difference between `v-if` and `v-show` in Vue.js?",
        "o": [
            "v-if removes the element from the DOM, while v-show toggles visibility with CSS",
            "v-if toggles visibility with CSS, while v-show removes the element",
            "v-if is used for event handling, while v-show is for data binding",
            "v-if and v-show are interchangeable"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ isValid ? 'Valid' : 'Invalid' }}</div>\",\n  \"data\": function() { return { input: 'test' }; },\n  \"computed\": { isValid: function() { return this.input.length > 0; } }\n}",
        "o": [
            "Valid",
            "Invalid",
            "test",
            "undefined"
        ]
    },
    {
        "q": "What is the role of the `beforeUpdate` lifecycle hook in Vue.js?",
        "o": [
            "It is called before the DOM is updated due to reactive changes",
            "It is called after the DOM is updated",
            "It is called when the instance is created",
            "It is called when a prop is defined"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<input v-model='username' />\",\n  \"data\": function() { return { username: 'admin' }; }\n}",
        "o": [
            "The input field displays 'admin' and updates with user input",
            "The input field is empty and does not update",
            "The input field displays 'admin' but does not update",
            "An error occurs due to invalid v-model usage"
        ]
    },
    {
        "q": "What is the effect of using `v-bind:class` with an array in Vue.js?",
        "o": [
            "It applies all classes listed in the array to the element",
            "It applies only the first class in the array",
            "It throws an error if the array contains non-string values",
            "It conditionally applies classes based on truthy values"
        ]
    },
    {
        "q": "What happens if a computed property in Vue.js throws an error during calculation?",
        "o": [
            "Vue logs the error and returns undefined for the computed property",
            "Vue stops rendering the component",
            "Vue retries the computation automatically",
            "Vue ignores the error and uses the last cached value"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ joinedWords }}</div>\",\n  \"data\": function() { return { words: ['Vue', 'JS'] }; },\n  \"computed\": { joinedWords: function() { return this.words.join('-'); } }\n}",
        "o": [
            "Vue-JS",
            "Vue,JS",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "How does Vue.js handle reactivity when replacing an entire reactive array?",
        "o": [
            "Vue detects the replacement and maintains reactivity",
            "Vue loses reactivity for the new array",
            "Vue throws an error for array replacement",
            "Vue requires Vue.set for array replacement"
        ]
    },
    {
        "q": "What is the purpose of the `filters` option in a Vue.js component?",
        "o": [
            "To format or transform data for display in templates",
            "To define reactive data properties",
            "To handle DOM events",
            "To manage lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ message | uppercase }}</div>\",\n  \"data\": function() { return { message: 'hello' }; },\n  \"filters\": { uppercase: function(value) { return value.toUpperCase(); } }\n}",
        "o": [
            "HELLO",
            "hello",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "What is the role of the `provide` and `inject` options in Vue.js?",
        "o": [
            "To share data between components without prop drilling",
            "To define computed properties across components",
            "To bind events to child components",
            "To manage global state with reactivity"
        ]
    },
    {
        "q": "What happens when you use `v-once` directive in Vue.js?",
        "o": [
            "The element renders only once and does not update reactively",
            "The element re-renders on every data change",
            "The element is removed from the DOM after rendering",
            "The element throws an error if data changes"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-once>{{ message }}</div>\",\n  \"data\": function() { return { message: 'static' }; }\n}",
        "o": [
            "The div displays 'static' and does not update",
            "The div displays 'static' and updates with changes",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `mixins` option in Vue.js?",
        "o": [
            "To share reusable logic between multiple components",
            "To define global state for the application",
            "To handle routing in Vue.js",
            "To create computed properties automatically"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ price | currency }}</div>\",\n  \"data\": function() { return { price: 100 }; },\n  \"filters\": { currency: function(value) { return '$' + value; } }\n}",
        "o": [
            "$100",
            "100",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "What happens if you use `v-html` directive in Vue.js?",
        "o": [
            "It renders raw HTML content from a data property",
            "It escapes HTML characters for safe display",
            "It binds attributes to the element",
            "It triggers a DOM event"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-html='rawHtml'></div>\",\n  \"data\": function() { return { rawHtml: '<strong>Bold</strong>' }; }\n}",
        "o": [
            "The div renders 'Bold' in bold text",
            "The div displays '<strong>Bold</strong>' as plain text",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the role of the `render` function in Vue.js?",
        "o": [
            "To programmatically define the component's template using JavaScript",
            "To handle reactive data updates",
            "To manage lifecycle hooks",
            "To bind events to the DOM"
        ]
    },
    {
        "q": "What happens when you use the `v-pre` directive in Vue.js?",
        "o": [
            "It skips compilation for the element and its children, rendering raw mustache tags",
            "It pre-renders the element before mounting",
            "It triggers a pre-update lifecycle hook",
            "It binds data properties to the element"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-pre>{{ message }}</div>\",\n  \"data\": function() { return { message: 'Hello' }; }\n}",
        "o": [
            "The div displays '{{ message }}' as plain text",
            "The div displays 'Hello'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `inheritAttrs` option in a Vue.js component?",
        "o": [
            "It controls whether attributes not declared as props are passed to the root element",
            "It enables two-way binding for all attributes",
            "It disables reactivity for non-prop attributes",
            "It prevents props from being passed to child components"
        ]
    },
    {
        "q": "What is the purpose of the `slot` element in Vue.js?",
        "o": [
            "To serve as a placeholder for content passed from a parent component",
            "To define reactive data properties",
            "To handle event listeners",
            "To manage computed properties"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<my-component><template v-slot:default>Hello</template></my-component>\",\n  \"components\": { 'my-component': { template: '<div><slot></slot></div>' } }\n}",
        "o": [
            "The div displays 'Hello'",
            "The div is empty",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the role of the `v-cloak` directive in Vue.js?",
        "o": [
            "To hide uncompiled templates until Vue is fully loaded",
            "To bind data to an element",
            "To conditionally render an element",
            "To handle DOM events"
        ]
    },
    {
        "q": "What happens when you use a scoped slot in Vue.js?",
        "o": [
            "It allows the parent component to access data from the child component's scope",
            "It restricts the slot to only static content",
            "It disables reactivity for the slot content",
            "It causes an error if data is passed"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<my-component><template v-slot:default='slotProps'>{{ slotProps.item }}</template></my-component>\",\n  \"components\": { 'my-component': { template: '<slot :item=\"'Vue'\" ></slot>' } }\n}",
        "o": [
            "The slot displays 'Vue'",
            "The slot displays 'item'",
            "The slot throws an error",
            "The slot is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `keep-alive` component in Vue.js?",
        "o": [
            "To cache components to preserve their state when they are not rendered",
            "To force re-rendering of components",
            "To handle asynchronous data loading",
            "To define reusable templates"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<keep-alive><component :is='currentView'></component></keep-alive>\",\n  \"data\": function() { return { currentView: 'my-component' }; },\n  \"components\": { 'my-component': { template: '<div>Test</div>' } }\n}",
        "o": [
            "The div displays 'Test' and retains state when switched",
            "The div displays 'Test' but loses state when switched",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What happens when you use the `transition` component in Vue.js?",
        "o": [
            "It applies CSS transitions or animations to elements entering or leaving the DOM",
            "It disables reactivity for the wrapped component",
            "It binds events to the wrapped component",
            "It caches the component's state"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<transition name='fade'><div v-if='show'>Content</div></transition>\",\n  \"data\": function() { return { show: true }; }\n}",
        "o": [
            "The div displays 'Content' with a fade transition when toggled",
            "The div displays 'Content' without any transition",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `directives` option in a Vue.js component?",
        "o": [
            "To define custom directives for reusable DOM manipulations",
            "To define computed properties",
            "To handle event listeners",
            "To manage component slots"
        ]
    },
    {
        "q": "What happens when you use the `v-bind` directive with an object for the `style` attribute?",
        "o": [
            "It applies inline styles based on the object's key-value pairs",
            "It applies only the first style in the object",
            "It throws an error if the object contains invalid styles",
            "It ignores the object and applies no styles"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-bind:style='{ fontSize: size + \"px\" }'>Text</div>\",\n  \"data\": function() { return { size: 16 }; }\n}",
        "o": [
            "The div has a font size of 16px",
            "The div has no font size applied",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `functional` option in a Vue.js component?",
        "o": [
            "It creates a stateless, lightweight component without a Vue instance",
            "It disables reactivity for the component",
            "It forces the component to re-render on every update",
            "It restricts the component to static content"
        ]
    },
    {
        "q": "What is the purpose of the `ref` attribute in Vue.js?",
        "o": [
            "To create a direct reference to a DOM element or child component",
            "To define reactive data properties",
            "To bind events to an element",
            "To manage computed properties"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div><input ref='myInput' /></div>\",\n  \"mounted\": function() { this.$refs.myInput.focus(); }\n}",
        "o": [
            "The input field receives focus when the component is mounted",
            "The input field remains unfocused",
            "The input field throws an error",
            "The input field is not rendered"
        ]
    },
    {
        "q": "What is the role of the `is` attribute in Vue.js when used with dynamic components?",
        "o": [
            "It specifies which component to render dynamically",
            "It defines a static template for the component",
            "It binds data to the component",
            "It handles event listeners"
        ]
    },
    {
        "q": "What happens when you use the `v-on` directive with a modifier like `.prevent` in Vue.js?",
        "o": [
            "It calls event.preventDefault() to stop the default browser behavior",
            "It stops event propagation to parent elements",
            "It disables reactivity for the event",
            "It throws an error for invalid usage"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<form @submit.prevent='submitForm'><button>Submit</button></form>\",\n  \"methods\": { submitForm: function() { console.log('Submitted'); } }\n}",
        "o": [
            "The form submission is prevented and 'Submitted' is logged",
            "The form submits normally",
            "The form throws an error",
            "The form is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `v-bind` directive with the `.sync` modifier in Vue.js?",
        "o": [
            "To create two-way binding for a prop between parent and child components",
            "To synchronize event listeners across components",
            "To cache the prop value",
            "To disable reactivity for the prop"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div><child-component :value.sync='parentValue'></child-component></div>\",\n  \"data\": function() { return { parentValue: 10 }; },\n  \"components\": { 'child-component': { props: ['value'], template: '<span>{{ value }}</span>' } }\n}",
        "o": [
            "The child component displays '10'",
            "The child component displays nothing",
            "The child component throws an error",
            "The child component is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `lazy` modifier with `v-model` in Vue.js?",
        "o": [
            "It updates the data only after the input event is complete, like on blur",
            "It delays rendering of the input element",
            "It disables two-way binding",
            "It triggers an immediate update on every keypress"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<input v-model.lazy='text' />\",\n  \"data\": function() { return { text: 'initial' }; }\n}",
        "o": [
            "The input displays 'initial' and updates data on blur",
            "The input displays 'initial' and updates data on every keypress",
            "The input throws an error",
            "The input is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `teleport` component in Vue.js?",
        "o": [
            "To render a component's content to a different part of the DOM",
            "To cache the component's state",
            "To handle asynchronous data loading",
            "To define reusable slots"
        ]
    },
    {
        "q": "What happens when you use the `v-bind` directive with a `null` value for an attribute?",
        "o": [
            "The attribute is removed from the element",
            "The attribute is set to an empty string",
            "The attribute is ignored",
            "The attribute throws an error"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-bind:data-value='nullValue'>Content</div>\",\n  \"data\": function() { return { nullValue: null }; }\n}",
        "o": [
            "The div has no data-value attribute",
            "The div has a data-value attribute set to 'null'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `async` keyword in a Vue.js component method?",
        "o": [
            "It allows the method to handle asynchronous operations with await",
            "It disables reactivity for the method",
            "It forces the method to run synchronously",
            "It restricts the method to computed properties"
        ]
    },
    {
        "q": "What is the purpose of the `emit` method in a Vue.js component?",
        "o": [
            "To trigger custom events that can be listened to by parent components",
            "To define reactive data properties",
            "To manage lifecycle hooks",
            "To bind attributes to elements"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<child-component @custom-event='handleEvent'></child-component>\",\n  \"methods\": { handleEvent: function() { console.log('Event triggered'); } },\n  \"components\": { 'child-component': { template: '<button @click=\\'$emit(\\'custom-event\\')\\'>Click</button>' } }\n}",
        "o": [
            "Clicking the button logs 'Event triggered'",
            "Clicking the button does nothing",
            "Clicking the button throws an error",
            "The button is not rendered"
        ]
    },
    {
        "q": "What is the role of the `v-bind` directive with the `.prop` modifier in Vue.js?",
        "o": [
            "It binds a value as a DOM property instead of an attribute",
            "It makes the binding reactive",
            "It restricts the binding to string values",
            "It disables two-way binding"
        ]
    },
    {
        "q": "What happens when you use the `number` modifier with `v-model` in Vue.js?",
        "o": [
            "It converts the input value to a number before binding",
            "It restricts the input to numeric characters only",
            "It disables reactivity for the input",
            "It throws an error for non-numeric inputs"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<input v-model.number='value' type='text' />\",\n  \"data\": function() { return { value: 0 }; }\n}",
        "o": [
            "The input displays '0' and converts user input to a number",
            "The input displays '0' and keeps input as a string",
            "The input throws an error",
            "The input is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `nextTick` method in Vue.js?",
        "o": [
            "To execute a callback after the DOM is updated",
            "To trigger an immediate DOM update",
            "To define a new reactive property",
            "To handle component lifecycle events"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div ref='myDiv'>Content</div>\",\n  \"mounted\": function() { this.$nextTick(() => { console.log(this.$refs.myDiv.textContent); }); }\n}",
        "o": [
            "Logs 'Content' after the DOM is updated",
            "Logs 'undefined' after the DOM is updated",
            "Throws an error",
            "Does not log anything"
        ]
    },
    {
        "q": "What is the effect of using the `v-on` directive with the `.once` modifier in Vue.js?",
        "o": [
            "The event listener is triggered only once and then removed",
            "The event listener is triggered repeatedly",
            "The event listener is disabled",
            "The event listener causes an error"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<button v-on:click.once='logClick'>Click me</button>\",\n  \"methods\": { logClick: function() { console.log('Clicked'); } }\n}",
        "o": [
            "Clicking the button logs 'Clicked' once",
            "Clicking the button logs 'Clicked' every time",
            "Clicking the button throws an error",
            "The button is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `scoped` attribute in a `<style>` tag in a Vue.js single-file component?",
        "o": [
            "To ensure styles only apply to the component's elements",
            "To apply styles globally across all components",
            "To disable CSS rendering for the component",
            "To bind styles to reactive data"
        ]
    },
    {
        "q": "What happens when you use the `v-bind` directive with the `.camel` modifier in Vue.js?",
        "o": [
            "It converts kebab-case attributes to camelCase for DOM properties",
            "It restricts the binding to camelCase attributes",
            "It disables reactivity for the attribute",
            "It throws an error for invalid attributes"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-bind:data-test-id.camel='testId'>Content</div>\",\n  \"data\": function() { return { testId: 'example' }; }\n}",
        "o": [
            "The div has a dataTestId property of 'example'",
            "The div has a data-test-id attribute of 'example'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `dynamic` argument with custom directives in Vue.js?",
        "o": [
            "It allows the directive to accept dynamic argument values",
            "It disables the directive's reactivity",
            "It restricts the directive to static arguments",
            "It forces the directive to re-render"
        ]
    },
    {
        "q": "What is the purpose of the `component` component in Vue.js?",
        "o": [
            "To dynamically render a component based on a bound value",
            "To define static templates for components",
            "To manage reactive data properties",
            "To handle event listeners"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<component :is='currentComponent'></component>\",\n  \"data\": function() { return { currentComponent: 'my-component' }; },\n  \"components\": { 'my-component': { template: '<div>Dynamic</div>' } }\n}",
        "o": [
            "The div displays 'Dynamic'",
            "The div is empty",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the role of the `v-on` directive with the `.native` modifier in Vue.js?",
        "o": [
            "It listens for native DOM events on a component's root element",
            "It disables event listeners on the component",
            "It binds events to child components",
            "It restricts events to custom events only"
        ]
    },
    {
        "q": "What happens when you use the `trim` modifier with `v-model` in Vue.js?",
        "o": [
            "It trims whitespace from the input value before binding",
            "It restricts the input to non-whitespace characters",
            "It disables two-way binding",
            "It throws an error for invalid input"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<input v-model.trim='text' />\",\n  \"data\": function() { return { text: '  hello  ' }; }\n}",
        "o": [
            "The input displays 'hello' and trims user input",
            "The input displays '  hello  ' without trimming",
            "The input throws an error",
            "The input is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `Vue.extend` method in Vue.js?",
        "o": [
            "To create a constructor for a Vue component programmatically",
            "To extend the Vue instance with new data properties",
            "To define global event listeners",
            "To manage component lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div><child-component ref='child' /></div>\",\n  \"components\": { 'child-component': { template: '<span>Child</span>' } },\n  \"mounted\": function() { console.log(this.$refs.child); }\n}",
        "o": [
            "Logs the child component instance",
            "Logs undefined",
            "Throws an error",
            "Does not log anything"
        ]
    },
    {
        "q": "What is the effect of using the `v-bind` directive with an array for the `class` attribute?",
        "o": [
            "It applies all classes in the array to the element",
            "It applies only the first class in the array",
            "It throws an error for non-string values",
            "It conditionally applies classes based on truthiness"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-bind:class='[classA, classB]'>Content</div>\",\n  \"data\": function() { return { classA: 'active', classB: 'visible' }; }\n}",
        "o": [
            "The div has classes 'active' and 'visible'",
            "The div has no classes",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `errorCaptured` lifecycle hook in Vue.js?",
        "o": [
            "To capture errors in child components for error handling",
            "To handle DOM rendering errors",
            "To manage asynchronous data loading",
            "To define custom directives"
        ]
    },
    {
        "q": "What happens when you use the `v-on` directive with the `.stop` modifier in Vue.js?",
        "o": [
            "It stops event propagation to parent elements",
            "It prevents the default browser behavior",
            "It disables the event listener",
            "It triggers the event only once"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div @click.stop='handleClick'>Click me</div>\",\n  \"methods\": { handleClick: function() { console.log('Clicked'); } }\n}",
        "o": [
            "Clicking logs 'Clicked' and stops event propagation",
            "Clicking logs 'Clicked' and propagates the event",
            "Clicking throws an error",
            "Clicking does nothing"
        ]
    },
    {
        "q": "What is the effect of using the `functional` component option in Vue.js?",
        "o": [
            "It creates a stateless component without a Vue instance",
            "It forces the component to re-render on every update",
            "It disables reactivity for the component",
            "It restricts the component to static templates"
        ]
    },
    {
        "q": "What is the purpose of the `name` property in a Vue.js component?",
        "o": [
            "To identify the component for recursive or dynamic usage",
            "To define the component's reactive data",
            "To specify the component's template",
            "To handle event listeners"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div><component :is='compName' /></div>\",\n  \"data\": function() { return { compName: 'child-component' }; },\n  \"components\": { 'child-component': { name: 'Child', template: '<span>Child</span>' } }\n}",
        "o": [
            "The span displays 'Child'",
            "The span is empty",
            "The span throws an error",
            "The span is not rendered"
        ]
    },
    {
        "q": "What is the role of the `v-on` directive with the `.capture` modifier in Vue.js?",
        "o": [
            "It triggers the event listener during the capture phase instead of the bubbling phase",
            "It stops event propagation",
            "It disables the event listener",
            "It restricts the event to custom events"
        ]
    },
    {
        "q": "What happens when you use the `v-model` directive with a custom component in Vue.js?",
        "o": [
            "It sets up two-way binding using a value prop and input event by default",
            "It binds the component to a static value",
            "It disables reactivity for the component",
            "It throws an error for non-input elements"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<custom-input v-model='text'></custom-input>\",\n  \"data\": function() { return { text: 'Hello' }; },\n  \"components\": { 'custom-input': { props: ['value'], template: '<input :value='value' @input='$emit(\\'input\\', $event.target.value)'>' } }\n}",
        "o": [
            "The input displays 'Hello' and updates with user input",
            "The input is empty and does not update",
            "The input throws an error",
            "The input is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `watchEffect` function in Vue.js Composition API?",
        "o": [
            "To automatically track and react to dependencies without explicitly defining them",
            "To define computed properties",
            "To handle DOM events",
            "To manage component lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ count }}</div>\",\n  \"setup\": function() { const count = Vue.ref(0); Vue.watchEffect(() => { console.log(count.value); }); return { count }; }\n}",
        "o": [
            "Logs 0 when the component is mounted",
            "Logs undefined",
            "Throws an error",
            "Does not log anything"
        ]
    },
    {
        "q": "What is the effect of using the `v-bind` directive with the `.attr` modifier in Vue.js?",
        "o": [
            "It forces the binding to be set as an attribute rather than a property",
            "It disables reactivity for the binding",
            "It restricts the binding to string values",
            "It throws an error for non-string values"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-bind:test.attr='value'>Content</div>\",\n  \"data\": function() { return { value: 'test' }; }\n}",
        "o": [
            "The div has a test attribute set to 'test'",
            "The div has a test property set to 'test'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `activated` lifecycle hook in Vue.js?",
        "o": [
            "It is called when a cached component is re-activated with keep-alive",
            "It is called before a component is destroyed",
            "It is called when a prop is updated",
            "It is called when a computed property is defined"
        ]
    },
    {
        "q": "What happens when you use the `v-on` directive with the `.passive` modifier in Vue.js?",
        "o": [
            "It indicates that the event listener will not call preventDefault",
            "It stops event propagation",
            "It triggers the event only once",
            "It disables the event listener"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div @scroll.passive='handleScroll'>Content</div>\",\n  \"methods\": { handleScroll: function() { console.log('Scrolled'); } }\n}",
        "o": [
            "Scrolling logs 'Scrolled' without preventing default behavior",
            "Scrolling logs 'Scrolled' and prevents default behavior",
            "Scrolling throws an error",
            "Scrolling does nothing"
        ]
    },
    {
        "q": "What is the effect of using the `deep` option in a Vue.js watcher?",
        "o": [
            "It enables watching for changes in nested object properties",
            "It disables reactivity for the watched property",
            "It restricts the watcher to top-level properties",
            "It forces the watcher to run synchronously"
        ]
    },
    {
        "q": "What is the purpose of the `beforeEach` global navigation guard in Vue Router when used with Vue.js?",
        "o": [
            "To execute logic before navigating to any route",
            "To define reactive data for routes",
            "To handle DOM events for routes",
            "To manage component templates"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<router-link to='/home'>Home</router-link>\",\n  \"router\": new VueRouter({ routes: [{ path: '/home', component: { template: '<div>Home Page</div>' } }] })\n}",
        "o": [
            "Renders a link that navigates to a page displaying 'Home Page'",
            "Renders a link that does nothing",
            "Throws an error",
            "Does not render the link"
        ]
    },
    {
        "q": "What is the role of the `v-bind:key` attribute when used with `v-for` in Vue.js?",
        "o": [
            "It helps Vue track elements for efficient DOM updates",
            "It binds data to the looped elements",
            "It disables reactivity for the loop",
            "It restricts the loop to static data"
        ]
    },
    {
        "q": "What happens when you use the `immediate` option in a Vue.js watcher?",
        "o": [
            "The watcher runs immediately upon setup",
            "The watcher only runs on component destruction",
            "The watcher disables reactivity",
            "The watcher runs asynchronously"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ count }}</div>\",\n  \"data\": function() { return { count: 0 }; },\n  \"watch\": { count: { handler: function() { console.log('Changed'); }, immediate: true } }\n}",
        "o": [
            "Logs 'Changed' immediately upon mounting",
            "Logs 'Changed' only when count changes",
            "Throws an error",
            "Does not log anything"
        ]
    },
    {
        "q": "What is the purpose of the `provide` function in the Vue.js Composition API?",
        "o": [
            "To share data with descendant components without prop drilling",
            "To define computed properties",
            "To handle DOM events",
            "To manage lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<child-component />\",\n  \"setup\": function() { Vue.provide('key', 'value'); return {}; },\n  \"components\": { 'child-component': { setup: function() { const value = Vue.inject('key'); return { value }; }, template: '<div>{{ value }}</div>' } }\n}",
        "o": [
            "The div displays 'value'",
            "The div is empty",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `v-on` directive with the `.self` modifier in Vue.js?",
        "o": [
            "The event is only triggered if the event target is the element itself",
            "The event stops propagation",
            "The event is triggered only once",
            "The event is disabled"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div @click.self='handleClick'>Content <span>Child</span></div>\",\n  \"methods\": { handleClick: function() { console.log('Clicked'); } }\n}",
        "o": [
            "Clicking the div logs 'Clicked', but clicking the span does not",
            "Clicking either the div or span logs 'Clicked'",
            "Clicking throws an error",
            "Clicking does nothing"
        ]
    },
    {
        "q": "What is the purpose of the `renderError` function in Vue.js?",
        "o": [
            "To handle rendering errors during component rendering",
            "To define custom templates",
            "To manage reactive data",
            "To bind events to components"
        ]
    },
    {
        "q": "What happens when you use the `v-bind` directive with a dynamic attribute name in Vue.js?",
        "o": [
            "It binds the attribute dynamically based on the expression",
            "It throws an error for dynamic attributes",
            "It ignores the dynamic attribute",
            "It restricts the attribute to static names"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-bind:[attrName]='value'>Content</div>\",\n  \"data\": function() { return { attrName: 'data-id', value: 'test' }; }\n}",
        "o": [
            "The div has a data-id attribute set to 'test'",
            "The div has no attributes",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `flush: 'post'` option in a Vue.js watcher in the Composition API?",
        "o": [
            "The watcher runs after DOM updates are applied",
            "The watcher runs before DOM updates",
            "The watcher disables reactivity",
            "The watcher runs synchronously"
        ]
    },
    {
        "q": "What is the purpose of the `router-view` component in Vue Router when used with Vue.js?",
        "o": [
            "To render the component associated with the current route",
            "To define static templates for routes",
            "To handle reactive data binding",
            "To manage event listeners for routes"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<router-view></router-view>\",\n  \"router\": new VueRouter({ routes: [{ path: '/', component: { template: '<div>Welcome</div>' } }] })\n}",
        "o": [
            "The div displays 'Welcome' for the root route",
            "The div is empty",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the role of the `v-bind` directive with the `.once` modifier in Vue.js?",
        "o": [
            "It binds the attribute only once and does not update reactively",
            "It triggers the binding only during the capture phase",
            "It restricts the binding to static values",
            "It disables reactivity for the attribute"
        ]
    },
    {
        "q": "What happens when you use the `deep` modifier with `v-model` on a custom component in Vue.js?",
        "o": [
            "It enables deep reactivity for nested object updates in the component",
            "It restricts the binding to top-level properties",
            "It disables two-way binding",
            "It throws an error for nested objects"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<custom-input v-model='data.name'></custom-input>\",\n  \"data\": function() { return { data: { name: 'Vue' } }; },\n  \"components\": { 'custom-input': { props: ['value'], template: '<input :value='value' @input='$emit(\\'input\\', $event.target.value)'>' } }\n}",
        "o": [
            "The input displays 'Vue' and updates the nested name property",
            "The input is empty and does not update",
            "The input throws an error",
            "The input is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `reactive` function in the Vue.js Composition API?",
        "o": [
            "To create a reactive object that tracks property changes",
            "To define computed properties",
            "To handle DOM events",
            "To manage component slots"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ state.count }}</div>\",\n  \"setup\": function() { const state = Vue.reactive({ count: 1 }); return { state }; }\n}",
        "o": [
            "The div displays '1'",
            "The div displays 'undefined'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `v-on` directive with the `.exact` modifier in Vue.js?",
        "o": [
            "It triggers the event only when the exact combination of modifiers is used",
            "It stops event propagation",
            "It disables the event listener",
            "It triggers the event only once"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<button @click.ctrl.exact='handleClick'>Click</button>\",\n  \"methods\": { handleClick: function() { console.log('Clicked'); } }\n}",
        "o": [
            "Clicking with Ctrl logs 'Clicked', but clicking without Ctrl does not",
            "Clicking with or without Ctrl logs 'Clicked'",
            "Clicking throws an error",
            "Clicking does nothing"
        ]
    },
    {
        "q": "What is the purpose of the `deactivated` lifecycle hook in Vue.js?",
        "o": [
            "It is called when a cached component is deactivated with keep-alive",
            "It is called before a component is mounted",
            "It is called when a prop is updated",
            "It is called when a computed property is defined"
        ]
    },
    {
        "q": "What happens when you use the `toRef` function in the Vue.js Composition API?",
        "o": [
            "It creates a reactive reference to a specific property of a reactive object",
            "It disables reactivity for the property",
            "It creates a non-reactive copy of the property",
            "It throws an error for non-reactive objects"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ countRef }}</div>\",\n  \"setup\": function() { const state = Vue.reactive({ count: 5 }); const countRef = Vue.toRef(state, 'count'); return { countRef }; }\n}",
        "o": [
            "The div displays '5'",
            "The div displays 'undefined'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `shallowReactive` function in the Vue.js Composition API?",
        "o": [
            "It creates a reactive object with reactivity only at the top level",
            "It creates a fully reactive object with deep reactivity",
            "It disables reactivity entirely",
            "It restricts reactivity to computed properties"
        ]
    },
    {
        "q": "What is the purpose of the `toRefs` function in the Vue.js Composition API?",
        "o": [
            "To convert all properties of a reactive object into individual reactive refs",
            "To disable reactivity for an object",
            "To create computed properties from an object",
            "To handle DOM events for an object"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ count.value }}</div>\",\n  \"setup\": function() { const state = Vue.reactive({ count: 10 }); const { count } = Vue.toRefs(state); return { count }; }\n}",
        "o": [
            "The div displays '10'",
            "The div displays 'undefined'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the role of the `v-slot` directive in Vue.js?",
        "o": [
            "To specify content for named or scoped slots in a component",
            "To bind data to an element",
            "To handle event listeners",
            "To define computed properties"
        ]
    },
    {
        "q": "What happens when you use the `v-on` directive with the `.native` modifier on a custom component?",
        "o": [
            "It listens for native DOM events on the component's root element",
            "It restricts events to custom events",
            "It disables event listeners",
            "It throws an error for non-native events"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<child-component @click.native='handleClick'></child-component>\",\n  \"methods\": { handleClick: function() { console.log('Clicked'); } },\n  \"components\": { 'child-component': { template: '<div>Child</div>' } }\n}",
        "o": [
            "Clicking the child div logs 'Clicked'",
            "Clicking the child div does nothing",
            "Clicking the child div throws an error",
            "The child div is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `computed` function in the Vue.js Composition API?",
        "o": [
            "To create reactive computed properties that cache based on dependencies",
            "To define non-reactive data properties",
            "To handle asynchronous events",
            "To manage component lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ doubled }}</div>\",\n  \"setup\": function() { const count = Vue.ref(5); const doubled = Vue.computed(() => count.value * 2); return { doubled }; }\n}",
        "o": [
            "The div displays '10'",
            "The div displays '5'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `v-bind` directive with a dynamic argument in square brackets?",
        "o": [
            "It dynamically binds an attribute name based on the expression",
            "It restricts the binding to static attributes",
            "It disables reactivity for the attribute",
            "It throws an error for dynamic attributes"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-bind:[dynamicAttr]='value'>Content</div>\",\n  \"data\": function() { return { dynamicAttr: 'title', value: 'Tooltip' }; }\n}",
        "o": [
            "The div has a title attribute set to 'Tooltip'",
            "The div has no title attribute",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `onBeforeMount` lifecycle hook in the Vue.js Composition API?",
        "o": [
            "To execute logic before the component is mounted to the DOM",
            "To execute logic after the component is destroyed",
            "To handle errors in child components",
            "To define computed properties"
        ]
    },
    {
        "q": "What happens when you use the `shallowRef` function in the Vue.js Composition API?",
        "o": [
            "It creates a reactive reference with non-reactive nested properties",
            "It creates a fully reactive reference with deep reactivity",
            "It disables reactivity entirely",
            "It restricts the reference to primitive values"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ obj.value.nested }}</div>\",\n  \"setup\": function() { const obj = Vue.shallowRef({ nested: 'test' }); return { obj }; }\n}",
        "o": [
            "The div displays 'test'",
            "The div displays 'undefined'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `watch` function with the `deep` option in the Vue.js Composition API?",
        "o": [
            "It watches for changes in nested object properties",
            "It restricts watching to top-level properties",
            "It disables reactivity for the watched object",
            "It forces synchronous execution"
        ]
    },
    {
        "q": "What is the purpose of the `customRef` function in the Vue.js Composition API?",
        "o": [
            "To create a custom reactive reference with explicit dependency tracking",
            "To define non-reactive data properties",
            "To handle DOM events automatically",
            "To manage component slots"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ customValue }}</div>\",\n  \"setup\": function() { const customValue = Vue.customRef((track, trigger) => { let value = 0; return { get: () => { track(); return value; }, set: (newValue) => { value = newValue; trigger(); } }; }); return { customValue }; }\n}",
        "o": [
            "The div displays '0'",
            "The div displays 'undefined'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the role of the `v-bind` directive with the `.sync` modifier when used with a custom component?",
        "o": [
            "It enables two-way binding for a prop using a custom event",
            "It restricts the prop to one-way binding",
            "It disables reactivity for the prop",
            "It binds the prop to a static value"
        ]
    },
    {
        "q": "What happens when you use the `v-on` directive with a key modifier like `.enter` in Vue.js?",
        "o": [
            "It triggers the event only when the Enter key is pressed",
            "It disables the event listener for the Enter key",
            "It stops event propagation for the Enter key",
            "It throws an error for key events"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<input @keyup.enter='logKey' />\",\n  \"methods\": { logKey: function() { console.log('Enter pressed'); } }\n}",
        "o": [
            "Pressing Enter logs 'Enter pressed'",
            "Pressing Enter does nothing",
            "Pressing Enter throws an error",
            "The input is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `onUnmounted` lifecycle hook in the Vue.js Composition API?",
        "o": [
            "To execute cleanup logic when a component is removed from the DOM",
            "To handle component mounting",
            "To define reactive data",
            "To manage event listeners"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>Test</div>\",\n  \"setup\": function() { Vue.onUnmounted(() => console.log('Unmounted')); return {}; }\n}",
        "o": [
            "Logs 'Unmounted' when the component is removed",
            "Logs 'Unmounted' when the component is mounted",
            "Throws an error",
            "Does not log anything"
        ]
    },
    {
        "q": "What is the effect of using the `markRaw` function in the Vue.js Composition API?",
        "o": [
            "It marks an object as non-reactive to prevent Vue from tracking it",
            "It makes an object fully reactive",
            "It converts an object to a ref",
            "It throws an error for non-objects"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ obj.data }}</div>\",\n  \"setup\": function() { const obj = Vue.markRaw({ data: 'raw' }); return { obj }; }\n}",
        "o": [
            "The div displays 'raw'",
            "The div displays 'undefined'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `defineAsyncComponent` function in Vue.js?",
        "o": [
            "To define a component that is loaded asynchronously",
            "To create a synchronous component",
            "To handle reactive data binding",
            "To manage custom directives"
        ]
    },
    {
        "q": "What happens when you use the `v-on` directive with a custom modifier in Vue.js?",
        "o": [
            "It allows custom logic to be applied to the event via a custom directive",
            "It throws an error for unrecognized modifiers",
            "It ignores the custom modifier",
            "It disables the event listener"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-on:click.custom='handleClick'>Content</div>\",\n  \"methods\": { handleClick: function() { console.log('Clicked'); } },\n  \"directives\": { custom: { bind(el, binding) { el.addEventListener('click', () => binding.value()); } } }\n}",
        "o": [
            "Clicking the div logs 'Clicked'",
            "Clicking the div does nothing",
            "Clicking the div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `isReactive` function in the Vue.js Composition API?",
        "o": [
            "It checks if an object is a reactive object created by Vue",
            "It converts an object to a reactive object",
            "It disables reactivity for an object",
            "It creates a computed property"
        ]
    },
    {
        "q": "What is the purpose of the `defineProps` macro in the Vue.js Composition API with `<script setup>`?",
        "o": [
            "To declare component props in a concise way",
            "To define reactive data properties",
            "To handle DOM events",
            "To create computed properties"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ msg }}</div>\",\n  \"setup\": function() { const msg = Vue.defineProps(['msg']).msg; return { msg }; }\n}",
        "o": [
            "The div displays the value of the 'msg' prop passed to the component",
            "The div is empty",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the role of the `v-is` directive in Vue.js?",
        "o": [
            "To dynamically render a component on an HTML element",
            "To bind data to an element",
            "To handle event listeners",
            "To define a custom directive"
        ]
    },
    {
        "q": "What happens when you use the `watchPostEffect` function in the Vue.js Composition API?",
        "o": [
            "It runs the watcher after DOM updates are applied",
            "It runs the watcher before DOM updates",
            "It disables reactivity for the watcher",
            "It restricts the watcher to synchronous execution"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ count }}</div>\",\n  \"setup\": function() { const count = Vue.ref(0); Vue.watchPostEffect(() => { console.log(count.value); }); return { count }; }\n}",
        "o": [
            "Logs the value of count after DOM updates",
            "Logs the value of count before DOM updates",
            "Throws an error",
            "Does not log anything"
        ]
    },
    {
        "q": "What is the purpose of the `defineEmits` macro in the Vue.js Composition API with `<script setup>`?",
        "o": [
            "To declare custom events that a component can emit",
            "To define reactive data",
            "To manage lifecycle hooks",
            "To create computed properties"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<button @click='emitEvent'>Click</button>\",\n  \"setup\": function() { const emit = Vue.defineEmits(['custom']); const emitEvent = () => emit('custom'); return { emitEvent }; }\n}",
        "o": [
            "Clicking the button emits a 'custom' event",
            "Clicking the button does nothing",
            "Clicking the button throws an error",
            "The button is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `isRef` function in the Vue.js Composition API?",
        "o": [
            "It checks if a value is a reactive ref",
            "It converts a value to a reactive ref",
            "It disables reactivity for a value",
            "It creates a computed property"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ isRefValue }}</div>\",\n  \"setup\": function() { const value = Vue.ref(42); const isRefValue = Vue.isRef(value); return { isRefValue }; }\n}",
        "o": [
            "The div displays 'true'",
            "The div displays 'false'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `onBeforeUpdate` lifecycle hook in the Vue.js Composition API?",
        "o": [
            "To execute logic before the component's DOM is updated",
            "To execute logic after the component is mounted",
            "To handle errors in child components",
            "To define reactive data"
        ]
    },
    {
        "q": "What happens when you use the `v-on` directive with a custom key modifier like `.space` in Vue.js?",
        "o": [
            "It triggers the event only when the Space key is pressed",
            "It disables the event for the Space key",
            "It stops event propagation for the Space key",
            "It throws an error for key modifiers"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<input @keyup.space='logSpace' />\",\n  \"methods\": { logSpace: function() { console.log('Space pressed'); } }\n}",
        "o": [
            "Pressing Space logs 'Space pressed'",
            "Pressing Space does nothing",
            "Pressing Space throws an error",
            "The input is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `unref` function in the Vue.js Composition API?",
        "o": [
            "It returns the inner value of a ref or the value itself if not a ref",
            "It converts a value to a reactive ref",
            "It disables reactivity for a ref",
            "It creates a computed property"
        ]
    },
    {
        "q": "What is the purpose of the `defineExpose` macro in the Vue.js Composition API with `<script setup>`?",
        "o": [
            "To explicitly expose properties or methods to the parent component",
            "To define reactive data properties",
            "To handle DOM events",
            "To create computed properties"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<child-component ref='child' />\",\n  \"setup\": function() { Vue.defineExpose({ message: 'Exposed' }); return {}; },\n  \"components\": { 'child-component': { setup: function() { Vue.defineExpose({ value: 'Child' }); return {}; }, template: '<div>Child</div>' } },\n  \"mounted\": function() { console.log(this.$refs.child.value); }\n}",
        "o": [
            "Logs 'Child' when the component is mounted",
            "Logs 'undefined'",
            "Throws an error",
            "Does not log anything"
        ]
    },
    {
        "q": "What is the role of the `v-bind` directive with the `.class` shorthand in Vue.js?",
        "o": [
            "It provides a shorthand for binding classes to an element",
            "It binds styles to an element",
            "It disables class reactivity",
            "It restricts binding to static classes"
        ]
    },
    {
        "q": "What happens when you use the `watch` function with the `immediate` option in the Vue.js Composition API?",
        "o": [
            "The watcher runs immediately upon setup",
            "The watcher only runs on component destruction",
            "The watcher disables reactivity",
            "The watcher runs asynchronously"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ count }}</div>\",\n  \"setup\": function() { const count = Vue.ref(0); Vue.watch(count, () => { console.log('Count changed'); }, { immediate: true }); return { count }; }\n}",
        "o": [
            "Logs 'Count changed' immediately upon setup",
            "Logs 'Count changed' only when count changes",
            "Throws an error",
            "Does not log anything"
        ]
    },
    {
        "q": "What is the purpose of the `onActivated` lifecycle hook in the Vue.js Composition API?",
        "o": [
            "To execute logic when a cached component is re-activated with keep-alive",
            "To handle component destruction",
            "To define reactive data",
            "To manage event listeners"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<keep-alive><component :is='currentView'></component></keep-alive>\",\n  \"setup\": function() { const currentView = Vue.ref('my-component'); Vue.onActivated(() => { console.log('Activated'); }); return { currentView }; },\n  \"components\": { 'my-component': { template: '<div>Test</div>' } }\n}",
        "o": [
            "Logs 'Activated' when the component is activated",
            "Logs 'Activated' when the component is mounted",
            "Throws an error",
            "Does not log anything"
        ]
    },
    {
        "q": "What is the effect of using the `isReadonly` function in the Vue.js Composition API?",
        "o": [
            "It checks if an object is a readonly reactive object",
            "It converts an object to a readonly object",
            "It disables reactivity for an object",
            "It creates a computed property"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ isReadonlyObj }}</div>\",\n  \"setup\": function() { const obj = Vue.readonly({ value: 'test' }); const isReadonlyObj = Vue.isReadonly(obj); return { isReadonlyObj }; }\n}",
        "o": [
            "The div displays 'true'",
            "The div displays 'false'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `onDeactivated` lifecycle hook in the Vue.js Composition API?",
        "o": [
            "To execute cleanup logic when a cached component is deactivated",
            "To handle component mounting",
            "To define computed properties",
            "To manage custom directives"
        ]
    },
    {
        "q": "What happens when you use the `v-on` directive with a mouse modifier like `.left` in Vue.js?",
        "o": [
            "It triggers the event only when the left mouse button is used",
            "It disables the event for the left mouse button",
            "It stops event propagation for mouse events",
            "It throws an error for mouse modifiers"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div @click.left='logClick'>Content</div>\",\n  \"methods\": { logClick: function() { console.log('Left clicked'); } }\n}",
        "o": [
            "Left-clicking the div logs 'Left clicked'",
            "Left-clicking the div does nothing",
            "Left-clicking the div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `toRaw` function in the Vue.js Composition API?",
        "o": [
            "It returns the raw, non-reactive version of a reactive object or ref",
            "It converts a raw object to a reactive object",
            "It disables reactivity for a ref",
            "It creates a computed property"
        ]
    },
    {
        "q": "What is the purpose of the `defineAsyncComponent` options like `loadingComponent` in Vue.js?",
        "o": [
            "To display a placeholder component while the async component is loading",
            "To define reactive data for the async component",
            "To handle errors during component rendering",
            "To manage event listeners for the component"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div><async-component /></div>\",\n  \"components\": { 'async-component': Vue.defineAsyncComponent({ loader: () => Promise.resolve({ template: '<div>Loaded</div>' }), loadingComponent: { template: '<div>Loading...</div>' } }) }\n}",
        "o": [
            "Displays 'Loading...' before showing 'Loaded'",
            "Displays 'Loaded' immediately",
            "Throws an error",
            "Displays nothing"
        ]
    },
    {
        "q": "What is the role of the `v-bind` directive with the `.style` shorthand in Vue.js?",
        "o": [
            "It provides a shorthand for binding inline styles to an element",
            "It binds class names to an element",
            "It disables style reactivity",
            "It restricts styles to static values"
        ]
    },
    {
        "q": "What happens when you use the `watch` function with the `flush: 'sync'` option in the Vue.js Composition API?",
        "o": [
            "The watcher runs synchronously when dependencies change",
            "The watcher runs after DOM updates",
            "The watcher disables reactivity",
            "The watcher runs only on component mount"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ count }}</div>\",\n  \"setup\": function() { const count = Vue.ref(0); Vue.watch(count, () => { console.log('Changed'); }, { flush: 'sync' }); count.value++; return { count }; }\n}",
        "o": [
            "Logs 'Changed' synchronously and displays '1'",
            "Logs 'Changed' asynchronously and displays '1'",
            "Throws an error",
            "Displays '0' and does not log"
        ]
    },
    {
        "q": "What is the purpose of the `onErrorCaptured` lifecycle hook in the Vue.js Composition API?",
        "o": [
            "To capture and handle errors in descendant components",
            "To handle DOM rendering errors",
            "To define reactive data",
            "To manage custom directives"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div><child-component /></div>\",\n  \"setup\": function() { Vue.onErrorCaptured((err) => { console.log('Error'); return false; }); return {}; },\n  \"components\": { 'child-component': { setup: function() { throw new Error('Test'); }, template: '<div>Child</div>' } }\n}",
        "o": [
            "Logs 'Error' when the child component throws an error",
            "Throws an unhandled error",
            "Does not log anything",
            "The child component is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `v-on` directive with the `.right` modifier in Vue.js?",
        "o": [
            "It triggers the event only when the right mouse button is clicked",
            "It stops event propagation for right-clicks",
            "It disables right-click events",
            "It throws an error for mouse modifiers"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div @contextmenu.right='logRightClick'>Content</div>\",\n  \"methods\": { logRightClick: function() { console.log('Right clicked'); } }\n}",
        "o": [
            "Right-clicking the div logs 'Right clicked'",
            "Right-clicking the div does nothing",
            "Right-clicking the div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `shallowReadonly` function in the Vue.js Composition API?",
        "o": [
            "To create a readonly reactive object with non-reactive nested properties",
            "To create a fully reactive readonly object",
            "To disable reactivity for an object",
            "To convert an object to a ref"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ obj.nested }}</div>\",\n  \"setup\": function() { const obj = Vue.shallowReadonly({ nested: 'test' }); return { obj }; }\n}",
        "o": [
            "The div displays 'test'",
            "The div displays 'undefined'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `defineCustomElement` function in Vue.js?",
        "o": [
            "It creates a custom web component from a Vue component",
            "It defines a reactive data property",
            "It handles DOM events",
            "It manages lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<my-element></my-element>\",\n  \"setup\": function() { const MyElement = Vue.defineCustomElement({ template: '<div>Custom</div>' }); customElements.define('my-element', MyElement); return {}; }\n}",
        "o": [
            "The custom element displays 'Custom'",
            "The custom element is empty",
            "The custom element throws an error",
            "The custom element is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `defineModel` macro in the Vue.js Composition API with `<script setup>`?",
        "o": [
            "To define a reactive model for two-way binding in a component",
            "To create a non-reactive data property",
            "To handle DOM events automatically",
            "To manage computed properties"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<child-component v-model='text' />\",\n  \"setup\": function() { const text = Vue.defineModel(); text.value = 'Hello'; return { text }; },\n  \"components\": { 'child-component': { template: '<div>{{ value }}</div>', props: ['modelValue'], emits: ['update:modelValue'] } }\n}",
        "o": [
            "The child component displays 'Hello'",
            "The child component is empty",
            "The child component throws an error",
            "The child component is not rendered"
        ]
    },
    {
        "q": "What is the role of the `v-bind` directive with the `.css` modifier in Vue.js?",
        "o": [
            "It binds a value as a CSS custom property",
            "It disables style reactivity",
            "It restricts binding to inline styles",
            "It binds class names to an element"
        ]
    },
    {
        "q": "What happens when you use the `watchEffect` function with the `flush: 'pre'` option in the Vue.js Composition API?",
        "o": [
            "The watcher runs before DOM updates are applied",
            "The watcher runs after DOM updates",
            "The watcher disables reactivity",
            "The watcher runs synchronously"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ count }}</div>\",\n  \"setup\": function() { const count = Vue.ref(0); Vue.watchEffect(() => { console.log(count.value); }, { flush: 'pre' }); count.value++; return { count }; }\n}",
        "o": [
            "Logs '1' before DOM updates and displays '1'",
            "Logs '1' after DOM updates and displays '1'",
            "Throws an error",
            "Displays '0' and does not log"
        ]
    },
    {
        "q": "What is the purpose of the `onBeforeUnmount` lifecycle hook in the Vue.js Composition API?",
        "o": [
            "To execute cleanup logic before a component is removed from the DOM",
            "To handle component mounting",
            "To define reactive data",
            "To manage event listeners"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>Test</div>\",\n  \"setup\": function() { Vue.onBeforeUnmount(() => console.log('Before unmount')); return {}; }\n}",
        "o": [
            "Logs 'Before unmount' before the component is removed",
            "Logs 'Before unmount' after the component is mounted",
            "Throws an error",
            "Does not log anything"
        ]
    },
    {
        "q": "What is the effect of using the `v-on` directive with the `.middle` modifier in Vue.js?",
        "o": [
            "It triggers the event only when the middle mouse button is clicked",
            "It stops event propagation for middle-clicks",
            "It disables middle-click events",
            "It throws an error for mouse modifiers"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div @click.middle='logMiddleClick'>Content</div>\",\n  \"methods\": { logMiddleClick: function() { console.log('Middle clicked'); } }\n}",
        "o": [
            "Middle-clicking the div logs 'Middle clicked'",
            "Middle-clicking the div does nothing",
            "Middle-clicking the div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `triggerRef` function in the Vue.js Composition API?",
        "o": [
            "To manually trigger reactivity updates for a shallow ref",
            "To convert a ref to a reactive object",
            "To disable reactivity for a ref",
            "To create a computed property"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ obj.nested }}</div>\",\n  \"setup\": function() { const obj = Vue.shallowRef({ nested: 'test' }); Vue.triggerRef(obj); return { obj }; }\n}",
        "o": [
            "The div displays 'test' and updates reactively",
            "The div displays 'undefined'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `defineAsyncComponent` with the `errorComponent` option in Vue.js?",
        "o": [
            "It displays a fallback component if the async component fails to load",
            "It retries loading the async component",
            "It disables reactivity for the component",
            "It restricts the component to static content"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div><async-component /></div>\",\n  \"components\": { 'async-component': Vue.defineAsyncComponent({ loader: () => Promise.reject('Error'), errorComponent: { template: '<div>Failed</div>' } }) }\n}",
        "o": [
            "Displays 'Failed' when the async component fails to load",
            "Displays nothing",
            "Throws an error",
            "Displays 'Error'"
        ]
    },
    {
        "q": "What is the purpose of the `defineComponent` function in Vue.js?",
        "o": [
            "To create a component with better TypeScript inference",
            "To define reactive data properties",
            "To handle DOM events automatically",
            "To manage custom directives"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ message }}</div>\",\n  \"setup\": function() { return Vue.defineComponent({ setup() { const message = Vue.ref('Hello'); return { message }; } }); }\n}",
        "o": [
            "The div displays 'Hello'",
            "The div displays 'undefined'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the role of the `v-bind` directive with the `.prop` modifier when binding to a custom element in Vue.js?",
        "o": [
            "It sets the value as a DOM property rather than an attribute",
            "It disables reactivity for the binding",
            "It restricts the binding to attributes",
            "It throws an error for custom elements"
        ]
    },
    {
        "q": "What happens when you use the `watch` function with the `once` option in the Vue.js Composition API?",
        "o": [
            "The watcher runs only once when the dependency changes",
            "The watcher runs continuously",
            "The watcher disables reactivity",
            "The watcher runs synchronously"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ count }}</div>\",\n  \"setup\": function() { const count = Vue.ref(0); Vue.watch(count, () => { console.log('Changed'); }, { once: true }); count.value++; return { count }; }\n}",
        "o": [
            "Logs 'Changed' once and displays '1'",
            "Logs 'Changed' repeatedly and displays '1'",
            "Throws an error",
            "Displays '0' and does not log"
        ]
    },
    {
        "q": "What is the purpose of the `onMounted` lifecycle hook in the Vue.js Composition API?",
        "o": [
            "To execute logic after the component is mounted to the DOM",
            "To handle component destruction",
            "To define reactive data",
            "To manage event listeners"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>Test</div>\",\n  \"setup\": function() { Vue.onMounted(() => console.log('Mounted')); return {}; }\n}",
        "o": [
            "Logs 'Mounted' after the component is mounted",
            "Logs 'Mounted' before the component is mounted",
            "Throws an error",
            "Does not log anything"
        ]
    },
    {
        "q": "What is the effect of using the `v-on` directive with the `.exact` modifier combined with a key modifier like `.ctrl` in Vue.js?",
        "o": [
            "It triggers the event only when Ctrl is pressed without other modifiers",
            "It triggers the event with any modifier",
            "It disables the event listener",
            "It throws an error for combined modifiers"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div @click.ctrl.exact='logCtrlClick'>Content</div>\",\n  \"methods\": { logCtrlClick: function() { console.log('Ctrl clicked'); } }\n}",
        "o": [
            "Clicking with only Ctrl logs 'Ctrl clicked'",
            "Clicking with Ctrl and other modifiers logs 'Ctrl clicked'",
            "Clicking throws an error",
            "Clicking does nothing"
        ]
    },
    {
        "q": "What is the purpose of the `isProxy` function in the Vue.js Composition API?",
        "o": [
            "To check if an object is a reactive or readonly proxy",
            "To convert an object to a reactive proxy",
            "To disable reactivity for an object",
            "To create a computed property"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ isProxyObj }}</div>\",\n  \"setup\": function() { const obj = Vue.reactive({ value: 'test' }); const isProxyObj = Vue.isProxy(obj); return { isProxyObj }; }\n}",
        "o": [
            "The div displays 'true'",
            "The div displays 'false'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `defineAsyncComponent` with the `timeout` option in Vue.js?",
        "o": [
            "It triggers the error component if the async component doesn't load within the specified time",
            "It retries loading the component after the timeout",
            "It disables reactivity for the component",
            "It restricts the component to static content"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div><async-component /></div>\",\n  \"components\": { 'async-component': Vue.defineAsyncComponent({ loader: () => new Promise(() => {}), timeout: 1000, errorComponent: { template: '<div>Timeout</div>' } }) }\n}",
        "o": [
            "Displays 'Timeout' after 1000ms",
            "Displays nothing",
            "Throws an error",
            "Retries loading indefinitely"
        ]
    },
    {
        "q": "What is the purpose of the `defineOptions` macro in the Vue.js Composition API with `<script setup>`?",
        "o": [
            "To define component options like name or inheritAttrs directly",
            "To create reactive data properties",
            "To handle DOM events",
            "To manage computed properties"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>Test</div>\",\n  \"setup\": function() { Vue.defineOptions({ name: 'MyComponent' }); return {}; }\n}",
        "o": [
            "The component is named 'MyComponent' and renders 'Test'",
            "The component throws an error",
            "The component is unnamed and renders 'Test'",
            "The component does not render"
        ]
    },
    {
        "q": "What is the role of the `v-bind` directive with the `.data` modifier in Vue.js?",
        "o": [
            "It binds a value as a data attribute on the element",
            "It disables reactivity for the binding",
            "It restricts binding to inline styles",
            "It binds class names to an element"
        ]
    },
    {
        "q": "What happens when you use the `watch` function with the `lazy` option in the Vue.js Composition API?",
        "o": [
            "The watcher does not run immediately upon setup",
            "The watcher runs immediately upon setup",
            "The watcher disables reactivity",
            "The watcher runs only on component unmount"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ count }}</div>\",\n  \"setup\": function() { const count = Vue.ref(0); Vue.watch(count, () => { console.log('Changed'); }, { lazy: true }); count.value++; return { count }; }\n}",
        "o": [
            "Logs 'Changed' only when count changes after setup and displays '1'",
            "Logs 'Changed' immediately and displays '1'",
            "Throws an error",
            "Displays '0' and does not log"
        ]
    },
    {
        "q": "What is the purpose of the `onUpdated` lifecycle hook in the Vue.js Composition API?",
        "o": [
            "To execute logic after the component's DOM is updated",
            "To handle component mounting",
            "To define reactive data",
            "To manage event listeners"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ count }}</div>\",\n  \"setup\": function() { const count = Vue.ref(0); Vue.onUpdated(() => console.log('Updated')); count.value++; return { count }; }\n}",
        "o": [
            "Logs 'Updated' after the DOM updates and displays '1'",
            "Logs 'Updated' before the DOM updates",
            "Throws an error",
            "Displays '0' and does not log"
        ]
    },
    {
        "q": "What is the effect of using the `v-on` directive with the `.shift` modifier in Vue.js?",
        "o": [
            "It triggers the event only when the Shift key is pressed",
            "It stops event propagation for Shift key events",
            "It disables Shift key events",
            "It throws an error for key modifiers"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<input @keyup.shift='logShift'>Content</input>\",\n  \"methods\": { logShift: function() { console.log('Shift pressed'); } }\n}",
        "o": [
            "Pressing Shift while typing logs 'Shift pressed'",
            "Pressing Shift does nothing",
            "Pressing Shift throws an error",
            "The input is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `toRef` function with a default value in the Vue.js Composition API?",
        "o": [
            "To create a reactive ref for a property with a fallback if undefined",
            "To disable reactivity for a property",
            "To create a non-reactive copy of a property",
            "To define a computed property"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ name }}</div>\",\n  \"setup\": function() { const obj = Vue.reactive({}); const name = Vue.toRef(obj, 'name', 'Default'); return { name }; }\n}",
        "o": [
            "The div displays 'Default'",
            "The div displays 'undefined'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `defineAsyncComponent` with the `suspense` component in Vue.js?",
        "o": [
            "It allows rendering a fallback while the async component loads",
            "It disables reactivity for the async component",
            "It retries loading the async component",
            "It restricts the component to static content"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<suspense><template #default><async-component /></template><template #fallback><div>Loading</div></template></suspense>\",\n  \"components\": { 'async-component': Vue.defineAsyncComponent({ loader: () => Promise.resolve({ template: '<div>Loaded</div>' }) }) }\n}",
        "o": [
            "Displays 'Loading' before showing 'Loaded'",
            "Displays 'Loaded' immediately",
            "Throws an error",
            "Displays nothing"
        ]
    },
    {
        "q": "What is the purpose of the `defineEmits` macro with type annotations in the Vue.js Composition API with `<script setup>`?",
        "o": [
            "To declare typed custom events for better TypeScript support",
            "To define reactive data properties",
            "To handle DOM events automatically",
            "To create computed properties"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<child-component @update='logUpdate' />\",\n  \"setup\": function() { const logUpdate = () => console.log('Updated'); return { logUpdate }; },\n  \"components\": { 'child-component': { setup: function() { const emit = Vue.defineEmits(['update']); emit('update'); return {}; }, template: '<div>Child</div>' } }\n}",
        "o": [
            "Logs 'Updated' when the child component emits the event",
            "Logs nothing",
            "Throws an error",
            "The child component does not render"
        ]
    },
    {
        "q": "What is the role of the `v-bind` directive with the `.is` modifier in Vue.js?",
        "o": [
            "It dynamically binds a component to an HTML element",
            "It binds data to an element",
            "It handles event listeners",
            "It defines a custom directive"
        ]
    },
    {
        "q": "What happens when you use the `watch` function with the `deep` and `immediate` options in the Vue.js Composition API?",
        "o": [
            "The watcher runs immediately and tracks nested property changes",
            "The watcher only tracks top-level changes",
            "The watcher disables reactivity",
            "The watcher runs only on component unmount"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ obj.value }}</div>\",\n  \"setup\": function() { const obj = Vue.reactive({ value: 1 }); Vue.watch(obj, () => { console.log('Changed'); }, { deep: true, immediate: true }); return { obj }; }\n}",
        "o": [
            "Logs 'Changed' immediately and displays '1'",
            "Logs 'Changed' only when obj changes",
            "Throws an error",
            "Displays '1' and does not log"
        ]
    },
    {
        "q": "What is the purpose of the `onBeforeRouteLeave` navigation guard in Vue Router when used with Vue.js?",
        "o": [
            "To execute logic before leaving a component's route",
            "To handle component mounting",
            "To define reactive data",
            "To manage event listeners"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>Route</div>\",\n  \"setup\": function() { Vue.onBeforeRouteLeave((to, from, next) => { console.log('Leaving'); next(); }); return {}; },\n  \"router\": new VueRouter({ routes: [{ path: '/', component: { template: '<div>Route</div>' } }] })\n}",
        "o": [
            "Logs 'Leaving' when navigating away from the route",
            "Logs 'Leaving' when entering the route",
            "Throws an error",
            "Does not log anything"
        ]
    },
    {
        "q": "What is the effect of using the `v-on` directive with the `.alt` modifier in Vue.js?",
        "o": [
            "It triggers the event only when the Alt key is pressed",
            "It stops event propagation for Alt key events",
            "It disables Alt key events",
            "It throws an error for key modifiers"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<input @keyup.alt='logAlt'>Content</input>\",\n  \"methods\": { logAlt: function() { console.log('Alt pressed'); } }\n}",
        "o": [
            "Pressing Alt while typing logs 'Alt pressed'",
            "Pressing Alt does nothing",
            "Pressing Alt throws an error",
            "The input is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `ref` function with an initial undefined value in the Vue.js Composition API?",
        "o": [
            "To create a reactive reference that can be undefined initially",
            "To disable reactivity for the reference",
            "To create a non-reactive reference",
            "To define a computed property"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ value }}</div>\",\n  \"setup\": function() { const value = Vue.ref(); return { value }; }\n}",
        "o": [
            "The div displays nothing (undefined)",
            "The div displays 'undefined' as text",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `defineAsyncComponent` with the `delay` option in Vue.js?",
        "o": [
            "It delays showing the loading component for a specified time",
            "It delays the component's rendering indefinitely",
            "It disables reactivity for the component",
            "It restricts the component to static content"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div><async-component /></div>\",\n  \"components\": { 'async-component': Vue.defineAsyncComponent({ loader: () => Promise.resolve({ template: '<div>Loaded</div>' }), delay: 200, loadingComponent: { template: '<div>Loading</div>' } }) }\n}",
        "o": [
            "Displays 'Loading' after 200ms before showing 'Loaded'",
            "Displays 'Loaded' immediately",
            "Throws an error",
            "Displays nothing"
        ]
    },
    {
        "q": "What is the purpose of the `withDefaults` function in the Vue.js Composition API?",
        "o": [
            "To provide default values for props in a component",
            "To define reactive data properties",
            "To handle DOM events",
            "To manage computed properties"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ msg }}</div>\",\n  \"setup\": function() { const props = Vue.withDefaults(Vue.defineProps({ msg: { type: String, default: 'Default' } }), { msg: 'Default' }); return { msg: props.msg }; }\n}",
        "o": [
            "The div displays 'Default' if no msg prop is passed",
            "The div displays nothing",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the role of the `v-bind` directive with the `.attr` modifier when binding to an HTML element?",
        "o": [
            "It forces the binding to be an attribute rather than a property",
            "It binds the value as a DOM property",
            "It disables reactivity for the attribute",
            "It restricts the binding to styles"
        ]
    },
    {
        "q": "What happens when you use the `watchEffect` function with the `onCleanup` callback in the Vue.js Composition API?",
        "o": [
            "It registers cleanup logic to run before the effect re-runs or on unmount",
            "It disables the watch effect",
            "It restricts the effect to synchronous execution",
            "It throws an error for invalid callbacks"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ count }}</div>\",\n  \"setup\": function() { const count = Vue.ref(0); Vue.watchEffect((onCleanup) => { const timer = setInterval(() => count.value++, 1000); onCleanup(() => clearInterval(timer)); }); return { count }; }\n}",
        "o": [
            "The div displays an incrementing count and cleans up the interval on unmount",
            "The div displays '0' without incrementing",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `onBeforeRouteUpdate` navigation guard in Vue Router when used with Vue.js?",
        "o": [
            "To execute logic before updating the current route in a component",
            "To handle component destruction",
            "To define reactive data",
            "To manage custom directives"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>Route</div>\",\n  \"setup\": function() { Vue.onBeforeRouteUpdate((to, from, next) => { console.log('Updating'); next(); }); return {}; },\n  \"router\": new VueRouter({ routes: [{ path: '/:id', component: { template: '<div>Route</div>' } }] })\n}",
        "o": [
            "Logs 'Updating' when the route param changes",
            "Logs 'Updating' when leaving the route",
            "Throws an error",
            "Does not log anything"
        ]
    },
    {
        "q": "What is the effect of using the `v-on` directive with the `.meta` modifier in Vue.js?",
        "o": [
            "It triggers the event only when the Meta key is pressed",
            "It stops event propagation for Meta key events",
            "It disables Meta key events",
            "It throws an error for key modifiers"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<input @keyup.meta='logMeta'>Content</input>\",\n  \"methods\": { logMeta: function() { console.log('Meta pressed'); } }\n}",
        "o": [
            "Pressing Meta while typing logs 'Meta pressed'",
            "Pressing Meta does nothing",
            "Pressing Meta throws an error",
            "The input is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `readonly` function in the Vue.js Composition API?",
        "o": [
            "To create a readonly version of a reactive object or ref",
            "To make an object fully reactive",
            "To disable reactivity entirely",
            "To convert an object to a shallow ref"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ obj.value }}</div>\",\n  \"setup\": function() { const reactiveObj = Vue.reactive({ value: 'test' }); const obj = Vue.readonly(reactiveObj); return { obj }; }\n}",
        "o": [
            "The div displays 'test'",
            "The div displays 'undefined'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the effect of using the `defineAsyncComponent` with the `suspensible` option set to false in Vue.js?",
        "o": [
            "It prevents the component from being wrapped in a Suspense boundary",
            "It forces the component to use Suspense",
            "It disables reactivity for the component",
            "It restricts the component to static content"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div><async-component /></div>\",\n  \"components\": { 'async-component': Vue.defineAsyncComponent({ loader: () => Promise.resolve({ template: '<div>Loaded</div>' }), suspensible: false }) }\n}",
        "o": [
            "Renders 'Loaded' without requiring a Suspense wrapper",
            "Renders nothing",
            "Throws an error",
            "Requires a Suspense component"
        ]
    },
    {
        "q": "What is the purpose of the `created` lifecycle hook in a Vue instance?",
        "o": [
            "It is called after the instance is created and reactivity is set up",
            "It is called before the instance is mounted to the DOM",
            "It is called when the instance is destroyed",
            "It is called during data binding"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ message.split('').join(',') }}</div>\",\n  \"data\": function() { return { message: 'Vue' }; }\n}",
        "o": [
            "V,u,e",
            "Vue",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "Which directive is used to dynamically bind one or more classes to an element in Vue.js?",
        "o": [
            "v-bind:class",
            "v-model:class",
            "v-on:class",
            "v-if:class"
        ]
    },
    {
        "q": "What happens when a computed property returns a function in Vue.js?",
        "o": [
            "The function is executed each time the computed property is accessed",
            "The computed property becomes a method",
            "Vue throws an error for invalid return type",
            "The function is cached and not executed"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-bind:href='url'>Link</div>\",\n  \"data\": function() { return { url: 'https://vuejs.org' }; }\n}",
        "o": [
            "The div has a href attribute set to 'https://vuejs.org'",
            "The div has no href attribute",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "How does Vue.js handle data binding for form elements like checkboxes?",
        "o": [
            "Using v-model to bind checked state or array of values",
            "Using v-bind to set the value attribute",
            "Using v-on to handle change events manually",
            "Using computed properties for state management"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ isPositive }}</div>\",\n  \"data\": function() { return { number: -5 }; },\n  \"computed\": { isPositive: function() { return this.number > 0; } }\n}",
        "o": [
            "false",
            "true",
            "-5",
            "undefined"
        ]
    },
    {
        "q": "What is the difference between `v-bind` and `v-model` when used on an input element?",
        "o": [
            "v-bind is one-way, v-model is two-way binding",
            "v-bind is two-way, v-model is one-way binding",
            "v-bind handles events, v-model binds attributes",
            "v-bind and v-model are equivalent for inputs"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<select v-model='selected'><option value='A'>A</option><option value='B'>B</option></select>\",\n  \"data\": function() { return { selected: 'B' }; }\n}",
        "o": [
            "The select element has 'B' selected",
            "The select element has 'A' selected",
            "The select element throws an error",
            "The select element is not rendered"
        ]
    },
    {
        "q": "Which lifecycle hook is suitable for accessing the DOM in a Vue instance?",
        "o": [
            "mounted",
            "created",
            "beforeCreate",
            "updated"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-bind:style='{ backgroundColor: color }'>Content</div>\",\n  \"data\": function() { return { color: 'red' }; }\n}",
        "o": [
            "The div has a background color of red",
            "The div has no background color",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "How does Vue.js ensure that data properties are reactive when using object literals?",
        "o": [
            "By observing the object with getters and setters at initialization",
            "By manually updating the DOM on changes",
            "By polling the data properties",
            "By using event listeners on properties"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ computedValue }}</div>\",\n  \"data\": function() { return { a: 2, b: 3 }; },\n  \"computed\": { computedValue: function() { return this.a * this.b; } }\n}",
        "o": [
            "6",
            "2",
            "3",
            "undefined"
        ]
    },
    {
        "q": "What is the purpose of the `beforeDestroy` lifecycle hook in a Vue.js component?",
        "o": [
            "To perform cleanup tasks before the component is destroyed",
            "To initialize reactive data properties",
            "To bind events to the DOM",
            "To define computed properties"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ message.toLowerCase() }}</div>\",\n  \"data\": function() { return { message: 'VUE' }; }\n}",
        "o": [
            "vue",
            "VUE",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "Which directive in Vue.js is used to iterate over an array or object in a template?",
        "o": [
            "v-for",
            "v-bind",
            "v-model",
            "v-if"
        ]
    },
    {
        "q": "What happens when a computed property in Vue.js accesses a non-existent data property?",
        "o": [
            "It returns undefined without throwing an error",
            "It throws a reference error",
            "It causes an infinite render loop",
            "It disables reactivity for the component"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-bind:title='tooltip'>Hover</div>\",\n  \"data\": function() { return { tooltip: 'Info' }; }\n}",
        "o": [
            "The div has a title attribute set to 'Info'",
            "The div has no title attribute",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "How does Vue.js handle reactivity for computed properties with multiple dependencies?",
        "o": [
            "It updates the computed property when any dependency changes",
            "It updates only when all dependencies change",
            "It disables reactivity for multiple dependencies",
            "It throws an error for multiple dependencies"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ total }}</div>\",\n  \"data\": function() { return { x: 4, y: 5 }; },\n  \"computed\": { total: function() { return this.x + this.y; } }\n}",
        "o": [
            "9",
            "4",
            "5",
            "undefined"
        ]
    },
    {
        "q": "What is the difference between `v-bind:class` with an object and an array in Vue.js?",
        "o": [
            "Object applies classes conditionally, array applies all classes listed",
            "Object applies all classes, array applies classes conditionally",
            "Object is for styles, array is for classes",
            "Object and array are equivalent for class binding"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<input type='checkbox' v-model='checked' />\",\n  \"data\": function() { return { checked: true }; }\n}",
        "o": [
            "The checkbox is checked by default",
            "The checkbox is unchecked by default",
            "The checkbox throws an error",
            "The checkbox is not rendered"
        ]
    },
    {
        "q": "Which lifecycle hook in Vue.js is called after the component's reactive data is initialized but before DOM rendering?",
        "o": [
            "created",
            "mounted",
            "beforeCreate",
            "beforeMount"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-bind:class='{ active: isActive }'>Content</div>\",\n  \"data\": function() { return { isActive: true }; }\n}",
        "o": [
            "The div has the 'active' class",
            "The div has no classes",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "How does Vue.js ensure reactivity when adding a new property to an existing reactive object?",
        "o": [
            "By using Vue.set to make the new property reactive",
            "By automatically making all new properties reactive",
            "By throwing an error for new properties",
            "By disabling reactivity for the object"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ formattedText }}</div>\",\n  \"data\": function() { return { text: 'hello' }; },\n  \"computed\": { formattedText: function() { return this.text + '!'; } }\n}",
        "o": [
            "hello!",
            "hello",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "Why does defining 'data' as an object instead of a function in a Vue.js component lead to unexpected behavior?",
        "o": [
            "It shares the same data object across all instances, breaking reactivity isolation",
            "It makes the data non-reactive entirely",
            "It throws a syntax error during compilation",
            "It limits the data to primitive types only"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ wordCount }}</div>\",\n  \"data\": function() { return { sentence: 'Vue is great' }; },\n  \"computed\": { wordCount: function() { return this.sentence.split(' ').length; } }\n}",
        "o": [
            "3",
            "Vue is great",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "In Vue.js, why is it recommended to use computed properties over methods for derived data?",
        "o": [
            "Computed properties are cached and only recompute when dependencies change",
            "Methods are non-reactive unlike computed properties",
            "Computed properties cannot access data properties",
            "Methods are faster for complex calculations"
        ]
    },
    {
        "q": "What happens if you attempt to modify a reactive data property inside a computed property getter?",
        "o": [
            "Vue warns about side effects in computed properties",
            "The modification is allowed and reactive",
            "The computed property becomes non-cached",
            "Vue throws a runtime error"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-bind:class='{ highlighted: highlight, bold: isBold }'>Text</div>\",\n  \"data\": function() { return { highlight: true, isBold: false }; }\n}",
        "o": [
            "The div has the 'highlighted' class but not 'bold'",
            "The div has both 'highlighted' and 'bold' classes",
            "The div has no classes",
            "The div throws an error"
        ]
    },
    {
        "q": "What is the primary difference between v-if and v-show directives in Vue.js?",
        "o": [
            "v-if removes the element from the DOM, v-show toggles display: none",
            "v-show removes the element from the DOM, v-if toggles visibility",
            "v-if is reactive, v-show is not",
            "v-if and v-show are identical in behavior"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<input v-model='inputText' />\",\n  \"data\": function() { return { inputText: 'Initial' }; }\n}",
        "o": [
            "The input displays 'Initial' and syncs changes bidirectionally",
            "The input is empty and does not sync changes",
            "The input displays 'Initial' but changes are not synced",
            "The input throws an error"
        ]
    },
    {
        "q": "Why must the 'data' option in a Vue.js component be a function returning an object?",
        "o": [
            "To ensure each component instance has its own isolated reactive data",
            "To allow sharing data across component instances",
            "To disable reactivity for performance gains",
            "To restrict data to function calls only"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-if='show'>Visible</div><div v-else>Hidden</div>\",\n  \"data\": function() { return { show: false }; }\n}",
        "o": [
            "Renders 'Hidden'",
            "Renders 'Visible'",
            "Renders both 'Visible' and 'Hidden'",
            "Renders nothing"
        ]
    },
    {
        "q": "In Vue.js, how does the v-for directive require a key for efficient list rendering?",
        "o": [
            "To track element identity and minimize DOM manipulations",
            "To bind data properties to list items",
            "To disable reactivity in lists",
            "To restrict lists to primitive values"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-for='(item, index) in items' :key='index'>{{ item }}</div>\",\n  \"data\": function() { return { items: ['A', 'B', 'C'] }; }\n}",
        "o": [
            "Renders three divs with 'A', 'B', 'C'",
            "Renders one div with 'A,B,C'",
            "Renders nothing",
            "Throws an error without keys"
        ]
    },
    {
        "q": "What occurs if a Vue.js instance's 'el' option is not specified?",
        "o": [
            "The instance is created but not mounted; manual mounting is required",
            "The instance throws an error on creation",
            "The instance mounts to the body element automatically",
            "The instance disables reactivity"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ reversedItems }}</div>\",\n  \"data\": function() { return { items: [1, 2, 3] }; },\n  \"computed\": { reversedItems: function() { return this.items.slice().reverse().join(','); } }\n}",
        "o": [
            "3,2,1",
            "1,2,3",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "What is the purpose of the `Vue.set` method in Vue.js?",
        "o": [
            "To add a new reactive property to an existing reactive object",
            "To define a computed property",
            "To handle DOM events",
            "To create a non-reactive object"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ obj.newProp }}</div>\",\n  \"data\": function() { return { obj: {} }; },\n  \"mounted\": function() { Vue.set(this.obj, 'newProp', 'Value'); }\n}",
        "o": [
            "The div displays 'Value'",
            "The div displays 'undefined'",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the role of the `v-else-if` directive in Vue.js?",
        "o": [
            "To provide additional conditional rendering branches after v-if",
            "To bind data to an element",
            "To handle event listeners",
            "To define a loop"
        ]
    },
    {
        "q": "What happens when you use the `v-model` directive on a textarea element in Vue.js?",
        "o": [
            "It creates a two-way binding for the textarea's value",
            "It binds the textarea to a static value",
            "It disables reactivity for the textarea",
            "It throws an error for textareas"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<textarea v-model='content'></textarea>\",\n  \"data\": function() { return { content: 'Initial text' }; }\n}",
        "o": [
            "The textarea displays 'Initial text' and updates with user input",
            "The textarea is empty and does not update",
            "The textarea throws an error",
            "The textarea is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `destroyed` lifecycle hook in Vue.js?",
        "o": [
            "To perform cleanup after the component is destroyed",
            "To initialize reactive data",
            "To bind events to the DOM",
            "To define computed properties"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-for='item in list' :key='item'>{{ item.toUpperCase() }}</div>\",\n  \"data\": function() { return { list: ['a', 'b', 'c'] }; }\n}",
        "o": [
            "Renders three divs with 'A', 'B', 'C'",
            "Renders one div with 'a,b,c'",
            "Renders nothing",
            "Throws an error"
        ]
    },
    {
        "q": "What is the effect of using `v-bind` with a null value for a boolean attribute like `disabled` in Vue.js?",
        "o": [
            "The attribute is removed from the element",
            "The attribute is set to an empty string",
            "The attribute is set to 'disabled'",
            "The attribute causes an error"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<button v-bind:disabled='isDisabled'>Click</button>\",\n  \"data\": function() { return { isDisabled: null }; }\n}",
        "o": [
            "The button is not disabled",
            "The button is disabled",
            "The button throws an error",
            "The button is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `watch` option in a Vue.js component?",
        "o": [
            "To observe changes to specific data properties and react accordingly",
            "To define computed properties",
            "To manage DOM rendering",
            "To bind attributes to elements"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ count }}</div>\",\n  \"data\": function() { return { count: 0 }; },\n  \"watch\": { count: function(newVal) { console.log('Count is ' + newVal); } },\n  \"mounted\": function() { this.count = 1; }\n}",
        "o": [
            "Logs 'Count is 1' and displays '1'",
            "Logs nothing and displays '1'",
            "Throws an error",
            "Displays '0'"
        ]
    },
    {
        "q": "How does Vue.js handle reactivity for arrays when using methods like `push`?",
        "o": [
            "Vue wraps array methods to maintain reactivity",
            "Array methods are non-reactive by default",
            "Vue throws an error for array mutations",
            "Vue requires manual reactivity updates"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ numbers.join(',') }}</div>\",\n  \"data\": function() { return { numbers: [1, 2] }; },\n  \"mounted\": function() { this.numbers.push(3); }\n}",
        "o": [
            "1,2,3",
            "1,2",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "What is the purpose of the `methods` option in a Vue.js component?",
        "o": [
            "To define functions that can be called in response to events or in templates",
            "To create reactive data properties",
            "To define computed properties",
            "To manage lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<button @click='increment'>{{ count }}</button>\",\n  \"data\": function() { return { count: 0 }; },\n  \"methods\": { increment: function() { this.count++; } }\n}",
        "o": [
            "The button displays '0' and increments to '1' on click",
            "The button displays '0' and does not increment",
            "The button throws an error",
            "The button is not rendered"
        ]
    },
    {
        "q": "What is the role of the `v-on` directive shorthand in Vue.js?",
        "o": [
            "It uses '@' to bind event listeners to elements or components",
            "It uses ':' to bind attributes",
            "It disables event reactivity",
            "It restricts events to custom events"
        ]
    },
    {
        "q": "What happens when you use the `v-bind` directive with a boolean attribute like `hidden` in Vue.js?",
        "o": [
            "The attribute is added if true and removed if false",
            "The attribute is always added",
            "The attribute throws an error if false",
            "The attribute is ignored"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-bind:hidden='isHidden'>Content</div>\",\n  \"data\": function() { return { isHidden: false }; }\n}",
        "o": [
            "The div is visible with no hidden attribute",
            "The div is hidden",
            "The div throws an error",
            "The div is not rendered"
        ]
    },
    {
        "q": "What is the purpose of the `beforeMount` lifecycle hook in Vue.js?",
        "o": [
            "To execute logic before the component is mounted to the DOM",
            "To clean up after the component is destroyed",
            "To define reactive data",
            "To handle DOM events"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ items.length }}</div>\",\n  \"data\": function() { return { items: ['x', 'y'] }; },\n  \"mounted\": function() { this.items.push('z'); }\n}",
        "o": [
            "3",
            "2",
            "undefined",
            "Error"
        ]
    },
    {
        "q": "What is the effect of using `v-for` with an object in Vue.js?",
        "o": [
            "It iterates over the object's values, keys, or both with index",
            "It throws an error for non-array data",
            "It disables reactivity for the object",
            "It restricts iteration to arrays only"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div v-for='(value, key) in obj' :key='key'>{{ key }}: {{ value }}</div>\",\n  \"data\": function() { return { obj: { a: 1, b: 2 } }; }\n}",
        "o": [
            "Renders two divs with 'a: 1' and 'b: 2'",
            "Renders one div with 'a,b: 1,2'",
            "Renders nothing",
            "Throws an error"
        ]
    },
    {
        "q": "What is the purpose of the `$emit` method in a Vue.js component?",
        "o": [
            "To trigger a custom event that can be listened to by parent components",
            "To define a reactive property",
            "To bind attributes to elements",
            "To manage lifecycle hooks"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<child-component @custom-event='logEvent'></child-component>\",\n  \"methods\": { logEvent: function() { console.log('Event'); } },\n  \"components\": { 'child-component': { template: '<div @click=\\'$emit(\\'custom-event\\')\\'>Click</div>' } }\n}",
        "o": [
            "Clicking the child div logs 'Event'",
            "Clicking the child div does nothing",
            "Clicking the child div throws an error",
            "The child div is not rendered"
        ]
    },
    {
        "q": "How does Vue.js handle reactivity when a reactive array's length is changed?",
        "o": [
            "Vue detects length changes and maintains reactivity",
            "Length changes are non-reactive by default",
            "Vue throws an error for length mutations",
            "Vue requires Vue.set for length changes"
        ]
    },
    {
        "q": "What is the output of the following Vue.js code?",
        "c": "{\n  \"template\": \"<div>{{ numbers.length }}</div>\",\n  \"data\": function() { return { numbers: [1, 2, 3] }; },\n  \"mounted\": function() { this.numbers.length = 1; }\n}",
        "o": [
            "1",
            "3",
            "undefined",
            "Error"
        ]
    }
]