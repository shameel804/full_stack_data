[
    {
        "q": "Which command is used to create a new React app using Create React App?",
        "o": [
            "npx create-react-app my-app",
            "npm run react-app my-app",
            "npm init react my-app",
            "npx init-react my-app"
        ]
    },
    {
        "q": "Which of the following is the correct way to write JSX?",
        "o": [
            "<h1>Hello World</h1>",
            "h1('Hello World')",
            "document.createElement('h1', 'Hello World')",
            "render(<h1>Hello</h1>)"
        ]
    },
    {
        "q": "What is the output of the following JSX expression?",
        "c": "const element = <h2>{2 + 3}</h2>;",
        "o": [
            "<h2>5</h2>",
            "<h2>{2 + 3}</h2>",
            "5",
            "undefined"
        ]
    },
    {
        "q": "Which of the following statements about JSX is true?",
        "o": [
            "JSX must return a single parent element",
            "JSX can return multiple sibling elements without a parent",
            "JSX cannot contain JavaScript expressions",
            "JSX is the same as HTML"
        ]
    },
    {
        "q": "What is the output of the following code?",
        "c": "const element = <p>{'Hello' + ' ' + 'React'}</p>;",
        "o": [
            "<p>Hello React</p>",
            "HelloReact",
            "<p>{'Hello' + ' ' + 'React'}</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is the correct way to define a functional component in React?",
        "o": [
            "function Welcome() { return <h1>Hello</h1>; }",
            "component Welcome() { return <h1>Hello</h1>; }",
            "Welcome() => <h1>Hello</h1>",
            "class Welcome { render() { return <h1>Hello</h1>; } }"
        ]
    },
    {
        "q": "What is the output of the following component?",
        "c": "function Greeting() {\n  return <div>Hi there!</div>;\n}\n\nconst element = <Greeting />;",
        "o": [
            "<div>Hi there!</div>",
            "Greeting",
            "undefined",
            "<Greeting />"
        ]
    },
    {
        "q": "Which method is used to render a React element to the DOM?",
        "o": [
            "ReactDOM.render()",
            "renderElement()",
            "React.renderElement()",
            "DOM.renderReact()"
        ]
    },
    {
        "q": "What is the output of the following code?",
        "c": "const name = 'John';\nconst element = <h1>Hello, {name}</h1>;",
        "o": [
            "<h1>Hello, John</h1>",
            "<h1>Hello, {name}</h1>",
            "Hello, John",
            "undefined"
        ]
    },
    {
        "q": "Which of the following best describes functional components in React?",
        "o": [
            "They are JavaScript functions that return JSX",
            "They are ES6 classes that extend React.Component",
            "They are functions that manipulate the DOM directly",
            "They are functions that must always return plain text"
        ]
    },
    {
        "q": "Which of the following is required before using Create React App?",
        "o": [
            "Node.js and npm must be installed",
            "Only Python must be installed",
            "No installations are required",
            "Java must be installed"
        ]
    },
    {
        "q": "Which of the following is the correct file extension for React components?",
        "o": [
            ".js or .jsx",
            ".react",
            ".html",
            ".component"
        ]
    },
    {
        "q": "What will be rendered by the following code?",
        "c": "const element = <h1>{10 * 2}</h1>;",
        "o": [
            "<h1>20</h1>",
            "<h1>{10 * 2}</h1>",
            "20",
            "undefined"
        ]
    },
    {
        "q": "In JSX, how do you add a CSS class to an element?",
        "o": [
            "<div className=\"container\"></div>",
            "<div class=\"container\"></div>",
            "<div css=\"container\"></div>",
            "<div styleClass=\"container\"></div>"
        ]
    },
    {
        "q": "Which of the following statements about rendering elements is true?",
        "o": [
            "React elements are immutable",
            "React elements can be directly updated after creation",
            "React elements are the same as browser DOM elements",
            "React elements are mutable objects"
        ]
    },
    {
        "q": "What is the output of the following component?",
        "c": "function App() {\n  return <h2>{'React'.toUpperCase()}</h2>;\n}\n\nconst element = <App />;",
        "o": [
            "<h2>REACT</h2>",
            "<h2>React</h2>",
            "REACT",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about functional components?",
        "o": [
            "They can accept props as arguments",
            "They must always use state",
            "They cannot accept any arguments",
            "They are only used for styling"
        ]
    },
    {
        "q": "Which of the following is the correct way to render a component named Header?",
        "o": [
            "<Header />",
            "Header()",
            "render(Header)",
            "<headerComponent />"
        ]
    },
    {
        "q": "What is the output of the following JSX?",
        "c": "const user = { name: 'Alice' };\nconst element = <h3>{user.name}</h3>;",
        "o": [
            "<h3>Alice</h3>",
            "<h3>{user.name}</h3>",
            "Alice",
            "undefined"
        ]
    },
    {
        "q": "Which of the following describes JSX?",
        "o": [
            "JSX is a syntax extension for JavaScript that looks like HTML",
            "JSX is a new programming language",
            "JSX is only used to style React apps",
            "JSX is the same as JavaScript strings"
        ]
    },
    {
        "q": "Which of the following is the default start command for a Create React App project?",
        "o": [
            "npm start",
            "npm run build",
            "npm run serve",
            "node app.js"
        ]
    },
    {
        "q": "Which of the following correctly represents embedding JavaScript inside JSX?",
        "o": [
            "{expression}",
            "(expression)",
            "[expression]",
            "<expression>"
        ]
    },
    {
        "q": "What is the output of the following JSX expression?",
        "c": "const element = <p>{5 > 3 ? 'Yes' : 'No'}</p>;",
        "o": [
            "<p>Yes</p>",
            "<p>No</p>",
            "Yes",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React rendering?",
        "o": [
            "React updates only the parts of the DOM that changed",
            "React re-renders the entire page on every update",
            "React directly manipulates the real DOM every time",
            "React rendering does not use a virtual DOM"
        ]
    },
    {
        "q": "What is the output of the following code?",
        "c": "function App() {\n  const num = 7;\n  return <h4>{num % 2 === 0 ? 'Even' : 'Odd'}</h4>;\n}\n\nconst element = <App />;",
        "o": [
            "<h4>Odd</h4>",
            "<h4>Even</h4>",
            "Odd",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is NOT true about functional components?",
        "o": [
            "They must always use a render() method",
            "They can return JSX",
            "They can accept props",
            "They are plain JavaScript functions"
        ]
    },
    {
        "q": "Which of the following is correct about ReactDOM.render()?",
        "o": [
            "It takes a React element and mounts it into a DOM node",
            "It creates a new React component",
            "It converts JSX into HTML strings",
            "It directly edits the DOM tree without a virtual DOM"
        ]
    },
    {
        "q": "What is the output of the following JSX?",
        "c": "const title = 'Welcome';\nconst element = <h1>{title + ' to React'}</h1>;",
        "o": [
            "<h1>Welcome to React</h1>",
            "<h1>{title + ' to React'}</h1>",
            "Welcome to React",
            "undefined"
        ]
    },
    {
        "q": "Which of the following best explains why JSX is used in React?",
        "o": [
            "It makes UI code easier to read and write",
            "It is faster than plain JavaScript",
            "It replaces JavaScript completely",
            "It is required by the browser to run React"
        ]
    },
    {
        "q": "What will be rendered by the following code?",
        "c": "function Hello() {\n  return <div>{[1, 2, 3].map(n => n * 2)}</div>;\n}\n\nconst element = <Hello />;",
        "o": [
            "<div>246</div>",
            "<div>{[1,2,3].map(n => n * 2)}</div>",
            "246",
            "undefined"
        ]
    },
    {
        "q": "Which of the following command builds the production-ready optimized React app?",
        "o": [
            "npm run build",
            "npm start",
            "npm install build",
            "npm run production"
        ]
    },
    {
        "q": "Which of the following is the correct way to include JavaScript expressions inside JSX?",
        "o": [
            "By wrapping them in curly braces {}",
            "By wrapping them in double quotes \"\"",
            "By wrapping them in parentheses ()",
            "By wrapping them in square brackets []"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const element = <h2>{'React ' + 'Basics'}</h2>;",
        "o": [
            "<h2>React Basics</h2>",
            "<h2>{'React ' + 'Basics'}</h2>",
            "React Basics",
            "undefined"
        ]
    },
    {
        "q": "Which of the following best describes React elements?",
        "o": [
            "They are plain objects representing the UI",
            "They are actual DOM nodes",
            "They are functions that manipulate HTML directly",
            "They are JSON strings representing HTML"
        ]
    },
    {
        "q": "What is the output of the following code?",
        "c": "function Message() {\n  return <p>{100 / 10}</p>;\n}\n\nconst element = <Message />;",
        "o": [
            "<p>10</p>",
            "<p>{100 / 10}</p>",
            "10",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is the correct way to export a functional component?",
        "o": [
            "export default MyComponent;",
            "module.exports = MyComponent();",
            "export component MyComponent;",
            "export function = MyComponent;"
        ]
    },
    {
        "q": "Which of the following is true about JSX attributes?",
        "o": [
            "They are written in camelCase",
            "They must always be lowercase",
            "They cannot accept JavaScript values",
            "They must always be in quotes"
        ]
    },
    {
        "q": "What is the output of the following JSX?",
        "c": "const element = <h3>{[10, 20, 30].length}</h3>;",
        "o": [
            "<h3>3</h3>",
            "<h3>{[10, 20, 30].length}</h3>",
            "3",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about functional components?",
        "o": [
            "They are stateless functions that return JSX",
            "They must always extend React.Component",
            "They must always use hooks",
            "They cannot accept any input"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function App() {\n  return <h1>{true ? 'Yes' : 'No'}</h1>;\n}\n\nconst element = <App />;",
        "o": [
            "<h1>Yes</h1>",
            "<h1>No</h1>",
            "Yes",
            "undefined"
        ]
    },
    {
        "q": "Which of the following commands installs dependencies after creating a React app?",
        "o": [
            "npm install",
            "npm start",
            "npm init",
            "npm build"
        ]
    },
    {
        "q": "Which of the following is the correct JSX syntax?",
        "o": [
            "<img src=\"logo.png\" alt=\"Logo\" />",
            "<img src='logo.png' alt='Logo'></img>",
            "<img src=logo.png alt=Logo>",
            "<img:src logo.png alt Logo/>"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const element = <h4>{1 + '2'}</h4>;",
        "o": [
            "<h4>12</h4>",
            "<h4>3</h4>",
            "12",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React components?",
        "o": [
            "Components let you split the UI into independent reusable pieces",
            "Components must always be written as classes",
            "Components cannot return JSX",
            "Components cannot accept any input"
        ]
    },
    {
        "q": "What is the output of the following code?",
        "c": "function Info() {\n  return <div>{2 * 5}</div>;\n}\n\nconst element = <Info />;",
        "o": [
            "<div>10</div>",
            "<div>{2 * 5}</div>",
            "10",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is the correct way to import React in a component?",
        "o": [
            "import React from 'react';",
            "import react from 'React';",
            "import React.Component from 'react';",
            "include React;"
        ]
    },
    {
        "q": "Which of the following is true about JSX comments?",
        "o": [
            "They are written as {/* comment */}",
            "They are written as // comment",
            "They are written as <!-- comment -->",
            "They are written as # comment"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const element = <h2>{['R', 'e', 'a', 'c', 't'].join('')}</h2>;",
        "o": [
            "<h2>React</h2>",
            "<h2>{['R','e','a','c','t'].join('')}</h2>",
            "React",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is the correct way to write a self-closing tag in JSX?",
        "o": [
            "<input />",
            "<input></input>",
            "<input>",
            "<input /> </input>"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Show() {\n  return <h1>{false ? 'Yes' : 'No'}</h1>;\n}\n\nconst element = <Show />;",
        "o": [
            "<h1>No</h1>",
            "<h1>Yes</h1>",
            "No",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is the correct command to start a development server in Create React App?",
        "o": [
            "npm start",
            "npm run dev",
            "npm serve",
            "node start.js"
        ]
    },
    {
        "q": "Which of the following is a key difference between JSX and HTML?",
        "o": [
            "In JSX, 'class' is written as 'className'",
            "In JSX, 'class' and 'className' are interchangeable",
            "HTML requires camelCase attributes while JSX does not",
            "There is no difference at all"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const element = <h3>{[1, 2, 3].map(n => n + 1)}</h3>;",
        "o": [
            "<h3>234</h3>",
            "<h3>123</h3>",
            "<h3>{[1, 2, 3].map(n => n + 1)}</h3>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following describes React functional components?",
        "o": [
            "They are JavaScript functions that return JSX",
            "They must be written as ES6 classes",
            "They can never accept props",
            "They always have lifecycle methods"
        ]
    },
    {
        "q": "What is the output of the following component?",
        "c": "function NumberBox() {\n  const value = 15;\n  return <span>{value > 10 ? 'Big' : 'Small'}</span>;\n}\n\nconst element = <NumberBox />;",
        "o": [
            "<span>Big</span>",
            "<span>Small</span>",
            "Big",
            "undefined"
        ]
    },
    {
        "q": "Which of the following best describes rendering in React?",
        "o": [
            "React uses a virtual DOM to update only changed elements",
            "React rewrites the entire DOM tree each time",
            "React renders everything on the server only",
            "React converts HTML into plain text before rendering"
        ]
    },
    {
        "q": "Which of the following is correct when returning multiple elements in JSX?",
        "o": [
            "They must be wrapped in a single parent element like <div> or <> </>",
            "They can be written side by side with no wrapper",
            "They must be inside a <multiple> tag",
            "They must be returned as a string"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const name = 'React';\nconst element = <h1>{name.length}</h1>;",
        "o": [
            "<h1>5</h1>",
            "<h1>{name.length}</h1>",
            "5",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is correct about props in functional components?",
        "o": [
            "Props are passed as arguments to the component function",
            "Props must always be hardcoded inside the component",
            "Props cannot be used in functional components",
            "Props can only be used with class components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Greeting(props) {\n  return <h2>Hello, {props.user}</h2>;\n}\n\nconst element = <Greeting user=\"Sam\" />;",
        "o": [
            "<h2>Hello, Sam</h2>",
            "<h2>Hello, {props.user}</h2>",
            "Sam",
            "undefined"
        ]
    },
    {
        "q": "Which file is usually the entry point of a Create React App project?",
        "o": [
            "index.js",
            "App.js",
            "main.js",
            "root.js"
        ]
    },
    {
        "q": "Which of the following is true about JSX?",
        "o": [
            "JSX must have properly closed tags",
            "JSX allows unclosed tags like <br>",
            "JSX does not support self-closing tags",
            "JSX ignores case sensitivity of element names"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const message = 'Learn';\nconst element = <h4>{message + ' React'}</h4>;",
        "o": [
            "<h4>Learn React</h4>",
            "<h4>{message + ' React'}</h4>",
            "Learn React",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React components?",
        "o": [
            "Component names must start with a capital letter",
            "Component names can start with lowercase letters",
            "Component names can only be written in snake_case",
            "Component names must be inside quotes"
        ]
    },
    {
        "q": "What is the output of the following component?",
        "c": "function ShowNumber() {\n  return <p>{Math.max(3, 7)}</p>;\n}\n\nconst element = <ShowNumber />;",
        "o": [
            "<p>7</p>",
            "<p>3</p>",
            "7",
            "undefined"
        ]
    },
    {
        "q": "Which of the following best describes React elements?",
        "o": [
            "They are lightweight objects describing what you want to see on screen",
            "They are the same as DOM nodes",
            "They are functions that update HTML directly",
            "They are JSON strings containing HTML"
        ]
    },
    {
        "q": "Which of the following is correct about JSX expressions?",
        "o": [
            "They can contain any valid JavaScript expression inside {}",
            "They can only contain numbers and strings inside {}",
            "They cannot call functions inside {}",
            "They cannot contain conditional logic"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const items = ['A', 'B'];\nconst element = <h5>{items.join('-')}</h5>;",
        "o": [
            "<h5>A-B</h5>",
            "<h5>{items.join('-')}</h5>",
            "A-B",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is correct about ReactDOM?",
        "o": [
            "It is responsible for updating the DOM to match React elements",
            "It is the same as React core library",
            "It provides lifecycle methods for components",
            "It is only used in class components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Double(props) {\n  return <div>{props.value * 2}</div>;\n}\n\nconst element = <Double value={4} />;",
        "o": [
            "<div>8</div>",
            "<div>{props.value * 2}</div>",
            "8",
            "undefined"
        ]
    },
    {
        "q": "Which file in a Create React App project usually contains the root component?",
        "o": [
            "App.js",
            "index.js",
            "main.js",
            "Root.js"
        ]
    },
    {
        "q": "Which of the following correctly describes JSX?",
        "o": [
            "JSX is transpiled to JavaScript using tools like Babel",
            "JSX runs directly in all browsers",
            "JSX is only supported in Node.js",
            "JSX is a type of JSON"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const element = <p>{['Hello', ' ', 'React']}</p>;",
        "o": [
            "<p>Hello React</p>",
            "<p>{['Hello', ' ', 'React']}</p>",
            "Hello React",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React functional components?",
        "o": [
            "They can be written as arrow functions",
            "They must always be regular functions",
            "They cannot return JSX if written as arrow functions",
            "They must use 'function' keyword only"
        ]
    },
    {
        "q": "What is the output of the following component?",
        "c": "function Multiply() {\n  return <span>{3 * 4}</span>;\n}\n\nconst element = <Multiply />;",
        "o": [
            "<span>12</span>",
            "<span>{3 * 4}</span>",
            "12",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is correct about props?",
        "o": [
            "Props are read-only",
            "Props can be modified inside the component",
            "Props are mutable like state",
            "Props are used only in class components"
        ]
    },
    {
        "q": "Which of the following is true about React elements?",
        "o": [
            "They describe what should appear on the screen",
            "They directly manipulate the DOM",
            "They are the same as components",
            "They can only be created using classes"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const element = <h6>{'JSX'.toLowerCase()}</h6>;",
        "o": [
            "<h6>jsx</h6>",
            "<h6>{'JSX'.toLowerCase()}</h6>",
            "jsx",
            "undefined"
        ]
    },
    {
        "q": "Which of the following correctly describes rendering in React?",
        "o": [
            "React rendering is declarative",
            "React rendering requires manual DOM manipulation",
            "React rendering is imperative",
            "React rendering requires inline JavaScript only"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ShowName(props) {\n  return <h2>{'Hi ' + props.name}</h2>;\n}\n\nconst element = <ShowName name=\"Alex\" />;",
        "o": [
            "<h2>Hi Alex</h2>",
            "<h2>{'Hi ' + props.name}</h2>",
            "Hi Alex",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about Create React App?",
        "o": [
            "It sets up a modern React development environment with no configuration",
            "It requires manual setup of Webpack and Babel",
            "It is only used to deploy React apps",
            "It is a library for writing React components"
        ]
    },
    {
        "q": "Which of the following JSX snippets is valid?",
        "o": [
            "<button disabled={true}>Click</button>",
            "<button disabled=true>Click</button>",
            "<button disabled:\"true\">Click</button>",
            "<button disabled='true'>Click</button>"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const element = <p>{[10, 20].reduce((a, b) => a + b)}</p>;",
        "o": [
            "<p>30</p>",
            "<p>{[10, 20].reduce((a, b) => a + b)}</p>",
            "30",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React components?",
        "o": [
            "They can be reused across the application",
            "They cannot be reused",
            "They must always be stored in a single file",
            "They are tied to only one page"
        ]
    },
    {
        "q": "What is the output of the following component?",
        "c": "function Add() {\n  return <h4>{2 + 8}</h4>;\n}\n\nconst element = <Add />;",
        "o": [
            "<h4>10</h4>",
            "<h4>{2 + 8}</h4>",
            "10",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about ReactDOM.render()?",
        "o": [
            "It takes a React element and mounts it into the DOM",
            "It is only used in server-side rendering",
            "It directly updates HTML without using virtual DOM",
            "It is required in every component"
        ]
    },
    {
        "q": "Which of the following JSX is valid for inline styles?",
        "o": [
            "<div style={{color: 'red', fontSize: '20px'}}></div>",
            "<div style=\"color: red; font-size: 20px\"></div>",
            "<div style=(color: red)></div>",
            "<div style:[color:'red']></div>"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const element = <h5>{'React'.includes('R') ? 'Yes' : 'No'}</h5>;",
        "o": [
            "<h5>Yes</h5>",
            "<h5>No</h5>",
            "Yes",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is correct about functional components?",
        "o": [
            "They can return JSX directly",
            "They must return plain strings",
            "They can only be used with class-based state",
            "They cannot accept props"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Square(props) {\n  return <div>{props.num * props.num}</div>;\n}\n\nconst element = <Square num={5} />;",
        "o": [
            "<div>25</div>",
            "<div>{props.num * props.num}</div>",
            "25",
            "undefined"
        ]
    },
    {
        "q": "Which of the following command is used to eject configuration in Create React App?",
        "o": [
            "npm run eject",
            "npm eject-config",
            "npm run config",
            "npm run reset"
        ]
    },
    {
        "q": "Which of the following is true about JSX syntax rules?",
        "o": [
            "JSX attributes follow camelCase naming convention",
            "JSX attributes must always be lowercase",
            "JSX attributes can only accept string values",
            "JSX does not allow JavaScript expressions"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const element = <h2>{[1, 2, 3].map(x => x * x).join(', ')}</h2>;",
        "o": [
            "<h2>1, 4, 9</h2>",
            "<h2>{[1, 2, 3].map(x => x * x).join(', ')}</h2>",
            "1, 4, 9",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React functional components?",
        "o": [
            "They are plain JavaScript functions that return React elements",
            "They can only be written using ES6 classes",
            "They require a render() method",
            "They cannot accept props"
        ]
    },
    {
        "q": "What is the output of the following component?",
        "c": "function Status() {\n  const online = true;\n  return <p>{online ? 'Online' : 'Offline'}</p>;\n}\n\nconst element = <Status />;",
        "o": [
            "<p>Online</p>",
            "<p>Offline</p>",
            "Online",
            "undefined"
        ]
    },
    {
        "q": "Which of the following best describes the virtual DOM in React?",
        "o": [
            "A lightweight copy of the real DOM used for efficient updates",
            "The actual DOM rendered by the browser",
            "A database for storing HTML elements",
            "A JavaScript object that never changes"
        ]
    },
    {
        "q": "Which of the following is the correct way to pass props to a component?",
        "o": [
            "<User name=\"Alice\" />",
            "<User props.name=\"Alice\" />",
            "<User: name='Alice'>",
            "<User(Alice)>"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const greeting = 'Hi';\nconst element = <h1>{greeting + ', React!'}</h1>;",
        "o": [
            "<h1>Hi, React!</h1>",
            "<h1>{greeting + ', React!'}</h1>",
            "Hi, React!",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about functional components and props?",
        "o": [
            "Props are received as function parameters",
            "Props must be defined inside state",
            "Props cannot be used in functional components",
            "Props can only be strings"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Repeat(props) {\n  return <div>{props.word.repeat(3)}</div>;\n}\n\nconst element = <Repeat word=\"Hi\" />;",
        "o": [
            "<div>HiHiHi</div>",
            "<div>{props.word.repeat(3)}</div>",
            "HiHiHi",
            "undefined"
        ]
    },
    {
        "q": "Which folder in a Create React App project usually contains static assets like images?",
        "o": [
            "public",
            "src",
            "assets",
            "static"
        ]
    },
    {
        "q": "Which of the following correctly describes JSX curly braces {}?",
        "o": [
            "They allow embedding JavaScript expressions inside JSX",
            "They are required around all text values",
            "They are used only for writing CSS",
            "They must always wrap entire components"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const element = <p>{'React'.charAt(0)}</p>;",
        "o": [
            "<p>R</p>",
            "<p>{'React'.charAt(0)}</p>",
            "R",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React functional components?",
        "o": [
            "They can return only one parent element",
            "They can return multiple root elements without any wrapper",
            "They can return plain numbers as valid components",
            "They cannot use JavaScript logic inside"
        ]
    },
    {
        "q": "What is the output of the following component?",
        "c": "function ShowAge() {\n  const age = 21;\n  return <h3>{`Age: ${age}`}</h3>;\n}\n\nconst element = <ShowAge />;",
        "o": [
            "<h3>Age: 21</h3>",
            "<h3>{`Age: ${age}`}</h3>",
            "Age: 21",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about rendering lists in React?",
        "o": [
            "Each child in a list should have a unique key prop",
            "Keys are optional and not recommended",
            "Keys must always be random numbers",
            "Lists cannot be rendered with JSX"
        ]
    },
    {
        "q": "Which of the following is the correct way to import a component named Header from another file?",
        "o": [
            "import Header from './Header';",
            "import { Header } from './Header';",
            "require(Header);",
            "include './Header';"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const numbers = [2, 4, 6];\nconst element = <div>{numbers.map(n => n * 2).join(' ')}</div>;",
        "o": [
            "<div>4 8 12</div>",
            "<div>{numbers.map(n => n * 2).join(' ')}</div>",
            "4 8 12",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React components?",
        "o": [
            "They help make UIs modular and reusable",
            "They must all be written in one file",
            "They cannot contain other components",
            "They can only return plain text"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Combine(props) {\n  return <h1>{props.a + props.b}</h1>;\n}\n\nconst element = <Combine a={5} b={3} />;",
        "o": [
            "<h1>8</h1>",
            "<h1>{props.a + props.b}</h1>",
            "8",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the `src` folder in a Create React App project?",
        "o": [
            "It contains the application source code and components",
            "It stores static files like images and icons",
            "It is only used for CSS files",
            "It cannot be modified by developers"
        ]
    },
    {
        "q": "Which of the following is correct about writing JSX?",
        "o": [
            "JSX tags must always be properly closed",
            "JSX tags can remain unclosed like in plain HTML",
            "JSX allows mismatched opening and closing tags",
            "JSX does not support nested elements"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const element = <h2>{(5 + 5) / 2}</h2>;",
        "o": [
            "<h2>5</h2>",
            "<h2>{(5 + 5) / 2}</h2>",
            "5",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React functional components?",
        "o": [
            "They can use hooks to manage state and side effects",
            "They cannot use any state",
            "They require lifecycle methods to work",
            "They must always extend React.Component"
        ]
    },
    {
        "q": "What is the output of the following component?",
        "c": "function Welcome() {\n  return <h1>{'Hello'.toUpperCase()}</h1>;\n}\n\nconst element = <Welcome />;",
        "o": [
            "<h1>HELLO</h1>",
            "<h1>{'Hello'.toUpperCase()}</h1>",
            "HELLO",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React props?",
        "o": [
            "Props are immutable and cannot be changed by the component",
            "Props must be modified inside the component",
            "Props can only be numbers and strings",
            "Props can only be passed into class components"
        ]
    },
    {
        "q": "Which of the following is correct when rendering multiple components in JSX?",
        "o": [
            "They must be wrapped in a parent element like <div> or <> </>",
            "They can be written directly without any wrapper",
            "They must be enclosed in a <list> element",
            "They can only be returned inside an array"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const nums = [1, 2, 3];\nconst element = <p>{nums.includes(2) ? 'Yes' : 'No'}</p>;",
        "o": [
            "<p>Yes</p>",
            "<p>No</p>",
            "Yes",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about `ReactDOM.createRoot()`?",
        "o": [
            "It creates a root for rendering components in React 18+",
            "It replaces the need for ReactDOM.render() in React 17",
            "It is used only for class components",
            "It is used to create multiple DOM nodes"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function MultiplyByTen(props) {\n  return <div>{props.num * 10}</div>;\n}\n\nconst element = <MultiplyByTen num={6} />;",
        "o": [
            "<div>60</div>",
            "<div>{props.num * 10}</div>",
            "60",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the `public/index.html` file in a Create React App project?",
        "o": [
            "It serves as the single HTML file where the React app is mounted",
            "It contains all JavaScript logic for React components",
            "It is automatically updated with every React component created",
            "It cannot be modified by the developer"
        ]
    },
    {
        "q": "Which of the following is a valid JSX comment syntax?",
        "o": [
            "{/* This is a comment */}",
            "// This is a comment",
            "<!-- This is a comment -->",
            "/* This is a comment */"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const element = <span>{'JSX'.length}</span>;",
        "o": [
            "<span>3</span>",
            "<span>{'JSX'.length}</span>",
            "3",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about functional components?",
        "o": [
            "They can accept props as input and return JSX",
            "They must always manage their own state",
            "They cannot use JavaScript expressions",
            "They can only be written using ES6 class syntax"
        ]
    },
    {
        "q": "What will be the output of the following component?",
        "c": "function Greeting(props) {\n  return <h2>Hello, {props.name || 'Guest'}!</h2>;\n}\n\nconst element = <Greeting />;",
        "o": [
            "<h2>Hello, Guest!</h2>",
            "<h2>Hello, {props.name || 'Guest'}!</h2>",
            "Hello, Guest!",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about props in React?",
        "o": [
            "Props are passed from parent to child components",
            "Props can only be modified by the child component",
            "Props must always be numbers",
            "Props cannot be used in functional components"
        ]
    },
    {
        "q": "Which of the following is correct when writing inline styles in JSX?",
        "o": [
            "<h1 style={{ color: 'blue' }}>Text</h1>",
            "<h1 style='color: blue'>Text</h1>",
            "<h1 css={color: blue}>Text</h1>",
            "<h1 {style: color=blue}>Text</h1>"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const isDark = false;\nconst element = <p>{isDark ? 'Dark Mode' : 'Light Mode'}</p>;",
        "o": [
            "<p>Light Mode</p>",
            "<p>Dark Mode</p>",
            "Light Mode",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about rendering elements in React?",
        "o": [
            "React updates only the parts of the DOM that change",
            "React always reloads the entire page on updates",
            "React requires manual DOM manipulation for updates",
            "React elements must always be recreated manually"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Add(props) {\n  return <h4>{props.x + props.y}</h4>;\n}\n\nconst element = <Add x={10} y={15} />;",
        "o": [
            "<h4>25</h4>",
            "<h4>{props.x + props.y}</h4>",
            "25",
            "undefined"
        ]
    },
    {
        "q": "Which of the following best describes Create React App?",
        "o": [
            "It is a tool that sets up a modern React project with no configuration",
            "It is a library for styling React components",
            "It is a package for managing React state",
            "It is a plugin for VS Code to debug React apps"
        ]
    },
    {
        "q": "Which of the following correctly represents embedding a variable in JSX?",
        "o": [
            "<h1>{username}</h1>",
            "<h1>username</h1>",
            "<h1>${username}</h1>",
            "<h1>+username+</h1>"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const greeting = 'Hi';\nconst element = <div>{greeting + ' React'}</div>;",
        "o": [
            "<div>Hi React</div>",
            "<div>{greeting + ' React'}</div>",
            "Hi React",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about functional components?",
        "o": [
            "They are plain JavaScript functions that return JSX",
            "They must always use `this` keyword",
            "They cannot accept props",
            "They are the only way to create stateful components"
        ]
    },
    {
        "q": "What is the output of the following component?",
        "c": "function ShowName(props) {\n  return <p>{`Name: ${props.name}`}</p>;\n}\n\nconst element = <ShowName name=\"Alex\" />;",
        "o": [
            "<p>Name: Alex</p>",
            "<p>{`Name: ${props.name}`}</p>",
            "Name: Alex",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX?",
        "o": [
            "JSX is syntactic sugar for React.createElement()",
            "JSX is required for all React applications",
            "JSX does not allow JavaScript expressions",
            "JSX must always be compiled manually"
        ]
    },
    {
        "q": "Which of the following is correct when rendering boolean values in JSX?",
        "o": [
            "Booleans are ignored when directly rendered inside JSX",
            "Booleans will render as true/false text",
            "Booleans must be converted to strings first",
            "Booleans cause runtime errors in JSX"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const user = { first: 'John', last: 'Doe' };\nconst element = <h3>{user.first + ' ' + user.last}</h3>;",
        "o": [
            "<h3>John Doe</h3>",
            "<h3>{user.first + ' ' + user.last}</h3>",
            "John Doe",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the React virtual DOM?",
        "o": [
            "It is a lightweight representation of the real DOM used for efficient updates",
            "It completely replaces the real DOM",
            "It requires developers to manually update HTML nodes",
            "It stores all CSS and styling information"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Double(props) {\n  return <div>{props.value * 2}</div>;\n}\n\nconst element = <Double value={9} />;",
        "o": [
            "<div>18</div>",
            "<div>{props.value * 2}</div>",
            "18",
            "undefined"
        ]
    },
    {
        "q": "Which command is used to start the development server in a Create React App project?",
        "o": [
            "npm start",
            "npm build",
            "npm serve",
            "npm run dev-server"
        ]
    },
    {
        "q": "Which of the following is true about JSX attributes?",
        "o": [
            "They are written in camelCase, like `className` instead of `class`",
            "They must always be lowercase like HTML",
            "They can only be numbers or strings",
            "They cannot contain JavaScript expressions"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const age = 21;\nconst element = <p>{age >= 18 ? 'Adult' : 'Minor'}</p>;",
        "o": [
            "<p>Adult</p>",
            "<p>Minor</p>",
            "Adult",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about functional components?",
        "o": [
            "They can return only a single root element",
            "They can return multiple sibling elements directly",
            "They must always include state",
            "They cannot use props"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Hello() {\n  return <h1>{[1, 2, 3].join('-')}</h1>;\n}\n\nconst element = <Hello />;",
        "o": [
            "<h1>1-2-3</h1>",
            "<h1>{[1, 2, 3].join('-')}</h1>",
            "1-2-3",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React elements?",
        "o": [
            "They are immutable once created",
            "They can be directly changed after rendering",
            "They are always DOM nodes",
            "They must always contain props"
        ]
    },
    {
        "q": "Which of the following correctly shows conditional rendering using logical AND in JSX?",
        "o": [
            "{isLoggedIn && <p>Welcome back!</p>}",
            "{isLoggedIn ? <p>Welcome back!</p> : null}",
            "{if(isLoggedIn) <p>Welcome back!</p>}",
            "{isLoggedIn || <p>Welcome back!</p>}"
        ]
    },
    {
        "q": "What will be rendered by the following JSX?",
        "c": "const element = <h4>{['React', 'JSX'][0]}</h4>;",
        "o": [
            "<h4>React</h4>",
            "<h4>{['React', 'JSX'][0]}</h4>",
            "React",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about `ReactDOM.createRoot`?",
        "o": [
            "It is required for concurrent rendering features in React 18",
            "It works the same way as ReactDOM.render in React 18",
            "It is only used for class components",
            "It replaces the need for components to return JSX"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Square(props) {\n  return <div>{props.n * props.n}</div>;\n}\n\nconst element = <Square n={4} />;",
        "o": [
            "<div>16</div>",
            "<div>{props.n * props.n}</div>",
            "16",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about installing Create React App globally?",
        "o": [
            "It is no longer recommended; npx is preferred",
            "It is the only way to create a new React app",
            "It is required for every new project",
            "It provides faster builds for production"
        ]
    },
    {
        "q": "Which file is mainly responsible for mounting the root React component in a Create React App project?",
        "o": [
            "src/index.js",
            "App.js",
            "public/index.html",
            "package.json"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <h2>{10 % 3}</h2>;",
        "o": [
            "<h2>1</h2>",
            "<h2>{10 % 3}</h2>",
            "1",
            "undefined"
        ]
    },
    {
        "q": "Which of the following correctly describes the role of `public/index.html` in Create React App?",
        "o": [
            "It is the HTML template into which the React app is injected",
            "It contains all React components by default",
            "It automatically generates JSX for the app",
            "It is only used in development mode"
        ]
    },
    {
        "q": "Which of the following is true about JSX expressions inside curly braces?",
        "o": [
            "They can include any valid JavaScript expression",
            "They can include statements like `if` or `for`",
            "They can only include strings or numbers",
            "They cannot include function calls"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ShowList() {\n  return <ul><li>{['A','B','C'][1]}</li></ul>;\n}\n\nconst element = <ShowList />;",
        "o": [
            "<ul><li>B</li></ul>",
            "<ul><li>{['A','B','C'][1]}</li></ul>",
            "B",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about rendering multiple elements in React?",
        "o": [
            "They must be wrapped in a single parent element or React Fragment",
            "They can be returned side by side without any wrapper",
            "They must all be placed in an array",
            "They cannot be rendered together in one component"
        ]
    },
    {
        "q": "Which of the following correctly creates a functional component?",
        "o": [
            "function Welcome() { return <h1>Hello!</h1>; }",
            "component Welcome() { return <h1>Hello!</h1>; }",
            "const Welcome = new Component(<h1>Hello!</h1>);",
            "Welcome() => { return <h1>Hello!</h1>; }"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const isVisible = true;\nconst element = <span>{isVisible && 'Visible'}</span>;",
        "o": [
            "<span>Visible</span>",
            "<span>true</span>",
            "<span>{isVisible && 'Visible'}</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React functional components and props?",
        "o": [
            "Props are read-only and cannot be modified inside the component",
            "Props must always be numbers",
            "Props are optional and cannot be used in functional components",
            "Props can only be used in class components"
        ]
    },
    {
        "q": "Which of the following is true about the `node_modules` folder created by Create React App?",
        "o": [
            "It contains all installed dependencies for the React project",
            "It contains the root React component",
            "It contains the production build files",
            "It contains only configuration files for React"
        ]
    },
    {
        "q": "Which file defines the dependencies and scripts in a Create React App project?",
        "o": [
            "package.json",
            "index.js",
            "App.js",
            "public/index.html"
        ]
    },
    {
        "q": "Which of the following JSX snippets is valid?",
        "o": [
            "<img src={user.avatarUrl} alt={user.name} />",
            "<img src=\"{user.avatarUrl}\" alt=\"{user.name}\" />",
            "<img {user.avatarUrl} {user.name} />",
            "<img src=user.avatarUrl alt=user.name />"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const name = 'Taylor';\nconst element = <h5>{name.toUpperCase()}</h5>;",
        "o": [
            "<h5>TAYLOR</h5>",
            "<h5>{name.toUpperCase()}</h5>",
            "TAYLOR",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about Create React App build command?",
        "o": [
            "It generates an optimized production build in the build/ folder",
            "It starts the development server",
            "It installs React dependencies",
            "It automatically deploys the app"
        ]
    },
    {
        "q": "Which of the following is the default root DOM element used in Create React App?",
        "o": [
            "div with id=\"root\"",
            "body tag",
            "main tag",
            "header with id=\"app\""
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Multiply(props) {\n  return <span>{props.x * props.y}</span>;\n}\n\nconst element = <Multiply x={3} y={5} />;",
        "o": [
            "<span>15</span>",
            "<span>{props.x * props.y}</span>",
            "15",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX comments?",
        "o": [
            "They must be written as {/* comment */} inside JSX",
            "// comment works directly inside JSX",
            "They must be written as <!-- comment -->",
            "They are not supported in JSX"
        ]
    },
    {
        "q": "Which of the following correctly shows rendering an array of elements in JSX?",
        "o": [
            "{['A','B','C'].map(item => <li>{item}</li>)}",
            "{['A','B','C']} directly inside <ul>",
            "for(item in ['A','B','C']) <li>{item}</li>",
            "<li>{['A','B','C']}</li>"
        ]
    },
    {
        "q": "Which of the following is true about functional component naming?",
        "o": [
            "They must begin with a capital letter",
            "They must always be lowercase",
            "They can only be named 'App'",
            "They cannot use arrow functions"
        ]
    },
    {
        "q": "Which of the following files is automatically updated when you run `npx create-react-app my-app`?",
        "o": [
            "package.json",
            "src/index.js",
            "public/index.html",
            "README.md"
        ]
    },
    {
        "q": "Which of the following is true about editing `App.js` in a newly created React app?",
        "o": [
            "It updates the content displayed on the homepage",
            "It updates the root mounting DOM element",
            "It changes the project's build configuration",
            "It removes dependencies from node_modules"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const user = { first: 'John', last: 'Doe' };\nconst element = <h3>{`${user.first} ${user.last}`}</h3>;",
        "o": [
            "<h3>John Doe</h3>",
            "<h3>{`${user.first} ${user.last}`}</h3>",
            "John Doe",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX element wrapping?",
        "o": [
            "Adjacent JSX elements must be wrapped in a parent tag or a Fragment",
            "Multiple elements can be returned side by side without a wrapper",
            "JSX allows multiple root elements without restriction",
            "Fragments are required even for single elements"
        ]
    },
    {
        "q": "Which of the following commands builds and serves a production-ready React app?",
        "o": [
            "npm run build && npx serve -s build",
            "npm start",
            "npm serve",
            "npm run dev"
        ]
    },
    {
        "q": "What will the following functional component render?",
        "c": "function Greeting(props) {\n  return <h4>Hello, {props.name || 'Guest'}!</h4>;\n}\n\nconst element = <Greeting name=\"Alex\" />;",
        "o": [
            "<h4>Hello, Alex!</h4>",
            "<h4>Hello, Guest!</h4>",
            "Alex",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about `public/manifest.json` in Create React App?",
        "o": [
            "It defines metadata for Progressive Web Apps (PWAs)",
            "It defines React component structure",
            "It specifies the default JSX syntax rules",
            "It is required for rendering React components"
        ]
    },
    {
        "q": "Which of the following is true about the role of Babel in JSX?",
        "o": [
            "It compiles JSX into regular JavaScript function calls",
            "It directly renders JSX to the DOM",
            "It only runs during the production build process",
            "It is not used in Create React App"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const colors = ['Red', 'Blue'];\nconst element = <p>{colors.length}</p>;",
        "o": [
            "<p>2</p>",
            "<p>{colors.length}</p>",
            "2",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the default `App.test.js` file created by Create React App?",
        "o": [
            "It contains a basic unit test for the App component",
            "It contains configuration for Jest and testing library",
            "It is required for building the app",
            "It defines the main entry point for React"
        ]
    },
    {
        "q": "Which of the following is true about the `src` folder in a Create React App project?",
        "o": [
            "It contains all the React components and application logic",
            "It contains only static assets like images and icons",
            "It is optional and can be deleted without affecting the app",
            "It is used only during production builds"
        ]
    },
    {
        "q": "Which of the following describes the role of `serviceWorker.js` (or `reportWebVitals.js`) in Create React App?",
        "o": [
            "They are optional files that help with performance monitoring or offline capabilities",
            "They are mandatory for rendering React components",
            "They contain Babel compilation logic for JSX",
            "They replace the `index.js` file as the root"
        ]
    },
    {
        "q": "Which of the following JSX snippets will throw an error?",
        "o": [
            "<label for=\"name\">Name</label>",
            "<h1>Hello World</h1>",
            "<button disabled={true}>Click</button>",
            "<input type=\"text\" />"
        ]
    },
    {
        "q": "Which of the following is true about using CSS in Create React App?",
        "o": [
            "You can import CSS files directly into JavaScript modules",
            "You must inline all styles as objects in JSX",
            "Only SCSS files are supported",
            "CSS can only be loaded via `public/index.html`"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <p>{[1, 2, 3].join('-')}</p>;",
        "o": [
            "<p>1-2-3</p>",
            "<p>{[1, 2, 3].join('-')}</p>",
            "1-2-3",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the default `favicon.ico` in Create React App?",
        "o": [
            "It is located in the public/ folder and used as the browser tab icon",
            "It is generated automatically during the build process",
            "It cannot be customized by the user",
            "It is stored inside the src/ folder"
        ]
    },
    {
        "q": "What will the following functional component render?",
        "c": "function ShowNumber({ num }) {\n  return <span>{num ?? 100}</span>;\n}\n\nconst element = <ShowNumber num={0} />;",
        "o": [
            "<span>0</span>",
            "<span>100</span>",
            "0",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React’s virtual DOM rendering?",
        "o": [
            "It updates only the parts of the real DOM that changed",
            "It rewrites the entire DOM on every render",
            "It prevents the use of functional components",
            "It only works in production mode"
        ]
    },
    {
        "q": "Which of the following JSX usages is valid?",
        "o": [
            "<div className=\"container\"></div>",
            "<div class=\"container\"></div>",
            "<div classname=\"container\"></div>",
            "<div class_name=\"container\"></div>"
        ]
    },
    {
        "q": "Which of the following is true about the `react-scripts` package in Create React App?",
        "o": [
            "It provides the configuration and build scripts for running and building the React app",
            "It contains the main React components used in the app",
            "It is used only for testing purposes",
            "It is automatically removed after the first run"
        ]
    },
    {
        "q": "Which of the following is true about the `public/index.html` file in Create React App?",
        "o": [
            "It serves as the template where React injects the root component",
            "It contains all React components directly",
            "It is replaced completely during each build",
            "It cannot be modified by the developer"
        ]
    },
    {
        "q": "Which of the following is true about inline styles in JSX?",
        "o": [
            "They are written as objects with camelCase property names",
            "They must be written as regular CSS strings",
            "They can only be used inside class components",
            "They are not supported in JSX"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const message = null;\nconst element = <h2>{message || 'No message'}</h2>;",
        "o": [
            "<h2>No message</h2>",
            "<h2>null</h2>",
            "<h2>{message || 'No message'}</h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about editing the `scripts` section in `package.json` of a CRA project?",
        "o": [
            "It allows customizing commands like start, build, and test",
            "It breaks the app if modified",
            "It is required to define all React components",
            "It controls only the JSX syntax rules"
        ]
    },
    {
        "q": "Which of the following statements is correct about default exports in functional components?",
        "o": [
            "A React component can be exported as default from a file",
            "Multiple components can be exported as default from the same file",
            "Default exports are required for JSX to work",
            "Functional components cannot use default exports"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Double({ value }) {\n  return <p>{value * 2}</p>;\n}\n\nconst element = <Double value={7} />;",
        "o": [
            "<p>14</p>",
            "<p>{value * 2}</p>",
            "14",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the `npm start` command in a CRA project?",
        "o": [
            "It runs the app in development mode with hot reloading",
            "It builds the app for production",
            "It serves the production build",
            "It installs all dependencies"
        ]
    },
    {
        "q": "Which of the following JSX examples correctly uses conditional rendering?",
        "o": [
            "{isLoggedIn ? <p>Welcome</p> : <p>Please log in</p>}",
            "if(isLoggedIn) <p>Welcome</p>",
            "{if(isLoggedIn) { <p>Welcome</p> }}",
            "<p>{isLoggedIn ? 'Welcome'}</p>"
        ]
    },
    {
        "q": "Which of the following is true about `index.js` in Create React App?",
        "o": [
            "It is the entry point where the React app attaches to the DOM",
            "It contains all of the React components",
            "It is responsible for configuring Babel",
            "It can only contain JSX and no imports"
        ]
    },
    {
        "q": "Which of the following is true about fragments in JSX?",
        "o": [
            "They let you group multiple elements without adding extra nodes to the DOM",
            "They are required for every JSX element",
            "They automatically style the JSX elements",
            "They replace functional components in React"
        ]
    },
    {
        "q": "Which of the following is true about comments in JSX?",
        "o": [
            "They are written inside curly braces using {/* ... */}",
            "They are written as // comments inside JSX",
            "They must be written in a separate comments.js file",
            "They are not supported in JSX"
        ]
    },
    {
        "q": "Which of the following is true about the role of `reportWebVitals.js` in a CRA project?",
        "o": [
            "It allows measuring and logging app performance metrics",
            "It is required for rendering React components",
            "It defines JSX transformation rules",
            "It controls the app’s routing configuration"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const isActive = false;\nconst element = <button disabled={!isActive}>Click</button>;",
        "o": [
            "<button disabled>Click</button>",
            "<button>Click</button>",
            "<button disabled={!isActive}>Click</button>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about default `index.css` in CRA?",
        "o": [
            "It provides some basic styling applied globally",
            "It is required for JSX syntax to work",
            "It cannot be edited by developers",
            "It is automatically deleted during builds"
        ]
    },
    {
        "q": "Which of the following JSX attributes correctly sets a tab index?",
        "o": [
            "<div tabIndex={0}></div>",
            "<div tabindex=\"0\"></div>",
            "<div tab_index=\"0\"></div>",
            "<div tabindex={0}></div>"
        ]
    },
    {
        "q": "Which of the following is true about functional components in React?",
        "o": [
            "They are plain JavaScript functions that return JSX",
            "They must extend React.Component",
            "They cannot accept props",
            "They are only used in class-based projects"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Display({ text }) {\n  return <h3>{text.toUpperCase()}</h3>;\n}\n\nconst element = <Display text=\"hello\" />;",
        "o": [
            "<h3>HELLO</h3>",
            "<h3>hello</h3>",
            "HELLO",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX attribute naming?",
        "o": [
            "Attributes use camelCase (e.g., onClick, className)",
            "Attributes must be lowercase like HTML (e.g., onclick)",
            "Both camelCase and lowercase can be used interchangeably",
            "They must always start with `react-` prefix"
        ]
    },
    {
        "q": "Which of the following is true about editing the `public/index.html` file in CRA?",
        "o": [
            "You can add external stylesheets and scripts there",
            "You must define all React components inside it",
            "It cannot include any script tags",
            "It is regenerated automatically on every build and cannot be customized"
        ]
    },
    {
        "q": "Which of the following is true about the build folder generated by `npm run build`?",
        "o": [
            "It contains optimized static files ready for deployment",
            "It contains the raw source code from src/",
            "It includes only the node_modules directory",
            "It is recreated every time `npm start` runs"
        ]
    },
    {
        "q": "Which of the following is true about the `node_modules` folder in a CRA project?",
        "o": [
            "It stores all installed project dependencies",
            "It contains the source code of React components written by the developer",
            "It is generated only during the production build",
            "It is manually created by the developer before starting the project"
        ]
    },
    {
        "q": "Which of the following is true about the `.gitignore` file in CRA?",
        "o": [
            "It specifies which files and folders should not be tracked by Git",
            "It is used to configure Babel transformations",
            "It must include all React component files",
            "It prevents deployment of the build folder"
        ]
    },
    {
        "q": "Which of the following is true about the `manifest.json` file in CRA?",
        "o": [
            "It defines metadata for Progressive Web Apps",
            "It contains React component definitions",
            "It specifies Babel and Webpack configuration",
            "It controls global CSS styles"
        ]
    },
    {
        "q": "Which of the following is true about the `.env` file in CRA?",
        "o": [
            "It is used to define environment variables for the app",
            "It is required for JSX to function",
            "It contains the list of React components",
            "It can only be used in production mode"
        ]
    },
    {
        "q": "Which of the following correctly represents a self-closing JSX tag?",
        "o": [
            "<img src=\"logo.png\" />",
            "<img src=\"logo.png\"></img>",
            "<img src=\"logo.png\">",
            "<img/>src=\"logo.png\""
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Greeting({ name }) {\n  return <p>Hello, {name || 'Guest'}!</p>;\n}\n\nconst element = <Greeting />;",
        "o": [
            "<p>Hello, Guest!</p>",
            "<p>Hello, !</p>",
            "<p>Hello, undefined!</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the default `logo.svg` in CRA?",
        "o": [
            "It is an example asset that can be displayed in the starter app",
            "It is required for React to compile JSX",
            "It contains hidden build scripts for CRA",
            "It cannot be deleted from the project"
        ]
    },
    {
        "q": "Which of the following is true about case sensitivity in React component names?",
        "o": [
            "Component names must start with a capital letter",
            "Component names must always be lowercase",
            "Component names can be lowercase or uppercase without restriction",
            "Only class components require capitalized names"
        ]
    },
    {
        "q": "Which of the following is true about the `export` keyword in React?",
        "o": [
            "It allows components to be reused in other files",
            "It is required to use JSX syntax",
            "It automatically renders components",
            "It is only used for default exports"
        ]
    },
    {
        "q": "Which of the following is true about editing the `App.js` file in CRA?",
        "o": [
            "It is the main component used as the root of the app",
            "It contains build configuration for Webpack",
            "It cannot import other components",
            "It is automatically regenerated after every build"
        ]
    },
    {
        "q": "Which of the following is true about `serviceWorker.js` in older CRA versions?",
        "o": [
            "It was used to enable offline capabilities and caching",
            "It defined the main React component",
            "It handled JSX transformations",
            "It contained the Babel configuration"
        ]
    },
    {
        "q": "Which of the following is true about curly braces `{}` in JSX?",
        "o": [
            "They are used to embed JavaScript expressions inside JSX",
            "They are required around every attribute",
            "They are used only inside class components",
            "They can only wrap numbers, not strings"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Multiply({ a, b }) {\n  return <span>{a * b}</span>;\n}\n\nconst element = <Multiply a={3} b={4} />;",
        "o": [
            "<span>12</span>",
            "<span>{a * b}</span>",
            "Multiply",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the `setupTests.js` file in CRA?",
        "o": [
            "It is used to configure the testing environment (like Jest)",
            "It contains the main app entry point",
            "It is required for React to compile JSX",
            "It is used for configuring Babel plugins"
        ]
    },
    {
        "q": "Which of the following is true about inline event handling in JSX?",
        "o": [
            "It is written as camelCase and passed a function, e.g., onClick={() => {}}",
            "It uses lowercase HTML style attributes like onclick",
            "It must be defined only in class components",
            "It requires declaring event handlers in index.html"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const name = \"React\";\nconst element = <h1>{`Welcome to ${name}`}</h1>;",
        "o": [
            "<h1>Welcome to React</h1>",
            "<h1>{`Welcome to ${name}`}</h1>",
            "<h1>name</h1>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about editing `package.json` in CRA?",
        "o": [
            "It lets you manage dependencies, scripts, and project metadata",
            "It defines all React components in the project",
            "It is required for JSX syntax to compile",
            "It cannot be modified by developers"
        ]
    },
    {
        "q": "Which of the following is true about the `favicon.ico` file in CRA?",
        "o": [
            "It specifies the small icon shown in the browser tab",
            "It contains build configurations",
            "It is required for JSX expressions to work",
            "It cannot be replaced with a custom icon"
        ]
    },
    {
        "q": "Which of the following JSX examples correctly sets a CSS class?",
        "o": [
            "<div className=\"container\"></div>",
            "<div class=\"container\"></div>",
            "<div class_name=\"container\"></div>",
            "<div css-class=\"container\"></div>"
        ]
    },
    {
        "q": "Which of the following is true about functional components and props?",
        "o": [
            "Props are passed as function arguments to functional components",
            "Props must be declared inside index.html",
            "Props cannot be used in functional components",
            "Props are only available in class components"
        ]
    },
    {
        "q": "Which of the following is true about the `reportWebVitals` function in CRA?",
        "o": [
            "It helps track and log performance metrics of the application",
            "It is required for rendering React elements",
            "It is used to define environment variables",
            "It automatically manages CSS imports"
        ]
    },
    {
        "q": "Which of the following is true about the role of `public/robots.txt` in CRA?",
        "o": [
            "It tells search engines which parts of the app should not be crawled",
            "It is required to define JSX transformations",
            "It contains metadata for Progressive Web Apps",
            "It must list all available React components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ShowNumber({ value }) {\n  return <p>{value ?? 'No Value'}</p>;\n}\n\nconst element = <ShowNumber />;",
        "o": [
            "<p>No Value</p>",
            "<p>undefined</p>",
            "<p></p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about editing the `index.html` title tag in CRA?",
        "o": [
            "It sets the browser tab title shown when the app loads",
            "It renames the root React component",
            "It prevents CRA from recompiling",
            "It controls the JavaScript entry point"
        ]
    },
    {
        "q": "Which of the following is true about JSX fragments (`<> </>`) ?",
        "o": [
            "They allow grouping elements without adding extra DOM nodes",
            "They are required for all React components",
            "They can only wrap a single child element",
            "They automatically add a `<div>` around children"
        ]
    },
    {
        "q": "Which of the following is true about the `homepage` field in CRA’s package.json?",
        "o": [
            "It defines the base URL for the app when deployed",
            "It specifies the default React component",
            "It is required for `npm start` to run",
            "It controls JSX compilation rules"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <input type=\"text\" defaultValue=\"Hello\" />;",
        "o": [
            "<input type=\"text\" value=\"Hello\">",
            "<input type=\"text\">",
            "<input>Hello</input>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the `.eslintcache` file generated in CRA?",
        "o": [
            "It stores cached linting results to improve performance",
            "It contains app routing configuration",
            "It is required for JSX to compile",
            "It defines React component structures"
        ]
    },
    {
        "q": "Which of the following JSX examples correctly applies inline styles?",
        "o": [
            "<div style={{ color: 'red', fontSize: '16px' }}>Text</div>",
            "<div style=\"color: red; font-size: 16px;\">Text</div>",
            "<div style={color: 'red', fontSize: '16px'}>Text</div>",
            "<div css={{ color: 'red' }}>Text</div>"
        ]
    },
    {
        "q": "Which of the following is true about the `yarn.lock` file in a CRA project created with Yarn?",
        "o": [
            "It locks exact dependency versions for consistent installs",
            "It defines the root React component",
            "It is required for JSX syntax to run",
            "It must be manually deleted before every build"
        ]
    },
    {
        "q": "Which of the following is true about `index.js` in a CRA project?",
        "o": [
            "It is the JavaScript entry point that renders the root React component",
            "It defines all environment variables for the app",
            "It is responsible for creating service workers",
            "It stores static assets like images and fonts"
        ]
    },
    {
        "q": "Which of the following is true about the `public/index.html` file in CRA?",
        "o": [
            "It provides the single HTML template where React components are injected",
            "It contains all JSX transformations",
            "It is replaced after every build automatically",
            "It contains routing configuration for React Router"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <button disabled={false}>Click</button>;",
        "o": [
            "<button>Click</button>",
            "<button disabled>Click</button>",
            "<button>false</button>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the `build` folder in CRA?",
        "o": [
            "It contains optimized static files ready for deployment",
            "It must be edited manually for production apps",
            "It stores developer-written React components",
            "It is required for `npm start` to run in development"
        ]
    },
    {
        "q": "Which of the following is true about the difference between `default` and `named` exports in React?",
        "o": [
            "A file can only have one default export but multiple named exports",
            "A file can only contain named exports",
            "Default exports must always be functions",
            "Named exports cannot be imported into other files"
        ]
    },
    {
        "q": "Which of the following is true about the `.babelrc` file in custom React setups (not CRA)?",
        "o": [
            "It configures how Babel transpiles modern JavaScript and JSX",
            "It defines how React components are rendered",
            "It contains environment variables",
            "It is required only for TypeScript projects"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Welcome({ user }) {\n  return <h2>{user?.toUpperCase() || 'Guest'}</h2>;\n}\n\nconst element = <Welcome />;",
        "o": [
            "<h2>Guest</h2>",
            "<h2>undefined</h2>",
            "<h2></h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about `npm start` in a CRA project?",
        "o": [
            "It runs the development server with hot reloading",
            "It builds the app for production deployment",
            "It installs all dependencies",
            "It removes the node_modules folder and reinstalls"
        ]
    },
    {
        "q": "Which of the following is true about the `<React.StrictMode>` wrapper?",
        "o": [
            "It highlights potential problems in the application during development",
            "It is required for JSX to compile",
            "It automatically optimizes production builds",
            "It prevents class components from rendering"
        ]
    },
    {
        "q": "Which of the following is true about editing `App.css` in CRA?",
        "o": [
            "It allows adding custom styles to components in App.js",
            "It is required for JSX syntax to work",
            "It cannot be modified after project creation",
            "It automatically applies styles globally without imports"
        ]
    },
    {
        "q": "Which of the following is true about the `manifest.json` file in CRA?",
        "o": [
            "It provides metadata for Progressive Web Apps (PWA)",
            "It defines React component props",
            "It configures Babel presets",
            "It is required for JSX expressions"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s handling of environment variables?",
        "o": [
            "They must be prefixed with `REACT_APP_` to be recognized",
            "They can be used directly without any prefix",
            "They must be declared in `package.json` under `env`",
            "They can only be used inside `public/index.html`"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const isLoggedIn = true;\nconst element = <h1>{isLoggedIn && 'Welcome Back'}</h1>;",
        "o": [
            "<h1>Welcome Back</h1>",
            "<h1>true</h1>",
            "<h1></h1>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about static assets placed in the `public` folder of CRA?",
        "o": [
            "They can be accessed directly with a relative path like `/image.png`",
            "They are automatically optimized by Webpack",
            "They must be imported into every component",
            "They cannot be used inside JSX"
        ]
    },
    {
        "q": "Which of the following is true about using `key` in React lists?",
        "o": [
            "Keys help React identify which items have changed, added, or removed",
            "Keys are required for every HTML attribute",
            "Keys can only be numbers, not strings",
            "Keys automatically sort array items"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Status({ online }) {\n  return <span>{online ? 'Online' : 'Offline'}</span>;\n}\n\nconst element = <Status online={false} />;",
        "o": [
            "<span>Offline</span>",
            "<span>true</span>",
            "<span>false</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about `.gitignore` in CRA?",
        "o": [
            "It specifies which files and folders should not be tracked by Git",
            "It defines the main React component",
            "It contains Babel configuration",
            "It prevents CRA from starting the development server"
        ]
    },
    {
        "q": "Which of the following is true about JSX attribute differences from HTML?",
        "o": [
            "JSX uses `className` instead of `class` for CSS classes",
            "JSX requires all attribute names to be uppercase",
            "JSX allows attributes to be written in snake_case",
            "JSX automatically converts all attributes to lowercase"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <img src={null} alt=\"logo\" />;",
        "o": [
            "<img alt=\"logo\">",
            "<img src=\"null\" alt=\"logo\">",
            "undefined",
            "<img src=\"\" alt=\"logo\">"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s default `logo.svg`?",
        "o": [
            "It is a sample asset used in the starter App component",
            "It is required for the app to build",
            "It defines the Babel presets",
            "It must be kept in all production apps"
        ]
    },
    {
        "q": "Which of the following is true about the `serviceWorker.js` file in older CRA versions?",
        "o": [
            "It enables Progressive Web App features like offline caching",
            "It defines React component lifecycle methods",
            "It is required for JSX syntax to work",
            "It stores environment variables for deployment"
        ]
    },
    {
        "q": "Which of the following is true about JSX comments?",
        "o": [
            "They must be written inside curly braces like {/* comment */}",
            "They use HTML-style <!-- comment --> inside JSX",
            "They are not allowed inside JSX at all",
            "They must always appear before the root element"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <label htmlFor=\"inputId\">Name</label>;",
        "o": [
            "<label for=\"inputId\">Name</label>",
            "<label htmlFor=\"inputId\">Name</label>",
            "<label>Name</label>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s support for CSS files?",
        "o": [
            "You can import CSS files directly into JavaScript files",
            "All CSS must be written inline in JSX",
            "Only global CSS is supported by default",
            "CSS can only be loaded from the public folder"
        ]
    },
    {
        "q": "Which of the following is true about the role of `reportWebVitals.js` in CRA?",
        "o": [
            "It measures and reports app performance metrics",
            "It configures default React props",
            "It defines static assets",
            "It sets up React Router navigation"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Greeting({ name }) {\n  return <h3>Hello, {name || 'Stranger'}!</h3>;\n}\n\nconst element = <Greeting />;",
        "o": [
            "<h3>Hello, Stranger!</h3>",
            "<h3>Hello, undefined!</h3>",
            "<h3>Hello!</h3>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about using `.env.development` in CRA?",
        "o": [
            "It defines environment variables specific to the development mode",
            "It is required for JSX to compile",
            "It overrides Babel presets",
            "It stores CSS rules for hot reloading"
        ]
    },
    {
        "q": "Which of the following is true about the `src/setupTests.js` file in CRA?",
        "o": [
            "It configures testing libraries like Jest before tests run",
            "It defines environment variables for test mode",
            "It is required for rendering JSX in development",
            "It stores default functional components"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <option selected>Choice</option>;",
        "o": [
            "<option>Choice</option>",
            "<option selected>Choice</option>",
            "undefined",
            "<option value=\"selected\">Choice</option>"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s default ESLint setup?",
        "o": [
            "It enforces coding standards and catches common mistakes",
            "It prevents CSS imports in JavaScript",
            "It disables JSX comments by default",
            "It only runs in production mode"
        ]
    },
    {
        "q": "Which of the following is true about the purpose of `package.json` in a CRA project?",
        "o": [
            "It lists dependencies, scripts, and project metadata",
            "It stores compiled JSX code",
            "It defines HTML templates for the app",
            "It configures CSS modules globally"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Info() {\n  const details = null;\n  return <p>{details ?? 'No details available'}</p>;\n}\n\nconst element = <Info />;",
        "o": [
            "<p>No details available</p>",
            "<p>null</p>",
            "<p></p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the default `index.css` file in CRA?",
        "o": [
            "It applies global styles shared across the app",
            "It is automatically converted into CSS modules",
            "It cannot be modified or deleted",
            "It stores vendor prefixes for JSX"
        ]
    },
    {
        "q": "Which of the following is true about hot reloading in CRA?",
        "o": [
            "It updates components in the browser instantly without a full reload",
            "It requires manual page refresh after every change",
            "It only works in production mode",
            "It is disabled by default and must be enabled with a flag"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const user = undefined;\nconst element = <h2>{user || 'Guest'}</h2>;",
        "o": [
            "<h2>Guest</h2>",
            "<h2>undefined</h2>",
            "<h2></h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s Webpack integration?",
        "o": [
            "It is preconfigured and hidden, so developers don’t need to set it up manually",
            "It must be manually configured for JSX to compile",
            "It is not included in CRA by default",
            "It only supports CSS and does not handle JavaScript"
        ]
    },
    {
        "q": "Which of the following is true about JSX expressions?",
        "o": [
            "They must be wrapped in curly braces `{}` when embedded in markup",
            "They must always be written as strings",
            "They can only contain numbers and strings",
            "They cannot contain function calls"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const value = 0;\nconst element = <h1>{value && 'Active'}</h1>;",
        "o": [
            "<h1></h1>",
            "<h1>Active</h1>",
            "<h1>0</h1>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s `npm run build` command?",
        "o": [
            "It creates an optimized production-ready build",
            "It starts the development server",
            "It deletes the `node_modules` folder",
            "It only lints the project without compiling"
        ]
    },
    {
        "q": "Which of the following is true about React fragments (`<> </>`) in JSX?",
        "o": [
            "They allow grouping multiple elements without adding extra DOM nodes",
            "They must always contain a `key` attribute",
            "They are equivalent to wrapping elements in a `<div>`",
            "They can only be used inside class components"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s default Babel setup?",
        "o": [
            "It transpiles modern JavaScript and JSX into browser-compatible code",
            "It must be installed separately before running CRA",
            "It only supports ES5 syntax by default",
            "It compiles CSS into JavaScript files"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const fruits = ['Apple', 'Banana'];\nconst element = <ul>{fruits.map(f => <li>{f}</li>)}</ul>;",
        "o": [
            "<ul><li>Apple</li><li>Banana</li></ul>",
            "<ul>AppleBanana</ul>",
            "<ul><li>fruits</li></ul>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s support for images in JSX?",
        "o": [
            "They can be imported as modules and used as values in `src` attributes",
            "They must always be placed in the `public` folder",
            "They cannot be used with JSX directly",
            "They can only be base64 encoded"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <button disabled={false}>Click</button>;",
        "o": [
            "<button>Click</button>",
            "<button disabled>Click</button>",
            "undefined",
            "<button disabled=\"false\">Click</button>"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s handling of `.svg` files?",
        "o": [
            "They can be imported as React components using special syntax",
            "They can only be used as static files in `public`",
            "They are automatically converted into `.png` images",
            "They cannot be used with JSX"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <input value={undefined} />;",
        "o": [
            "<input>",
            "<input value=\"undefined\">",
            "undefined",
            "<input value=\"\">"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s `npm start` command?",
        "o": [
            "It runs the app in development mode with live reloading",
            "It creates a production build of the app",
            "It only installs dependencies without running the app",
            "It deletes temporary build files"
        ]
    },
    {
        "q": "Which of the following is true about JSX nesting rules?",
        "o": [
            "Elements must be properly closed and cannot overlap incorrectly",
            "Elements can remain unclosed if inside a fragment",
            "Nesting is optional inside React components",
            "JSX automatically fixes invalid nesting at runtime"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <div>{['A', 'B', 'C']}</div>;",
        "o": [
            "<div>ABC</div>",
            "<div><span>A</span><span>B</span><span>C</span></div>",
            "<div>[A,B,C]</div>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s `public/index.html`?",
        "o": [
            "It serves as the single HTML template where the React app is injected",
            "It contains all React components by default",
            "It defines environment variables for the app",
            "It must not be modified under any circumstance"
        ]
    },
    {
        "q": "Which of the following is true about the default `App.js` file in a CRA project?",
        "o": [
            "It contains a starter functional component used as the main app component",
            "It configures the CRA build process",
            "It defines all default environment variables",
            "It renders the `index.html` file directly"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const count = 5;\nconst element = <p>{`Total: ${count}`}</p>;",
        "o": [
            "<p>Total: 5</p>",
            "<p>{Total: 5}</p>",
            "<p>Total:</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s default testing setup?",
        "o": [
            "It uses Jest as the testing framework by default",
            "It requires manual setup of Mocha before running tests",
            "It only supports end-to-end testing out of the box",
            "It disables testing by default to optimize build size"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowName({ name }) {\n  return <h4>{name && 'User: ' + name}</h4>;\n}\n\nconst element = <ShowName name=\"Alex\" />;",
        "o": [
            "<h4>User: Alex</h4>",
            "<h4>Alex</h4>",
            "<h4>true</h4>",
            "<h4></h4>"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s support for JSON files?",
        "o": [
            "They can be imported directly and used as JavaScript objects",
            "They must be converted into `.js` modules before usage",
            "They can only be placed in the `public` folder",
            "They are not supported at all"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const title = '';\nconst element = <h2>{title || 'Untitled'}</h2>;",
        "o": [
            "<h2>Untitled</h2>",
            "<h2></h2>",
            "<h2>title</h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s environment variable naming convention?",
        "o": [
            "Variables must be prefixed with `REACT_APP_` to be accessible in code",
            "All environment variables are automatically available without a prefix",
            "They must always be declared in `package.json`",
            "They must only contain numeric values"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Display({ items }) {\n  return <p>{items.length > 0 ? 'Has items' : 'Empty'}</p>;\n}\n\nconst element = <Display items={[]} />;",
        "o": [
            "<p>Empty</p>",
            "<p>Has items</p>",
            "<p>false</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s handling of static assets in the `public` folder?",
        "o": [
            "They are copied directly to the build folder without processing",
            "They are automatically converted into React components",
            "They must be manually imported into `index.js`",
            "They cannot include images or fonts"
        ]
    },
    {
        "q": "Which of the following is true about JSX case-sensitivity?",
        "o": [
            "Component names must start with an uppercase letter to be treated as custom components",
            "HTML tag names must always start with uppercase letters",
            "Lowercase component names are automatically converted to strings",
            "JSX ignores case sensitivity when resolving component names"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s default ESLint setup?",
        "o": [
            "It comes preconfigured to enforce best practices and React rules",
            "It must be manually installed after creating the app",
            "It only checks for syntax errors without style rules",
            "It is disabled by default and must be enabled in `package.json`"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const isReady = true;\nconst element = <span>{isReady ? 'Ready' : 'Not Ready'}</span>;",
        "o": [
            "<span>Ready</span>",
            "<span>Not Ready</span>",
            "<span>true</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s support for CSS modules?",
        "o": [
            "Files ending with `.module.css` are treated as CSS modules",
            "All `.css` files are automatically CSS modules",
            "CSS modules are not supported in CRA by default",
            "They must be enabled manually in `webpack.config.js`"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Greeting({ name }) {\n  return <h1>Hello, {name ?? 'Anonymous'}!</h1>;\n}\n\nconst element = <Greeting name={null} />;",
        "o": [
            "<h1>Hello, Anonymous!</h1>",
            "<h1>Hello, null!</h1>",
            "<h1>Hello, !</h1>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s `serviceWorker.js` (before v4)?",
        "o": [
            "It enables offline capabilities and caching when registered",
            "It is always enabled by default",
            "It must be deleted for CRA to run",
            "It compiles JSX into browser code"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const items = ['Pen'];\nconst element = <p>{items.length && 'Has items'}</p>;",
        "o": [
            "<p>Has items</p>",
            "<p>1</p>",
            "<p></p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s support for TypeScript?",
        "o": [
            "You can create a TypeScript project using `--template typescript`",
            "It is not supported at all in CRA",
            "It requires ejecting the project first",
            "It only supports `.ts` but not `.tsx` files"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const price = 0;\nconst element = <h3>{price || 'Free'}</h3>;",
        "o": [
            "<h3>Free</h3>",
            "<h3>0</h3>",
            "<h3></h3>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s build output folder?",
        "o": [
            "It creates a `build` directory containing production-ready static files",
            "It overwrites the `src` folder with compiled code",
            "It only outputs JavaScript files and ignores CSS",
            "It is named `dist` instead of `build`"
        ]
    },
    {
        "q": "Which of the following is true about JSX attributes?",
        "o": [
            "They use camelCase for naming, such as `className` instead of `class`",
            "They must always be written in lowercase",
            "They are always strings and cannot be expressions",
            "They cannot be passed as props to functional components"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s `index.js` file?",
        "o": [
            "It renders the root React component into the DOM element with id `root`",
            "It contains the HTML template of the app",
            "It is only used to configure ESLint",
            "It is responsible for creating a production build"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <div>{true}</div>;",
        "o": [
            "<div></div>",
            "<div>true</div>",
            "<div>1</div>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s hot reloading feature?",
        "o": [
            "It automatically reloads components in the browser when source files change",
            "It requires a manual page refresh after saving changes",
            "It is only available in production mode",
            "It must be explicitly enabled by modifying webpack config"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const text = null;\nconst element = <p>{text ?? 'No data'}</p>;",
        "o": [
            "<p>No data</p>",
            "<p>null</p>",
            "<p></p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s default `reportWebVitals.js` file?",
        "o": [
            "It allows measuring app performance metrics such as load time",
            "It is required for the app to run",
            "It defines the root React component",
            "It compiles JSX to JavaScript"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowFlag({ enabled }) {\n  return <span>{enabled && 'ON'}</span>;\n}\n\nconst element = <ShowFlag enabled={false} />;",
        "o": [
            "<span></span>",
            "<span>ON</span>",
            "<span>false</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA and Progressive Web Apps (PWAs)?",
        "o": [
            "CRA provides optional service worker support to enable PWAs",
            "CRA apps are always PWAs by default",
            "PWAs require ejecting from CRA",
            "CRA does not support PWAs at all"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const message = undefined;\nconst element = <h4>{message || 'Default'}</h4>;",
        "o": [
            "<h4>Default</h4>",
            "<h4>undefined</h4>",
            "<h4></h4>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s `manifest.json` file?",
        "o": [
            "It defines metadata for Progressive Web Apps, like icons and colors",
            "It configures Babel transpilation options",
            "It is required for testing components",
            "It controls environment variables for development"
        ]
    },
    {
        "q": "Which of the following is true about self-closing tags in JSX?",
        "o": [
            "Tags without children must be self-closed, such as `<img />`",
            "They can be left open without issues",
            "They are automatically converted to `<div>` by React",
            "They are only allowed for `<input>` elements"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s default `index.html`?",
        "o": [
            "It contains a root `<div>` where the React app is mounted",
            "It holds all React components directly",
            "It compiles JSX into JavaScript",
            "It defines routes for the React Router"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <h1>{5 + 5}</h1>;",
        "o": [
            "<h1>10</h1>",
            "<h1>55</h1>",
            "<h1>{5 + 5}</h1>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s development server?",
        "o": [
            "It runs by default on port 3000",
            "It must be started manually with Node.js without any scripts",
            "It serves only static files without hot reload",
            "It runs on port 80 by default"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Info() {\n  return <p>{['A', 'B'].join('-')}</p>;\n}\n\nconst element = <Info />;",
        "o": [
            "<p>A-B</p>",
            "<p>AB</p>",
            "<p>A,B</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA and Babel?",
        "o": [
            "CRA uses Babel internally to transpile modern JavaScript and JSX",
            "Babel must be installed manually in CRA apps",
            "Babel is not supported in CRA at all",
            "Babel is only used for CSS processing in CRA"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const status = false;\nconst element = <h2>{status ? 'Active' : 'Inactive'}</h2>;",
        "o": [
            "<h2>Inactive</h2>",
            "<h2>Active</h2>",
            "<h2>false</h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s support for importing images?",
        "o": [
            "You can import image files directly in components and use them as variables",
            "Images must always be placed in the `public` folder",
            "CRA does not support image imports in JSX",
            "Images must be converted into base64 before usage"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Combine() {\n  const first = 'React';\n  const second = 'JS';\n  return <h3>{first + ' ' + second}</h3>;\n}\n\nconst element = <Combine />;",
        "o": [
            "<h3>React JS</h3>",
            "<h3>ReactJS</h3>",
            "<h3>React</h3>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s build command?",
        "o": [
            "`npm run build` generates optimized static files for production",
            "`npm run build` runs the app in development mode",
            "`npm run build` deletes the `node_modules` folder",
            "`npm run build` only lints the project without compiling"
        ]
    },
    {
        "q": "Which of the following is true about JSX comments?",
        "o": [
            "They must be wrapped inside curly braces like `{/* comment */}`",
            "They can be written with `//` directly inside JSX",
            "They are not supported inside JSX",
            "They are written using HTML syntax `<!-- -->`"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s environment variables?",
        "o": [
            "They must begin with `REACT_APP_` to be recognized",
            "They can be named freely without restrictions",
            "They must be defined inside `package.json` only",
            "They are available only in production mode"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const value = 0;\nconst element = <p>{value && 'Visible'}</p>;",
        "o": [
            "<p>0</p>",
            "<p>Visible</p>",
            "<p></p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA and testing?",
        "o": [
            "CRA comes with Jest preconfigured for testing",
            "CRA does not support testing by default",
            "CRA requires Mocha installation for tests",
            "CRA forces developers to eject before using Jest"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowName({ name }) {\n  return <h1>{name || 'Guest'}</h1>;\n}\n\nconst element = <ShowName name=\"\" />;",
        "o": [
            "<h1>Guest</h1>",
            "<h1></h1>",
            "<h1>Guest</h1> and <h1></h1>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s `setupTests.js` file?",
        "o": [
            "It is used to configure testing utilities like React Testing Library",
            "It is required for running ESLint checks",
            "It is responsible for configuring Webpack",
            "It compiles JSX to browser code"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <div>{['One', 'Two', 'Three']}</div>;",
        "o": [
            "<div>OneTwoThree</div>",
            "<div>One,Two,Three</div>",
            "<div>[object Object]</div>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s default static asset handling?",
        "o": [
            "Files placed in the `public` folder are served as-is without processing",
            "All files must be imported into JavaScript before use",
            "Assets in `public` are automatically minified",
            "The `public` folder is ignored during builds"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const flag = '';\nconst element = <span>{flag || 'Fallback'}</span>;",
        "o": [
            "<span>Fallback</span>",
            "<span></span>",
            "<span>''</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s default ESLint integration?",
        "o": [
            "It enforces React-specific linting rules during development",
            "It only checks code syntax without React rules",
            "It requires manual installation to work",
            "It runs only during the production build"
        ]
    },
    {
        "q": "Which of the following is true about JSX nesting?",
        "o": [
            "JSX elements must have exactly one parent element",
            "Multiple root elements are allowed without a wrapper",
            "Nesting works the same as plain HTML without restrictions",
            "JSX requires all elements to be self-closing"
        ]
    },
    {
        "q": "Which of the following is true about CRA and CSS Modules?",
        "o": [
            "CRA supports CSS Modules out of the box using the `.module.css` extension",
            "CRA requires ejecting to use CSS Modules",
            "CSS Modules are not supported in CRA",
            "Only `.css` files in the `public` folder can be used as CSS Modules"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <h2>{['R', 'e', 'a', 'c', 't'].length}</h2>;",
        "o": [
            "<h2>5</h2>",
            "<h2>React</h2>",
            "<h2>undefined</h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s support for TypeScript?",
        "o": [
            "CRA supports TypeScript by creating a project with the `--template typescript` flag",
            "CRA does not support TypeScript at all",
            "CRA requires ejecting to add TypeScript",
            "TypeScript can only be used in production builds"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Greeting({ user }) {\n  return <h1>Hello, {user ?? 'Anonymous'}</h1>;\n}\n\nconst element = <Greeting user={null} />;",
        "o": [
            "<h1>Hello, Anonymous</h1>",
            "<h1>Hello, null</h1>",
            "<h1>Hello, </h1>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s `serviceWorker.js` file?",
        "o": [
            "It enables offline support and caching if registered",
            "It is required for React components to work",
            "It is automatically registered in all new CRA apps",
            "It compiles JSX into browser-compatible JavaScript"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const data = [10, 20, 30];\nconst element = <p>{data[1]}</p>;",
        "o": [
            "<p>20</p>",
            "<p>10</p>",
            "<p>30</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s support for `.env` files?",
        "o": [
            "CRA automatically loads variables from `.env` files at build time",
            "CRA does not support `.env` files",
            "Variables in `.env` must be imported manually via Node.js",
            "CRA uses `.env` only for configuring ESLint"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const message = 'React';\nconst element = <h3>{message.toUpperCase()}</h3>;",
        "o": [
            "<h3>REACT</h3>",
            "<h3>React</h3>",
            "<h3>react</h3>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA and code splitting?",
        "o": [
            "CRA supports code splitting with dynamic `import()` statements",
            "Code splitting is not possible without ejecting",
            "CRA automatically splits every component into separate bundles",
            "Code splitting requires manual Webpack configuration in CRA"
        ]
    },
    {
        "q": "Which of the following is true about embedding expressions in JSX?",
        "o": [
            "Any valid JavaScript expression can be embedded inside `{}`",
            "Only strings can be embedded inside `{}`",
            "Only numbers and booleans can be embedded inside `{}`",
            "Expressions must always return JSX elements"
        ]
    },
    {
        "q": "Which of the following is true about CRA and hot reloading?",
        "o": [
            "CRA supports fast refresh for React components during development",
            "CRA does not support hot reloading at all",
            "Hot reloading requires ejecting CRA",
            "Hot reloading is only available in production mode"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowNumber() {\n  return <span>{Math.max(2, 8, 5)}</span>;\n}\n\nconst element = <ShowNumber />;",
        "o": [
            "<span>8</span>",
            "<span>5</span>",
            "<span>2</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA and `reportWebVitals.js`?",
        "o": [
            "It is used to measure app performance and send metrics",
            "It is required for rendering JSX",
            "It automatically optimizes builds",
            "It is responsible for CSS compilation"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const items = ['X', 'Y'];\nconst element = <div>{items[0] + items[1]}</div>;",
        "o": [
            "<div>XY</div>",
            "<div>X,Y</div>",
            "<div>['X','Y']</div>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA and relative imports?",
        "o": [
            "CRA allows importing files using relative paths without extra configuration",
            "Relative imports are not supported in CRA",
            "Relative imports require ejecting the CRA configuration",
            "Relative imports only work in the `public` folder"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Check() {\n  return <p>{true ? 'Yes' : 'No'}</p>;\n}\n\nconst element = <Check />;",
        "o": [
            "<p>Yes</p>",
            "<p>No</p>",
            "<p>true</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s `src` folder?",
        "o": [
            "It contains the main entry point and components of the React app",
            "It is used only for static assets like images",
            "It must not contain JSX files",
            "It is ignored during builds"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const isVisible = null;\nconst element = <span>{isVisible ?? 'Hidden'}</span>;",
        "o": [
            "<span>Hidden</span>",
            "<span>null</span>",
            "<span></span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA and `public/index.html`?",
        "o": [
            "It acts as a template where the React app is injected at runtime",
            "It directly contains all React components",
            "It is ignored after the first build",
            "It is only used for unit testing"
        ]
    },
    {
        "q": "Which of the following is true about JSX case sensitivity?",
        "o": [
            "JSX tags are case-sensitive, and lowercase names are treated as HTML elements",
            "JSX tags are not case-sensitive at all",
            "Both lowercase and uppercase names are treated as React components",
            "JSX ignores case sensitivity during transpilation"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s default build command?",
        "o": [
            "`npm run build` creates an optimized production build",
            "`npm run build` only starts a development server",
            "`npm run build` installs dependencies",
            "`npm run build` deletes the `src` folder"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const numbers = [1, 2, 3];\nconst element = <p>{numbers.join('-')}</p>;",
        "o": [
            "<p>1-2-3</p>",
            "<p>123</p>",
            "<p>1,2,3</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s default scripts?",
        "o": [
            "`npm start` runs the app in development mode",
            "`npm start` generates a production build",
            "`npm start` cleans node_modules",
            "`npm start` installs CRA dependencies"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Multiply({ a, b }) {\n  return <h2>{a * b}</h2>;\n}\n\nconst element = <Multiply a={4} b={3} />;",
        "o": [
            "<h2>12</h2>",
            "<h2>7</h2>",
            "<h2>43</h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s `manifest.json`?",
        "o": [
            "It provides metadata for Progressive Web App configuration",
            "It is required for React components to render",
            "It contains build configuration for Webpack",
            "It defines default ESLint rules"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const name = undefined;\nconst element = <div>{name || 'Default'}</div>;",
        "o": [
            "<div>Default</div>",
            "<div>undefined</div>",
            "<div></div>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s dependency management?",
        "o": [
            "CRA manages dependencies like React, ReactDOM, and Webpack internally",
            "All dependencies must be manually installed before using CRA",
            "CRA does not include any dependencies by default",
            "CRA only installs ESLint and Babel"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Status({ active }) {\n  return <span>{active ? 'Active' : 'Inactive'}</span>;\n}\n\nconst element = <Status active={false} />;",
        "o": [
            "<span>Inactive</span>",
            "<span>Active</span>",
            "<span>false</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX attributes?",
        "o": [
            "They use camelCase naming convention like `className`",
            "They always match standard HTML attribute names",
            "They can only accept string values",
            "They must always be written in lowercase"
        ]
    },
    {
        "q": "Which of the following is true about CRA and browserslist?",
        "o": [
            "CRA uses `browserslist` in `package.json` to define supported browsers",
            "CRA ignores browser compatibility by default",
            "CRA only supports the latest version of Chrome",
            "CRA requires manual Babel configuration for browser support"
        ]
    },
    {
        "q": "Which of the following is true about JSX comments?",
        "o": [
            "They must be wrapped in curly braces like `{/* comment */}`",
            "They use `//` inside JSX elements directly",
            "They are written with `<!-- -->` as in HTML",
            "They are not allowed in JSX at all"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <h4>{['A', 'B', 'C'][2]}</h4>;",
        "o": [
            "<h4>C</h4>",
            "<h4>A</h4>",
            "<h4>B</h4>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s file watching?",
        "o": [
            "CRA automatically reloads the page when files in `src` are changed",
            "CRA requires restarting the server to detect file changes",
            "CRA only reloads if `public` files are updated",
            "CRA ignores all file changes by default"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Display() {\n  return <div>{5 > 3 ? 'Yes' : 'No'}</div>;\n}\n\nconst element = <Display />;",
        "o": [
            "<div>Yes</div>",
            "<div>No</div>",
            "<div>true</div>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX expressions inside attributes?",
        "o": [
            "They must be wrapped in curly braces",
            "They must be written as plain strings",
            "They cannot use variables",
            "They can only contain numbers"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const title = 'React Basics';\nconst element = <h1>{title.length}</h1>;",
        "o": [
            "<h1>12</h1>",
            "<h1>React Basics</h1>",
            "<h1>undefined</h1>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA and static assets?",
        "o": [
            "Files placed in the `public` folder can be accessed directly by URL",
            "All static assets must be imported inside JavaScript files",
            "CRA does not allow using images or static files",
            "Static assets must always be inlined in JSX"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function App() {\n  return <p>{2 === '2' ? 'Equal' : 'Not Equal'}</p>;\n}\n\nconst element = <App />;",
        "o": [
            "<p>Not Equal</p>",
            "<p>Equal</p>",
            "<p>true</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA and ESLint?",
        "o": [
            "CRA comes pre-configured with ESLint rules for React projects",
            "CRA does not include ESLint by default",
            "CRA requires manual setup of ESLint every time",
            "CRA only supports Prettier, not ESLint"
        ]
    },
    {
        "q": "Which of the following is true about JSX and children?",
        "o": [
            "Any valid JSX or text inside a tag is passed as `children`",
            "Only string values can be passed as `children`",
            "Children must always be arrays",
            "Children cannot be used in functional components"
        ]
    },
    {
        "q": "Which of the following is true about functional components?",
        "o": [
            "They are plain JavaScript functions that return JSX",
            "They must always extend `React.Component`",
            "They cannot accept props",
            "They are not supported in modern React"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Greeting({ name }) {\n  return <h2>Hello, {name}!</h2>;\n}\n\nconst element = <Greeting name=\"Sam\" />;",
        "o": [
            "<h2>Hello, Sam!</h2>",
            "<h2>Hello, {name}!</h2>",
            "<h2>Sam</h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX wrapping elements?",
        "o": [
            "JSX must return a single root element",
            "JSX can return multiple sibling elements without wrapping",
            "JSX requires wrapping every element inside a `div` only",
            "JSX cannot return fragments"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Add({ x, y }) {\n  return <span>{x + y}</span>;\n}\n\nconst element = <Add x={10} y={15} />;",
        "o": [
            "<span>25</span>",
            "<span>1015</span>",
            "<span>10+15</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s `index.js` file?",
        "o": [
            "It is the main entry point that renders the root React component",
            "It is only used for testing purposes",
            "It automatically contains all project components",
            "It is ignored during the build process"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const loggedIn = false;\nconst element = <div>{loggedIn && 'Welcome!'}</div>;",
        "o": [
            "<div>false</div>",
            "<div></div>",
            "<div>Welcome!</div>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React component naming?",
        "o": [
            "Functional component names must start with a capital letter",
            "Functional component names must always be lowercase",
            "Functional component names are case-insensitive",
            "Functional component names must match the file name"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowList() {\n  const items = ['Pen', 'Book'];\n  return <p>{items[1]}</p>;\n}\n\nconst element = <ShowList />;",
        "o": [
            "<p>Book</p>",
            "<p>Pen</p>",
            "<p>['Pen','Book']</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA and build optimization?",
        "o": [
            "CRA automatically minifies and optimizes the app for production",
            "CRA requires manual configuration for minification",
            "CRA does not optimize builds at all",
            "CRA only optimizes JavaScript, not CSS"
        ]
    },
    {
        "q": "Which of the following is true about passing props?",
        "o": [
            "Props are passed to components like attributes in HTML tags",
            "Props must always be numbers",
            "Props cannot be passed to functional components",
            "Props can only be defined inside `index.js`"
        ]
    },
    {
        "q": "Which of the following is true about JSX syntax rules?",
        "o": [
            "JSX tags must be properly closed, even self-closing ones",
            "JSX tags can be left unclosed like in HTML",
            "JSX allows spaces in tag names",
            "JSX ignores case sensitivity in element names"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Double({ n }) {\n  return <p>{n * 2}</p>;\n}\n\nconst element = <Double n={7} />;",
        "o": [
            "<p>14</p>",
            "<p>7</p>",
            "<p>n * 2</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s `public/index.html`?",
        "o": [
            "It provides the single HTML file into which the React app is injected",
            "It contains all the component logic",
            "It automatically lists all React components used in the project",
            "It is not used during development"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const user = { first: 'Jane', last: 'Doe' };\nconst element = <h3>{user.first + ' ' + user.last}</h3>;",
        "o": [
            "<h3>Jane Doe</h3>",
            "<h3>Jane</h3>",
            "<h3>Doe</h3>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about rendering elements?",
        "o": [
            "React updates only the parts of the DOM that have changed",
            "React re-renders the entire DOM on every update",
            "React requires manual DOM manipulation with `document.getElementById`",
            "React rendering does not allow dynamic values"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowFlag({ isEnabled }) {\n  return <span>{isEnabled ? 'ON' : 'OFF'}</span>;\n}\n\nconst element = <ShowFlag isEnabled={true} />;",
        "o": [
            "<span>ON</span>",
            "<span>OFF</span>",
            "<span>true</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA and hot reloading?",
        "o": [
            "CRA supports automatic reloading when source files change",
            "CRA requires restarting the dev server after every change",
            "CRA disables hot reloading by default",
            "CRA only reloads CSS changes, not JS"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowLength({ text }) {\n  return <div>{text.length}</div>;\n}\n\nconst element = <ShowLength text=\"React\" />;",
        "o": [
            "<div>5</div>",
            "<div>React</div>",
            "<div>undefined</div>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about returning arrays in functional components?",
        "o": [
            "Functional components can return arrays of elements",
            "Functional components must return only one element",
            "Returning arrays in functional components causes errors",
            "Only class components can return arrays"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const arr = ['X', 'Y'];\nconst element = <h2>{arr[0]}</h2>;",
        "o": [
            "<h2>X</h2>",
            "<h2>Y</h2>",
            "<h2>['X','Y']</h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about props in functional components?",
        "o": [
            "Props are read-only inside a component",
            "Props can be reassigned freely",
            "Props are automatically mutable objects",
            "Props can only hold string values"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function DisplayBool({ val }) {\n  return <p>{val.toString()}</p>;\n}\n\nconst element = <DisplayBool val={true} />;",
        "o": [
            "<p>true</p>",
            "<p>false</p>",
            "<p>val</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about embedding JavaScript in JSX?",
        "o": [
            "JavaScript expressions can be written inside `{}`",
            "JavaScript must always be written outside JSX",
            "Only arithmetic operations can be used in JSX",
            "Conditional operators are not supported in JSX"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const city = \"Paris\";\nconst element = <h4>{`Welcome to ${city}`}</h4>;",
        "o": [
            "<h4>Welcome to Paris</h4>",
            "<h4>city</h4>",
            "<h4>Welcome to ${city}</h4>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s default testing setup?",
        "o": [
            "It includes Jest for running unit tests",
            "It has no built-in testing support",
            "It requires manual setup of Mocha",
            "It only supports snapshot testing out of the box"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Square({ n }) {\n  return <div>{n ** 2}</div>;\n}\n\nconst element = <Square n={6} />;",
        "o": [
            "<div>36</div>",
            "<div>6</div>",
            "<div>n ** 2</div>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React fragments?",
        "o": [
            "They let you group elements without adding extra DOM nodes",
            "They require wrapping inside a `div`",
            "They prevent JSX from rendering multiple children",
            "They can only be used in class components"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Concat({ a, b }) {\n  return <span>{a + b}</span>;\n}\n\nconst element = <Concat a=\"Hello\" b=\"World\" />;",
        "o": [
            "<span>HelloWorld</span>",
            "<span>Hello World</span>",
            "<span>a+b</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s environment variables?",
        "o": [
            "They must start with `REACT_APP_` to be recognized",
            "They can be named anything without restrictions",
            "They are only supported in production builds",
            "They must be defined directly inside components"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowChar({ word }) {\n  return <h2>{word[2]}</h2>;\n}\n\nconst element = <ShowChar word=\"React\" />;",
        "o": [
            "<h2>a</h2>",
            "<h2>e</h2>",
            "<h2>c</h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about functional components?",
        "o": [
            "They are plain JavaScript functions that return JSX",
            "They must always extend React.Component",
            "They can only return strings, not JSX",
            "They cannot accept props"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Add({ x, y }) {\n  return <p>{x + y}</p>;\n}\n\nconst element = <Add x={4} y={9} />;",
        "o": [
            "<p>13</p>",
            "<p>49</p>",
            "<p>x+y</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX attributes?",
        "o": [
            "They are written in camelCase for DOM properties like `className`",
            "They must always use kebab-case like in HTML",
            "They cannot accept JavaScript expressions",
            "They only support string values"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const fruits = ['Apple', 'Banana'];\nconst element = <h5>{fruits.join(', ')}</h5>;",
        "o": [
            "<h5>Apple, Banana</h5>",
            "<h5>Apple Banana</h5>",
            "<h5>fruits</h5>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React keys in rendering lists?",
        "o": [
            "They help React identify which items have changed or been added/removed",
            "They are optional and have no effect",
            "They must always be unique strings like 'item'",
            "They are used to style list items in JSX"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Upper({ text }) {\n  return <span>{text.toUpperCase()}</span>;\n}\n\nconst element = <Upper text=\"react\" />;",
        "o": [
            "<span>REACT</span>",
            "<span>react</span>",
            "<span>text</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React’s rendering process?",
        "o": [
            "It uses a virtual DOM to efficiently update the real DOM",
            "It replaces the entire DOM tree on every update",
            "It does not support conditional rendering",
            "It requires manual DOM updates with JavaScript"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Greet({ who = 'Guest' }) {\n  return <h4>Hello, {who}!</h4>;\n}\n\nconst element = <Greet />;",
        "o": [
            "<h4>Hello, Guest!</h4>",
            "<h4>Hello, undefined!</h4>",
            "<h4>Hello!</h4>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s default build command?",
        "o": [
            "`npm run build` generates an optimized production-ready bundle",
            "`npm run build` only validates JSX without output",
            "`npm run build` is only used in development mode",
            "`npm run build` automatically deploys to GitHub Pages"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <h1>{5 > 3 ? 'Yes' : 'No'}</h1>;",
        "o": [
            "<h1>Yes</h1>",
            "<h1>No</h1>",
            "<h1>5 > 3</h1>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about default exports in CRA?",
        "o": [
            "Each file can have only one default export",
            "A file can have unlimited default exports",
            "Default exports must be named 'App'",
            "Default exports cannot be imported with custom names"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Repeat({ word }) {\n  return <p>{word.repeat(2)}</p>;\n}\n\nconst element = <Repeat word=\"Hi\" />;",
        "o": [
            "<p>HiHi</p>",
            "<p>Hi</p>",
            "<p>word</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX expressions?",
        "o": [
            "They must evaluate to a single value",
            "They can return multiple sibling elements directly",
            "They can execute control structures like `for` directly",
            "They cannot include arithmetic expressions"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Age({ years }) {\n  return <h2>{years >= 18 ? 'Adult' : 'Minor'}</h2>;\n}\n\nconst element = <Age years={20} />;",
        "o": [
            "<h2>Adult</h2>",
            "<h2>Minor</h2>",
            "<h2>years</h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s `public` folder?",
        "o": [
            "Files in `public` can be accessed directly by their URL",
            "Files in `public` are automatically bundled by Webpack",
            "Only JSON files are supported inside `public`",
            "It is only used in production builds"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const name = null;\nconst element = <h3>{name || 'Anonymous'}</h3>;",
        "o": [
            "<h3>Anonymous</h3>",
            "<h3>null</h3>",
            "<h3>name</h3>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about inline styles in JSX?",
        "o": [
            "They are written as objects with camelCase properties",
            "They must be written as plain strings like in HTML",
            "They can only be defined in external CSS files",
            "They are not supported in React at all"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Multiply({ a, b }) {\n  return <span>{a * b}</span>;\n}\n\nconst element = <Multiply a={3} b={7} />;",
        "o": [
            "<span>21</span>",
            "<span>37</span>",
            "<span>a*b</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX wrapping?",
        "o": [
            "A JSX expression must return a single parent element",
            "Multiple sibling elements can be returned without wrapping",
            "You can only use `<div>` as the root element",
            "JSX must always return `null` at the end"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowLength({ text }) {\n  return <p>{text.length}</p>;\n}\n\nconst element = <ShowLength text=\"ReactJS\" />;",
        "o": [
            "<p>7</p>",
            "<p>6</p>",
            "<p>text</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React fragments?",
        "o": [
            "They let you group elements without adding extra nodes to the DOM",
            "They must always be written as `<div>` wrappers",
            "They are required in every functional component",
            "They can only contain plain text"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Double({ num }) {\n  return <h4>{num * 2}</h4>;\n}\n\nconst element = <Double num={10} />;",
        "o": [
            "<h4>20</h4>",
            "<h4>10</h4>",
            "<h4>num</h4>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about `index.js` in CRA?",
        "o": [
            "It is the entry point that renders the root component into the DOM",
            "It is only used for testing purposes",
            "It contains all React components of the app",
            "It cannot import CSS files"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <p>{[1, 2, 3].map(n => n * n).join(', ')}</p>;",
        "o": [
            "<p>1, 4, 9</p>",
            "<p>123</p>",
            "<p>n*n</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about `npm start` in CRA?",
        "o": [
            "It runs the app in development mode with hot reloading",
            "It builds the app for production",
            "It installs dependencies",
            "It deploys the app to a server"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Shout({ word }) {\n  return <span>{word + '!'}</span>;\n}\n\nconst element = <Shout word=\"Hello\" />;",
        "o": [
            "<span>Hello!</span>",
            "<span>Hello</span>",
            "<span>word</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about props with default values?",
        "o": [
            "You can provide defaults using destructuring in function parameters",
            "Props must always be passed explicitly from the parent",
            "Default props only work in class components",
            "Props cannot have default values"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const flag = false;\nconst element = <h2>{flag ? 'On' : 'Off'}</h2>;",
        "o": [
            "<h2>Off</h2>",
            "<h2>On</h2>",
            "<h2>false</h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX comments?",
        "o": [
            "They are written inside braces like `{/* comment */}`",
            "They use HTML-style `<!-- comment -->` syntax",
            "They cannot be written inside JSX",
            "They must be written outside return statements only"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowFirst({ arr }) {\n  return <p>{arr[0]}</p>;\n}\n\nconst element = <ShowFirst arr={[10, 20, 30]} />;",
        "o": [
            "<p>10</p>",
            "<p>30</p>",
            "<p>arr</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about `npm run build` in CRA?",
        "o": [
            "It creates an optimized production build of the app",
            "It starts the development server",
            "It installs missing dependencies",
            "It removes unused files from the project"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Greet({ first, last }) {\n  return <h1>{first + ' ' + last}</h1>;\n}\n\nconst element = <Greet first=\"John\" last=\"Doe\" />;",
        "o": [
            "<h1>John Doe</h1>",
            "<h1>John</h1>",
            "<h1>Doe</h1>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX attributes?",
        "o": [
            "They use camelCase for names like `className` and `onClick`",
            "They always use lowercase like HTML",
            "They must always be strings",
            "They cannot accept JavaScript expressions"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <h2>{5 > 3 ? 'Yes' : 'No'}</h2>;",
        "o": [
            "<h2>Yes</h2>",
            "<h2>No</h2>",
            "<h2>5&gt;3</h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA project structure?",
        "o": [
            "The `src` folder contains the app’s React components",
            "The `public` folder contains all source code",
            "The `node_modules` folder should be manually edited",
            "The `package.json` file is not required in CRA"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Square({ n }) {\n  return <p>{n * n}</p>;\n}\n\nconst element = <Square n={8} />;",
        "o": [
            "<p>64</p>",
            "<p>8</p>",
            "<p>n*n</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX strings?",
        "o": [
            "String literals inside JSX must be wrapped in quotes",
            "They can only be defined outside return statements",
            "They must always be concatenated manually",
            "They cannot appear inside JSX at all"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const name = \"React\";\nconst element = <h3>{`Hello, ${name}`}</h3>;",
        "o": [
            "<h3>Hello, React</h3>",
            "<h3>Hello, ${name}</h3>",
            "<h3>React</h3>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about `reportWebVitals.js` in CRA?",
        "o": [
            "It helps measure app performance metrics",
            "It is required for routing",
            "It is used to configure service workers",
            "It is the root component of the app"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowLast({ arr }) {\n  return <span>{arr[arr.length - 1]}</span>;\n}\n\nconst element = <ShowLast arr={[4, 5, 6]} />;",
        "o": [
            "<span>6</span>",
            "<span>4</span>",
            "<span>arr</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about functional component naming?",
        "o": [
            "Component names must start with an uppercase letter",
            "Component names must always be lowercase",
            "Component names can only be numbers",
            "Component names must match the filename exactly"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Repeat({ text }) {\n  return <p>{text.repeat(2)}</p>;\n}\n\nconst element = <Repeat text=\"Hi\" />;",
        "o": [
            "<p>HiHi</p>",
            "<p>Hi</p>",
            "<p>2</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX expressions?",
        "o": [
            "They must be wrapped inside curly braces `{}`",
            "They must be wrapped inside parentheses `()`",
            "They must be written in quotes `\"\"`",
            "They cannot be used inside JSX"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const number = 7;\nconst element = <h1>{number % 2 === 0 ? 'Even' : 'Odd'}</h1>;",
        "o": [
            "<h1>Odd</h1>",
            "<h1>Even</h1>",
            "<h1>7</h1>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the `public/index.html` file in CRA?",
        "o": [
            "It contains the root `<div>` where React mounts the app",
            "It defines all React components",
            "It cannot include external CSS or JS",
            "It must always contain JSX code"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Join({ words }) {\n  return <p>{words.join(' - ')}</p>;\n}\n\nconst element = <Join words={[\"A\", \"B\", \"C\"]} />;",
        "o": [
            "<p>A - B - C</p>",
            "<p>ABC</p>",
            "<p>words</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA and hot reloading?",
        "o": [
            "CRA automatically reloads the page when source files change",
            "CRA must be restarted manually to reflect code changes",
            "CRA does not support live reloading",
            "Hot reloading requires installing a separate library in CRA"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <h2>{['x', 'y', 'z'][1]}</h2>;",
        "o": [
            "<h2>y</h2>",
            "<h2>x</h2>",
            "<h2>z</h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about functional component returns?",
        "o": [
            "They must return a single JSX element (or a fragment)",
            "They can return multiple sibling elements directly",
            "They must return only plain text",
            "They cannot return JSX"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Multiply({ a, b }) {\n  return <span>{a * b}</span>;\n}\n\nconst element = <Multiply a={4} b={5} />;",
        "o": [
            "<span>20</span>",
            "<span>9</span>",
            "<span>45</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX comments?",
        "o": [
            "They must be wrapped inside curly braces with `/* */`",
            "They are written the same way as HTML comments",
            "They cannot be added inside JSX",
            "They use `//` directly inside JSX"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowLength({ text }) {\n  return <p>{text.length}</p>;\n}\n\nconst element = <ShowLength text=\"React\" />;",
        "o": [
            "<p>5</p>",
            "<p>React</p>",
            "<p>text</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following correctly imports React in a component file?",
        "o": [
            "import React from 'react';",
            "require('react')",
            "import { React } from 'react';",
            "include 'react';"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const nums = [1, 2, 3];\nconst element = <h4>{nums[0] + nums[2]}</h4>;",
        "o": [
            "<h4>4</h4>",
            "<h4>5</h4>",
            "<h4>3</h4>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the React root element in CRA?",
        "o": [
            "It is usually a `<div>` with id `root`",
            "It is always the `<body>` element",
            "It is created automatically by React with no HTML",
            "It is an element named `<app-root>`"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Double({ n }) {\n  return <span>{n + n}</span>;\n}\n\nconst element = <Double n={15} />;",
        "o": [
            "<span>30</span>",
            "<span>15</span>",
            "<span>n+n</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about `index.js` in CRA?",
        "o": [
            "It renders the root React component into the DOM",
            "It defines the global CSS for the project",
            "It contains all reusable components",
            "It is used only for routing setup"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const greet = (name) => `Hello ${name}`;\nconst element = <h1>{greet('JSX')}</h1>;",
        "o": [
            "<h1>Hello JSX</h1>",
            "<h1>greet('JSX')</h1>",
            "<h1>name</h1>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX fragments?",
        "o": [
            "They allow returning multiple elements without adding extra nodes",
            "They are required in every React component",
            "They are only available in class components",
            "They must be written as `<FragmentOnly>`"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Add({ x, y }) {\n  return <p>{x + y}</p>;\n}\n\nconst element = <Add x={12} y={8} />;",
        "o": [
            "<p>20</p>",
            "<p>128</p>",
            "<p>x+y</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX attribute values?",
        "o": [
            "They can be JavaScript expressions inside curly braces",
            "They must always be strings",
            "They cannot contain expressions",
            "They must be wrapped with parentheses"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Square({ n }) {\n  return <h2>{n * n}</h2>;\n}\n\nconst element = <Square n={6} />;",
        "o": [
            "<h2>36</h2>",
            "<h2>12</h2>",
            "<h2>6</h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JavaScript inside JSX?",
        "o": [
            "JavaScript must be wrapped in curly braces",
            "JavaScript can be written directly like plain HTML",
            "JavaScript can only be used outside JSX",
            "JavaScript cannot be used in React components"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <p>{'A' + 'B' + 'C'}</p>;",
        "o": [
            "<p>ABC</p>",
            "<p>A+B+C</p>",
            "<p>{'ABC'}</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the `App.js` file in CRA?",
        "o": [
            "It usually defines the main root component",
            "It only contains configuration for CRA",
            "It cannot import other components",
            "It is the same as `index.js`"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Concat({ a, b }) {\n  return <span>{a + b}</span>;\n}\n\nconst element = <Concat a=\"Hello \" b=\"World\" />;",
        "o": [
            "<span>Hello World</span>",
            "<span>Hello</span>",
            "<span>World</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about rendering React elements?",
        "o": [
            "They describe what should appear on the UI",
            "They directly update the DOM when created",
            "They must be converted into strings first",
            "They cannot contain dynamic values"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <h3>{100 / 4}</h3>;",
        "o": [
            "<h3>25</h3>",
            "<h3>100/4</h3>",
            "<h3>100</h3>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about props in functional components?",
        "o": [
            "Props are passed as an object argument",
            "Props can only be used in class components",
            "Props must always be numbers",
            "Props cannot be customized by the parent component"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowBool({ value }) {\n  return <p>{value ? 'Yes' : 'No'}</p>;\n}\n\nconst element = <ShowBool value={false} />;",
        "o": [
            "<p>No</p>",
            "<p>Yes</p>",
            "<p>false</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following correctly describes JSX rules?",
        "o": [
            "JSX must have one parent element",
            "JSX can have multiple sibling elements without wrapping",
            "JSX can include HTML comments directly",
            "JSX tags can be left unclosed"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <h2>{2 ** 3}</h2>;",
        "o": [
            "<h2>8</h2>",
            "<h2>6</h2>",
            "<h2>23</h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX attributes?",
        "o": [
            "They use camelCase for naming (e.g., className)",
            "They must always use lowercase names",
            "They cannot contain dynamic values",
            "They can only be strings"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Greet({ name }) {\n  return <p>{`Hello, ${name}`}</p>;\n}\n\nconst element = <Greet name=\"React\" />;",
        "o": [
            "<p>Hello, React</p>",
            "<p>Hello, name</p>",
            "<p>React</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the `public/index.html` file in CRA?",
        "o": [
            "It contains the root DOM node where React mounts the app",
            "It contains all React components",
            "It is not used in CRA projects",
            "It automatically includes all JavaScript files"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const x = 5, y = 10;\nconst element = <span>{x > y ? 'X' : 'Y'}</span>;",
        "o": [
            "<span>Y</span>",
            "<span>X</span>",
            "<span>x>y</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React functional components?",
        "o": [
            "They return JSX to describe UI",
            "They cannot take arguments",
            "They are the same as JavaScript objects",
            "They must be defined in index.js only"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Multiply({ a, b }) {\n  return <h4>{a * b}</h4>;\n}\n\nconst element = <Multiply a={7} b={3} />;",
        "o": [
            "<h4>21</h4>",
            "<h4>73</h4>",
            "<h4>10</h4>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the render method in React?",
        "o": [
            "It updates the UI when data changes",
            "It manipulates the DOM directly",
            "It only works in Node.js",
            "It executes only once in the app"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <div>{['A', 'B', 'C'].join('-')}</div>;",
        "o": [
            "<div>A-B-C</div>",
            "<div>ABC</div>",
            "<div>A,B,C</div>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about comments in JSX?",
        "o": [
            "They must be wrapped in curly braces inside `{/* ... */}`",
            "They can be written using `//` directly inside JSX",
            "They can be written using `<!-- -->` like HTML",
            "They are not supported at all"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <p>{10 % 3}</p>;",
        "o": [
            "<p>1</p>",
            "<p>3</p>",
            "<p>10%3</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following correctly describes functional components?",
        "o": [
            "They are plain JavaScript functions that return JSX",
            "They are JavaScript classes that extend React.Component",
            "They must always use state",
            "They cannot accept props"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowLength({ text }) {\n  return <span>{text.length}</span>;\n}\n\nconst element = <ShowLength text=\"React\" />;",
        "o": [
            "<span>5</span>",
            "<span>React</span>",
            "<span>text.length</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about `ReactDOM.render` in CRA?",
        "o": [
            "It mounts a React element into the DOM node",
            "It directly replaces the contents of `App.js`",
            "It automatically creates the root component",
            "It is not needed in functional components"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <h5>{[1, 2, 3].map(n => n * 2).join(',')}</h5>;",
        "o": [
            "<h5>2,4,6</h5>",
            "<h5>1,2,3</h5>",
            "<h5>[2,4,6]</h5>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX closing tags?",
        "o": [
            "Self-closing tags must end with `/`",
            "All tags can be left unclosed",
            "Closing tags are optional in JSX",
            "Self-closing tags cannot be used"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function UpperCase({ word }) {\n  return <p>{word.toUpperCase()}</p>;\n}\n\nconst element = <UpperCase word=\"hello\" />;",
        "o": [
            "<p>HELLO</p>",
            "<p>hello</p>",
            "<p>{word.toUpperCase()}</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the default structure of a CRA project?",
        "o": [
            "It includes both `src` and `public` folders by default",
            "It only includes an empty folder",
            "It includes only `index.html` and no `src` folder",
            "It has no predefined structure"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <span>{true && 'Visible'}</span>;",
        "o": [
            "<span>Visible</span>",
            "<span>true</span>",
            "<span>false</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX expressions inside components?",
        "o": [
            "They can include any valid JavaScript expression inside curly braces",
            "They can only include strings",
            "They cannot include arithmetic operations",
            "They must always be defined outside the return statement"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Add({ a, b }) {\n  return <p>{a + b}</p>;\n}\n\nconst element = <Add a={20} b={30} />;",
        "o": [
            "<p>50</p>",
            "<p>2030</p>",
            "<p>a+b</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about fragments in React?",
        "o": [
            "They let you group multiple elements without adding extra DOM nodes",
            "They must be used as `<div>` elements",
            "They are required in all class components",
            "They cannot contain JSX expressions"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const fruits = ['Apple', 'Banana', 'Cherry'];\nconst element = <p>{fruits[2]}</p>;",
        "o": [
            "<p>Cherry</p>",
            "<p>Apple</p>",
            "<p>Banana</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about CRA’s default development server?",
        "o": [
            "It supports hot reloading and shows build errors in the browser",
            "It requires manual refresh on every change",
            "It only works after running `npm run build`",
            "It cannot display console warnings"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Concat({ first, second }) {\n  return <span>{first + ' ' + second}</span>;\n}\n\nconst element = <Concat first=\"Good\" second=\"Morning\" />;",
        "o": [
            "<span>Good Morning</span>",
            "<span>GoodMorning</span>",
            "<span>first second</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about props in React?",
        "o": [
            "They are read-only and passed from parent to child",
            "They are mutable inside the child component",
            "They can only be strings",
            "They are optional in class components but mandatory in functional components"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowChar({ word }) {\n  return <p>{word[1]}</p>;\n}\n\nconst element = <ShowChar word=\"React\" />;",
        "o": [
            "<p>e</p>",
            "<p>R</p>",
            "<p>a</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX in React?",
        "o": [
            "JSX is syntactic sugar for React.createElement calls",
            "JSX is a string template engine",
            "JSX is required only in class components",
            "JSX automatically updates the DOM without React"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <div>{false || 'Fallback'}</div>;",
        "o": [
            "<div>Fallback</div>",
            "<div>false</div>",
            "<div>undefined</div>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about self-closing tags in JSX?",
        "o": [
            "They must end with a slash `/`",
            "They can be left unclosed like in HTML",
            "They are not allowed in JSX",
            "They automatically create a div wrapper"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Multiply({ x, y }) {\n  return <p>{x * y}</p>;\n}\n\nconst element = <Multiply x={4} y={6} />;",
        "o": [
            "<p>24</p>",
            "<p>10</p>",
            "<p>46</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about default props in functional components?",
        "o": [
            "They can be assigned using destructuring in the function parameter",
            "They can only be assigned in class components",
            "They cannot be overridden by parent components",
            "They are automatically set to null"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const arr = [10, 20, 30];\nconst element = <span>{arr[0] + arr[1]}</span>;",
        "o": [
            "<span>30</span>",
            "<span>1020</span>",
            "<span>10</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX expressions and conditional rendering?",
        "o": [
            "You can use ternary operators inside curly braces",
            "You can use `if` statements directly inside JSX",
            "Conditional rendering is not allowed in JSX",
            "You must always use a separate function for conditions"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Greet({ name }) {\n  return <h1>{name || 'Guest'}</h1>;\n}\n\nconst element = <Greet />;",
        "o": [
            "<h1>Guest</h1>",
            "<h1>undefined</h1>",
            "<h1>name</h1>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX wrapping multiple elements?",
        "o": [
            "You can use fragments `<>...</>` or a single parent element",
            "You can return multiple elements without wrapping",
            "You must always wrap in a `<div>`",
            "Wrapping is optional only in class components"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <h3>{['X', 'Y', 'Z'].join(',')}</h3>;",
        "o": [
            "<h3>X,Y,Z</h3>",
            "<h3>XYZ</h3>",
            "<h3>[X,Y,Z]</h3>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React elements vs components?",
        "o": [
            "Elements describe what to render, components define reusable logic",
            "Components are plain HTML elements",
            "Elements can contain state, components cannot",
            "Components are the same as DOM nodes"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowBoolean({ flag }) {\n  return <p>{flag ? 'Yes' : 'No'}</p>;\n}\n\nconst element = <ShowBoolean flag={true} />;",
        "o": [
            "<p>Yes</p>",
            "<p>No</p>",
            "<p>true</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about event handling in functional components?",
        "o": [
            "Event handlers are passed as props with camelCase names, e.g., onClick",
            "Event handlers cannot be used in functional components",
            "Event handlers must always be defined in index.js",
            "Event handlers must be written in lowercase like HTML"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Add({ a, b }) {\n  return <span>{a + b}</span>;\n}\n\nconst element = <Add a={7} b={5} />;",
        "o": [
            "<span>12</span>",
            "<span>75</span>",
            "<span>a+b</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX element types?",
        "o": [
            "They can be HTML tags or React components",
            "They can only be HTML tags",
            "They can only be React class components",
            "They must always be lowercase"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const names = ['Alice', 'Bob', 'Charlie'];\nconst element = <p>{names[1]}</p>;",
        "o": [
            "<p>Bob</p>",
            "<p>Alice</p>",
            "<p>Charlie</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about passing props?",
        "o": [
            "Props can pass any data type from parent to child component",
            "Props can only pass strings",
            "Props are automatically mutable inside child components",
            "Props cannot be optional"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function UpperCase({ text }) {\n  return <h2>{text.toUpperCase()}</h2>;\n}\n\nconst element = <UpperCase text=\"hello\" />;",
        "o": [
            "<h2>HELLO</h2>",
            "<h2>hello</h2>",
            "<h2>{text}</h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the `public` folder in CRA?",
        "o": [
            "It contains static assets like index.html and images",
            "It contains the main React components",
            "It is used to store JavaScript source code",
            "It cannot be accessed from the browser"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Multiply({ a, b }) {\n  return <span>{a * b}</span>;\n}\n\nconst element = <Multiply a={9} b={9} />;",
        "o": [
            "<span>81</span>",
            "<span>18</span>",
            "<span>99</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about rendering lists in React?",
        "o": [
            "Each child in a list should have a unique `key` prop",
            "Keys are optional and have no effect",
            "Keys must always be integers",
            "Keys should be assigned in the parent component only"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <div>{null || 'Fallback'}</div>;",
        "o": [
            "<div>Fallback</div>",
            "<div>null</div>",
            "<div>undefined</div>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX and HTML differences?",
        "o": [
            "JSX uses `className` instead of `class`",
            "JSX allows duplicate `id` attributes",
            "JSX uses lowercase event handler names",
            "JSX cannot include JavaScript expressions"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Subtract({ a, b }) {\n  return <h3>{a - b}</h3>;\n}\n\nconst element = <Subtract a={15} b={6} />;",
        "o": [
            "<h3>9</h3>",
            "<h3>156</h3>",
            "<h3>a-b</h3>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about default exports in React?",
        "o": [
            "Each file can have only one default export",
            "You can have multiple default exports in one file",
            "Default exports cannot be imported in another file",
            "Default exports must always be functions"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const letters = ['a', 'b', 'c'];\nconst element = <span>{letters[0].toUpperCase()}</span>;",
        "o": [
            "<span>A</span>",
            "<span>a</span>",
            "<span>letters[0]</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about functional components returning JSX?",
        "o": [
            "They must return a single element or a fragment",
            "They can return multiple sibling elements without wrapping",
            "They cannot return null",
            "They must return a string only"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function RepeatText({ text }) {\n  return <p>{text.repeat(3)}</p>;\n}\n\nconst element = <RepeatText text=\"Hi\" />;",
        "o": [
            "<p>HiHiHi</p>",
            "<p>Hi</p>",
            "<p>text</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React component props?",
        "o": [
            "Props are read-only and cannot be modified by the child component",
            "Props are mutable inside the child component",
            "Props can only be numbers",
            "Props cannot be passed to functional components"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <h1>{5 + 10 > 12 ? 'Yes' : 'No'}</h1>;",
        "o": [
            "<h1>Yes</h1>",
            "<h1>No</h1>",
            "<h1>5+10</h1>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about using arrays in JSX?",
        "o": [
            "You can map over arrays and return JSX elements",
            "Arrays cannot be used inside JSX",
            "You must convert arrays to strings manually before rendering",
            "JSX automatically flattens arrays of strings only"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function FirstLetter({ word }) {\n  return <span>{word[0]}</span>;\n}\n\nconst element = <FirstLetter word=\"React\" />;",
        "o": [
            "<span>R</span>",
            "<span>e</span>",
            "<span>word</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about `React.StrictMode`?",
        "o": [
            "It helps identify potential problems in an application during development",
            "It is required in production builds",
            "It automatically optimizes the app performance",
            "It is only used in class components"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ConcatNumbers({ a, b }) {\n  return <p>{'' + a + b}</p>;\n}\n\nconst element = <ConcatNumbers a={3} b={4} />;",
        "o": [
            "<p>34</p>",
            "<p>7</p>",
            "<p>a+b</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about using expressions in JSX?",
        "o": [
            "You can include any valid JavaScript expression inside curly braces",
            "Expressions must always be strings",
            "Expressions cannot include arithmetic operations",
            "Expressions must be defined outside the component"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <h2>{true && 'Visible'}</h2>;",
        "o": [
            "<h2>Visible</h2>",
            "<h2>true</h2>",
            "<h2>false</h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX keys?",
        "o": [
            "Keys help React identify elements in a list to optimize rendering",
            "Keys are optional and have no effect",
            "Keys must always be numbers",
            "Keys should always be unique across the entire application"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Greet({ first, last }) {\n  return <h1>{`${first} ${last}`}</h1>;\n}\n\nconst element = <Greet first=\"Jane\" last=\"Doe\" />;",
        "o": [
            "<h1>Jane Doe</h1>",
            "<h1>Jane</h1>",
            "<h1>Doe</h1>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about `ReactDOM.createRoot`?",
        "o": [
            "It is used in React 18+ to create a root for rendering components",
            "It is used to create HTML elements directly",
            "It replaces the need for `React` imports",
            "It can only be used in functional components"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const arr = [1, 2, 3];\nconst element = <p>{arr.map(n => n + 1).join(',')}</p>;",
        "o": [
            "<p>2,3,4</p>",
            "<p>1,2,3</p>",
            "<p>123</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about fragments in JSX?",
        "o": [
            "Fragments allow grouping multiple elements without adding extra DOM nodes",
            "Fragments must always be written as `<div>`",
            "Fragments can only be used in class components",
            "Fragments are automatically added to every component"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowLastChar({ word }) {\n  return <span>{word[word.length - 1]}</span>;\n}\n\nconst element = <ShowLastChar word=\"React\" />;",
        "o": [
            "<span>t</span>",
            "<span>R</span>",
            "<span>c</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about `React.Fragment`?",
        "o": [
            "It can be used to wrap multiple elements without adding extra DOM nodes",
            "It must always have a `key` attribute",
            "It can only contain one child element",
            "It replaces the need for a root element in index.html"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function Triple({ n }) {\n  return <p>{n * 3}</p>;\n}\n\nconst element = <Triple n={7} />;",
        "o": [
            "<p>21</p>",
            "<p>10</p>",
            "<p>77</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about the `src` folder in CRA?",
        "o": [
            "It contains all source code including components and CSS",
            "It only contains the index.html file",
            "It is automatically ignored during builds",
            "It cannot include images or static assets"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowEven({ numbers }) {\n  return <p>{numbers.filter(n => n % 2 === 0).join(',')}</p>;\n}\n\nconst element = <ShowEven numbers={[1,2,3,4]} />;",
        "o": [
            "<p>2,4</p>",
            "<p>1,3</p>",
            "<p>1,2,3,4</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX and expressions?",
        "o": [
            "Curly braces `{}` are used to embed expressions inside JSX",
            "JSX cannot include JavaScript expressions",
            "All JSX content must be wrapped in quotes",
            "Expressions must be defined outside the component"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function FirstTwo({ arr }) {\n  return <span>{arr.slice(0,2).join('-')}</span>;\n}\n\nconst element = <FirstTwo arr={['A','B','C']} />;",
        "o": [
            "<span>A-B</span>",
            "<span>A-B-C</span>",
            "<span>B-C</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about `React.StrictMode`?",
        "o": [
            "It activates additional checks and warnings for its descendants in development mode",
            "It improves performance automatically in production",
            "It replaces `ReactDOM.render`",
            "It is required for functional components to work"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <h2>{5 > 10 ? 'Yes' : 'No'}</h2>;",
        "o": [
            "<h2>No</h2>",
            "<h2>Yes</h2>",
            "<h2>false</h2>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about importing components in React?",
        "o": [
            "You can import default and named exports from other files",
            "Components cannot be imported from separate files",
            "Only functional components can be imported",
            "Only class components can be imported"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ConcatArray({ arr }) {\n  return <p>{arr.join(' ')}</p>;\n}\n\nconst element = <ConcatArray arr={['React','JSX']} />;",
        "o": [
            "<p>React JSX</p>",
            "<p>ReactJSX</p>",
            "<p>arr</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about using expressions in JSX attributes?",
        "o": [
            "You can pass JavaScript expressions inside curly braces for attributes",
            "JSX attributes can only accept strings",
            "Expressions must be wrapped in quotes for attributes",
            "Attributes cannot accept variables"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowThird({ arr }) {\n  return <p>{arr[2]}</p>;\n}\n\nconst element = <ShowThird arr={[10,20,30,40]} />;",
        "o": [
            "<p>30</p>",
            "<p>20</p>",
            "<p>40</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about React component files in CRA?",
        "o": [
            "Each component is usually in its own file for reusability",
            "All components must be in `index.js`",
            "Components cannot be split into separate files",
            "Only class components can be in separate files"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const nums = [2,4,6];\nconst element = <h3>{nums.reduce((a,b) => a+b,0)}</h3>;",
        "o": [
            "<h3>12</h3>",
            "<h3>246</h3>",
            "<h3>0</h3>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about functional components returning null?",
        "o": [
            "Returning null renders nothing to the DOM",
            "Returning null causes an error",
            "Returning null renders an empty div automatically",
            "Returning null converts the component to a class component"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowUpper({ word }) {\n  return <span>{word.charAt(0).toUpperCase()}</span>;\n}\n\nconst element = <ShowUpper word=\"react\" />;",
        "o": [
            "<span>R</span>",
            "<span>r</span>",
            "<span>react</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX and comments inside return statements?",
        "o": [
            "Comments must be wrapped in curly braces with /* */",
            "Comments can use // directly inside JSX",
            "Comments can use <!-- --> inside JSX",
            "JSX does not support comments at all"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <h4>{3 + 7 > 5 ? 'Pass' : 'Fail'}</h4>;",
        "o": [
            "<h4>Pass</h4>",
            "<h4>Fail</h4>",
            "<h4>10</h4>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about dynamic content in JSX?",
        "o": [
            "Curly braces allow embedding variables, functions, and expressions",
            "Dynamic content is not allowed inside JSX",
            "Only strings can be dynamic in JSX",
            "Variables must be converted to strings first"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowSquare({ n }) {\n  return <p>{n * n}</p>;\n}\n\nconst element = <ShowSquare n={9} />;",
        "o": [
            "<p>81</p>",
            "<p>18</p>",
            "<p>99</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about conditional rendering in JSX?",
        "o": [
            "You can use ternary operators or logical AND (&&) inside JSX",
            "You can use if statements directly inside JSX",
            "Conditional rendering is not possible in functional components",
            "You must create separate components for all conditions"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowFirst({ arr }) {\n  return <p>{arr[0]}</p>;\n}\n\nconst element = <ShowFirst arr={['React','JSX','DOM']} />;",
        "o": [
            "<p>React</p>",
            "<p>JSX</p>",
            "<p>DOM</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about using expressions in JSX text content?",
        "o": [
            "You can include numbers, strings, and expressions inside curly braces",
            "You can only include strings inside curly braces",
            "Numbers must be converted to strings manually",
            "Expressions cannot be used inside JSX text"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <h1>{'Hello'.toLowerCase()}</h1>;",
        "o": [
            "<h1>hello</h1>",
            "<h1>Hello</h1>",
            "<h1>HELLO</h1>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about passing functions as props?",
        "o": [
            "Functions can be passed as props to child components",
            "Functions cannot be passed as props",
            "Only arrow functions can be passed as props",
            "Functions must always be bound in the parent component"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowLength({ str }) {\n  return <span>{str.length}</span>;\n}\n\nconst element = <ShowLength str=\"ReactJS\" />;",
        "o": [
            "<span>7</span>",
            "<span>6</span>",
            "<span>ReactJS</span>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about JSX and boolean values?",
        "o": [
            "false, null, and undefined do not render anything in JSX",
            "true renders the string 'true' in JSX",
            "false renders 'false' as text in JSX",
            "null and undefined cause an error in JSX"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "const element = <p>{['React','JSX'].includes('JSX') ? 'Yes' : 'No'}</p>;",
        "o": [
            "<p>Yes</p>",
            "<p>No</p>",
            "<p>JSX</p>",
            "undefined"
        ]
    },
    {
        "q": "Which of the following is true about nesting components in React?",
        "o": [
            "Components can be nested inside other components by including them as JSX elements",
            "Components cannot be nested in functional components",
            "Components must be nested using HTML tags only",
            "Nesting components automatically passes props"
        ]
    },
    {
        "q": "What will the following JSX render?",
        "c": "function ShowDouble({ num }) {\n  return <span>{num * 2}</span>;\n}\n\nconst element = <ShowDouble num={11} />;",
        "o": [
            "<span>22</span>",
            "<span>11</span>",
            "<span>num*2</span>",
            "undefined"
        ]
    },
    {
        "q": "Which command is used to create a new React application using Create React App?",
        "o": [
            "npx create-react-app my-app",
            "npm install create-react-app my-app",
            "npm start create-react-app my-app",
            "npx install react-app my-app"
        ]
    },
    {
        "q": "Which of the following is NOT true about JSX in React?",
        "o": [
            "JSX can directly be used by browsers without transpilation",
            "JSX allows embedding expressions inside curly braces {}",
            "JSX looks similar to HTML but can represent React elements",
            "JSX requires Babel to compile into JavaScript"
        ]
    },
    {
        "q": "What will happen when you run the following React code snippet?",
        "c": "const element = <h1>Hello, world!</h1>;\nReactDOM.render(element, document.getElementById('root'));",
        "o": [
            "It will render 'Hello, world!' inside the element with id 'root'",
            "It will throw an error because JSX cannot be rendered directly",
            "It will render nothing to the DOM",
            "It will crash because ReactDOM is undefined"
        ]
    },
    {
        "q": "Which of the following is the correct way to define a functional component in React?",
        "o": [
            "function Welcome() { return <h1>Hello</h1>; }",
            "component Welcome() { return <h1>Hello</h1>; }",
            "React.createComponent('Welcome', () => <h1>Hello</h1>)",
            "const Welcome = new Component(() => <h1>Hello</h1>)"
        ]
    },
    {
        "q": "What is the main difference between a React element and a React component?",
        "o": [
            "Elements are plain objects describing what to render, while components are functions or classes that return elements",
            "Elements and components are exactly the same",
            "Elements must always be created with JSX, while components cannot use JSX",
            "Components can only be written as classes, not functions"
        ]
    },
    {
        "q": "What will be the result of rendering the following component?",
        "c": "function Greeting() {\n  return <div>{5 + 5}</div>;\n}\n\nReactDOM.render(<Greeting />, document.getElementById('root'));",
        "o": [
            "A div containing the number 10",
            "A div containing the text '5 + 5'",
            "An error because numbers cannot be rendered in JSX",
            "Nothing will be displayed"
        ]
    },
    {
        "q": "Which of the following statements about Create React App (CRA) is correct?",
        "o": [
            "It sets up a modern React project with a preconfigured build system",
            "It only works for React Native projects",
            "It automatically generates Redux state management",
            "It does not support JSX by default"
        ]
    },
    {
        "q": "Which of the following JSX expressions is valid?",
        "o": [
            "const element = <h1>{'Hello ' + 'World'}</h1>;",
            "const element = <h1>{if(true) { 'Yes' }}</h1>;",
            "const element = <h1>{function() { return 'Hello'; }}</h1>;",
            "const element = <h1>{let x = 5; x}</h1>;"
        ]
    },
    {
        "q": "When rendering a React component, which syntax is correct?",
        "o": [
            "ReactDOM.render(<App />, document.getElementById('root'));",
            "ReactDOM.render(App, document.getElementById('root'));",
            "ReactDOM.render(<App>, 'root');",
            "React.render(App(), 'root');"
        ]
    },
    {
        "q": "What will be rendered by the following code?",
        "c": "function Display() {\n  const name = 'React';\n  return <h2>{name.toUpperCase()}</h2>;\n}\n\nReactDOM.render(<Display />, document.getElementById('root'));",
        "o": [
            "A heading with the text 'REACT'",
            "A heading with the text 'React'",
            "A heading with the text 'react'",
            "An error because toUpperCase cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following is the correct folder structure automatically generated by Create React App?",
        "o": [
            "public/ and src/ directories",
            "dist/ and build/ directories only",
            "lib/ and components/ directories",
            "node/ and assets/ directories"
        ]
    },
    {
        "q": "What will happen if you forget to import React in a file where JSX is used (before React 17)?",
        "o": [
            "The code will throw an error because JSX requires React in scope",
            "The JSX will still work fine without importing React",
            "It will automatically import React behind the scenes",
            "It will render JSX as plain text instead of elements"
        ]
    },
    {
        "q": "Which of the following JSX snippets is invalid?",
        "o": [
            "const el = <h1 className=\"title\">Hello</h1>;",
            "const el = <input type=\"text\" />;",
            "const el = <label for=\"name\">Name</label>;",
            "const el = <button disabled={true}>Click</button>;"
        ]
    },
    {
        "q": "What is the correct way to render multiple elements without adding extra nodes to the DOM?",
        "o": [
            "Using React Fragments <>...</>",
            "Wrapping them in a <div>",
            "Returning them as an array",
            "Placing them inside <span> elements"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Calc() {\n  return <p>{2 * 3 + 4}</p>;\n}\n\nReactDOM.render(<Calc />, document.getElementById('root'));",
        "o": [
            "A paragraph with the number 10",
            "A paragraph with the text '2 * 3 + 4'",
            "An error due to invalid expression in JSX",
            "Nothing will be displayed"
        ]
    },
    {
        "q": "Which of the following is NOT a valid rule about React components?",
        "o": [
            "Component names must always start with a lowercase letter",
            "Components must return a single root element",
            "Functional components can use hooks",
            "Components can accept props as input"
        ]
    },
    {
        "q": "What is the output of the following React code?",
        "c": "function Show() {\n  const items = ['A', 'B'];\n  return <ul>{items.map(i => <li>{i}</li>)}</ul>;\n}\n\nReactDOM.render(<Show />, document.getElementById('root'));",
        "o": [
            "A list with two items: A and B",
            "An error because map cannot be used in JSX",
            "An unordered list with no items",
            "Plain text 'A,B' without list tags"
        ]
    },
    {
        "q": "Which command should be run after creating a project with Create React App to start the development server?",
        "o": [
            "npm start",
            "npm build",
            "npm run dev-server",
            "npx react-start"
        ]
    },
    {
        "q": "Which of the following statements about JSX is correct?",
        "o": [
            "JSX allows embedding JavaScript expressions inside curly braces {}",
            "JSX does not allow any dynamic content",
            "JSX must always use single quotes for attributes",
            "JSX compiles directly into HTML"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Message() {\n  const msg = null;\n  return <div>{msg}</div>;\n}\n\nReactDOM.render(<Message />, document.getElementById('root'));",
        "o": [
            "An empty <div>",
            "A div with the text 'null'",
            "A runtime error",
            "Nothing will be rendered at all"
        ]
    },
    {
        "q": "Which of the following files is the main entry point of a React application created with Create React App?",
        "o": [
            "src/index.js",
            "src/App.js",
            "public/index.html",
            "package.json"
        ]
    },
    {
        "q": "What is the correct way to embed a JavaScript variable inside JSX?",
        "o": [
            "Using curly braces {}",
            "Using double quotes \"\"",
            "Using backticks ``",
            "Using square brackets []"
        ]
    },
    {
        "q": "What will be the output of the following React code?",
        "c": "function ShowName() {\n  const name = 'React';\n  return <p>{`Hello, ${name}`}</p>;\n}\n\nReactDOM.render(<ShowName />, document.getElementById('root'));",
        "o": [
            "A paragraph with the text 'Hello, React'",
            "A paragraph with the text 'Hello, ${name}'",
            "An error because template literals are not allowed in JSX",
            "Nothing will be rendered"
        ]
    },
    {
        "q": "Which attribute is used in JSX to apply CSS classes to elements?",
        "o": [
            "className",
            "class",
            "cssClass",
            "styleClass"
        ]
    },
    {
        "q": "What happens when ReactDOM.render() is called with an element?",
        "o": [
            "It updates the DOM to match the React element",
            "It converts JSX into plain HTML directly",
            "It only creates a virtual DOM but does not update the real DOM",
            "It executes the component but does not render anything"
        ]
    },
    {
        "q": "What will the following component display?",
        "c": "function Numbers() {\n  return <div>{[1, 2, 3]}</div>;\n}\n\nReactDOM.render(<Numbers />, document.getElementById('root'));",
        "o": [
            "A div with '123'",
            "A div with '1,2,3'",
            "An error because arrays cannot be rendered",
            "An empty div"
        ]
    },
    {
        "q": "Which of the following best describes functional components in React?",
        "o": [
            "They are JavaScript functions that return React elements",
            "They are classes that extend React.Component",
            "They are functions that directly manipulate the DOM",
            "They can only return plain strings instead of JSX"
        ]
    },
    {
        "q": "What will be rendered by the following React code?",
        "c": "function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nReactDOM.render(<Welcome name=\"Alice\" />, document.getElementById('root'));",
        "o": [
            "A heading with the text 'Hello, Alice'",
            "A heading with the text 'Hello, {props.name}'",
            "An error because props cannot be used in functional components",
            "Nothing will be displayed"
        ]
    },
    {
        "q": "Which of the following is true about JSX?",
        "o": [
            "JSX tags must have exactly one parent element",
            "JSX allows multiple sibling elements without wrapping",
            "JSX compiles directly into HTML elements",
            "JSX is optional and not supported in React"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function BooleanRender() {\n  return <div>{true}</div>;\n}\n\nReactDOM.render(<BooleanRender />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div containing 'true'",
            "A div containing '1'",
            "An error because booleans cannot be rendered in JSX"
        ]
    },
    {
        "q": "Which command is used to build a production-ready React application in Create React App?",
        "o": [
            "npm run build",
            "npm run start",
            "npm run dev",
            "npx build-react"
        ]
    },
    {
        "q": "What will the following JSX code produce?",
        "c": "const element = <img src=\"logo.png\" alt=\"Logo\" />;\nReactDOM.render(element, document.getElementById('root'));",
        "o": [
            "An image with source logo.png and alt text 'Logo'",
            "Plain text '<img src=\"logo.png\" alt=\"Logo\" />'",
            "Nothing will be displayed",
            "An error because img must be closed with </img>"
        ]
    },
    {
        "q": "Which of the following is true about rendering elements in React?",
        "o": [
            "React updates only the parts of the DOM that change",
            "Every render replaces the entire DOM tree",
            "Elements once rendered cannot be updated",
            "React does not compare old and new elements"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Double() {\n  return <h2>{2 ** 3}</h2>;\n}\n\nReactDOM.render(<Double />, document.getElementById('root'));",
        "o": [
            "A heading with the number 8",
            "A heading with the text '2 ** 3'",
            "A heading with the number 6",
            "An error because ** is not supported in JSX"
        ]
    },
    {
        "q": "Which of the following correctly demonstrates a self-closing JSX tag?",
        "o": [
            "<input />",
            "<input></input>",
            "<input></input />",
            "<input /> </input>"
        ]
    },
    {
        "q": "What happens if you try to return multiple JSX elements from a component without wrapping them?",
        "o": [
            "It will throw a syntax error",
            "React will automatically wrap them in a div",
            "It will render them side by side",
            "It will ignore all but the first element"
        ]
    },
    {
        "q": "What will the following component display?",
        "c": "function ArrayJoin() {\n  const arr = ['React', 'JSX'];\n  return <p>{arr.join(' - ')}</p>;\n}\n\nReactDOM.render(<ArrayJoin />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'React - JSX'",
            "A paragraph with 'React,JSX'",
            "An error because join() cannot be used in JSX",
            "Nothing will be rendered"
        ]
    },
    {
        "q": "Which of the following is NOT true about functional components?",
        "o": [
            "They cannot use lifecycle methods like componentDidMount",
            "They must extend React.Component",
            "They can accept props as arguments",
            "They can use hooks for state and side effects"
        ]
    },
    {
        "q": "What is the purpose of the public/index.html file in a Create React App project?",
        "o": [
            "It serves as the template where React components are injected",
            "It contains the entire React application logic",
            "It defines global CSS for React components",
            "It lists all dependencies of the project"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NullRender() {\n  return null;\n}\n\nReactDOM.render(<NullRender />, document.getElementById('root'));",
        "o": [
            "Nothing will be rendered",
            "A div with the text 'null'",
            "An empty div",
            "It will throw a runtime error"
        ]
    },
    {
        "q": "Which command is used to install dependencies after creating a React app with Create React App?",
        "o": [
            "npm install",
            "npm run build",
            "npm init react-app",
            "npx install react"
        ]
    },
    {
        "q": "Which of the following is a correct JSX comment?",
        "o": [
            "{/* This is a comment */}",
            "// This is a comment",
            "<!-- This is a comment -->",
            "{// This is a comment}"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Logic() {\n  const show = false;\n  return <h1>{show && 'Hello'}</h1>;\n}\n\nReactDOM.render(<Logic />, document.getElementById('root'));",
        "o": [
            "An empty <h1>",
            "A heading with 'Hello'",
            "A heading with 'false'",
            "Nothing will be rendered at all"
        ]
    },
    {
        "q": "Which of the following correctly describes the role of ReactDOM?",
        "o": [
            "It renders React elements into the actual DOM",
            "It manages the component state",
            "It handles routing between pages",
            "It provides hooks for functional components"
        ]
    },
    {
        "q": "What will the following JSX expression produce?",
        "c": "const el = <h2>{10 > 5 ? 'Yes' : 'No'}</h2>;\nReactDOM.render(el, document.getElementById('root'));",
        "o": [
            "A heading with 'Yes'",
            "A heading with 'No'",
            "An error because ternary operators are not allowed in JSX",
            "Nothing will be rendered"
        ]
    },
    {
        "q": "Which of the following is true about React elements?",
        "o": [
            "They are immutable",
            "They can be directly modified after creation",
            "They are stored in the DOM",
            "They are the same as components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Mixed() {\n  return <div>{['A', 5, true, null]}</div>;\n}\n\nReactDOM.render(<Mixed />, document.getElementById('root'));",
        "o": [
            "A div with 'A5'",
            "A div with 'A5truenull'",
            "A div with 'A,5,true,null'",
            "An error because arrays cannot contain mixed types"
        ]
    },
    {
        "q": "Which of the following is NOT a feature of Create React App?",
        "o": [
            "Automatic setup of Webpack and Babel",
            "Built-in development server",
            "Preconfigured ESLint rules",
            "Built-in support for Redux out of the box"
        ]
    },
    {
        "q": "What will be rendered by the following code?",
        "c": "function InlineStyle() {\n  return <p style={{color: 'red', fontSize: '20px'}}>Styled</p>;\n}\n\nReactDOM.render(<InlineStyle />, document.getElementById('root'));",
        "o": [
            "A red paragraph with font size 20px containing 'Styled'",
            "A paragraph with no styles applied",
            "An error because style must be a string in JSX",
            "An error because fontSize must be written as 'font-size'"
        ]
    },
    {
        "q": "Which of the following is correct about JSX attributes?",
        "o": [
            "They use camelCase naming (e.g., onClick, tabIndex)",
            "They must always use lowercase names like HTML",
            "They cannot accept dynamic values",
            "They must always be written inside single quotes"
        ]
    },
    {
        "q": "Which of the following scripts is automatically added in package.json by Create React App?",
        "o": [
            "\"start\", \"build\", \"test\", \"eject\"",
            "\"dev\", \"prod\", \"lint\"",
            "\"compile\", \"deploy\"",
            "\"run\", \"watch\""
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Condition() {\n  const loggedIn = true;\n  return <div>{loggedIn ? 'Welcome' : 'Please log in'}</div>;\n}\n\nReactDOM.render(<Condition />, document.getElementById('root'));",
        "o": [
            "A div with 'Welcome'",
            "A div with 'Please log in'",
            "Nothing will be displayed",
            "An error due to ternary usage in JSX"
        ]
    },
    {
        "q": "Which of the following is the correct way to include JavaScript expressions inside JSX?",
        "o": [
            "Wrap them in curly braces {}",
            "Wrap them in parentheses ()",
            "Wrap them in quotes \"\"",
            "Wrap them in angle brackets <>"
        ]
    },
    {
        "q": "What will the following code output?",
        "c": "function MathOp() {\n  return <p>{(4 + 6) / 2}</p>;\n}\n\nReactDOM.render(<MathOp />, document.getElementById('root'));",
        "o": [
            "A paragraph with '5'",
            "A paragraph with '10/2'",
            "A paragraph with '4 + 6 / 2'",
            "An error because division cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following best describes JSX?",
        "o": [
            "It is a syntax extension that allows writing HTML-like code inside JavaScript",
            "It is an HTML preprocessor used by browsers",
            "It is a template engine built into React",
            "It is a CSS styling language"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function EmptyString() {\n  return <div>{''}</div>;\n}\n\nReactDOM.render(<EmptyString />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div with the text ''",
            "An error because empty strings cannot be used in JSX",
            "Nothing at all will render"
        ]
    },
    {
        "q": "Which of the following is true about rendering in React?",
        "o": [
            "Rendering the same element multiple times will update it in place",
            "Every call to render duplicates the element in the DOM",
            "Render must always remove the previous element",
            "Render can only be called once per page"
        ]
    },
    {
        "q": "What will be displayed by the following code?",
        "c": "function BoolTest() {\n  return <span>{false}</span>;\n}\n\nReactDOM.render(<BoolTest />, document.getElementById('root'));",
        "o": [
            "An empty span",
            "A span containing 'false'",
            "Nothing at all will render",
            "An error because JSX does not support booleans"
        ]
    },
    {
        "q": "Which of the following statements about Create React App is true?",
        "o": [
            "It hides the build configuration until you run 'npm run eject'",
            "It requires you to manually configure Webpack and Babel before use",
            "It is only for server-side rendering of React apps",
            "It does not support JSX by default"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Nested() {\n  return (\n    <div>\n      <h1>{'Hello'}</h1>\n      <p>{'World'}</p>\n    </div>\n  );\n}\n\nReactDOM.render(<Nested />, document.getElementById('root'));",
        "o": [
            "A div with a heading 'Hello' and a paragraph 'World'",
            "Only the heading 'Hello'",
            "Only the paragraph 'World'",
            "An error because JSX cannot have multiple child elements"
        ]
    },
    {
        "q": "Which of the following correctly explains the role of Babel in a React project?",
        "o": [
            "It transpiles JSX into plain JavaScript that browsers can understand",
            "It renders React elements to the DOM",
            "It bundles JavaScript files into one",
            "It optimizes images and static assets"
        ]
    },
    {
        "q": "What will the following code render?",
        "c": "function InlineJS() {\n  const x = 7;\n  const y = 3;\n  return <h2>{x % y}</h2>;\n}\n\nReactDOM.render(<InlineJS />, document.getElementById('root'));",
        "o": [
            "A heading with '1'",
            "A heading with '7 % 3'",
            "An error because modulo cannot be used in JSX",
            "Nothing will be rendered"
        ]
    },
    {
        "q": "Which of the following is true about JSX attributes?",
        "o": [
            "Boolean attributes can be written as just the name, e.g. <input disabled />",
            "Attributes must always be strings",
            "You cannot use expressions inside attribute values",
            "Attributes must always be written in uppercase"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function FragmentTest() {\n  return (\n    <>\n      <h1>Title</h1>\n      <p>Paragraph</p>\n    </>\n  );\n}\n\nReactDOM.render(<FragmentTest />, document.getElementById('root'));",
        "o": [
            "A heading 'Title' and a paragraph 'Paragraph' without extra wrapper",
            "An error because <> </> is invalid JSX",
            "A heading 'Title' only",
            "A paragraph 'Paragraph' only"
        ]
    },
    {
        "q": "Which file inside the public folder is essential for a Create React App project?",
        "o": [
            "index.html",
            "favicon.ico",
            "manifest.json",
            "robots.txt"
        ]
    },
    {
        "q": "What will the following component display?",
        "c": "function EscapeTest() {\n  return <div>{\"<p>Text</p>\"}</div>;\n}\n\nReactDOM.render(<EscapeTest />, document.getElementById('root'));",
        "o": [
            "A div containing the text '<p>Text</p>'",
            "A paragraph with the text 'Text'",
            "An error because angle brackets cannot be used in JSX strings",
            "Nothing will be displayed"
        ]
    },
    {
        "q": "Which of the following correctly describes the Virtual DOM?",
        "o": [
            "A lightweight copy of the real DOM used for efficient updates",
            "A complete duplicate of the real DOM stored in memory",
            "A feature that automatically generates HTML templates",
            "A server-side rendering engine for React"
        ]
    },
    {
        "q": "What will the following code render?",
        "c": "function Nesting() {\n  const el = <strong>Bold</strong>;\n  return <div>{el}</div>;\n}\n\nReactDOM.render(<Nesting />, document.getElementById('root'));",
        "o": [
            "A div containing bold text 'Bold'",
            "A div containing the string '<strong>Bold</strong>'",
            "Nothing will render",
            "An error because JSX cannot be stored in a variable"
        ]
    },
    {
        "q": "Which of the following is NOT a valid feature of functional components?",
        "o": [
            "They can maintain state using setState() without hooks",
            "They can accept props as input",
            "They can return fragments instead of wrapping divs",
            "They can use hooks such as useState and useEffect"
        ]
    },
    {
        "q": "What will be rendered by the following component?",
        "c": "function Expression() {\n  return <h3>{[1, 2, 3].map(n => n * 2).join(', ')}</h3>;\n}\n\nReactDOM.render(<Expression />, document.getElementById('root'));",
        "o": [
            "A heading with '2, 4, 6'",
            "A heading with '123123'",
            "A heading with 'n * 2'",
            "An error because map() cannot be used inside JSX"
        ]
    },
    {
        "q": "Which of the following correctly describes how React updates the UI?",
        "o": [
            "It compares the new Virtual DOM with the previous one and updates only changed parts",
            "It re-renders the entire DOM tree from scratch",
            "It directly modifies the real DOM without comparison",
            "It uses inline JavaScript to update HTML strings"
        ]
    },
    {
        "q": "What will the following code render?",
        "c": "function Concat() {\n  const a = 'React';\n  const b = 'JSX';\n  return <p>{a + ' ' + b}</p>;\n}\n\nReactDOM.render(<Concat />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'React JSX'",
            "A paragraph with 'ReactJSX'",
            "A paragraph with 'a + b'",
            "An error because string concatenation is not allowed in JSX"
        ]
    },
    {
        "q": "Which of the following is the correct way to render a component named Header?",
        "o": [
            "<Header />",
            "<header />",
            "Header()",
            "ReactDOM.render(Header)"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Arithmetic() {\n  return <h4>{(3 + 2) * (4 - 1)}</h4>;\n}\n\nReactDOM.render(<Arithmetic />, document.getElementById('root'));",
        "o": [
            "A heading with '15'",
            "A heading with '5 * 3'",
            "An error because parentheses cannot be used in JSX",
            "Nothing will render"
        ]
    },
    {
        "q": "Which of the following is true about props in functional components?",
        "o": [
            "Props are read-only inside the component",
            "Props can be reassigned to update their value",
            "Props are automatically converted into state variables",
            "Props must always be numbers or strings"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Uppercase() {\n  const word = 'jsx';\n  return <span>{word.toUpperCase()}</span>;\n}\n\nReactDOM.render(<Uppercase />, document.getElementById('root'));",
        "o": [
            "A span with 'JSX'",
            "A span with 'jsx'",
            "A span with 'word.toUpperCase()'",
            "An error because toUpperCase() is not allowed in JSX"
        ]
    },
    {
        "q": "Which of the following correctly explains the difference between elements and components?",
        "o": [
            "Elements describe what to render, while components are reusable pieces of UI logic",
            "Elements are always dynamic, while components are static",
            "Components cannot use JSX, while elements require JSX",
            "Elements must always be classes, while components are functions"
        ]
    },
    {
        "q": "What will the following code display?",
        "c": "function NullChild() {\n  return <div>{null}{'Text'}</div>;\n}\n\nReactDOM.render(<NullChild />, document.getElementById('root'));",
        "o": [
            "A div with 'Text'",
            "A div with 'nullText'",
            "An empty div",
            "An error because null cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following is true about JSX?",
        "o": [
            "JSX expressions can include any valid JavaScript expression inside curly braces",
            "JSX expressions can include control statements like if or for directly",
            "JSX expressions must always be written in quotes",
            "JSX can only include strings and numbers, not arrays"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ListExample() {\n  const arr = [10, 20, 30];\n  return <ul>{arr.map(n => <li key={n}>{n}</li>)}</ul>;\n}\n\nReactDOM.render(<ListExample />, document.getElementById('root'));",
        "o": [
            "An unordered list with items 10, 20, and 30",
            "An error because map() cannot be used in JSX",
            "An unordered list with no items",
            "Plain text '10,20,30'"
        ]
    },
    {
        "q": "Which of the following correctly describes the purpose of React.StrictMode?",
        "o": [
            "It highlights potential problems in an application during development",
            "It prevents components from re-rendering unnecessarily",
            "It compiles JSX into optimized JavaScript",
            "It enforces strict type checking of props"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function MathExpr() {\n  return <h2>{(12 / 4) + (2 * 3)}</h2>;\n}\n\nReactDOM.render(<MathExpr />, document.getElementById('root'));",
        "o": [
            "A heading with '9'",
            "A heading with '12/4 + 2*3'",
            "A heading with '18'",
            "An error due to multiple operations in JSX"
        ]
    },
    {
        "q": "Which of the following is true about React functional components?",
        "o": [
            "They can use hooks like useState to manage state",
            "They must always be written as ES6 classes",
            "They cannot accept props as input",
            "They must return exactly one string"
        ]
    },
    {
        "q": "What will the following code display?",
        "c": "function ConcatArray() {\n  const items = ['A', 'B'];\n  return <p>{items.concat('C').join('-')}</p>;\n}\n\nReactDOM.render(<ConcatArray />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'A-B-C'",
            "A paragraph with 'A,B,C'",
            "An error because concat() is not allowed in JSX",
            "Nothing will be rendered"
        ]
    },
    {
        "q": "Which of the following is true about the 'root' element in public/index.html?",
        "o": [
            "It is the mounting point where React renders the application",
            "It contains all the JavaScript logic of the React app",
            "It automatically loads all components at startup",
            "It defines the build configuration for the project"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function TernaryTest() {\n  const val = 0;\n  return <div>{val ? 'Yes' : 'No'}</div>;\n}\n\nReactDOM.render(<TernaryTest />, document.getElementById('root'));",
        "o": [
            "A div with 'No'",
            "A div with 'Yes'",
            "A div with '0'",
            "An error because ternary cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following statements about JSX syntax is correct?",
        "o": [
            "All JSX tags must be properly closed",
            "JSX allows unclosed tags like <br>",
            "JSX requires every attribute value to be a string",
            "JSX elements can only contain text, not other elements"
        ]
    },
    {
        "q": "What will the following code render?",
        "c": "function NestedArray() {\n  const nums = [[1, 2], [3, 4]];\n  return <div>{nums.map(pair => pair.join(','))}</div>;\n}\n\nReactDOM.render(<NestedArray />, document.getElementById('root'));",
        "o": [
            "A div with '1,23,4'",
            "A div with '1, 2 3, 4'",
            "Plain text '1,2,3,4'",
            "An error because nested arrays cannot be mapped in JSX"
        ]
    },
    {
        "q": "Which of the following is NOT true about Create React App?",
        "o": [
            "It comes with built-in Webpack and Babel configuration",
            "It automatically sets up a development server",
            "It provides production-ready optimizations",
            "It includes server-side rendering out of the box"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function RenderBool() {\n  return <p>{true ? 'Visible' : 'Hidden'}</p>;\n}\n\nReactDOM.render(<RenderBool />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'Visible'",
            "A paragraph with 'Hidden'",
            "A paragraph with 'true'",
            "An error because booleans cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following correctly explains why keys are important in rendering lists in React?",
        "o": [
            "They help React identify which items have changed, been added, or removed",
            "They are required to style list items with CSS",
            "They prevent errors when mapping arrays in JSX",
            "They automatically sort the list items"
        ]
    },
    {
        "q": "What will the following code render?",
        "c": "function Addition() {\n  const a = 4, b = 6;\n  return <h1>{a + b}</h1>;\n}\n\nReactDOM.render(<Addition />, document.getElementById('root'));",
        "o": [
            "A heading with '10'",
            "A heading with '4+6'",
            "Nothing will render",
            "An error because addition cannot be done in JSX"
        ]
    },
    {
        "q": "Which of the following is true about component naming in React?",
        "o": [
            "Component names must start with an uppercase letter",
            "Component names must always be lowercase",
            "Component names can be numbers",
            "Component names must match HTML tag names"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function LogicExpr() {\n  return <p>{(5 > 3) && 'Yes'}</p>;\n}\n\nReactDOM.render(<LogicExpr />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'Yes'",
            "A paragraph with 'true'",
            "Nothing will render",
            "An error because && cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following describes how ReactDOM.render works?",
        "o": [
            "It takes a React element and renders it into the DOM container",
            "It takes HTML code and converts it into JSX",
            "It compiles React components into JavaScript",
            "It creates a new virtual DOM tree without touching the real DOM"
        ]
    },
    {
        "q": "What will the following code output?",
        "c": "function TemplateLiteral() {\n  const x = 2, y = 3;\n  return <h2>{`${x} + ${y} = ${x + y}`}</h2>;\n}\n\nReactDOM.render(<TemplateLiteral />, document.getElementById('root'));",
        "o": [
            "A heading with '2 + 3 = 5'",
            "A heading with '${x} + ${y} = ${x + y}'",
            "A heading with 'x + y = 5'",
            "An error because template literals cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following correctly describes React elements?",
        "o": [
            "They are plain JavaScript objects describing what should appear on the screen",
            "They are DOM nodes created directly by the browser",
            "They are always equivalent to React components",
            "They can only represent HTML tags, not custom components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function MixedTypes() {\n  return <div>{['Text', 42, false, null]}</div>;\n}\n\nReactDOM.render(<MixedTypes />, document.getElementById('root'));",
        "o": [
            "A div with 'Text42'",
            "A div with 'Text,42,false,null'",
            "An empty div",
            "An error because arrays with mixed types cannot be rendered"
        ]
    },
    {
        "q": "Which of the following is true about functional components in React?",
        "o": [
            "They are simpler and easier to test compared to class components",
            "They must use the render() method",
            "They cannot accept props",
            "They must always return null"
        ]
    },
    {
        "q": "What will the following component display?",
        "c": "function BooleanTest() {\n  return <div>{false || 'Fallback'}</div>;\n}\n\nReactDOM.render(<BooleanTest />, document.getElementById('root'));",
        "o": [
            "A div with 'Fallback'",
            "A div with 'false'",
            "Nothing will render",
            "An error because logical OR is not allowed in JSX"
        ]
    },
    {
        "q": "Which of the following correctly explains why JSX must be compiled?",
        "o": [
            "Browsers cannot interpret JSX directly; it must be converted to plain JavaScript",
            "JSX is a new HTML standard not yet supported by browsers",
            "JSX automatically compiles itself at runtime in the browser",
            "JSX is only valid in Node.js environments"
        ]
    },
    {
        "q": "What will the following code render?",
        "c": "function Expression() {\n  const num = 7;\n  return <p>{num % 2 === 0 ? 'Even' : 'Odd'}</p>;\n}\n\nReactDOM.render(<Expression />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'Odd'",
            "A paragraph with 'Even'",
            "A paragraph with '7%2===0 ? Even : Odd'",
            "An error because modulo is not supported in JSX"
        ]
    },
    {
        "q": "Which of the following is true about React fragments?",
        "o": [
            "They let you group elements without adding extra nodes to the DOM",
            "They must always be written as <Fragment></Fragment>, never shorthand",
            "They automatically apply keys to their children",
            "They can only wrap a single child element"
        ]
    },
    {
        "q": "What will the following code display?",
        "c": "function InlineFunc() {\n  return <h3>{(() => 5 * 2)()}</h3>;\n}\n\nReactDOM.render(<InlineFunc />, document.getElementById('root'));",
        "o": [
            "A heading with '10'",
            "A heading with '5*2'",
            "Nothing will render",
            "An error because functions cannot be executed in JSX"
        ]
    },
    {
        "q": "Which of the following correctly explains the role of Babel in Create React App?",
        "o": [
            "It transpiles modern JavaScript and JSX into code compatible with browsers",
            "It optimizes the app for production by minimizing code",
            "It provides a local server for running the app",
            "It manages dependencies for React projects"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ArrayJoin() {\n  const nums = [1, 2, 3];\n  return <span>{nums.join(' + ')}</span>;\n}\n\nReactDOM.render(<ArrayJoin />, document.getElementById('root'));",
        "o": [
            "A span with '1 + 2 + 3'",
            "A span with '123'",
            "A span with '1,2,3'",
            "An error because join() cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following is true about default exports in React components?",
        "o": [
            "They allow a file to export a single main component",
            "They allow multiple components to be exported in one statement",
            "They prevent the need to import React explicitly",
            "They are only valid for functional components, not class components"
        ]
    },
    {
        "q": "What will the following code render?",
        "c": "function ObjectAccess() {\n  const user = { name: 'Alex', age: 25 };\n  return <div>{user.name} - {user.age}</div>;\n}\n\nReactDOM.render(<ObjectAccess />, document.getElementById('root'));",
        "o": [
            "A div with 'Alex - 25'",
            "A div with 'user.name - user.age'",
            "Nothing will render",
            "An error because objects cannot be accessed in JSX"
        ]
    },
    {
        "q": "Which of the following is true about JSX attributes?",
        "o": [
            "They use camelCase naming for properties like onClick or className",
            "They must always be written in lowercase",
            "They must only contain string values",
            "They are automatically converted into HTML attributes without changes"
        ]
    },
    {
        "q": "What will the following code display?",
        "c": "function NestedExpressions() {\n  const a = 2, b = 3, c = 4;\n  return <p>{a * b + c}</p>;\n}\n\nReactDOM.render(<NestedExpressions />, document.getElementById('root'));",
        "o": [
            "A paragraph with '10'",
            "A paragraph with '2*3+4'",
            "Nothing will render",
            "An error because multiple operations are not valid in JSX"
        ]
    },
    {
        "q": "Which of the following is true about React’s virtual DOM?",
        "o": [
            "It is a lightweight in-memory representation of the real DOM",
            "It directly updates the browser DOM without diffing",
            "It is slower than manipulating the DOM manually",
            "It stores a copy of the entire browser window"
        ]
    },
    {
        "q": "What will the following code render?",
        "c": "function UpperCase() {\n  const word = 'react';\n  return <h2>{word.toUpperCase()}</h2>;\n}\n\nReactDOM.render(<UpperCase />, document.getElementById('root'));",
        "o": [
            "A heading with 'REACT'",
            "A heading with 'react'",
            "Nothing will render",
            "An error because toUpperCase() is not valid in JSX"
        ]
    },
    {
        "q": "Which of the following best describes React components?",
        "o": [
            "They are reusable, independent pieces of UI",
            "They are always tied to a specific HTML tag",
            "They must contain only one element inside return",
            "They cannot accept any input or configuration"
        ]
    },
    {
        "q": "What will the following code display?",
        "c": "function MultiplyArray() {\n  const arr = [2, 4, 6];\n  return <div>{arr.map(x => x * 2).join(', ')}</div>;\n}\n\nReactDOM.render(<MultiplyArray />, document.getElementById('root'));",
        "o": [
            "A div with '4, 8, 12'",
            "A div with '246'",
            "A div with '2*2, 4*2, 6*2'",
            "An error because map() is not supported in JSX"
        ]
    },
    {
        "q": "Which of the following is true about props in functional components?",
        "o": [
            "They are read-only and cannot be modified inside the component",
            "They must always be numbers",
            "They are optional but become stateful once passed",
            "They can only be accessed using this.props"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NullRender() {\n  return null;\n}\n\nReactDOM.render(<NullRender />, document.getElementById('root'));",
        "o": [
            "Nothing will render on the screen",
            "A blank div",
            "A paragraph with 'null'",
            "An error because null is not a valid return type"
        ]
    },
    {
        "q": "Which of the following is true about JSX comments?",
        "o": [
            "They must be written inside curly braces like {/* comment */}",
            "They can be written with // directly inside JSX",
            "They cannot be used at all in JSX",
            "They only work in functional components"
        ]
    },
    {
        "q": "What will the following code render?",
        "c": "function BooleanRender() {\n  return <p>{true && 'Active'}</p>;\n}\n\nReactDOM.render(<BooleanRender />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'Active'",
            "A paragraph with 'true'",
            "Nothing will render",
            "An error because booleans cannot be used in JSX expressions"
        ]
    },
    {
        "q": "Which of the following is true about Create React App development server?",
        "o": [
            "It automatically refreshes the browser when code changes are saved",
            "It compiles the app into static files immediately",
            "It prevents the use of JSX during development",
            "It can only run on port 5000 by default"
        ]
    },
    {
        "q": "What will the following code output?",
        "c": "function NestedTernary() {\n  const x = 5;\n  return <h1>{x > 10 ? 'Big' : x > 3 ? 'Medium' : 'Small'}</h1>;\n}\n\nReactDOM.render(<NestedTernary />, document.getElementById('root'));",
        "o": [
            "A heading with 'Medium'",
            "A heading with 'Big'",
            "A heading with 'Small'",
            "An error because nested ternaries are not allowed in JSX"
        ]
    },
    {
        "q": "Which of the following is true about React element immutability?",
        "o": [
            "Once created, a React element cannot be changed",
            "React elements can be updated directly using assignment",
            "React elements are mutable objects like arrays",
            "React elements must be recreated with a special update method"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function StringConcat() {\n  const a = 'Hello';\n  const b = 'World';\n  return <h2>{a + ' ' + b}</h2>;\n}\n\nReactDOM.render(<StringConcat />, document.getElementById('root'));",
        "o": [
            "A heading with 'Hello World'",
            "A heading with 'a b'",
            "A heading with 'HelloWorld'",
            "An error because string concatenation is not supported in JSX"
        ]
    },
    {
        "q": "Which of the following is true about rendering numbers in JSX?",
        "o": [
            "Numbers can be rendered directly inside curly braces",
            "Numbers must be converted to strings before rendering",
            "Numbers cannot be used inside JSX expressions",
            "Numbers always render as boolean values"
        ]
    },
    {
        "q": "What will the following code display?",
        "c": "function InlineCondition() {\n  const show = false;\n  return <div>{show ? 'Visible' : 'Hidden'}</div>;\n}\n\nReactDOM.render(<InlineCondition />, document.getElementById('root'));",
        "o": [
            "A div with 'Hidden'",
            "A div with 'Visible'",
            "Nothing will render",
            "An error because ternary operators are invalid in JSX"
        ]
    },
    {
        "q": "Which of the following is true about returning multiple elements from a component?",
        "o": [
            "They must be wrapped inside a single parent element or React.Fragment",
            "They can be returned side by side without any wrapper",
            "They must always be wrapped in a div tag",
            "They must each be rendered in separate render calls"
        ]
    },
    {
        "q": "What will the following code output?",
        "c": "function MixedArray() {\n  return <p>{['A', 'B', null, 'C'].join('-')}</p>;\n}\n\nReactDOM.render(<MixedArray />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'A-B--C'",
            "A paragraph with 'ABC'",
            "A paragraph with 'A-B-C'",
            "An error because null cannot be in an array in JSX"
        ]
    },
    {
        "q": "Which of the following is true about JSX?",
        "o": [
            "JSX expressions must return exactly one parent element",
            "JSX expressions can exist outside a return statement",
            "JSX is interpreted by browsers without compilation",
            "JSX requires all attributes to be double-quoted"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function MathInsideJSX() {\n  return <h1>{Math.max(10, 20)}</h1>;\n}\n\nReactDOM.render(<MathInsideJSX />, document.getElementById('root'));",
        "o": [
            "A heading with '20'",
            "A heading with '10'",
            "A heading with 'Math.max(10,20)'",
            "An error because Math functions are not supported in JSX"
        ]
    },
    {
        "q": "Which of the following correctly explains ReactDOM.render’s second argument?",
        "o": [
            "It is the DOM container where the React element should be mounted",
            "It is the ID of the React component being created",
            "It is the location of the virtual DOM",
            "It is a required callback function to execute after rendering"
        ]
    },
    {
        "q": "What will the following code render?",
        "c": "function LogicalAndRender() {\n  const value = 0;\n  return <span>{value && 'NonZero'}</span>;\n}\n\nReactDOM.render(<LogicalAndRender />, document.getElementById('root'));",
        "o": [
            "An empty span",
            "A span with 'NonZero'",
            "A span with '0'",
            "An error because numbers cannot be evaluated with && in JSX"
        ]
    },
    {
        "q": "Which of the following is true about functional components in React?",
        "o": [
            "They are plain JavaScript functions that return JSX",
            "They must extend React.Component",
            "They cannot accept props",
            "They can only return primitive values"
        ]
    },
    {
        "q": "What will the following code render?",
        "c": "function Greeting(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nReactDOM.render(<Greeting name=\"Taylor\" />, document.getElementById('root'));",
        "o": [
            "A heading with 'Hello, Taylor'",
            "A heading with 'Hello, {props.name}'",
            "A heading with 'Hello,'",
            "An error because props cannot be used in functional components"
        ]
    },
    {
        "q": "Which of the following is true about Create React App build command?",
        "o": [
            "It bundles and optimizes the app for production use",
            "It only runs a development server without compiling",
            "It automatically deploys the app to a hosting provider",
            "It updates React to the latest version"
        ]
    },
    {
        "q": "What will the following code display?",
        "c": "function DefaultPropDemo({ msg = 'Default Message' }) {\n  return <p>{msg}</p>;\n}\n\nReactDOM.render(<DefaultPropDemo />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'Default Message'",
            "A paragraph with nothing",
            "A paragraph with 'msg'",
            "An error because default props cannot be used in functional components"
        ]
    },
    {
        "q": "Which of the following is true about exporting components in React?",
        "o": [
            "A file can have multiple named exports but only one default export",
            "Each file must have exactly one export",
            "Only default exports are supported in React",
            "Only named exports are supported in React"
        ]
    },
    {
        "q": "What will the following code render?",
        "c": "function MultiReturn() {\n  return (\n    <>\n      <h1>Title</h1>\n      <p>Description</p>\n    </>\n  );\n}\n\nReactDOM.render(<MultiReturn />, document.getElementById('root'));",
        "o": [
            "A heading 'Title' followed by a paragraph 'Description'",
            "Only the heading 'Title'",
            "Only the paragraph 'Description'",
            "An error because multiple elements cannot be returned"
        ]
    },
    {
        "q": "Which of the following is true about props vs. state?",
        "o": [
            "Props are passed into a component, while state is managed inside the component",
            "Props and state are identical and interchangeable",
            "Props can be changed within a component, but state cannot",
            "State is always global, while props are always local"
        ]
    },
    {
        "q": "What will the following component output?",
        "c": "function JsxExpression() {\n  const user = { first: 'Sam', last: 'Lee' };\n  return <h3>{`${user.first} ${user.last}`}</h3>;\n}\n\nReactDOM.render(<JsxExpression />, document.getElementById('root'));",
        "o": [
            "A heading with 'Sam Lee'",
            "A heading with '${user.first} ${user.last}'",
            "Nothing will render",
            "An error because template literals cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following is true about Create React App scripts?",
        "o": [
            "npm start launches the development server",
            "npm start compiles the app for production",
            "npm start automatically deploys the app to GitHub Pages",
            "npm start upgrades dependencies before running"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NestedComponent() {\n  function Inner() {\n    return <span>Inner Text</span>;\n  }\n  return <div><Inner /></div>;\n}\n\nReactDOM.render(<NestedComponent />, document.getElementById('root'));",
        "o": [
            "A div containing 'Inner Text'",
            "A div with '<Inner />'",
            "Nothing will render",
            "An error because components cannot be defined inside other components"
        ]
    },
    {
        "q": "Which of the following is true about rendering lists in React?",
        "o": [
            "Each list item should have a unique 'key' prop",
            "Lists can only be rendered using for loops",
            "React automatically generates keys for list items",
            "Keys must always be numbers, not strings"
        ]
    },
    {
        "q": "What will the following code output?",
        "c": "function KeyExample() {\n  const items = ['X', 'Y', 'Z'];\n  return <ul>{items.map((v, i) => <li key={i}>{v}</li>)}</ul>;\n}\n\nReactDOM.render(<KeyExample />, document.getElementById('root'));",
        "o": [
            "A list with items 'X', 'Y', and 'Z'",
            "A single list item with 'X,Y,Z'",
            "Nothing will render",
            "An error because map cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following best describes JSX attributes?",
        "o": [
            "They are written in camelCase for most properties",
            "They must always be lowercase",
            "They cannot accept JavaScript expressions",
            "They are identical to raw HTML attributes"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ButtonLabel() {\n  const label = <strong>Click</strong>;\n  return <button>{label}</button>;\n}\n\nReactDOM.render(<ButtonLabel />, document.getElementById('root'));",
        "o": [
            "A button with bold text 'Click'",
            "A button with the literal text '<strong>Click</strong>'",
            "An empty button",
            "An error because JSX cannot be stored in variables"
        ]
    },
    {
        "q": "Which of the following is true about fragments in React?",
        "o": [
            "They let you group elements without adding extra nodes to the DOM",
            "They must always be written as <React.Fragment></React.Fragment>",
            "They automatically add a hidden <div> wrapper",
            "They cannot be used with functional components"
        ]
    },
    {
        "q": "What will the following code display?",
        "c": "function ConditionalFragment({ show }) {\n  return (\n    <>\n      {show && <p>Visible</p>}\n    </>\n  );\n}\n\nReactDOM.render(<ConditionalFragment show={true} />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'Visible'",
            "Nothing will render",
            "The text 'true'",
            "An error because fragments cannot contain conditions"
        ]
    },
    {
        "q": "Which of the following is true about functional component naming?",
        "o": [
            "Component names must start with an uppercase letter",
            "Component names can only be lowercase",
            "Component names must match an existing HTML tag",
            "Component names are optional and can be anonymous"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function AttributeDemo() {\n  const id = 'main';\n  return <div id={id}>Content</div>;\n}\n\nReactDOM.render(<AttributeDemo />, document.getElementById('root'));",
        "o": [
            "A div with id='main' and text 'Content'",
            "A div with text 'id=main Content'",
            "A div with id='{id}'",
            "An error because attributes cannot take variables"
        ]
    },
    {
        "q": "Which of the following is true about Create React App file structure?",
        "o": [
            "The 'public' folder contains static files served without processing",
            "The 'src' folder is only for CSS files",
            "All components must be placed inside 'components' by default",
            "The 'public' folder is automatically bundled by Webpack"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ReturnArray() {\n  return [<h1 key=\"1\">One</h1>, <h2 key=\"2\">Two</h2>];\n}\n\nReactDOM.render(<ReturnArray />, document.getElementById('root'));",
        "o": [
            "A heading 'One' followed by a subheading 'Two'",
            "Only the heading 'One'",
            "Only the subheading 'Two'",
            "An error because arrays cannot be returned from components"
        ]
    },
    {
        "q": "Which of the following is true about inline styles in JSX?",
        "o": [
            "They are written as objects with camelCased property names",
            "They must be written as plain strings",
            "They must always be placed in a separate CSS file",
            "They cannot include dynamic values"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function StyledBox() {\n  const style = { backgroundColor: 'blue', color: 'white' };\n  return <div style={style}>Box</div>;\n}\n\nReactDOM.render(<StyledBox />, document.getElementById('root'));",
        "o": [
            "A div with blue background and white text saying 'Box'",
            "A div with text '{ backgroundColor: 'blue', color: 'white' }'",
            "A plain div with text 'Box' without styling",
            "An error because inline styles must be strings"
        ]
    },
    {
        "q": "Which of the following is true about comments in JSX?",
        "o": [
            "They must be wrapped in curly braces inside the markup",
            "They use the same syntax as HTML <!-- -->",
            "They are not supported inside JSX",
            "They must be placed outside return statements"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function CommentDemo() {\n  return (\n    <div>\n      {/* This is a comment */}\n      <p>Text</p>\n    </div>\n  );\n}\n\nReactDOM.render(<CommentDemo />, document.getElementById('root'));",
        "o": [
            "A div with a paragraph 'Text'",
            "A div containing '/* This is a comment */' and 'Text'",
            "Only a comment without the paragraph",
            "An error because comments are not allowed inside JSX"
        ]
    },
    {
        "q": "Which of the following is true about default exports in React?",
        "o": [
            "They allow importing the component without curly braces",
            "They must always be named 'default'",
            "They cannot be used for components",
            "They require aliasing when imported"
        ]
    },
    {
        "q": "What will the following code render?",
        "c": "export default function Header() {\n  return <h1>Main Header</h1>;\n}\n\n// Another file\nimport Header from './Header';\nReactDOM.render(<Header />, document.getElementById('root'));",
        "o": [
            "A heading with 'Main Header'",
            "Nothing will render",
            "An error because Header is not imported with curly braces",
            "An error because default exports cannot be functions"
        ]
    },
    {
        "q": "Which of the following is true about self-closing tags in JSX?",
        "o": [
            "They must always be explicitly closed like <br />",
            "They can be left open like in HTML (<br>)",
            "They are not allowed in React components",
            "They can only be used for built-in HTML tags, not custom components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ImageDemo() {\n  return <img src=\"logo.png\" alt=\"Logo\" />;\n}\n\nReactDOM.render(<ImageDemo />, document.getElementById('root'));",
        "o": [
            "An image with 'logo.png' and alt text 'Logo'",
            "The text '<img src=\"logo.png\" alt=\"Logo\" />'",
            "Nothing will render",
            "An error because img tags cannot be self-closed"
        ]
    },
    {
        "q": "Which of the following is true about the ReactDOM.render method?",
        "o": [
            "It takes a React element and a DOM container as arguments",
            "It only works with class components",
            "It can accept multiple container elements at once",
            "It must always return a string"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function RenderExpression() {\n  return <p>{10 * 2}</p>;\n}\n\nReactDOM.render(<RenderExpression />, document.getElementById('root'));",
        "o": [
            "A paragraph with '20'",
            "A paragraph with '10 * 2'",
            "Nothing will render",
            "An error because arithmetic is not allowed in JSX"
        ]
    },
    {
        "q": "Which of the following is true about the 'className' attribute in JSX?",
        "o": [
            "It replaces the 'class' attribute used in HTML",
            "It must always be written in lowercase",
            "It is only used for inline styles",
            "It automatically converts CSS selectors into JavaScript objects"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ClassNameDemo() {\n  return <div className=\"highlight\">Hello</div>;\n}\n\nReactDOM.render(<ClassNameDemo />, document.getElementById('root'));",
        "o": [
            "A div with class 'highlight' and text 'Hello'",
            "A div with attribute 'className' and text 'Hello'",
            "A div with no class applied and text 'Hello'",
            "An error because 'className' is not valid JSX"
        ]
    },
    {
        "q": "Which of the following best describes React keys?",
        "o": [
            "They help React identify which items changed in a list",
            "They are required for all JSX elements",
            "They are used to secure components from unauthorized access",
            "They store component state between renders"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function BooleanRender() {\n  return <div>{true}</div>;\n}\n\nReactDOM.render(<BooleanRender />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div with text 'true'",
            "A div with text '1'",
            "An error because booleans cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following is true about event handling in React?",
        "o": [
            "Event names are written in camelCase like onClick",
            "Event names must always be lowercase",
            "Event handlers can only be inline strings",
            "Events in React use native browser event names directly"
        ]
    },
    {
        "q": "What will the following component do when the button is clicked?",
        "c": "function ClickDemo() {\n  function handleClick() {\n    alert('Clicked');\n  }\n  return <button onClick={handleClick}>Press</button>;\n}\n\nReactDOM.render(<ClickDemo />, document.getElementById('root'));",
        "o": [
            "It will show an alert saying 'Clicked'",
            "It will do nothing",
            "It will throw an error because functions cannot be passed as props",
            "It will print 'Clicked' to the console"
        ]
    },
    {
        "q": "Which of the following is true about expressions inside JSX?",
        "o": [
            "They must be wrapped in curly braces",
            "They must be written inside quotes",
            "They cannot include arithmetic operations",
            "They are evaluated only once at compile time"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NullDemo() {\n  return <p>{null}</p>;\n}\n\nReactDOM.render(<NullDemo />, document.getElementById('root'));",
        "o": [
            "An empty paragraph",
            "A paragraph with text 'null'",
            "Nothing at all",
            "An error because null is not valid in JSX"
        ]
    },
    {
        "q": "Which of the following is true about functional components?",
        "o": [
            "They are plain JavaScript functions that return JSX",
            "They must always extend React.Component",
            "They cannot accept props",
            "They are only used for rendering lists"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function PropDemo(props) {\n  return <h2>{props.title}</h2>;\n}\n\nReactDOM.render(<PropDemo title=\"Greetings\" />, document.getElementById('root'));",
        "o": [
            "A heading with text 'Greetings'",
            "A heading with text 'props.title'",
            "An empty heading",
            "An error because props cannot be accessed in functional components"
        ]
    },
    {
        "q": "Which of the following is true about fragments in React?",
        "o": [
            "They let you return multiple elements without adding extra DOM nodes",
            "They automatically wrap children inside a div",
            "They must always include a key attribute",
            "They cannot contain text nodes"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function FragmentDemo() {\n  return (\n    <>\n      <h1>Header</h1>\n      <p>Paragraph</p>\n    </>\n  );\n}\n\nReactDOM.render(<FragmentDemo />, document.getElementById('root'));",
        "o": [
            "A heading 'Header' and a paragraph 'Paragraph'",
            "Only the heading 'Header'",
            "Only the paragraph 'Paragraph'",
            "An error because <> </> is not valid JSX"
        ]
    },
    {
        "q": "Which of the following is true about default parameters in functional components?",
        "o": [
            "They can be used to set fallback values for props",
            "They are not allowed in React functional components",
            "They overwrite all passed props",
            "They can only be used inside the return statement"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function DefaultPropDemo({ text = 'Default' }) {\n  return <p>{text}</p>;\n}\n\nReactDOM.render(<DefaultPropDemo />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'Default'",
            "A paragraph with 'text'",
            "An empty paragraph",
            "An error because default parameters are not supported"
        ]
    },
    {
        "q": "Which of the following is true about expressions vs. statements in JSX?",
        "o": [
            "Only expressions are allowed inside curly braces",
            "Both expressions and statements are valid in JSX",
            "Statements like if and for are directly allowed inside JSX",
            "Expressions inside JSX must always return a string"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ConditionalRender({ isVisible }) {\n  return <div>{isVisible ? 'Shown' : 'Hidden'}</div>;\n}\n\nReactDOM.render(<ConditionalRender isVisible={false} />, document.getElementById('root'));",
        "o": [
            "A div with 'Hidden'",
            "A div with 'Shown'",
            "Nothing will render",
            "An error because ternary operators are not supported in JSX"
        ]
    },
    {
        "q": "Which of the following is true about attribute names in JSX?",
        "o": [
            "They follow camelCase conventions instead of HTML attribute names",
            "They must always be lowercase like HTML",
            "They can only be passed as strings",
            "They must be written in PascalCase"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function LabelDemo() {\n  return <label htmlFor=\"input\">Name</label>;\n}\n\nReactDOM.render(<LabelDemo />, document.getElementById('root'));",
        "o": [
            "A label linked to an input with id 'input' and text 'Name'",
            "A label with text 'htmlFor=\"input\"'",
            "Just plain text 'Name' without a label",
            "An error because htmlFor is not a valid attribute"
        ]
    },
    {
        "q": "Which of the following is true about embedding objects in JSX?",
        "o": [
            "Objects cannot be rendered directly, only their properties can",
            "Objects can be rendered directly as JSON",
            "Objects are automatically converted to strings",
            "Objects are implicitly ignored with no errors"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ObjectDemo() {\n  const obj = { a: 1, b: 2 };\n  return <p>{obj.a}</p>;\n}\n\nReactDOM.render(<ObjectDemo />, document.getElementById('root'));",
        "o": [
            "A paragraph with '1'",
            "A paragraph with '{ a: 1, b: 2 }'",
            "Nothing will render",
            "An error because objects are not supported in JSX"
        ]
    },
    {
        "q": "Which of the following is true about comments in JSX?",
        "o": [
            "They must be written inside curly braces with /* */",
            "They are written the same way as HTML comments <!-- -->",
            "They are not allowed in JSX",
            "They can only be written outside the return statement"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function CommentDemo() {\n  return (\n    <div>\n      {/* This is a comment */}\n      <p>Hello</p>\n    </div>\n  );\n}\n\nReactDOM.render(<CommentDemo />, document.getElementById('root'));",
        "o": [
            "A div with a paragraph 'Hello'",
            "A div with 'This is a comment' and 'Hello'",
            "An error because JSX does not allow comments",
            "An empty div"
        ]
    },
    {
        "q": "Which of the following is true about inline styles in JSX?",
        "o": [
            "They are written as objects with camelCased property names",
            "They must always be provided as a CSS string",
            "They require an external stylesheet",
            "They can only be used with numeric values"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function StyleDemo() {\n  const style = { color: 'blue', fontSize: '20px' };\n  return <h1 style={style}>Styled Text</h1>;\n}\n\nReactDOM.render(<StyleDemo />, document.getElementById('root'));",
        "o": [
            "A heading 'Styled Text' in blue color with 20px font size",
            "A heading with literal text '{ color: 'blue', fontSize: '20px' }'",
            "A heading without any styles",
            "An error because inline styles are not supported in JSX"
        ]
    },
    {
        "q": "Which of the following is true about passing functions as props?",
        "o": [
            "They are passed just like other values and can be invoked inside the child component",
            "They must be converted to strings before being passed",
            "They can only be used in class components, not functional components",
            "They must always be named 'onSomething'"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Child({ onMessage }) {\n  return <button onClick={() => onMessage('Hello')}>Send</button>;\n}\n\nfunction Parent() {\n  function handle(msg) {\n    alert(msg);\n  }\n  return <Child onMessage={handle} />;\n}\n\nReactDOM.render(<Parent />, document.getElementById('root'));",
        "o": [
            "A button that shows an alert with 'Hello' when clicked",
            "A button that does nothing when clicked",
            "A button that shows 'undefined' when clicked",
            "An error because functions cannot be passed as props"
        ]
    },
    {
        "q": "Which of the following is true about JSX attribute values?",
        "o": [
            "They can be JavaScript expressions wrapped in curly braces",
            "They must always be strings in quotes",
            "They cannot include function calls",
            "They are automatically converted into numbers if possible"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ExpressionAttr() {\n  const id = 'unique';\n  return <div id={id}>Content</div>;\n}\n\nReactDOM.render(<ExpressionAttr />, document.getElementById('root'));",
        "o": [
            "A div with id 'unique' and text 'Content'",
            "A div with text '{id}'",
            "A div with no id attribute and text 'Content'",
            "An error because attributes cannot take variables"
        ]
    },
    {
        "q": "Which of the following is true about case sensitivity in JSX component names?",
        "o": [
            "Custom components must start with a capital letter",
            "Custom components can start with lowercase letters like HTML tags",
            "All component names must be uppercase",
            "Component names are automatically converted to PascalCase"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function lowercase() {\n  return <h2>Test</h2>;\n}\n\nReactDOM.render(<lowercase />, document.getElementById('root'));",
        "o": [
            "An error because components starting with lowercase are treated as HTML tags",
            "A heading with 'Test'",
            "Nothing will render",
            "A plain text 'Test' outside any element"
        ]
    },
    {
        "q": "Which of the following is true about keys when rendering lists in React?",
        "o": [
            "They help React identify which items have changed, are added, or are removed",
            "They are required only for arrays with more than 10 elements",
            "They must always be random numbers",
            "They are automatically generated and never need to be set manually"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ListDemo() {\n  const items = ['A', 'B', 'C'];\n  return (\n    <ul>\n      {items.map((item, index) => <li key={index}>{item}</li>)}\n    </ul>\n  );\n}\n\nReactDOM.render(<ListDemo />, document.getElementById('root'));",
        "o": [
            "A list with items A, B, and C",
            "A list with items '0', '1', '2'",
            "Nothing will render",
            "An error because keys cannot use index"
        ]
    },
    {
        "q": "Which of the following is true about returning null in a functional component?",
        "o": [
            "It prevents rendering any output without causing an error",
            "It throws an error because components must return elements",
            "It renders an empty div automatically",
            "It renders the string 'null'"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Hidden() {\n  return null;\n}\n\nReactDOM.render(<Hidden />, document.getElementById('root'));",
        "o": [
            "Nothing will be rendered in the DOM",
            "A div with text 'null'",
            "An empty span element",
            "An error because null is not valid JSX"
        ]
    },
    {
        "q": "Which of the following is true about string literals in JSX?",
        "o": [
            "They can be written directly inside elements without curly braces",
            "They must always be wrapped inside curly braces",
            "They cannot be used directly, only through props",
            "They are automatically converted into arrays of characters"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function StringLiteralDemo() {\n  return <p>Hello World</p>;\n}\n\nReactDOM.render(<StringLiteralDemo />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'Hello World'",
            "A paragraph with '{Hello World}'",
            "An error because strings must be in curly braces",
            "Nothing will render"
        ]
    },
    {
        "q": "Which of the following is true about boolean attributes in JSX?",
        "o": [
            "They can be written with just the attribute name without a value",
            "They must always be assigned true or false explicitly",
            "They are not supported in JSX",
            "They must always be passed as strings 'true' or 'false'"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function CheckboxDemo() {\n  return <input type=\"checkbox\" checked />;\n}\n\nReactDOM.render(<CheckboxDemo />, document.getElementById('root'));",
        "o": [
            "A checked checkbox",
            "An unchecked checkbox",
            "An error because boolean attributes must use curly braces",
            "Nothing will render"
        ]
    },
    {
        "q": "Which of the following is true about self-closing tags in JSX?",
        "o": [
            "All tags without children must be self-closed",
            "They are optional, both <br> and <br/> are valid",
            "They cannot be used in JSX",
            "They are required only for HTML5 elements"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function SelfClosingDemo() {\n  return <img src=\"logo.png\" alt=\"logo\" />;\n}\n\nReactDOM.render(<SelfClosingDemo />, document.getElementById('root'));",
        "o": [
            "An image element with src 'logo.png' and alt 'logo'",
            "The literal text '<img src=\"logo.png\" alt=\"logo\" />'",
            "An empty div",
            "An error because img cannot be self-closed"
        ]
    },
    {
        "q": "Which of the following is true about wrapping multiple JSX elements?",
        "o": [
            "They must be wrapped in a single parent element or a React fragment",
            "They can be written side by side without any wrapper",
            "They must always be wrapped in a <div>",
            "They are automatically wrapped in a React.Fragment by React"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function WrapperDemo() {\n  return (\n    <>\n      <h1>Title</h1>\n      <p>Paragraph</p>\n    </>\n  );\n}\n\nReactDOM.render(<WrapperDemo />, document.getElementById('root'));",
        "o": [
            "A heading 'Title' followed by a paragraph 'Paragraph'",
            "An error because fragments cannot be used without a key",
            "Nothing will render",
            "A div wrapping 'Title' and 'Paragraph'"
        ]
    },
    {
        "q": "Which of the following is true about default exports in functional components?",
        "o": [
            "A file can only have one default export",
            "A file can have multiple default exports",
            "Default exports are automatically named 'App'",
            "Default exports must always be a class component"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "export default function Greet() {\n  return <h2>Hello</h2>;\n}\n\n// In another file\nimport Greeting from './Greet';\n\nReactDOM.render(<Greeting />, document.getElementById('root'));",
        "o": [
            "A heading with 'Hello'",
            "An error because the import name must match 'Greet'",
            "Nothing will render",
            "A plain text 'Greeting'"
        ]
    },
    {
        "q": "Which of the following is true about JSX expressions?",
        "o": [
            "They must be enclosed in curly braces inside JSX",
            "They must be written in double quotes",
            "They can only contain strings",
            "They cannot include arithmetic operations"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function MathDemo() {\n  return <p>{2 + 3}</p>;\n}\n\nReactDOM.render(<MathDemo />, document.getElementById('root'));",
        "o": [
            "A paragraph with '5'",
            "A paragraph with '{2 + 3}'",
            "An error because arithmetic expressions are not allowed in JSX",
            "Nothing will render"
        ]
    },
    {
        "q": "Which of the following is true about conditional rendering in JSX?",
        "o": [
            "You can use JavaScript conditional operators like ternary expressions",
            "You must always use if-else statements inside return",
            "It requires a special React API method",
            "It is not supported in functional components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ConditionDemo({ show }) {\n  return <div>{show ? 'Visible' : 'Hidden'}</div>;\n}\n\nReactDOM.render(<ConditionDemo show={true} />, document.getElementById('root'));",
        "o": [
            "A div with 'Visible'",
            "A div with 'Hidden'",
            "An empty div",
            "An error because ternary operators are not allowed in JSX"
        ]
    },
    {
        "q": "Which of the following is true about nesting components in React?",
        "o": [
            "You can use a component inside another by calling it as a JSX element",
            "You must always pass children props explicitly",
            "Nested components must be placed in separate files",
            "React does not allow component nesting"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Child() {\n  return <p>Child</p>;\n}\n\nfunction Parent() {\n  return (\n    <div>\n      <h1>Parent</h1>\n      <Child />\n    </div>\n  );\n}\n\nReactDOM.render(<Parent />, document.getElementById('root'));",
        "o": [
            "A div with a heading 'Parent' and a paragraph 'Child'",
            "A div with only 'Parent'",
            "A div with only 'Child'",
            "An error because components cannot be nested"
        ]
    },
    {
        "q": "Which of the following is true about component names in React?",
        "o": [
            "Component names must start with a capital letter",
            "Component names can start with lowercase letters or numbers",
            "Component names must always match the file name",
            "Component names are automatically converted to lowercase by React"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function lowercasecomponent() {\n  return <h1>Test</h1>;\n}\n\nReactDOM.render(<lowercasecomponent />, document.getElementById('root'));",
        "o": [
            "An error because React treats lowercase names as DOM tags",
            "A heading with 'Test'",
            "Nothing will render",
            "A string 'lowercasecomponent'"
        ]
    },
    {
        "q": "Which of the following is true about React.Fragment?",
        "o": [
            "It allows grouping multiple children without adding extra DOM nodes",
            "It automatically adds a <div> around children",
            "It can only be used with lists",
            "It requires a 'key' prop in all cases"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function FragmentDemo() {\n  return (\n    <React.Fragment>\n      <span>One</span>\n      <span>Two</span>\n    </React.Fragment>\n  );\n}\n\nReactDOM.render(<FragmentDemo />, document.getElementById('root'));",
        "o": [
            "Two adjacent span elements: 'One' and 'Two'",
            "A single span containing 'OneTwo'",
            "An error because fragments cannot wrap spans",
            "Nothing will render"
        ]
    },
    {
        "q": "Which of the following is true about props in functional components?",
        "o": [
            "They are read-only and cannot be modified inside the component",
            "They are mutable and can be reassigned",
            "They must always be strings",
            "They cannot be passed into functional components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nReactDOM.render(<Welcome name=\"Alice\" />, document.getElementById('root'));",
        "o": [
            "A heading with 'Hello, Alice'",
            "A heading with 'Hello, {props.name}'",
            "Nothing will render",
            "An error because props must be destructured"
        ]
    },
    {
        "q": "Which of the following is true about embedding JavaScript functions in JSX?",
        "o": [
            "Functions can be called inside curly braces within JSX",
            "Functions must always be written outside JSX and cannot be used inside",
            "Only arrow functions can be used inside JSX",
            "Functions cannot return strings in JSX"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function formatName(user) {\n  return user.first + ' ' + user.last;\n}\n\nconst user = { first: 'Ada', last: 'Lovelace' };\n\nfunction App() {\n  return <h2>{formatName(user)}</h2>;\n}\n\nReactDOM.render(<App />, document.getElementById('root'));",
        "o": [
            "A heading with 'Ada Lovelace'",
            "A heading with '{formatName(user)}'",
            "Nothing will render",
            "An error because functions cannot be called inside JSX"
        ]
    },
    {
        "q": "Which of the following is true about inline conditional rendering using && in JSX?",
        "o": [
            "If the condition is false, nothing will be rendered",
            "If the condition is false, 'false' will be rendered",
            "It can only be used inside class components",
            "It throws an error because JSX does not support logical operators"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ConditionalDemo() {\n  const show = true;\n  return <div>{show && 'Displayed'}</div>;\n}\n\nReactDOM.render(<ConditionalDemo />, document.getElementById('root'));",
        "o": [
            "A div with 'Displayed'",
            "A div with 'true'",
            "An empty div",
            "An error because && cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following is true about self-closing tags in JSX?",
        "o": [
            "All tags without children must be closed using a slash (e.g., <img />)",
            "JSX automatically closes all empty tags without needing a slash",
            "Only HTML tags like <input> can be self-closed, not custom components",
            "Self-closing tags are not allowed in JSX"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function SelfClosingDemo() {\n  return <br />;\n}\n\nReactDOM.render(<SelfClosingDemo />, document.getElementById('root'));",
        "o": [
            "A line break",
            "The text '<br />'",
            "Nothing will render",
            "An error because <br /> is not a valid JSX tag"
        ]
    },
    {
        "q": "Which of the following is true about comments in JSX?",
        "o": [
            "Comments must be written inside curly braces using {/* comment */}",
            "Comments can be written using // inside JSX tags directly",
            "JSX does not support comments",
            "Only block comments /* */ are allowed outside curly braces"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function CommentDemo() {\n  return (\n    <div>\n      {/* This is a comment */}\n      <p>Visible</p>\n    </div>\n  );\n}\n\nReactDOM.render(<CommentDemo />, document.getElementById('root'));",
        "o": [
            "A div containing 'Visible'",
            "A div containing the text '{/* This is a comment */}' and 'Visible'",
            "Only the comment text",
            "Nothing will render"
        ]
    },
    {
        "q": "Which of the following is true about string literals in JSX?",
        "o": [
            "They can be written directly inside quotes",
            "They must always be wrapped inside curly braces",
            "They cannot be rendered directly in JSX",
            "They must always be assigned to props first"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function StringDemo() {\n  return <h3>{\"Hello World\"}</h3>;\n}\n\nReactDOM.render(<StringDemo />, document.getElementById('root'));",
        "o": [
            "A heading with 'Hello World'",
            "A heading with '{\"Hello World\"}'",
            "An error because strings cannot be inside curly braces",
            "Nothing will render"
        ]
    },
    {
        "q": "Which of the following is true about returning multiple lines of JSX?",
        "o": [
            "You must wrap the return value in parentheses",
            "Each line can be returned separately",
            "Only class components can return multiple lines",
            "Returning multiple lines is not supported in JSX"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function MultiLineDemo() {\n  return (\n    <div>\n      <h1>Line 1</h1>\n      <h2>Line 2</h2>\n    </div>\n  );\n}\n\nReactDOM.render(<MultiLineDemo />, document.getElementById('root'));",
        "o": [
            "A div containing 'Line 1' and 'Line 2' as headings",
            "Only 'Line 1' heading",
            "Only 'Line 2' heading",
            "An error because return cannot have multiple elements"
        ]
    },
    {
        "q": "Which of the following is true about JavaScript reserved words in JSX?",
        "o": [
            "Some HTML attributes like 'class' and 'for' must be written as 'className' and 'htmlFor'",
            "All HTML attributes can be used directly without changes",
            "Reserved words can only be used inside string literals",
            "React automatically renames all reserved words internally"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function AttrDemo() {\n  return <label htmlFor=\"input1\">Name</label>;\n}\n\nReactDOM.render(<AttrDemo />, document.getElementById('root'));",
        "o": [
            "A label linked to input with id 'input1'",
            "A label showing 'htmlFor=\"input1\"' as text",
            "An error because 'htmlFor' is not a valid attribute",
            "Nothing will render"
        ]
    },
    {
        "q": "Which of the following is true about default exports in Create React App?",
        "o": [
            "Each file can have only one default export",
            "A file can have multiple default exports",
            "Default exports must always be functions",
            "Default exports must match the file name"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Button() {\n  return <button disabled={false}>Click</button>;\n}\n\nReactDOM.render(<Button />, document.getElementById('root'));",
        "o": [
            "A button with text 'Click' and enabled",
            "A button with text 'Click' but disabled",
            "An error because 'disabled' cannot take a boolean",
            "Nothing will render"
        ]
    },
    {
        "q": "Which of the following is true about keys in lists when rendering elements?",
        "o": [
            "Keys help React identify which items have changed, added, or removed",
            "Keys are optional and not recommended",
            "Keys must always be random values",
            "Keys are only required for functional components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ListDemo() {\n  const items = ['A', 'B', 'C'];\n  return (\n    <ul>\n      {items.map((item, index) => <li key={index}>{item}</li>)}\n    </ul>\n  );\n}\n\nReactDOM.render(<ListDemo />, document.getElementById('root'));",
        "o": [
            "A list with items A, B, and C",
            "Only the first item A",
            "An error because keys cannot be indexes",
            "Nothing will render"
        ]
    },
    {
        "q": "Which of the following is true about expressions inside JSX?",
        "o": [
            "Any valid JavaScript expression can be used inside curly braces",
            "Only strings and numbers can be used inside curly braces",
            "Expressions must always return a string",
            "Expressions cannot include function calls"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function MathDemo() {\n  return <p>{2 * 3 + 4}</p>;\n}\n\nReactDOM.render(<MathDemo />, document.getElementById('root'));",
        "o": [
            "A paragraph with '10'",
            "A paragraph with '2 * 3 + 4'",
            "Nothing will render",
            "An error because math expressions are not allowed in JSX"
        ]
    },
    {
        "q": "Which of the following is true about the root element in React?",
        "o": [
            "ReactDOM.render must be given a single root element",
            "ReactDOM.render can render multiple sibling elements at once without a wrapper",
            "ReactDOM.render automatically wraps multiple elements in a div",
            "ReactDOM.render requires class components only"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function MultipleElements() {\n  return (\n    <>\n      <h1>First</h1>\n      <h2>Second</h2>\n    </>\n  );\n}\n\nReactDOM.render(<MultipleElements />, document.getElementById('root'));",
        "o": [
            "A heading 'First' and a subheading 'Second'",
            "Only the heading 'First'",
            "Only the subheading 'Second'",
            "An error because JSX cannot return multiple elements"
        ]
    },
    {
        "q": "Which of the following is true about Create React App's project structure?",
        "o": [
            "The 'public' folder contains the base HTML file",
            "The 'src' folder cannot contain subfolders",
            "The 'index.js' file is optional",
            "The 'public' folder is where all React components must be placed"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function AttrBoolean() {\n  return <input readOnly={true} />;\n}\n\nReactDOM.render(<AttrBoolean />, document.getElementById('root'));",
        "o": [
            "An input field that cannot be modified",
            "An input field that is editable",
            "An error because 'readOnly' is not a valid prop",
            "Nothing will render"
        ]
    },
    {
        "q": "Which of the following statements about functional components is true?",
        "o": [
            "They are plain JavaScript functions that return JSX",
            "They must always extend React.Component",
            "They cannot accept props",
            "They require a render() method"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NestedElements() {\n  return (\n    <div>\n      <span>One</span>\n      <span>Two</span>\n    </div>\n  );\n}\n\nReactDOM.render(<NestedElements />, document.getElementById('root'));",
        "o": [
            "A div containing two spans with 'One' and 'Two'",
            "Only one span with 'One'",
            "Only one span with 'Two'",
            "An error because multiple children are not allowed"
        ]
    },
    {
        "q": "Which of the following is true about props in functional components?",
        "o": [
            "Props are passed as an argument to the function",
            "Props must be accessed using this.props",
            "Props are mutable inside functional components",
            "Props cannot be passed to functional components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Greeting(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nReactDOM.render(<Greeting name=\"Sam\" />, document.getElementById('root'));",
        "o": [
            "A heading with 'Hello, Sam'",
            "A heading with 'Hello, {props.name}'",
            "An error because props cannot be used in functional components",
            "Nothing will render"
        ]
    },
    {
        "q": "Which of the following is true about case-sensitivity in JSX?",
        "o": [
            "Custom components must begin with an uppercase letter",
            "HTML tags must begin with an uppercase letter",
            "All component names must be lowercase",
            "JSX is not case-sensitive at all"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function CaseDemo() {\n  return <Mybutton />;\n}\n\nfunction Mybutton() {\n  return <button>Click</button>;\n}\n\nReactDOM.render(<CaseDemo />, document.getElementById('root'));",
        "o": [
            "An error because custom components must be capitalized",
            "A button with text 'Click'",
            "Nothing will render",
            "A string 'Mybutton'"
        ]
    },
    {
        "q": "Which of the following is true about embedding expressions in JSX?",
        "o": [
            "Expressions must be wrapped in curly braces",
            "Expressions must always be placed inside quotes",
            "Only numeric expressions are allowed",
            "Expressions cannot be embedded inside JSX"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function DateDemo() {\n  const today = new Date().getFullYear();\n  return <p>{today}</p>;\n}\n\nReactDOM.render(<DateDemo />, document.getElementById('root'));",
        "o": [
            "A paragraph with the current year",
            "A paragraph with '{today}'",
            "Nothing will render",
            "An error because Date objects cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following is true about Create React App defaults?",
        "o": [
            "It sets up Babel and Webpack configuration internally",
            "It requires manual Babel and Webpack setup",
            "It does not support JSX by default",
            "It only supports class components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function BooleanAttr() {\n  return <input required />;\n}\n\nReactDOM.render(<BooleanAttr />, document.getElementById('root'));",
        "o": [
            "An input field that requires a value before submitting",
            "An input field with text 'required'",
            "Nothing will render",
            "An error because required needs a value"
        ]
    },
    {
        "q": "Which of the following best describes JSX?",
        "o": [
            "A syntax extension that allows mixing HTML with JavaScript",
            "A templating engine for React",
            "A JSON-based configuration for UI",
            "A CSS preprocessor for styling components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function InlineExpr() {\n  return <p>{'React'.toUpperCase()}</p>;\n}\n\nReactDOM.render(<InlineExpr />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'REACT'",
            "A paragraph with 'React'",
            "Nothing will render",
            "An error because string methods cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following is true about JSX attributes?",
        "o": [
            "They follow camelCase naming convention (e.g., className, tabIndex)",
            "They must always use lowercase names like HTML",
            "They can only accept string values",
            "They cannot be dynamic"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function AttrDemo() {\n  const label = 'Submit';\n  return <button>{label}</button>;\n}\n\nReactDOM.render(<AttrDemo />, document.getElementById('root'));",
        "o": [
            "A button with text 'Submit'",
            "A button with text '{label}'",
            "Nothing will render",
            "An error because variables cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following is true about rendering elements?",
        "o": [
            "React elements are immutable once created",
            "React elements can be directly modified after rendering",
            "React elements are DOM nodes",
            "React elements must always be created using React.createElement only"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NumberRender() {\n  return <h2>{100 + 23}</h2>;\n}\n\nReactDOM.render(<NumberRender />, document.getElementById('root'));",
        "o": [
            "A heading with '123'",
            "A heading with '100 + 23'",
            "Nothing will render",
            "An error because numbers are not allowed in JSX"
        ]
    },
    {
        "q": "Which of the following is true about ReactDOM.render?",
        "o": [
            "It renders a React element into a DOM container",
            "It can render into multiple containers simultaneously by default",
            "It modifies the original element",
            "It requires a class component only"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function StringInterp() {\n  const name = 'Alex';\n  return <p>{`Hi, ${name}`}</p>;\n}\n\nReactDOM.render(<StringInterp />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'Hi, Alex'",
            "A paragraph with 'Hi, ${name}'",
            "Nothing will render",
            "An error because template literals are not allowed in JSX"
        ]
    },
    {
        "q": "Which of the following is true about functional components in modern React?",
        "o": [
            "They can manage state and side effects using hooks",
            "They cannot use props",
            "They are deprecated in favor of class components",
            "They require a render() method"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NullRender() {\n  return null;\n}\n\nReactDOM.render(<NullRender />, document.getElementById('root'));",
        "o": [
            "It renders nothing to the DOM",
            "It renders the string 'null'",
            "It throws an error",
            "It renders an empty paragraph"
        ]
    },
    {
        "q": "Which of the following is true about JSX tags?",
        "o": [
            "JSX tags must have a single enclosing parent element",
            "JSX tags can remain unclosed",
            "JSX tags must always be written in lowercase",
            "JSX tags cannot be nested"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function FragmentDemo() {\n  return (\n    <>\n      <h1>Header</h1>\n      <p>Paragraph</p>\n    </>\n  );\n}\n\nReactDOM.render(<FragmentDemo />, document.getElementById('root'));",
        "o": [
            "A heading 'Header' and a paragraph 'Paragraph'",
            "Only the heading 'Header'",
            "Only the paragraph 'Paragraph'",
            "An error because <> fragment syntax is invalid"
        ]
    },
    {
        "q": "Which of the following is true about React elements?",
        "o": [
            "They are plain JavaScript objects describing the UI",
            "They are direct DOM nodes",
            "They are functions that execute on the DOM",
            "They are JSON structures required by React"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function CondRender() {\n  const isLoggedIn = false;\n  return <div>{isLoggedIn ? 'Welcome' : 'Please log in'}</div>;\n}\n\nReactDOM.render(<CondRender />, document.getElementById('root'));",
        "o": [
            "A div with text 'Please log in'",
            "A div with text 'Welcome'",
            "A div with text '{isLoggedIn ? 'Welcome' : 'Please log in'}'",
            "An error because ternary operators are not supported in JSX"
        ]
    },
    {
        "q": "Which of the following is true about Create React App?",
        "o": [
            "It provides a development server with hot reloading",
            "It requires a manual Webpack setup to start",
            "It does not support ES6 syntax",
            "It only works with TypeScript, not JavaScript"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ArrayRender() {\n  const items = ['A', 'B'];\n  return <ul>{items.map(i => <li>{i}</li>)}</ul>;\n}\n\nReactDOM.render(<ArrayRender />, document.getElementById('root'));",
        "o": [
            "An unordered list with items 'A' and 'B'",
            "An unordered list with text 'A,B'",
            "Nothing will render",
            "An error because map() cannot be used inside JSX"
        ]
    },
    {
        "q": "Which of the following is true about self-closing tags in JSX?",
        "o": [
            "Tags like <img /> and <input /> must be explicitly closed with />",
            "They can be left open like in HTML5",
            "They are automatically closed by React at runtime",
            "They are not allowed in JSX"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function InputDemo() {\n  return <input type=\"text\" value=\"Hello\" readOnly />;\n}\n\nReactDOM.render(<InputDemo />, document.getElementById('root'));",
        "o": [
            "A text input prefilled with 'Hello' that cannot be edited",
            "A text input prefilled with 'Hello' that can be edited",
            "An empty text input",
            "An error because readOnly is not a valid JSX attribute"
        ]
    },
    {
        "q": "Which of the following is true about embedding functions in JSX?",
        "o": [
            "You can call functions inside curly braces to display their return value",
            "Functions cannot be invoked inside JSX",
            "Only arrow functions are allowed in JSX",
            "Functions must always return strings in JSX"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function FuncRender() {\n  function greet() {\n    return 'Hello World';\n  }\n  return <p>{greet()}</p>;\n}\n\nReactDOM.render(<FuncRender />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'Hello World'",
            "A paragraph with 'greet()'",
            "Nothing will render",
            "An error because functions cannot be called in JSX"
        ]
    },
    {
        "q": "Which of the following is true about functional components?",
        "o": [
            "They are plain JavaScript functions that return React elements",
            "They must extend React.Component",
            "They cannot accept props",
            "They always require state"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function UpperCaseDemo() {\n  const text = 'learn react';\n  return <h3>{text.toUpperCase()}</h3>;\n}\n\nReactDOM.render(<UpperCaseDemo />, document.getElementById('root'));",
        "o": [
            "A heading with 'LEARN REACT'",
            "A heading with 'learn react'",
            "Nothing will render",
            "An error because toUpperCase() is not supported in JSX"
        ]
    },
    {
        "q": "Which of the following is true about JSX expressions?",
        "o": [
            "They must be wrapped in curly braces when used inside JSX",
            "They must be wrapped in quotes",
            "They must always return strings",
            "They cannot include JavaScript operators"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function BoolRender() {\n  const flag = true;\n  return <p>{flag && 'Visible'}</p>;\n}\n\nReactDOM.render(<BoolRender />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'Visible'",
            "A paragraph with 'true'",
            "An empty paragraph",
            "An error because logical operators are not supported in JSX"
        ]
    },
    {
        "q": "Which of the following is true about props in functional components?",
        "o": [
            "Props are read-only values passed to components",
            "Props can be reassigned inside the component",
            "Props are mutable by default",
            "Props can only be numbers and strings"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function MultiLine() {\n  const msg = 'Hello';\n  return (\n    <div>\n      <span>{msg}</span>\n      <span>World</span>\n    </div>\n  );\n}\n\nReactDOM.render(<MultiLine />, document.getElementById('root'));",
        "o": [
            "A div with two spans: 'Hello' and 'World'",
            "A div with one span containing 'HelloWorld'",
            "Only 'Hello' will be rendered",
            "An error because multiple JSX children are not supported"
        ]
    },
    {
        "q": "Which of the following is true about rendering lists in React?",
        "o": [
            "Each child in a list should have a unique 'key' prop",
            "Keys are optional and not recommended",
            "Keys can be duplicated safely",
            "Keys must always be numbers"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NullVsEmpty() {\n  return <div>{null}</div>;\n}\n\nReactDOM.render(<NullVsEmpty />, document.getElementById('root'));",
        "o": [
            "An empty div with no child content",
            "A div with text 'null'",
            "Nothing at all in the DOM",
            "An error because null is not valid in JSX"
        ]
    },
    {
        "q": "Which of the following is true about Create React App?",
        "o": [
            "It sets up Babel and Webpack under the hood automatically",
            "It requires developers to manually configure Babel and Webpack",
            "It cannot be used with npm, only yarn",
            "It does not support JSX by default"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function InlineStyle() {\n  const styleObj = { color: 'blue', fontSize: '20px' };\n  return <p style={styleObj}>Styled Text</p>;\n}\n\nReactDOM.render(<InlineStyle />, document.getElementById('root'));",
        "o": [
            "A paragraph 'Styled Text' in blue with font size 20px",
            "A paragraph 'Styled Text' without styles",
            "An error because inline styles must be strings",
            "An error because fontSize must be written as 'font-size'"
        ]
    },
    {
        "q": "Which of the following is true about React's render method?",
        "o": [
            "It updates only the parts of the DOM that changed",
            "It replaces the entire DOM tree on every render",
            "It always forces a full page refresh",
            "It cannot render functional components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function Escaping() {\n  const script = '<script>alert(\"xss\")</script>';\n  return <div>{script}</div>;\n}\n\nReactDOM.render(<Escaping />, document.getElementById('root'));",
        "o": [
            "A div showing the literal text '<script>alert(\"xss\")</script>'",
            "A div that executes an alert box",
            "Nothing will render",
            "An error because strings cannot contain HTML"
        ]
    },
    {
        "q": "Which of the following is true about JSX attributes?",
        "o": [
            "They follow camelCase naming convention (e.g., onClick, className)",
            "They must always be lowercase like in HTML",
            "They can be written with hyphens like 'font-size'",
            "They cannot accept JavaScript expressions"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NumberRender() {\n  const x = 5;\n  const y = 10;\n  return <p>{x + y}</p>;\n}\n\nReactDOM.render(<NumberRender />, document.getElementById('root'));",
        "o": [
            "A paragraph with '15'",
            "A paragraph with '5+10'",
            "A paragraph with '510'",
            "An error because arithmetic is not supported in JSX"
        ]
    },
    {
        "q": "Which of the following is true about React Fragments?",
        "o": [
            "They allow returning multiple elements without adding extra nodes to the DOM",
            "They render as a <fragment> HTML tag",
            "They can only wrap a single child element",
            "They cannot be used inside functional components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function EmptyStringRender() {\n  return <div>{''}</div>;\n}\n\nReactDOM.render(<EmptyStringRender />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div with text ''",
            "A div with the word 'undefined'",
            "An error because empty strings are not allowed in JSX"
        ]
    },
    {
        "q": "Which of the following is true about functional component naming?",
        "o": [
            "Component names must begin with an uppercase letter",
            "Component names can start with lowercase letters",
            "Component names must match HTML tag names",
            "Component names must always include the word 'Component'"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ExpressionInAttr() {\n  const url = 'https://react.dev';\n  return <a href={url}>React Site</a>;\n}\n\nReactDOM.render(<ExpressionInAttr />, document.getElementById('root'));",
        "o": [
            "A link with text 'React Site' pointing to https://react.dev",
            "A link with text 'React Site' pointing to literal '{url}'",
            "Nothing will render",
            "An error because attributes cannot accept JavaScript expressions"
        ]
    },
    {
        "q": "Which of the following is true about embedding strings in JSX?",
        "o": [
            "Strings can be wrapped directly inside JSX without curly braces",
            "Strings must always be wrapped in curly braces",
            "Strings are not supported in JSX",
            "Strings must be defined outside JSX and imported"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function BooleanAttr() {\n  return <input type=\"checkbox\" disabled />;\n}\n\nReactDOM.render(<BooleanAttr />, document.getElementById('root'));",
        "o": [
            "A disabled checkbox input",
            "An enabled checkbox input",
            "Nothing will render",
            "An error because boolean attributes require a value"
        ]
    },
    {
        "q": "Which of the following is true about rendering elements in React?",
        "o": [
            "React elements are immutable once created",
            "React elements can be directly modified after creation",
            "React elements always require state to render",
            "React elements are functions that return HTML"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NestedJSX() {\n  return (\n    <div>\n      <h2>{'Title'}</h2>\n      <p>{2 * 3}</p>\n    </div>\n  );\n}\n\nReactDOM.render(<NestedJSX />, document.getElementById('root'));",
        "o": [
            "A div with a heading 'Title' and a paragraph '6'",
            "A div with a heading 'Title' and a paragraph '2*3'",
            "A div with a heading 'Title' only",
            "An error because mathematical expressions are not supported in JSX"
        ]
    },
    {
        "q": "Which of the following is true about Create React App?",
        "o": [
            "It includes a development server with hot reloading",
            "It does not support live reloading",
            "It requires manual configuration for hot reloading",
            "It cannot run locally without Docker"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ConditionalRender() {\n  const show = false;\n  return (\n    <div>\n      {show ? <span>Visible</span> : <span>Hidden</span>}\n    </div>\n  );\n}\n\nReactDOM.render(<ConditionalRender />, document.getElementById('root'));",
        "o": [
            "A div containing 'Hidden'",
            "A div containing 'Visible'",
            "An empty div",
            "An error because ternary operators are not supported in JSX"
        ]
    },
    {
        "q": "Which of the following is true about JSX syntax?",
        "o": [
            "JSX tags must be properly closed, either with a closing tag or self-closing syntax",
            "JSX tags can be left unclosed like HTML",
            "JSX tags cannot be nested",
            "JSX does not allow self-closing tags"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function MixedContent() {\n  return <p>{['R', 'e', 'a', 'c', 't']}</p>;\n}\n\nReactDOM.render(<MixedContent />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'React'",
            "A paragraph with 'R,e,a,c,t'",
            "A paragraph with '[\"R\",\"e\",\"a\",\"c\",\"t\"]'",
            "An error because arrays are not supported in JSX"
        ]
    },
    {
        "q": "Which of the following is true about functional components and props?",
        "o": [
            "Props are passed as the argument to the functional component",
            "Props are accessed using this.props",
            "Props can only be defined in class components",
            "Props must always be strings"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function DefaultProps({ name = 'Guest' }) {\n  return <h1>Hello, {name}</h1>;\n}\n\nReactDOM.render(<DefaultProps />, document.getElementById('root'));",
        "o": [
            "A heading 'Hello, Guest'",
            "A heading 'Hello, '",
            "An error because default props cannot be set in functional components",
            "Nothing will render"
        ]
    },
    {
        "q": "Which of the following is true about JSX and expressions?",
        "o": [
            "Any valid JavaScript expression can be embedded inside JSX using curly braces",
            "Only variables can be embedded inside JSX",
            "Only numbers and strings can be embedded inside JSX",
            "Expressions must always return HTML tags"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function StringConcat() {\n  const part1 = 'React';\n  const part2 = 'JS';\n  return <h2>{part1 + ' ' + part2}</h2>;\n}\n\nReactDOM.render(<StringConcat />, document.getElementById('root'));",
        "o": [
            "A heading 'React JS'",
            "A heading 'ReactJS'",
            "A heading 'part1 part2'",
            "An error because string concatenation is not supported in JSX"
        ]
    },
    {
        "q": "Which of the following is true about the root element in React rendering?",
        "o": [
            "A React app is usually rendered inside a single root DOM node",
            "React requires multiple root DOM nodes by default",
            "The root DOM node must always be a <div>",
            "The root DOM node cannot be customized"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function EmptyArrayRender() {\n  return <ul>{[]}</ul>;\n}\n\nReactDOM.render(<EmptyArrayRender />, document.getElementById('root'));",
        "o": [
            "An empty unordered list",
            "A list with one item: []",
            "A list with commas",
            "An error because arrays cannot be empty in JSX"
        ]
    },
    {
        "q": "Which of the following is true about Create React App and build output?",
        "o": [
            "The production build generates optimized static files (HTML, CSS, JS)",
            "The production build requires a running Node.js server to work",
            "The production build outputs only a single HTML file without JS",
            "The production build cannot be deployed without Webpack configuration changes"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function BooleanJSX() {\n  return <div>{true}</div>;\n}\n\nReactDOM.render(<BooleanJSX />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div with the word 'true'",
            "A div with the number 1",
            "An error because booleans cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following is true about functional components?",
        "o": [
            "They must return a React element or null",
            "They can return multiple unrelated top-level elements directly",
            "They cannot accept parameters",
            "They can only render primitive values"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NestedElements() {\n  return (\n    <div>\n      <p>First</p>\n      <p>Second</p>\n    </div>\n  );\n}\n\nReactDOM.render(<NestedElements />, document.getElementById('root'));",
        "o": [
            "A div containing two paragraphs: 'First' and 'Second'",
            "Only the first paragraph will render",
            "Only the second paragraph will render",
            "An error because JSX cannot contain multiple child tags"
        ]
    },
    {
        "q": "Which of the following is true about JSX and attributes?",
        "o": [
            "Attributes in JSX can accept JavaScript expressions inside curly braces",
            "Attributes in JSX must always be strings",
            "Attributes in JSX cannot contain variables",
            "Attributes in JSX must match HTML names exactly"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ExpressionRender() {\n  return <span>{10 > 5 ? 'Yes' : 'No'}</span>;\n}\n\nReactDOM.render(<ExpressionRender />, document.getElementById('root'));",
        "o": [
            "A span with 'Yes'",
            "A span with 'No'",
            "An error because comparison operators are not supported in JSX",
            "A span with '10 > 5 ? Yes : No'"
        ]
    },
    {
        "q": "Which of the following is true about JSX comments?",
        "o": [
            "Comments inside JSX must be wrapped in curly braces like {/* comment */}",
            "Comments in JSX can use // directly inside tags",
            "Comments in JSX must be written outside of the return statement",
            "JSX does not support comments at all"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function UndefinedRender() {\n  return <div>{undefined}</div>;\n}\n\nReactDOM.render(<UndefinedRender />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div with the word 'undefined'",
            "Nothing will render and throws error",
            "A div with 'null'"
        ]
    },
    {
        "q": "Which of the following is true about JSX case sensitivity?",
        "o": [
            "Component names must start with a capital letter",
            "Component names can start with lowercase letters",
            "All JSX tags must be lowercase",
            "JSX ignores case in component names"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NullRender() {\n  return null;\n}\n\nReactDOM.render(<NullRender />, document.getElementById('root'));",
        "o": [
            "Nothing will render",
            "A div with 'null'",
            "An error because components must return JSX",
            "A paragraph with 'null'"
        ]
    },
    {
        "q": "Which of the following is true about rendering lists in JSX?",
        "o": [
            "Each element in a list should have a unique key prop",
            "React automatically assigns unique keys to list items",
            "Keys are optional and have no effect",
            "Keys must always be numbers"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NumberRender() {\n  return <h3>{100}</h3>;\n}\n\nReactDOM.render(<NumberRender />, document.getElementById('root'));",
        "o": [
            "A heading with '100'",
            "A heading with nothing",
            "A heading with 'Number'",
            "An error because numbers are not allowed in JSX"
        ]
    },
    {
        "q": "Which of the following is true about Create React App and dependencies?",
        "o": [
            "It comes with React, ReactDOM, and build tools preconfigured",
            "It only installs React and ReactDOM without tooling",
            "It requires manual setup of Babel and Webpack",
            "It cannot include testing libraries"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function StringRender() {\n  return <p>{'Hello'}</p>;\n}\n\nReactDOM.render(<StringRender />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'Hello'",
            "An empty paragraph",
            "A paragraph with {'Hello'}",
            "An error because strings must not be wrapped in curly braces"
        ]
    },
    {
        "q": "Which of the following is true about JSX attribute naming?",
        "o": [
            "JSX uses camelCase for most HTML attributes (e.g., className, tabIndex)",
            "JSX attributes must always match HTML names exactly",
            "JSX attributes must be uppercase",
            "JSX attributes cannot use camelCase"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function FragmentRender() {\n  return (\n    <>\n      <h1>Title</h1>\n      <p>Description</p>\n    </>\n  );\n}\n\nReactDOM.render(<FragmentRender />, document.getElementById('root'));",
        "o": [
            "A heading 'Title' and a paragraph 'Description'",
            "Only the heading 'Title'",
            "Only the paragraph 'Description'",
            "An error because empty tags <> </> are not valid"
        ]
    },
    {
        "q": "Which of the following is true about functional component return values?",
        "o": [
            "They can return null to render nothing",
            "They must always return a JSX element",
            "They cannot return arrays of elements",
            "They cannot return fragments"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ArithmeticRender() {\n  return <span>{5 * 4}</span>;\n}\n\nReactDOM.render(<ArithmeticRender />, document.getElementById('root'));",
        "o": [
            "A span with '20'",
            "A span with '5*4'",
            "An error because multiplication is not allowed in JSX",
            "A span with nothing"
        ]
    },
    {
        "q": "Which of the following is true about the `public` folder in a Create React App project?",
        "o": [
            "Files in the `public` folder can be accessed directly by their URL path",
            "Files in the `public` folder are automatically bundled with Webpack",
            "React components must always be placed in the `public` folder",
            "The `public` folder is only for storing CSS files"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function EmptyStringRender() {\n  return <div>{''}</div>;\n}\n\nReactDOM.render(<EmptyStringRender />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div with ''",
            "An error because empty strings are not valid in JSX",
            "A div with 'undefined'"
        ]
    },
    {
        "q": "Which of the following is true about JSX expressions?",
        "o": [
            "They must be wrapped in curly braces to embed JavaScript",
            "They must be wrapped in parentheses",
            "They cannot be used inside attributes",
            "They can only return strings"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NestedJSX() {\n  return <div>{<span>Inside</span>}</div>;\n}\n\nReactDOM.render(<NestedJSX />, document.getElementById('root'));",
        "o": [
            "A div with a span containing 'Inside'",
            "A div with '{<span>Inside</span>}'",
            "An error because JSX cannot nest inside curly braces",
            "An empty div"
        ]
    },
    {
        "q": "Which of the following is true about ReactDOM.render in Create React App?",
        "o": [
            "It takes a React element and a DOM container as arguments",
            "It only takes one argument",
            "It returns the DOM element rendered",
            "It can only render class components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function BooleanFalseRender() {\n  return <section>{false}</section>;\n}\n\nReactDOM.render(<BooleanFalseRender />, document.getElementById('root'));",
        "o": [
            "An empty section",
            "A section with 'false'",
            "A section with '0'",
            "An error because booleans are not valid in JSX"
        ]
    },
    {
        "q": "Which of the following is true about functional component naming?",
        "o": [
            "They should start with a capital letter to be recognized as components",
            "They must always be written in lowercase",
            "They can only be named 'App' to work",
            "They cannot contain underscores"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function TernaryFalseRender() {\n  return <div>{false ? 'Yes' : 'No'}</div>;\n}\n\nReactDOM.render(<TernaryFalseRender />, document.getElementById('root'));",
        "o": [
            "A div with 'No'",
            "A div with 'Yes'",
            "An error because ternary operators are not allowed in JSX",
            "A div with nothing"
        ]
    },
    {
        "q": "Which of the following is true about Create React App and environment variables?",
        "o": [
            "Environment variables must start with REACT_APP_ to be recognized",
            "Any environment variable can be accessed in React code",
            "Environment variables are automatically exposed without restrictions",
            "Environment variables cannot be used in React"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function MultipleExpressions() {\n  return <p>{1 + 1}, {2 + 2}</p>;\n}\n\nReactDOM.render(<MultipleExpressions />, document.getElementById('root'));",
        "o": [
            "A paragraph with '2, 4'",
            "A paragraph with '1+1, 2+2'",
            "An error because JSX cannot have multiple expressions",
            "An empty paragraph"
        ]
    },
    {
        "q": "Which of the following is true about `index.js` in a Create React App project?",
        "o": [
            "It is typically the entry point where ReactDOM.render is called",
            "It is optional and can be deleted without impact",
            "It is only used for storing CSS styles",
            "It is reserved exclusively for service worker code"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function UndefinedRender() {\n  return <div>{undefined}</div>;\n}\n\nReactDOM.render(<UndefinedRender />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div with 'undefined'",
            "An error because undefined is invalid in JSX",
            "A div with 'null'"
        ]
    },
    {
        "q": "Which of the following is true about comments in JSX?",
        "o": [
            "They must be wrapped in curly braces and use JavaScript comment syntax",
            "They can use standard HTML comment syntax `<!-- -->`",
            "They are not supported inside JSX",
            "They must always appear outside the root element"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function InlineStyle() {\n  return <h2 style={{color: 'blue'}}>Hello</h2>;\n}\n\nReactDOM.render(<InlineStyle />, document.getElementById('root'));",
        "o": [
            "A heading 'Hello' in blue",
            "A heading 'Hello' in black",
            "An error because style must be a string in JSX",
            "A heading 'style={{color: 'blue'}}'"
        ]
    },
    {
        "q": "Which of the following is true about functional component parameters?",
        "o": [
            "They can accept props as arguments",
            "They cannot take any arguments",
            "They must always take two arguments",
            "They are automatically provided with state"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NullStringRender() {\n  return <span>{null + ''}</span>;\n}\n\nReactDOM.render(<NullStringRender />, document.getElementById('root'));",
        "o": [
            "A span with 'null'",
            "A span with ''",
            "An error because null cannot be concatenated",
            "A span with 'undefined'"
        ]
    },
    {
        "q": "Which of the following is true about JSX wrapping elements?",
        "o": [
            "JSX must return a single parent element or fragment",
            "JSX can freely return multiple sibling elements without wrappers",
            "JSX can return multiple root elements if they are inside an array",
            "JSX root elements are optional in Create React App"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function BooleanTrueRender() {\n  return <p>{true}</p>;\n}\n\nReactDOM.render(<BooleanTrueRender />, document.getElementById('root'));",
        "o": [
            "An empty paragraph",
            "A paragraph with 'true'",
            "An error because booleans cannot be rendered",
            "A paragraph with '1'"
        ]
    },
    {
        "q": "Which of the following is true about JSX and reserved JavaScript keywords?",
        "o": [
            "Attributes like 'class' must be replaced with 'className'",
            "All JavaScript keywords can be directly used as JSX attributes",
            "JSX ignores reserved words and allows them freely",
            "Reserved words must always be quoted"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function TemplateLiteralRender() {\n  const name = 'React';\n  return <div>{`Hello, ${name}`}</div>;\n}\n\nReactDOM.render(<TemplateLiteralRender />, document.getElementById('root'));",
        "o": [
            "A div with 'Hello, React'",
            "A div with 'Hello, ${name}'",
            "A div with 'Hello, '",
            "An error because template literals are invalid in JSX"
        ]
    },
    {
        "q": "Which of the following is true about the `reportWebVitals.js` file in Create React App?",
        "o": [
            "It is used to measure and log performance metrics",
            "It is mandatory for React apps to run",
            "It contains the default React component",
            "It is only for configuring ESLint"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ExpressionInsideAttr() {\n  const size = 24;\n  return <img src=\"logo.png\" width={size} />;\n}\n\nReactDOM.render(<ExpressionInsideAttr />, document.getElementById('root'));",
        "o": [
            "An image with width set to 24",
            "An image with width set to 'size'",
            "An error because JSX attributes cannot contain expressions",
            "An image with no width"
        ]
    },
    {
        "q": "Which of the following is true about fragments in JSX?",
        "o": [
            "They allow returning multiple elements without adding extra nodes to the DOM",
            "They must always be written as <Fragment></Fragment>",
            "They automatically wrap every JSX element",
            "They are only available in class components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function MapRender() {\n  const nums = [1, 2, 3];\n  return <ul>{nums.map(n => <li>{n}</li>)}</ul>;\n}\n\nReactDOM.render(<MapRender />, document.getElementById('root'));",
        "o": [
            "A list with items 1, 2, 3",
            "A list with a single item '1,2,3'",
            "An error because map cannot be used in JSX",
            "An empty list"
        ]
    },
    {
        "q": "Which of the following is true about functional components returning null?",
        "o": [
            "Returning null renders nothing to the DOM",
            "Returning null throws an error",
            "Returning null renders the string 'null'",
            "Returning null renders an empty div"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function InlineConditional() {\n  const show = false;\n  return <div>{show && <span>Visible</span>}</div>;\n}\n\nReactDOM.render(<InlineConditional />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div with 'Visible'",
            "An error because && is not valid in JSX",
            "A div with 'false'"
        ]
    },
    {
        "q": "Which of the following is true about Create React App and service workers?",
        "o": [
            "Service workers are supported but disabled by default",
            "Service workers are always enabled in production builds",
            "Service workers cannot be used with Create React App",
            "Service workers are enabled by default in development"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ObjectRender() {\n  const obj = {a: 1};\n  return <div>{obj}</div>;\n}\n\nReactDOM.render(<ObjectRender />, document.getElementById('root'));",
        "o": [
            "An error because objects cannot be rendered directly in JSX",
            "A div with '[object Object]'",
            "A div with 'a: 1'",
            "An empty div"
        ]
    },
    {
        "q": "Which of the following is true about JSX case sensitivity?",
        "o": [
            "HTML tags must be lowercase while React components must be capitalized",
            "All JSX tags are case insensitive",
            "React components must always be lowercase",
            "JSX treats lowercase and uppercase tags the same way"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NestedArrayRender() {\n  return <div>{[<span>One</span>, <span>Two</span>]}</div>;\n}\n\nReactDOM.render(<NestedArrayRender />, document.getElementById('root'));",
        "o": [
            "A div with two spans: 'One' and 'Two'",
            "A div with '[object Object]'",
            "An error because arrays cannot be rendered in JSX",
            "An empty div"
        ]
    },
    {
        "q": "Which of the following is true about `public/index.html` in a Create React App project?",
        "o": [
            "It provides the single HTML file where the React app mounts",
            "It is automatically generated on every build and cannot be modified",
            "It is only used for storing JavaScript imports",
            "It defines all React components in the application"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function UndefinedStringRender() {\n  return <p>{String(undefined)}</p>;\n}\n\nReactDOM.render(<UndefinedStringRender />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'undefined'",
            "A paragraph with ''",
            "An error because undefined cannot be converted to a string",
            "An empty paragraph"
        ]
    },
    {
        "q": "Which of the following is true about `npm start` in Create React App?",
        "o": [
            "It starts the development server with live reloading",
            "It compiles a production build",
            "It installs dependencies",
            "It generates a new React project"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function BooleanFalseRender() {\n  return <span>{false}</span>;\n}\n\nReactDOM.render(<BooleanFalseRender />, document.getElementById('root'));",
        "o": [
            "An empty span",
            "A span with 'false'",
            "An error because booleans are not allowed in JSX",
            "A span with '0'"
        ]
    },
    {
        "q": "Which of the following is true about props in functional components?",
        "o": [
            "They are read-only and cannot be modified inside the component",
            "They can be reassigned like local variables",
            "They are automatically deep cloned",
            "They must always be strings"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ExpressionEval() {\n  return <h3>{2 * 3 + 1}</h3>;\n}\n\nReactDOM.render(<ExpressionEval />, document.getElementById('root'));",
        "o": [
            "A heading with '7'",
            "A heading with '2 * 3 + 1'",
            "An error because arithmetic is not allowed in JSX",
            "A heading with 'undefined'"
        ]
    },
    {
        "q": "Which of the following is true about the `App.js` file in Create React App?",
        "o": [
            "It usually contains the root React component",
            "It is automatically ignored in production builds",
            "It must only export multiple components",
            "It cannot contain JSX"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function EmptyArrayRender() {\n  return <div>{[]}</div>;\n}\n\nReactDOM.render(<EmptyArrayRender />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div with '[]'",
            "A div with 'undefined'",
            "An error because empty arrays cannot be rendered"
        ]
    },
    {
        "q": "Which of the following is true about default exports in Create React App components?",
        "o": [
            "A file can only have one default export",
            "A file can have multiple default exports",
            "Default exports must be named 'App'",
            "Default exports are optional and ignored"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NumberAsString() {\n  return <p>{'10' + 5}</p>;\n}\n\nReactDOM.render(<NumberAsString />, document.getElementById('root'));",
        "o": [
            "A paragraph with '105'",
            "A paragraph with '15'",
            "An error because string and number cannot be concatenated",
            "A paragraph with ''"
        ]
    },
    {
        "q": "Which of the following is true about the `manifest.json` file in Create React App?",
        "o": [
            "It provides metadata used for Progressive Web Apps (PWA)",
            "It controls Webpack bundling directly",
            "It defines all React routes",
            "It must always include React components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NullRender() {\n  return <div>{null}</div>;\n}\n\nReactDOM.render(<NullRender />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div with 'null'",
            "An error because null is not allowed in JSX",
            "A div with 'undefined'"
        ]
    },
    {
        "q": "Which of the following is true about `npm run build` in Create React App?",
        "o": [
            "It creates an optimized production build",
            "It starts the development server",
            "It runs unit tests by default",
            "It generates a new React component"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ExpressionInsideText() {\n  return <h2>Hello {\"World\"}</h2>;\n}\n\nReactDOM.render(<ExpressionInsideText />, document.getElementById('root'));",
        "o": [
            "A heading with 'Hello World'",
            "A heading with 'Hello {\"World\"}'",
            "An error because strings cannot be wrapped in braces",
            "A heading with 'Hello'"
        ]
    },
    {
        "q": "Which of the following is true about the `node_modules` folder in Create React App?",
        "o": [
            "It contains all installed dependencies for the project",
            "It must always be committed to version control",
            "It is automatically bundled into `index.html`",
            "It only contains React source code"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function InlineTernary() {\n  const flag = true;\n  return <span>{flag ? 'Yes' : 'No'}</span>;\n}\n\nReactDOM.render(<InlineTernary />, document.getElementById('root'));",
        "o": [
            "A span with 'Yes'",
            "A span with 'No'",
            "An error because ternary operators are not valid in JSX",
            "A span with 'true'"
        ]
    },
    {
        "q": "Which of the following is true about static assets in Create React App?",
        "o": [
            "Files in the public folder are copied to the build folder as-is",
            "Files in the public folder are automatically minified",
            "Static assets must always be imported via JavaScript",
            "Static assets are not supported in Create React App"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function ArrayWithStrings() {\n  return <div>{['A', 'B', 'C']}</div>;\n}\n\nReactDOM.render(<ArrayWithStrings />, document.getElementById('root'));",
        "o": [
            "A div with 'ABC'",
            "A div with 'A,B,C'",
            "An error because arrays cannot be rendered directly",
            "A div with 'undefined'"
        ]
    },
    {
        "q": "Which of the following is true about the default `reportWebVitals` function in Create React App?",
        "o": [
            "It can be used to log or send performance metrics to analytics endpoints",
            "It is required for React rendering to work",
            "It automatically optimizes performance",
            "It replaces ReactDOM.render by default"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxInVariable() {\n  const element = <strong>Bold</strong>;\n  return <div>{element}</div>;\n}\n\nReactDOM.render(<JsxInVariable />, document.getElementById('root'));",
        "o": [
            "A div with a strong tag containing 'Bold'",
            "A div with '[object Object]'",
            "An error because JSX cannot be stored in a variable",
            "An empty div"
        ]
    },
    {
        "q": "Which of the following is true about JSX comments?",
        "o": [
            "They must be wrapped in curly braces inside JSX",
            "They can be written with // directly inside JSX",
            "They require a special <Comment> tag",
            "They are automatically stripped without syntax"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxFragment() {\n  return (\n    <>\n      <p>One</p>\n      <p>Two</p>\n    </>\n  );\n}\n\nReactDOM.render(<JsxFragment />, document.getElementById('root'));",
        "o": [
            "Two paragraphs: 'One' and 'Two'",
            "A syntax error because multiple elements must have a single parent",
            "Only the first paragraph 'One'",
            "A string 'OneTwo'"
        ]
    },
    {
        "q": "Which of the following is true about functional components in React?",
        "o": [
            "They are plain JavaScript functions that return JSX",
            "They must always extend React.Component",
            "They require a constructor method",
            "They cannot accept props"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function BooleanTrueRender() {\n  return <span>{true}</span>;\n}\n\nReactDOM.render(<BooleanTrueRender />, document.getElementById('root'));",
        "o": [
            "An empty span",
            "A span with 'true'",
            "An error because true is invalid JSX",
            "A span with '1'"
        ]
    },
    {
        "q": "Which of the following is true about `index.js` in Create React App?",
        "o": [
            "It is the main entry point that renders the root component",
            "It automatically defines all routes",
            "It contains HTML markup for the application",
            "It must be manually created after installation"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxStringInterpolation() {\n  const name = 'React';\n  return <h1>{`Hello, ${name}`}</h1>;\n}\n\nReactDOM.render(<JsxStringInterpolation />, document.getElementById('root'));",
        "o": [
            "A heading with 'Hello, React'",
            "A heading with 'Hello, ${name}'",
            "An error because template literals are not supported in JSX",
            "A heading with 'Hello,'"
        ]
    },
    {
        "q": "Which of the following is true about rendering lists in React?",
        "o": [
            "Each child element should have a unique 'key' prop",
            "Keys can always be the same without affecting performance",
            "Lists must be wrapped in <ul> or <ol>",
            "Lists can only contain strings"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxWithFunctionCall() {\n  function greet() { return 'Hi'; }\n  return <div>{greet()}</div>;\n}\n\nReactDOM.render(<JsxWithFunctionCall />, document.getElementById('root'));",
        "o": [
            "A div with 'Hi'",
            "A div with 'undefined'",
            "An error because functions cannot be called inside JSX",
            "An empty div"
        ]
    },
    {
        "q": "Which of the following is true about `public` folder usage in Create React App?",
        "o": [
            "Files in it can be referenced directly with absolute paths",
            "It automatically transpiles JS files inside it",
            "It is removed during the build process",
            "It must always contain App.js"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NestedJsx() {\n  return <div><span>{1 + 1}</span></div>;\n}\n\nReactDOM.render(<NestedJsx />, document.getElementById('root'));",
        "o": [
            "A div containing a span with '2'",
            "A div containing a span with '1 + 1'",
            "An error because expressions cannot be nested in JSX",
            "A div with no content"
        ]
    },
    {
        "q": "Which of the following is true about JSX attributes?",
        "o": [
            "They use camelCase naming convention for most attributes",
            "They must always be written in lowercase",
            "They cannot accept JavaScript expressions",
            "They are limited to standard HTML attributes only"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function NullAttribute() {\n  return <input value={null} />;\n}\n\nReactDOM.render(<NullAttribute />, document.getElementById('root'));",
        "o": [
            "An empty input field",
            "An input field showing 'null'",
            "An error because null is not valid for attributes",
            "An input with value 'undefined'"
        ]
    },
    {
        "q": "Which of the following is true about functional components compared to class components?",
        "o": [
            "They are generally simpler and easier to test",
            "They must always manage state",
            "They cannot accept props by default",
            "They are slower than class components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function UndefinedRender() {\n  return <p>{undefined}</p>;\n}\n\nReactDOM.render(<UndefinedRender />, document.getElementById('root'));",
        "o": [
            "An empty paragraph",
            "A paragraph with 'undefined'",
            "An error because undefined is not valid in JSX",
            "No element will render at all"
        ]
    },
    {
        "q": "Which of the following is true about the `serviceWorker.js` (or `service-worker.js`) file in Create React App?",
        "o": [
            "It enables offline capabilities and caching when registered",
            "It is required for React apps to run",
            "It automatically reloads components on save",
            "It controls JSX transpilation"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxExpressionWithArrayJoin() {\n  const arr = ['X', 'Y'];\n  return <div>{arr.join('-')}</div>;\n}\n\nReactDOM.render(<JsxExpressionWithArrayJoin />, document.getElementById('root'));",
        "o": [
            "A div with 'X-Y'",
            "A div with 'XY'",
            "An error because join cannot be used in JSX",
            "An empty div"
        ]
    },
    {
        "q": "Which of the following is true about using JavaScript inside JSX?",
        "o": [
            "Expressions must be wrapped in curly braces",
            "Any JavaScript code is valid without curly braces",
            "Only arithmetic expressions are allowed",
            "Function calls cannot be placed in JSX"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxNestedExpression() {\n  const num = 5;\n  return <h2>{num > 3 ? 'Big' : 'Small'}</h2>;\n}\n\nReactDOM.render(<JsxNestedExpression />, document.getElementById('root'));",
        "o": [
            "A heading with 'Big'",
            "A heading with 'Small'",
            "An error because conditionals are not allowed in JSX",
            "A heading with 'true'"
        ]
    },
    {
        "q": "Which of the following is true about editing `index.html` in Create React App?",
        "o": [
            "It provides the single root div where React mounts the app",
            "It defines all React routes automatically",
            "It should contain React components directly",
            "It must never be edited manually"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxArithmetic() {\n  return <span>{10 / 2}</span>;\n}\n\nReactDOM.render(<JsxArithmetic />, document.getElementById('root'));",
        "o": [
            "A span with '5'",
            "A span with '10/2'",
            "An error because division is not allowed in JSX",
            "A span with 'undefined'"
        ]
    },
    {
        "q": "Which of the following is true about React functional components and props?",
        "o": [
            "Props are passed as function arguments",
            "Props must be declared with PropTypes to be used",
            "Props can only be used in class components",
            "Props are mutable by default"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxLogicalAnd() {\n  const show = false;\n  return <div>{show && <p>Hello</p>}</div>;\n}\n\nReactDOM.render(<JsxLogicalAnd />, document.getElementById('root'));",
        "o": [
            "A div with no content",
            "A div with 'false'",
            "A div containing <p>Hello</p>",
            "An error because && is not valid in JSX"
        ]
    },
    {
        "q": "Which of the following is true about Create React App environment variables?",
        "o": [
            "They must start with REACT_APP_ to be available in the app",
            "They can be named arbitrarily and still work",
            "They are stored in package.json by default",
            "They are automatically injected into JSX without configuration"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxBooleanFalse() {\n  return <h1>{false}</h1>;\n}\n\nReactDOM.render(<JsxBooleanFalse />, document.getElementById('root'));",
        "o": [
            "An empty h1 element",
            "A heading with 'false'",
            "An error because false is invalid in JSX",
            "No element will be rendered"
        ]
    },
    {
        "q": "Which of the following is true about ReactDOM.render in a basic app?",
        "o": [
            "It renders a React element into the root DOM node",
            "It is only used inside functional components",
            "It replaces the entire document with React components",
            "It must be called inside every component"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxNumberAsString() {\n  return <p>{'10' + 5}</p>;\n}\n\nReactDOM.render(<JsxNumberAsString />, document.getElementById('root'));",
        "o": [
            "A paragraph with '105'",
            "A paragraph with '15'",
            "An error because string and number cannot be concatenated",
            "An empty paragraph"
        ]
    },
    {
        "q": "Which of the following is true about JSX compared to HTML?",
        "o": [
            "JSX attributes follow camelCase naming (e.g., className instead of class)",
            "JSX allows reserved words like 'class' and 'for' directly",
            "JSX automatically closes all tags without syntax rules",
            "JSX does not allow embedding JavaScript expressions"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxArrayRender() {\n  return <div>{['A', 'B', 'C']}</div>;\n}\n\nReactDOM.render(<JsxArrayRender />, document.getElementById('root'));",
        "o": [
            "A div with 'ABC'",
            "A div with 'A,B,C'",
            "An error because arrays cannot be rendered in JSX",
            "An empty div"
        ]
    },
    {
        "q": "Which of the following is true about the default App.js file in Create React App?",
        "o": [
            "It usually contains a functional component as the main UI",
            "It cannot import CSS files",
            "It defines environment variables for the project",
            "It is only a configuration file"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxTernary() {\n  const value = 0;\n  return <p>{value ? 'Yes' : 'No'}</p>;\n}\n\nReactDOM.render(<JsxTernary />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'No'",
            "A paragraph with 'Yes'",
            "A paragraph with '0'",
            "An error because ternary expressions are not supported in JSX"
        ]
    },
    {
        "q": "Which of the following is true about returning multiple elements from a React functional component?",
        "o": [
            "They must be wrapped in a single parent element or React.Fragment",
            "They can be returned without any wrapper",
            "They can only be returned in an array, never in JSX",
            "They must always be wrapped in a <div>"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxNullRender() {\n  return null;\n}\n\nReactDOM.render(<JsxNullRender />, document.getElementById('root'));",
        "o": [
            "Nothing will render to the DOM",
            "It will render 'null' as text",
            "An error will be thrown",
            "It will render an empty <div>"
        ]
    },
    {
        "q": "Which of the following is true about JSX expressions inside attributes?",
        "o": [
            "They must be wrapped in curly braces",
            "They can only contain strings",
            "They cannot include function calls",
            "They must be declared outside of JSX first"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxFunctionCall() {\n  const greet = () => 'Hello!';\n  return <h3>{greet()}</h3>;\n}\n\nReactDOM.render(<JsxFunctionCall />, document.getElementById('root'));",
        "o": [
            "A heading with 'Hello!'",
            "A heading with 'greet()'",
            "An error because functions cannot be called in JSX",
            "An empty heading"
        ]
    },
    {
        "q": "Which of the following is true about the public folder in Create React App?",
        "o": [
            "Files inside it are served as-is without processing",
            "It is meant only for JavaScript files",
            "It automatically compiles JSX to JavaScript",
            "It cannot contain static assets like images"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxUndefinedAttribute() {\n  return <img alt={undefined} />;\n}\n\nReactDOM.render(<JsxUndefinedAttribute />, document.getElementById('root'));",
        "o": [
            "An img element with no alt attribute",
            "An img element with alt=\"undefined\"",
            "An error because undefined is not valid",
            "Nothing will render"
        ]
    },
    {
        "q": "Which of the following is true about functional components?",
        "o": [
            "They can return JSX or null",
            "They must always return a string",
            "They cannot receive props",
            "They must be defined using the 'function' keyword only"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxArrayOfElements() {\n  return <div>{[<span>A</span>, <span>B</span>]}</div>;\n}\n\nReactDOM.render(<JsxArrayOfElements />, document.getElementById('root'));",
        "o": [
            "A div with two span elements: 'A' and 'B'",
            "A div with text 'A,B'",
            "An error because arrays of elements are invalid in JSX",
            "A div with 'undefined'"
        ]
    },
    {
        "q": "Which of the following is true about React rendering elements?",
        "o": [
            "React updates only the parts of the DOM that changed",
            "React re-renders the entire HTML page each time",
            "React forces a full page reload to update UI",
            "React requires manual DOM manipulation for every update"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxMathExpression() {\n  return <h4>{2 * 3 + 1}</h4>;\n}\n\nReactDOM.render(<JsxMathExpression />, document.getElementById('root'));",
        "o": [
            "A heading with '7'",
            "A heading with '2 * 3 + 1'",
            "An error because math operations are not allowed in JSX",
            "An empty heading"
        ]
    },
    {
        "q": "Which of the following is true about JSX comments?",
        "o": [
            "They must be wrapped in curly braces inside JSX",
            "They use the same // syntax as JavaScript",
            "They must be written outside of return statements",
            "They cannot be used at all in JSX"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxEmptyString() {\n  return <p>{\"\"}</p>;\n}\n\nReactDOM.render(<JsxEmptyString />, document.getElementById('root'));",
        "o": [
            "An empty paragraph element",
            "A paragraph with '\"\"'",
            "A paragraph with 'undefined'",
            "Nothing will be rendered"
        ]
    },
    {
        "q": "Which of the following is true about functional component naming?",
        "o": [
            "Component names must begin with a capital letter",
            "Component names can be lowercase by convention",
            "Components must always match their file name",
            "Component names cannot contain more than one word"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxBooleanTrue() {\n  return <span>{true}</span>;\n}\n\nReactDOM.render(<JsxBooleanTrue />, document.getElementById('root'));",
        "o": [
            "An empty span element",
            "A span with 'true'",
            "An error because true cannot be used in JSX",
            "Nothing at all"
        ]
    },
    {
        "q": "Which of the following is true about React's virtual DOM?",
        "o": [
            "It is a lightweight in-memory representation of the real DOM",
            "It is the actual browser DOM",
            "It must be manually synchronized by the developer",
            "It only exists in class components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxInlineStyle() {\n  return <h2 style={{color: 'blue', fontSize: '20px'}}>Text</h2>;\n}\n\nReactDOM.render(<JsxInlineStyle />, document.getElementById('root'));",
        "o": [
            "A heading with blue text and font size 20px",
            "An error because styles cannot be objects",
            "A heading with no styles applied",
            "A heading with 'style=[object Object]'"
        ]
    },
    {
        "q": "Which of the following is true about Create React App's default setup?",
        "o": [
            "It includes Webpack and Babel configuration hidden by default",
            "It requires developers to manually configure Webpack",
            "It does not support JSX by default",
            "It requires TypeScript to compile JavaScript"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxNullAttribute() {\n  return <input value={null} />;\n}\n\nReactDOM.render(<JsxNullAttribute />, document.getElementById('root'));",
        "o": [
            "An input with an empty value",
            "An input with 'null' as its value",
            "An error because null cannot be used",
            "No input will be rendered"
        ]
    },
    {
        "q": "Which of the following is true about props in functional components?",
        "o": [
            "They are read-only and should not be modified",
            "They can be reassigned directly inside the component",
            "They are optional but must always be objects",
            "They can only hold string values"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxMultipleExpressions() {\n  const a = 2, b = 3;\n  return <div>{a + b}{' and '}{b - a}</div>;\n}\n\nReactDOM.render(<JsxMultipleExpressions />, document.getElementById('root'));",
        "o": [
            "A div with '5 and 1'",
            "A div with '23 and 1'",
            "An error because multiple expressions cannot be used",
            "An empty div"
        ]
    },
    {
        "q": "Which of the following is true about JSX attribute naming?",
        "o": [
            "They follow camelCase for most attributes (e.g., className, htmlFor)",
            "They must exactly match HTML attribute names",
            "They can be written in snake_case",
            "They can only use lowercase letters"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxFalseValue() {\n  return <div>{false}</div>;\n}\n\nReactDOM.render(<JsxFalseValue />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div with 'false'",
            "Nothing at all",
            "An error is thrown"
        ]
    },
    {
        "q": "Which of the following is true about rendering elements in React?",
        "o": [
            "Once rendered, elements are immutable",
            "Elements can be directly modified after rendering",
            "Elements automatically convert into DOM nodes",
            "Elements are tied directly to component state"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxObjectRender() {\n  const obj = {x: 1};\n  return <p>{obj}</p>;\n}\n\nReactDOM.render(<JsxObjectRender />, document.getElementById('root'));",
        "o": [
            "An error because objects are not valid as React children",
            "A paragraph with '[object Object]'",
            "A paragraph with '1'",
            "An empty paragraph"
        ]
    },
    {
        "q": "Which of the following is true about Create React App development server?",
        "o": [
            "It supports hot reloading by default",
            "It requires manual refresh for every change",
            "It compiles only when explicitly commanded",
            "It does not support JSX"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxExpressionString() {\n  return <h1>{'React'.toUpperCase()}</h1>;\n}\n\nReactDOM.render(<JsxExpressionString />, document.getElementById('root'));",
        "o": [
            "A heading with 'REACT'",
            "A heading with 'React'",
            "A heading with 'toUpperCase()'",
            "An error because string methods are not allowed"
        ]
    },
    {
        "q": "Which of the following is true about default exports in functional components?",
        "o": [
            "A file can only have one default export",
            "Multiple default exports can exist in a file",
            "Default exports must always be classes",
            "Functional components cannot use default exports"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxNullVsUndefined() {\n  return <p>{null}{undefined}</p>;\n}\n\nReactDOM.render(<JsxNullVsUndefined />, document.getElementById('root'));",
        "o": [
            "An empty paragraph element",
            "A paragraph with 'nullundefined'",
            "A paragraph with 'null'",
            "A paragraph with 'undefined'"
        ]
    },
    {
        "q": "Which of the following is true about functional components and props?",
        "o": [
            "Props are passed as a single object argument to the component",
            "Props must be declared globally before being used",
            "Props cannot be accessed directly in functional components",
            "Props can only contain primitive values"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxTernaryExpression() {\n  const isOk = true;\n  return <span>{isOk ? 'Yes' : 'No'}</span>;\n}\n\nReactDOM.render(<JsxTernaryExpression />, document.getElementById('root'));",
        "o": [
            "A span with 'Yes'",
            "A span with 'No'",
            "A span with 'true'",
            "An error because ternary operators are not allowed"
        ]
    },
    {
        "q": "Which of the following is true about JSX wrapping rules?",
        "o": [
            "JSX must return a single parent element",
            "JSX can return multiple sibling elements without a wrapper",
            "JSX must always return a <div>",
            "JSX does not allow fragments"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxArrayRender() {\n  return <ul>{[<li key='1'>A</li>, <li key='2'>B</li>]}</ul>;\n}\n\nReactDOM.render(<JsxArrayRender />, document.getElementById('root'));",
        "o": [
            "An unordered list with items A and B",
            "An error because arrays cannot be rendered",
            "An unordered list with '[object Object]'",
            "An empty unordered list"
        ]
    },
    {
        "q": "Which of the following is true about Create React App build command?",
        "o": [
            "It creates an optimized production-ready bundle",
            "It runs a local development server",
            "It only lints the code without building",
            "It generates TypeScript definitions automatically"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxNumberRender() {\n  return <h3>{42}</h3>;\n}\n\nReactDOM.render(<JsxNumberRender />, document.getElementById('root'));",
        "o": [
            "A heading with '42'",
            "A heading with 'number'",
            "An error because numbers cannot be rendered",
            "An empty heading"
        ]
    },
    {
        "q": "Which of the following is true about functional component returns?",
        "o": [
            "They must return valid JSX or null",
            "They can return multiple sibling JSX nodes without any wrapper",
            "They cannot return null",
            "They must return only strings"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxFragment() {\n  return <>\n    <span>One</span>\n    <span>Two</span>\n  </>;\n}\n\nReactDOM.render(<JsxFragment />, document.getElementById('root'));",
        "o": [
            "Two span elements with 'One' and 'Two'",
            "An error because fragments are not supported",
            "A div containing both spans",
            "Nothing will be rendered"
        ]
    },
    {
        "q": "Which of the following is true about Create React App eject command?",
        "o": [
            "It exposes all configuration files for customization",
            "It removes the application from React ecosystem",
            "It deletes node_modules permanently",
            "It upgrades React to the latest version"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxTemplateString() {\n  const name = 'React';\n  return <h2>{`Hello, ${name}`}</h2>;\n}\n\nReactDOM.render(<JsxTemplateString />, document.getElementById('root'));",
        "o": [
            "A heading with 'Hello, React'",
            "A heading with 'Hello, ${name}'",
            "A heading with 'React'",
            "An error because template strings are invalid"
        ]
    },
    {
        "q": "Which of the following is true about React elements?",
        "o": [
            "They are plain JavaScript objects describing what to render",
            "They are actual DOM nodes",
            "They must always be created with document.createElement",
            "They cannot be nested"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxExpressionConcat() {\n  return <p>{'Hello' + ' ' + 'World'}</p>;\n}\n\nReactDOM.render(<JsxExpressionConcat />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'Hello World'",
            "A paragraph with 'HelloWorld'",
            "A paragraph with '[object Object]'",
            "An error because string concatenation is not allowed"
        ]
    },
    {
        "q": "Which of the following is true about functional component naming conventions?",
        "o": [
            "Component names must start with a capital letter",
            "Component names can start with lowercase letters",
            "Component names must always match the file name",
            "Component names must be in snake_case"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxBooleanRender() {\n  return <div>{true}</div>;\n}\n\nReactDOM.render(<JsxBooleanRender />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div with 'true'",
            "An error because booleans cannot be rendered",
            "A div with '1'"
        ]
    },
    {
        "q": "Which of the following is true about Create React App and environment variables?",
        "o": [
            "Environment variable names must be prefixed with REACT_APP_",
            "Any environment variable can be accessed directly in code",
            "Environment variables are automatically available in JSX",
            "Environment variables cannot be used in Create React App"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxFunctionCall() {\n  const greet = () => 'Hi!';\n  return <span>{greet()}</span>;\n}\n\nReactDOM.render(<JsxFunctionCall />, document.getElementById('root'));",
        "o": [
            "A span with 'Hi!'",
            "A span with 'greet()'",
            "A span with 'undefined'",
            "An error because functions cannot be called in JSX"
        ]
    },
    {
        "q": "Which of the following is true about rendering lists in React?",
        "o": [
            "Each list item should have a unique key prop",
            "Keys can be duplicated without any issue",
            "Keys are optional and not recommended",
            "Keys must always be numbers"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxEmptyString() {\n  return <h4>{''}</h4>;\n}\n\nReactDOM.render(<JsxEmptyString />, document.getElementById('root'));",
        "o": [
            "An empty h4 element",
            "An h4 with 'undefined'",
            "An error because empty strings are invalid",
            "Nothing will be rendered at all"
        ]
    },
    {
        "q": "Which of the following is true about functional components and hooks?",
        "o": [
            "Hooks can only be used inside functional components or custom hooks",
            "Hooks can be called inside regular JavaScript functions",
            "Hooks can only be used in class components",
            "Hooks must be imported from react-dom"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxArrayMixed() {\n  return <p>{['A', 'B', 3]}</p>;\n}\n\nReactDOM.render(<JsxArrayMixed />, document.getElementById('root'));",
        "o": [
            "A paragraph with 'AB3'",
            "A paragraph with '[object Object]'",
            "An error because arrays cannot be mixed",
            "A paragraph with 'A,B,3'"
        ]
    },
    {
        "q": "Which of the following is true about React's render method?",
        "o": [
            "It updates only the parts of the DOM that changed",
            "It always replaces the entire DOM tree",
            "It can render to multiple root elements at once without configuration",
            "It directly manipulates the DOM without virtual DOM"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxExpressionInsideAttr() {\n  return <input type=\"text\" defaultValue={5 + 5} />;\n}\n\nReactDOM.render(<JsxExpressionInsideAttr />, document.getElementById('root'));",
        "o": [
            "An input element with default value 10",
            "An input element with default value '5+5'",
            "An empty input element",
            "An error because expressions are not allowed in attributes"
        ]
    },
    {
        "q": "Which of the following is true about JSX attributes?",
        "o": [
            "They use camelCase naming instead of HTML attribute names",
            "They must always be written in lowercase",
            "They must be written in quotes only",
            "They cannot accept expressions"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxNullRender() {\n  return <div>{null}</div>;\n}\n\nReactDOM.render(<JsxNullRender />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div with 'null'",
            "An error because null is not valid in JSX",
            "A div with 'undefined'"
        ]
    },
    {
        "q": "Which of the following is true about Create React App default setup?",
        "o": [
            "It includes Webpack, Babel, and ESLint preconfigured",
            "It requires manual configuration of Webpack",
            "It does not support JSX by default",
            "It does not support hot reloading"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxArrayEmpty() {\n  return <section>{[]}</section>;\n}\n\nReactDOM.render(<JsxArrayEmpty />, document.getElementById('root'));",
        "o": [
            "An empty section element",
            "A section with '[]'",
            "An error because empty arrays are invalid",
            "Nothing will be rendered at all"
        ]
    },
    {
        "q": "Which of the following is true about functional components?",
        "o": [
            "They can accept props as arguments",
            "They cannot receive any data",
            "They can only return primitive values",
            "They must always manage state directly"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxStringInterpolation() {\n  const lang = 'React';\n  return <h1>{'Learning ' + lang}</h1>;\n}\n\nReactDOM.render(<JsxStringInterpolation />, document.getElementById('root'));",
        "o": [
            "A heading with 'Learning React'",
            "A heading with 'Learning '",
            "A heading with 'lang'",
            "An error because string concatenation is not allowed"
        ]
    },
    {
        "q": "Which of the following is true about Create React App start script?",
        "o": [
            "It runs the development server with hot reload",
            "It compiles and optimizes the app for production",
            "It installs dependencies automatically",
            "It runs lint checks only"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxMultipleExpressions() {\n  const a = 2, b = 3;\n  return <p>{a} + {b} = {a + b}</p>;\n}\n\nReactDOM.render(<JsxMultipleExpressions />, document.getElementById('root'));",
        "o": [
            "A paragraph with '2 + 3 = 5'",
            "A paragraph with 'a + b = 5'",
            "An error because multiple expressions are not allowed",
            "A paragraph with '23 = 5'"
        ]
    },
    {
        "q": "Which of the following is true about rendering elements in React?",
        "o": [
            "Elements are immutable once created",
            "Elements can be directly mutated after rendering",
            "Elements are the same as DOM nodes",
            "Elements are stored in the DOM as objects"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxAttrBoolean() {\n  return <button disabled={true}>Click</button>;\n}\n\nReactDOM.render(<JsxAttrBoolean />, document.getElementById('root'));",
        "o": [
            "A disabled button with text 'Click'",
            "An enabled button with text 'Click'",
            "An error because attributes cannot be boolean",
            "A button with text 'true'"
        ]
    },
    {
        "q": "Which of the following is true about the return value of a functional component?",
        "o": [
            "It must return a React element or null",
            "It must always return a string",
            "It can return multiple top-level elements without a wrapper",
            "It can only return plain HTML strings"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxNumberRender() {\n  return <div>{42}</div>;\n}\n\nReactDOM.render(<JsxNumberRender />, document.getElementById('root'));",
        "o": [
            "A div with '42'",
            "A div with 'number'",
            "An empty div",
            "An error because numbers cannot be rendered"
        ]
    },
    {
        "q": "Which of the following is true about JSX and JavaScript expressions?",
        "o": [
            "Any valid JavaScript expression can be used inside curly braces",
            "Statements such as if and for can be directly used inside curly braces",
            "Only strings are valid expressions in curly braces",
            "Curly braces can only be used for variables"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxConditionalTernary() {\n  const isLoggedIn = false;\n  return <span>{isLoggedIn ? 'Welcome' : 'Please log in'}</span>;\n}\n\nReactDOM.render(<JsxConditionalTernary />, document.getElementById('root'));",
        "o": [
            "A span with 'Please log in'",
            "A span with 'Welcome'",
            "A span with 'false'",
            "An error because ternary is not allowed in JSX"
        ]
    },
    {
        "q": "Which of the following is true about Create React App and production builds?",
        "o": [
            "The build script creates an optimized static bundle",
            "It runs the app in development mode",
            "It automatically deploys to GitHub Pages",
            "It includes hot reload in production mode"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxBooleanFalse() {\n  return <h3>{false}</h3>;\n}\n\nReactDOM.render(<JsxBooleanFalse />, document.getElementById('root'));",
        "o": [
            "An empty h3 element",
            "An h3 with 'false'",
            "An error because false is invalid in JSX",
            "An h3 with '0'"
        ]
    },
    {
        "q": "Which of the following is true about functional components and props?",
        "o": [
            "Props are passed as an object to the component function",
            "Props must always be strings",
            "Props cannot be passed to functional components",
            "Props must be globally declared"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxArrayNumbers() {\n  return <ul>{[1, 2, 3]}</ul>;\n}\n\nReactDOM.render(<JsxArrayNumbers />, document.getElementById('root'));",
        "o": [
            "A list with items '123' concatenated",
            "A list with one item '[1,2,3]'",
            "An error because arrays are not allowed in JSX",
            "A list with three separate li elements"
        ]
    },
    {
        "q": "Which of the following is true about rendering multiple elements in React?",
        "o": [
            "They must be wrapped in a parent element or a React fragment",
            "They can be returned side by side without wrapping",
            "They must always be wrapped in a <div>",
            "They can only be rendered one at a time"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxExpressionAttrConcat() {\n  const name = 'World';\n  return <h2 title={'Hello ' + name}>Hi</h2>;\n}\n\nReactDOM.render(<JsxExpressionAttrConcat />, document.getElementById('root'));",
        "o": [
            "An h2 with text 'Hi' and title 'Hello World'",
            "An h2 with text 'Hi' and no title",
            "An error because attributes cannot contain expressions",
            "An h2 with text 'World'"
        ]
    },
    {
        "q": "Which of the following is true about JSX comments?",
        "o": [
            "They must be wrapped in curly braces inside JSX",
            "They use // and work anywhere in JSX",
            "They cannot be written inside JSX",
            "They must always be at the top of the component"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxUndefinedRender() {\n  return <p>{undefined}</p>;\n}\n\nReactDOM.render(<JsxUndefinedRender />, document.getElementById('root'));",
        "o": [
            "An empty paragraph",
            "A paragraph with 'undefined'",
            "An error because undefined is invalid in JSX",
            "Nothing will render at all"
        ]
    },
    {
        "q": "Which of the following is true about Create React App configuration?",
        "o": [
            "It hides Webpack and Babel configuration by default",
            "It requires manual Webpack setup",
            "It allows editing Webpack configuration directly in package.json",
            "It does not support Babel"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxNestedElements() {\n  return <div><h1>Hello</h1><p>World</p></div>;\n}\n\nReactDOM.render(<JsxNestedElements />, document.getElementById('root'));",
        "o": [
            "A div containing a heading 'Hello' and a paragraph 'World'",
            "Two sibling elements without a wrapper",
            "An error because JSX cannot have nested elements",
            "Only the heading 'Hello'"
        ]
    },
    {
        "q": "Which of the following is true about functional components and hooks?",
        "o": [
            "Hooks can only be used in functional components",
            "Hooks can only be used in class components",
            "Hooks are mandatory in all functional components",
            "Hooks are required for rendering JSX"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxNullBooleanMix() {\n  return <div>{null}{true}{false}</div>;\n}\n\nReactDOM.render(<JsxNullBooleanMix />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div with 'truefalse'",
            "An error because mixed values are invalid",
            "A div with 'nulltruefalse'"
        ]
    },
    {
        "q": "Which of the following is true about rendering elements in React?",
        "o": [
            "Updating an element creates a new element instead of modifying the old one",
            "React directly mutates existing elements in the DOM",
            "Rendering happens only once during the app lifecycle",
            "Rendering elements is the same as rendering components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxTemplateLiteral() {\n  const lang = 'React';\n  return <h4>{`Learning ${lang}`}</h4>;\n}\n\nReactDOM.render(<JsxTemplateLiteral />, document.getElementById('root'));",
        "o": [
            "An h4 with text 'Learning React'",
            "An h4 with text 'Learning ${lang}'",
            "An h4 with 'Learning ' only",
            "An error because template literals are not supported"
        ]
    },
    {
        "q": "Which of the following is true about props in functional components?",
        "o": [
            "They are read-only and cannot be modified inside the component",
            "They can be reassigned inside the function",
            "They must always be passed as strings",
            "They are automatically converted into state"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxNestedExpressions() {\n  const user = { name: 'Alice', age: 25 };\n  return <span>{user.name + ' (' + user.age + ')'}</span>;\n}\n\nReactDOM.render(<JsxNestedExpressions />, document.getElementById('root'));",
        "o": [
            "A span with 'Alice (25)'",
            "A span with '[object Object]'",
            "A span with 'user.name (user.age)'",
            "An error because objects cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following is true about the root element used in Create React App?",
        "o": [
            "By default, React mounts the application into a div with id 'root'",
            "It mounts automatically to the body element",
            "It mounts into a span with id 'app'",
            "It randomly selects an available element"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxArrayStringMix() {\n  return <div>{['React', ' ', 'JSX']}</div>;\n}\n\nReactDOM.render(<JsxArrayStringMix />, document.getElementById('root'));",
        "o": [
            "A div with 'React JSX'",
            "A div with 'React, JSX'",
            "A div with '[React JSX]'",
            "An error because arrays with strings are invalid"
        ]
    },
    {
        "q": "Which of the following is true about rendering lists in React?",
        "o": [
            "Each element in a list should have a unique 'key' prop",
            "Keys are optional and do not affect rendering",
            "Keys must always be numbers",
            "Keys must be globally unique across the entire app"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxNullReturn() {\n  return null;\n}\n\nReactDOM.render(<JsxNullReturn />, document.getElementById('root'));",
        "o": [
            "Nothing will render",
            "The string 'null' will render",
            "An empty div will render",
            "An error will be thrown"
        ]
    },
    {
        "q": "Which of the following is true about functional components naming?",
        "o": [
            "They must start with a capital letter",
            "They must always start with lowercase",
            "They can only use snake_case",
            "They must match the file name"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxBooleanTrue() {\n  return <span>{true}</span>;\n}\n\nReactDOM.render(<JsxBooleanTrue />, document.getElementById('root'));",
        "o": [
            "An empty span",
            "A span with 'true'",
            "A span with '1'",
            "An error because true is not allowed"
        ]
    },
    {
        "q": "Which of the following is true about JSX syntax rules?",
        "o": [
            "JSX attributes use camelCase naming for JavaScript properties",
            "JSX attributes always use kebab-case like HTML",
            "JSX attributes are optional and ignored at runtime",
            "JSX attributes must always be lowercase"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxArrayMap() {\n  const items = [1, 2, 3];\n  return <ul>{items.map(i => <li key={i}>{i}</li>)}</ul>;\n}\n\nReactDOM.render(<JsxArrayMap />, document.getElementById('root'));",
        "o": [
            "An unordered list with three list items: 1, 2, 3",
            "An unordered list with a single item '1,2,3'",
            "An empty unordered list",
            "An error because map cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following is true about rendering elements with ReactDOM?",
        "o": [
            "ReactDOM.render replaces the content of the target container",
            "ReactDOM.render appends to existing content by default",
            "ReactDOM.render can only be called once per page",
            "ReactDOM.render automatically creates multiple root containers"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxSelfClosing() {\n  return <img src=\"logo.png\" alt=\"logo\" />;\n}\n\nReactDOM.render(<JsxSelfClosing />, document.getElementById('root'));",
        "o": [
            "An image with source 'logo.png' and alt text 'logo'",
            "An error because img cannot be self-closed in JSX",
            "An image without alt text",
            "Nothing will render"
        ]
    },
    {
        "q": "Which of the following is true about React fragments?",
        "o": [
            "They allow grouping multiple elements without adding extra nodes to the DOM",
            "They must always be replaced by a <div>",
            "They cannot contain more than two elements",
            "They require a special import from 'react-dom'"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxNestedArray() {\n  return <div>{[['A', 'B'], ['C', 'D']]}</div>;\n}\n\nReactDOM.render(<JsxNestedArray />, document.getElementById('root'));",
        "o": [
            "A div with 'ABCD'",
            "A div with '[A,B][C,D]'",
            "An error because nested arrays are not allowed",
            "An empty div"
        ]
    },
    {
        "q": "Which of the following is true about JSX expressions?",
        "o": [
            "They can include any valid JavaScript expression inside curly braces",
            "They can include statements like if or for directly",
            "They can only be strings or numbers",
            "They must always be assigned to a variable before rendering"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxLogicalAnd() {\n  const show = false;\n  return <div>{show && <p>Visible</p>}</div>;\n}\n\nReactDOM.render(<JsxLogicalAnd />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div with '<p>Visible</p>'",
            "A div with 'false'",
            "An error because logical operators cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following is true about functional component returns?",
        "o": [
            "They must return JSX, null, or React elements",
            "They can return multiple JSX elements without a wrapper",
            "They must always return a single HTML string",
            "They can only return primitive types"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxStringConcat() {\n  const name = 'React';\n  return <h1>{'Hello ' + name}</h1>;\n}\n\nReactDOM.render(<JsxStringConcat />, document.getElementById('root'));",
        "o": [
            "A heading with 'Hello React'",
            "A heading with 'Hello + React'",
            "An error because string concatenation is not allowed",
            "A heading with 'name'"
        ]
    },
    {
        "q": "Which of the following is true about rendering lists in JSX?",
        "o": [
            "Each child in a list should have a unique 'key' prop",
            "Keys are optional and do not affect rendering",
            "Keys must always be numbers",
            "Keys are required only for arrays longer than 10 items"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxBooleanExpression() {\n  return <div>{1 > 2}</div>;\n}\n\nReactDOM.render(<JsxBooleanExpression />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div with 'false'",
            "A div with 'true'",
            "An error because boolean expressions are invalid"
        ]
    },
    {
        "q": "Which of the following is true about Create React App and JSX?",
        "o": [
            "It uses Babel to transpile JSX into JavaScript",
            "JSX works natively in browsers without transpilation",
            "JSX is automatically converted into HTML by the browser",
            "JSX must always be in separate files"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxExpressionAttr() {\n  const value = 10;\n  return <input type=\"number\" value={value} />;\n}\n\nReactDOM.render(<JsxExpressionAttr />, document.getElementById('root'));",
        "o": [
            "An input element with value 10",
            "An input element with value 'value'",
            "An empty input element",
            "An error because expressions cannot be used in attributes"
        ]
    },
    {
        "q": "Which of the following is true about React keys?",
        "o": [
            "Keys help React identify which items have changed, are added, or are removed",
            "Keys are used to style components",
            "Keys must always be numeric",
            "Keys can be duplicated without any issue"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxExpressionBoolean() {\n  const value = true;\n  return <div>{value && 'Visible'}</div>;\n}\n\nReactDOM.render(<JsxExpressionBoolean />, document.getElementById('root'));",
        "o": [
            "A div with 'Visible'",
            "A div with 'true'",
            "An empty div",
            "An error because boolean expressions cannot be used"
        ]
    },
    {
        "q": "Which of the following is true about JSX children?",
        "o": [
            "JSX children can be strings, numbers, expressions, elements, arrays, or fragments",
            "JSX children must always be strings",
            "JSX children cannot contain expressions",
            "JSX children must always be wrapped in a <div>"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxNestedFragment() {\n  return <>\n    <span>One</span>\n    <span>Two</span>\n  </>;\n}\n\nReactDOM.render(<JsxNestedFragment />, document.getElementById('root'));",
        "o": [
            "Two span elements: 'One' and 'Two' without extra DOM nodes",
            "An error because fragments cannot have multiple elements",
            "A div wrapping both spans",
            "Nothing will render"
        ]
    },
    {
        "q": "Which of the following is true about functional component props?",
        "o": [
            "Props are read-only and cannot be modified inside the component",
            "Props can be reassigned inside the component",
            "Props must always be strings",
            "Props are automatically converted into state"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxExpressionNumber() {\n  return <p>{10 + 5}</p>;\n}\n\nReactDOM.render(<JsxExpressionNumber />, document.getElementById('root'));",
        "o": [
            "A paragraph with '15'",
            "A paragraph with '10+5'",
            "A paragraph with '[object Object]'",
            "An empty paragraph"
        ]
    },
    {
        "q": "Which of the following is true about JSX and HTML differences?",
        "o": [
            "JSX uses className instead of class and htmlFor instead of for",
            "JSX allows all HTML attributes to be written the same",
            "JSX does not allow style attributes",
            "JSX automatically converts camelCase to kebab-case"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxArrayExpression() {\n  const arr = [1, 2, 3];\n  return <div>{arr.map(n => n * 2)}</div>;\n}\n\nReactDOM.render(<JsxArrayExpression />, document.getElementById('root'));",
        "o": [
            "A div with '246'",
            "A div with '1,2,3'",
            "An error because expressions cannot be mapped",
            "An empty div"
        ]
    },
    {
        "q": "Which of the following is true about JSX self-closing tags?",
        "o": [
            "Elements without children can be self-closed using a trailing slash",
            "All elements must have an opening and closing tag",
            "Self-closing tags are not allowed in JSX",
            "Self-closing tags require a separate import from React"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxConditionalRender() {\n  const isAdmin = false;\n  return <div>{isAdmin ? <p>Admin</p> : <p>User</p>}</div>;\n}\n\nReactDOM.render(<JsxConditionalRender />, document.getElementById('root'));",
        "o": [
            "A div containing a paragraph 'User'",
            "A div containing a paragraph 'Admin'",
            "An empty div",
            "An error because conditional rendering is invalid"
        ]
    },
    {
        "q": "Which of the following is true about JSX and JavaScript expressions?",
        "o": [
            "JSX can include any valid JavaScript expression inside curly braces",
            "JSX can include statements like if and for directly",
            "JSX expressions must always be strings or numbers",
            "JSX cannot use ternary operators"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxLogicalOr() {\n  const show = null;\n  return <div>{show || 'Default'}</div>;\n}\n\nReactDOM.render(<JsxLogicalOr />, document.getElementById('root'));",
        "o": [
            "A div with 'Default'",
            "A div with 'null'",
            "An empty div",
            "An error because logical operators cannot be used in JSX"
        ]
    },
    {
        "q": "Which of the following is true about functional components and state?",
        "o": [
            "State can be managed in functional components using the useState hook",
            "Functional components cannot manage state",
            "State must always be managed using class components",
            "State is automatically available in all functional components"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxEmptyArray() {\n  return <div>{[]}</div>;\n}\n\nReactDOM.render(<JsxEmptyArray />, document.getElementById('root'));",
        "o": [
            "An empty div",
            "A div with '[]'",
            "An error because empty arrays are invalid",
            "Nothing will render at all"
        ]
    },
    {
        "q": "Which of the following is true about JSX style attributes?",
        "o": [
            "They accept JavaScript objects with camelCase property names",
            "They must always be strings in quotes",
            "They cannot include variables",
            "They use kebab-case like in HTML"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxTemplateString() {\n  const framework = 'React';\n  return <h1>{`Learning ${framework}`}</h1>;\n}\n\nReactDOM.render(<JsxTemplateString />, document.getElementById('root'));",
        "o": [
            "A heading with 'Learning React'",
            "A heading with 'Learning ${framework}'",
            "An error because template literals are invalid in JSX",
            "A heading with 'React'"
        ]
    },
    {
        "q": "Which of the following is true about Create React App development server?",
        "o": [
            "It supports hot reloading so changes are reflected immediately",
            "It does not support live reloading",
            "It only builds production bundles",
            "It requires manual refresh for every change"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxNullUndefinedMix() {\n  return <p>{null}{undefined}</p>;\n}\n\nReactDOM.render(<JsxNullUndefinedMix />, document.getElementById('root'));",
        "o": [
            "An empty paragraph",
            "A paragraph with 'nullundefined'",
            "A paragraph with 'undefined'",
            "An error is thrown"
        ]
    },
    {
        "q": "Which of the following is true about JSX fragments?",
        "o": [
            "They do not create extra nodes in the DOM",
            "They are rendered as empty divs in the DOM",
            "They must always have a key prop",
            "They cannot contain more than one element"
        ]
    },
    {
        "q": "What will the following component render?",
        "c": "function JsxExpressionInAttr() {\n  const value = 20;\n  return <input type=\"number\" defaultValue={value} />;\n}\n\nReactDOM.render(<JsxExpressionInAttr />, document.getElementById('root'));",
        "o": [
            "An input element with default value 20",
            "An input element with default value 'value'",
            "An empty input element",
            "An error because expressions are not allowed in attributes"
        ]
    }
]