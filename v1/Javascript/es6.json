[
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "let x = 10;\nconst y = 20;\n\nx = 15;\nconsole.log(x, y);",
    "o": [
      "15 20",
      "10 20",
      "Error: Cannot reassign x",
      "Error: Cannot reassign y"
    ]
  },
  {
    "q": "Which keyword should be used for declaring a variable whose value should not be reassigned?",
    "o": [
      "const",
      "let",
      "var",
      "static"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const name = \"Alice\";\nconst greeting = `Hello, ${name}!`;\nconsole.log(greeting);",
    "o": [
      "Hello, Alice!",
      "`Hello, Alice!`",
      "Hello, ${name}!",
      "Error: Invalid template literal"
    ]
  },
  {
    "q": "Which of the following is a correct usage of template literals?",
    "o": [
      "`Hello, ${name}!`",
      "'Hello, ${name}!'",
      "\"Hello, ${name}!\"",
      "`Hello, + name + !`"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3];\nconst newNumbers = [...numbers, 4, 5];\nconsole.log(newNumbers);",
    "o": [
      "[1, 2, 3, 4, 5]",
      "[[1, 2, 3], 4, 5]",
      "Error: Cannot use spread operator with arrays",
      "[1, 2, 3]"
    ]
  },
  {
    "q": "Which operator allows us to expand elements of an array into individual elements?",
    "o": [
      "Spread operator (...)",
      "Rest operator (...)",
      "Destructuring operator",
      "Flatten operator"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "function sum(...numbers) {\n  return numbers.reduce((acc, num) => acc + num, 0);\n}\nconsole.log(sum(1, 2, 3, 4));",
    "o": [
      "10",
      "[1, 2, 3, 4]",
      "Error: Cannot use rest operator in function",
      "Undefined"
    ]
  },
  {
    "q": "Which statement correctly describes the difference between the spread and rest operators?",
    "o": [
      "Spread expands elements, rest collects multiple elements into an array.",
      "Rest expands elements, spread collects multiple elements into an array.",
      "Both spread and rest do the same thing.",
      "Neither spread nor rest operators exist in JavaScript."
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "// module.js\nexport const greeting = \"Hello\";\n\n// main.js\nimport { greeting } from \"./module.js\";\nconsole.log(greeting);",
    "o": [
      "\"Hello\"",
      "undefined",
      "Error: Cannot use import/export",
      "null"
    ]
  },
  {
    "q": "Which keyword is used to export a function or variable from a module in ES6?",
    "o": [
      "export",
      "exports",
      "module.exports",
      "expose"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "let a = 5;\nif (true) {\n    let a = 10;\n    console.log(a);\n}\nconsole.log(a);",
    "o": [
      "10 5",
      "5 10",
      "10 10",
      "Error: a is not defined"
    ]
  },
  {
    "q": "Which of the following is true about let and var?",
    "o": [
      "let is block-scoped, while var is function-scoped.",
      "let is function-scoped, while var is block-scoped.",
      "Both let and var are function-scoped.",
      "Both let and var are block-scoped."
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const person = { name: \"Alice\" };\nperson.name = \"Bob\";\nconsole.log(person.name);",
    "o": [
      "\"Bob\"",
      "Error: Cannot modify a const variable",
      "\"Alice\"",
      "undefined"
    ]
  },
  {
    "q": "Which of the following is NOT true about const?",
    "o": [
      "You can reassign properties of an object declared with const.",
      "You cannot reassign a variable declared with const.",
      "Const variables are block-scoped.",
      "You can reassign an array declared with const."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const fruit = \"apple\";\nconst message = `I love ${fruit}s!`;\nconsole.log(message);",
    "o": [
      "\"I love apples!\"",
      "\"I love ${fruit}s!\"",
      "\"I love apple!\"",
      "Error: Invalid string interpolation"
    ]
  },
  {
    "q": "Which of the following correctly demonstrates template literals?",
    "o": [
      "`Hello, my name is ${name}.`",
      "'Hello, my name is ${name}.'",
      "\"Hello, my name is ${name}.\"",
      "`Hello, my name is \" + name + \"`"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const nums1 = [1, 2, 3];\nconst nums2 = [4, 5];\nconst allNums = [...nums1, ...nums2];\nconsole.log(allNums);",
    "o": [
      "[1, 2, 3, 4, 5]",
      "[[1, 2, 3], [4, 5]]",
      "[1, 2, 3, [4, 5]]",
      "[1, 2, 3, 4], 5"
    ]
  },
  {
    "q": "Which of the following is a correct use of the rest operator?",
    "o": [
      "function sum(...numbers) { return numbers.reduce((acc, num) => acc + num, 0); }",
      "function sum(numbers...) { return numbers.reduce((acc, num) => acc + num, 0); }",
      "function sum([ ...numbers ]) { return numbers.reduce((acc, num) => acc + num, 0); }",
      "function sum(...) { return arguments.reduce((acc, num) => acc + num, 0); }"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj1 = { a: 1, b: 2 };\nconst obj2 = { c: 3 };\nconst merged = { ...obj1, ...obj2 };\nconsole.log(merged);",
    "o": [
      "{ a: 1, b: 2, c: 3 }",
      "{ obj1: { a: 1, b: 2 }, obj2: { c: 3 } }",
      "{ a: 1, b: 2, obj2: { c: 3 } }",
      "[1, 2, 3]"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3, 4];\nconst [first, ...rest] = numbers;\nconsole.log(rest);",
    "o": [
      "[2, 3, 4]",
      "[1, 2, 3]",
      "[3, 4]",
      "Error: Rest operator cannot be used in array destructuring"
    ]
  },
  {
    "q": "Which of the following correctly imports the default export from a module?",
    "o": [
      "import myFunction from \"./module.js\";",
      "import { myFunction } from \"./module.js\";",
      "import default myFunction from \"./module.js\";",
      "import myFunction() from \"./module.js\";"
    ]
  },
  {
    "q": "Which of the following correctly exports a function from a module?",
    "o": [
      "export function myFunction() { return \"Hello!\"; }",
      "export myFunction = () => \"Hello!\";",
      "exports.myFunction = function() { return \"Hello!\"; }",
      "function myFunction() { return \"Hello!\"; } export default myFunction;"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "export const name = \"Alice\";\nexport default function greet() { return \"Hello!\"; }\nimport greet, { name } from \"./module.js\";\nconsole.log(greet(), name);",
    "o": [
      "\"Hello! Alice\"",
      "Error: Cannot import named and default exports together",
      "\"Hello!\", undefined",
      "undefined, \"Alice\""
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "let x = 10;\nif (true) {\n    let x = 20;\n    console.log(x);\n}\nconsole.log(x);",
    "o": [
      "20 10",
      "10 20",
      "20 20",
      "Error: x is already declared"
    ]
  },
  {
    "q": "Which of the following statements about `const` is true?",
    "o": [
      "A variable declared with `const` cannot be reassigned.",
      "A variable declared with `const` cannot be modified.",
      "A variable declared with `const` is always globally scoped.",
      "`const` variables can be redeclared in the same scope."
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const name = \"John\";\nconst greeting = `Hello, ${name}!`;\nconsole.log(greeting);",
    "o": [
      "\"Hello, John!\"",
      "\"Hello, ${name}!\"",
      "\"Hello, name!\"",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following correctly uses template literals?",
    "o": [
      "`I have ${x} apples.`",
      "'I have ${x} apples.'",
      "\"I have ${x} apples.\"",
      "`I have \" + x + \" apples.`"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj1 = { a: 1, b: 2 };\nconst obj2 = { ...obj1, c: 3 };\nconsole.log(obj2);",
    "o": [
      "{ a: 1, b: 2, c: 3 }",
      "{ a: 1, b: 2 }",
      "{ obj1: { a: 1, b: 2 }, c: 3 }",
      "[1, 2, 3]"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3, 4];\nconst [first, ...rest] = numbers;\nconsole.log(rest);",
    "o": [
      "[2, 3, 4]",
      "[1, 2, 3]",
      "[3, 4]",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a correct use of the rest operator?",
    "o": [
      "function sum(...nums) { return nums.reduce((a, b) => a + b, 0); }",
      "function sum(nums...) { return nums.reduce((a, b) => a + b, 0); }",
      "function sum([ ...nums ]) { return nums.reduce((a, b) => a + b, 0); }",
      "function sum(...) { return arguments.reduce((a, b) => a + b, 0); }"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const user = { name: \"Alice\", age: 25 };\nconst { name, age } = user;\nconsole.log(name, age);",
    "o": [
      "\"Alice\" 25",
      "{\"name\": \"Alice\", \"age\": 25}",
      "undefined undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly demonstrates arrow function syntax?",
    "o": [
      "const add = (a, b) => a + b;",
      "const add = (a, b) => { return a + b };",
      "const add = (a, b) => { a + b };",
      "const add = { a, b } => a + b;"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3, 4];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled);",
    "o": [
      "[2, 4, 6, 8]",
      "[1, 2, 3, 4]",
      "[2, 3, 4, 5]",
      "[2, 4, 8, 16]"
    ]
  },
  {
    "q": "Which of the following correctly imports a named export from a module?",
    "o": [
      "import { myFunction } from \"./module.js\";",
      "import myFunction from \"./module.js\";",
      "import default myFunction from \"./module.js\";",
      "import myFunction() from \"./module.js\";"
    ]
  },
  {
    "q": "Which of the following correctly exports multiple functions from a module?",
    "o": [
      "export function add(a, b) { return a + b; }\nexport function multiply(a, b) { return a * b; }",
      "exports.add = function(a, b) { return a + b; }\nexports.multiply = function(a, b) { return a * b; }",
      "export { add, multiply }",
      "function add(a, b) { return a + b; }\nfunction multiply(a, b) { return a * b; }\nexport default add, multiply;"
    ]
  },
  {
    "q": "What will be the output of the following async function?",
    "l": "javascript",
    "c": "async function fetchData() {\n    return \"Data received\";\n}\nfetchData().then(console.log);",
    "o": [
      "\"Data received\"",
      "Promise { <pending> }",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a valid use of `async/await`?",
    "o": [
      "async function getData() { const response = await fetch(url); return response.json(); }",
      "function getData() { async const response = fetch(url); return response.json(); }",
      "function getData() { await fetch(url); return response.json(); }",
      "async function getData() { fetch(url).await; return response.json(); }"
    ]
  },
  {
    "q": "What will be the output of the following optional chaining example?",
    "l": "javascript",
    "c": "const user = { profile: { name: \"Alice\" } };\nconsole.log(user.profile?.name);",
    "o": [
      "\"Alice\"",
      "undefined",
      "Error",
      "null"
    ]
  },
  {
    "q": "Which of the following correctly uses optional chaining?",
    "o": [
      "const city = user?.address?.city;",
      "const city = user?.address.city;",
      "const city = user.address?.city;",
      "const city = user.address.city?;"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "let a = 5;\nlet b = 10;\n[a, b] = [b, a];\nconsole.log(a, b);",
    "o": [
      "10 5",
      "5 10",
      "[10, 5]",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about `let` and `const` is true?",
    "o": [
      "`let` allows reassignment, but `const` does not.",
      "`const` allows reassignment, but `let` does not.",
      "Both `let` and `const` allow reassignment.",
      "Neither `let` nor `const` allow reassignment."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "let x = 3;\n{\n  let x = 5;\n  console.log(x);\n}\nconsole.log(x);",
    "o": [
      "5 3",
      "3 5",
      "5 5",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly uses default function parameters?",
    "o": [
      "function greet(name = \"Guest\") { return `Hello, ${name}!`; }",
      "function greet(name == \"Guest\") { return `Hello, ${name}!`; }",
      "function greet = (name \"Guest\") => `Hello, ${name}!`;",
      "function greet(name := \"Guest\") { return `Hello, ${name}!`; }"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const add = (a = 2, b = 3) => a + b;\nconsole.log(add());",
    "o": [
      "5",
      "NaN",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const sym1 = Symbol(\"id\");\nconst sym2 = Symbol(\"id\");\nconsole.log(sym1 === sym2);",
    "o": [
      "false",
      "true",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which statement is true about JavaScript symbols?",
    "o": [
      "Each symbol is unique, even if they have the same description.",
      "Symbols are the same if they have the same description.",
      "Symbols are a type of number.",
      "Symbols can be implicitly converted to strings."
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2, c: 3 };\nconst { a, ...rest } = obj;\nconsole.log(rest);",
    "o": [
      "{ b: 2, c: 3 }",
      "{ a: 1 }",
      "{ 1, 2, 3 }",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly uses the spread operator?",
    "o": [
      "const numbers = [1, 2, 3];\nconst newNumbers = [...numbers, 4, 5];",
      "const numbers = [1, 2, 3];\nconst newNumbers = [..., numbers, 4, 5];",
      "const numbers = [1, 2, 3];\nconst newNumbers = [numbers..., 4, 5];",
      "const numbers = [1, 2, 3];\nconst newNumbers = [1, 2, 3]...;"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const promise = new Promise((resolve, reject) => {\n  resolve(\"Success\");\n});\npromise.then(console.log);",
    "o": [
      "\"Success\"",
      "Promise { <pending> }",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly creates an asynchronous function using async/await?",
    "o": [
      "async function fetchData() { let response = await fetch(url); return response.json(); }",
      "function fetchData() async { let response = await fetch(url); return response.json(); }",
      "function fetchData() { await fetch(url); return response.json(); }",
      "async fetchData() { let response = await fetch(url); return response.json(); }"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const data = { user: { name: \"John\" } };\nconsole.log(data?.user?.name);",
    "o": [
      "\"John\"",
      "undefined",
      "Error",
      "null"
    ]
  },
  {
    "q": "What happens if you use optional chaining (`?.`) on an undefined property?",
    "o": [
      "It returns `undefined` without throwing an error.",
      "It throws a TypeError.",
      "It returns `null`.",
      "It stops code execution."
    ]
  },
  {
    "q": "Which of the following correctly exports a default function from a module?",
    "o": [
      "export default function myFunction() {}",
      "export function default myFunction() {}",
      "export function myFunction default() {}",
      "default export function myFunction() {}"
    ]
  },
  {
    "q": "Which of the following is a valid way to import a default export?",
    "o": [
      "import myFunction from \"./module.js\";",
      "import { myFunction } from \"./module.js\";",
      "import myFunction() from \"./module.js\";",
      "import { default as myFunction } from \"./module.js\";"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const name = \"Alice\";\nconst message = `Hello, ${name}!`;\nconsole.log(message);",
    "o": [
      "\"Hello, Alice!\"",
      "'Hello, Alice!'",
      "Hello, Alice!",
      "Error"
    ]
  },
  {
    "q": "Which statement about `let` and `const` is true?",
    "o": [
      "`let` allows reassignment, but `const` does not.",
      "`const` allows reassignment, but `let` does not.",
      "Both `let` and `const` allow reassignment.",
      "Neither `let` nor `const` allow reassignment."
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2, c: 3 };\nconst { a, b } = obj;\nconsole.log(a, b);",
    "o": [
      "1 2",
      "2 3",
      "{ a: 1, b: 2 }",
      "Error"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3];\nconst newNumbers = [...numbers, 4, 5];\nconsole.log(newNumbers);",
    "o": [
      "[1, 2, 3, 4, 5]",
      "[[1, 2, 3], 4, 5]",
      "[1, 2, 3] 4 5",
      "Error"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "function sum(...numbers) {\n  return numbers.reduce((acc, num) => acc + num, 0);\n}\nconsole.log(sum(1, 2, 3, 4));",
    "o": [
      "10",
      "[1, 2, 3, 4]",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a valid arrow function syntax?",
    "o": [
      "const add = (a, b) => a + b;",
      "const add = (a, b) => { return a + b };",
      "const add = (a, b) => { return a + b; }",
      "All of the above"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "setTimeout(() => console.log(\"Hello!\"), 2000);\nconsole.log(\"Done!\");",
    "o": [
      "\"Done!\" (immediately) and then \"Hello!\" (after 2 seconds)",
      "\"Hello!\" (immediately) and then \"Done!\" (after 2 seconds)",
      "Both at the same time",
      "Error"
    ]
  },
  {
    "q": "Which statement about `for...of` is true?",
    "o": [
      "`for...of` iterates over the values of an iterable like an array.",
      "`for...of` iterates over the keys of an object.",
      "`for...of` does not work with arrays.",
      "`for...of` requires a callback function."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const nums = [1, 2, 3, 4];\nconst doubled = nums.map(num => num * 2);\nconsole.log(doubled);",
    "o": [
      "[2, 4, 6, 8]",
      "[1, 2, 3, 4]",
      "[2, 3, 4, 5]",
      "Error"
    ]
  },
  {
    "q": "What is the correct way to import a named export from a module?",
    "o": [
      "import { myFunction } from \"./module.js\";",
      "import myFunction from \"./module.js\";",
      "import myFunction() from \"./module.js\";",
      "import { default as myFunction } from \"./module.js\";"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const promise = new Promise((resolve) => {\n  setTimeout(() => resolve(\"Done!\"), 1000);\n});\npromise.then(console.log);\nconsole.log(\"Waiting...\");",
    "o": [
      "\"Waiting...\" (immediately) and then \"Done!\" (after 1 second)",
      "\"Done!\" (immediately) and then \"Waiting...\" (after 1 second)",
      "Both at the same time",
      "Error"
    ]
  },
  {
    "q": "Which statement about JavaScript Promises is true?",
    "o": [
      "A promise can be in one of three states: pending, fulfilled, or rejected.",
      "A promise always executes synchronously.",
      "A resolved promise cannot be rejected later.",
      "Promises block JavaScript execution."
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: { c: 2 } };\nconsole.log(obj?.b?.c);",
    "o": [
      "2",
      "undefined",
      "Error",
      "null"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const set = new Set([1, 2, 2, 3, 3, 4]);\nconsole.log(set.size);",
    "o": [
      "4",
      "6",
      "2",
      "Error"
    ]
  },
  {
    "q": "Which method is used to filter elements in an array?",
    "o": [
      "filter()",
      "map()",
      "reduce()",
      "forEach()"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "function greet(name = \"Guest\") {\n  console.log(`Hello, ${name}!`);\n}\ngreet();",
    "o": [
      "\"Hello, Guest!\"",
      "\"Hello, !\"",
      "Undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a correct way to use the rest operator?",
    "l": "javascript",
    "c": "function sum(...numbers) {\n  return numbers.reduce((acc, num) => acc + num, 0);\n}\nconsole.log(sum(1, 2, 3));",
    "o": [
      "6",
      "[1, 2, 3]",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const arr1 = [1, 2, 3];\nconst arr2 = [...arr1, 4, 5];\nconsole.log(arr2);",
    "o": [
      "[1, 2, 3, 4, 5]",
      "[[1, 2, 3], 4, 5]",
      "1,2,3,4,5",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly destructures an object?",
    "o": [
      "const { name, age } = person;",
      "const name, age = person;",
      "const [name, age] = person;",
      "const person = { name, age };"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const person = { name: \"Alice\", age: 25 };\nconst { name, age } = person;\nconsole.log(name, age);",
    "o": [
      "\"Alice 25\"",
      "{ name: \"Alice\", age: 25 }",
      "Undefined",
      "Error"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const promise = new Promise((resolve, reject) => {\n  setTimeout(() => resolve(\"Resolved!\"), 1000);\n});\nconsole.log(promise);",
    "o": [
      "A pending Promise",
      "\"Resolved!\"",
      "Undefined",
      "Error"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const nums = [1, 2, 3, 4];\nconst squared = nums.map(n => n ** 2);\nconsole.log(squared);",
    "o": [
      "[1, 4, 9, 16]",
      "[1, 2, 3, 4]",
      "[2, 4, 6, 8]",
      "Error"
    ]
  },
  {
    "q": "Which of the following is NOT true about `map()`?",
    "o": [
      "It modifies the original array",
      "It creates a new array",
      "It takes a callback function",
      "It returns an array of the same length"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "async function fetchData() {\n  return \"Data loaded\";\n}\nfetchData().then(console.log);",
    "o": [
      "\"Data loaded\"",
      "Promise {\"Data loaded\"}",
      "Undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly uses optional chaining?",
    "o": [
      "const name = person?.details?.name;",
      "const name = person.details?.name;",
      "const name = person?.details.name;",
      "All of the above"
    ]
  },
  {
    "q": "Which statement about JavaScript's `Symbol` is true?",
    "o": [
      "Symbols are unique and immutable.",
      "Symbols can be used as object keys, but not properties.",
      "Symbols can be converted to strings directly.",
      "Symbols are the same as strings."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const sym1 = Symbol(\"foo\");\nconst sym2 = Symbol(\"foo\");\nconsole.log(sym1 === sym2);",
    "o": [
      "false",
      "true",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which of the following statements about `async` and `await` is true?",
    "o": [
      "`await` can only be used inside an `async` function.",
      "`await` blocks the entire JavaScript execution.",
      "An `async` function always returns `undefined`.",
      "An `async` function cannot return a promise."
    ]
  },
  {
    "q": "What is the correct way to import a default export?",
    "o": [
      "import myFunction from \"./module.js\";",
      "import { myFunction } from \"./module.js\";",
      "import { default as myFunction } from \"./module.js\";",
      "import default myFunction from \"./module.js\";"
    ]
  },
  {
    "q": "Which statement is true about the `reduce()` function?",
    "o": [
      "`reduce()` applies a function against an accumulator and each element in the array.",
      "`reduce()` always returns a new array.",
      "`reduce()` does not need an initial value.",
      "`reduce()` modifies the original array."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2, c: 3 };\nconsole.log(Object.entries(obj));",
    "o": [
      "[[\"a\", 1], [\"b\", 2], [\"c\", 3]]",
      "[1, 2, 3]",
      "[\"a\", \"b\", \"c\"]",
      "Error"
    ]
  },
  {
    "q": "Which method returns an array of an object's property values?",
    "o": [
      "Object.values()",
      "Object.keys()",
      "Object.entries()",
      "Object.getValues()"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const nums = [10, 20, 30];\nfor (let num of nums) {\n  console.log(num);\n}",
    "o": [
      "10 20 30",
      "[10, 20, 30]",
      "Undefined",
      "Error"
    ]
  },
  {
    "q": "Which statement is true about `Set` in JavaScript?",
    "o": [
      "A Set only stores unique values.",
      "A Set allows duplicate values.",
      "A Set does not support iteration.",
      "A Set is the same as an array."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const set = new Set([1, 2, 2, 3]);\nconsole.log(set.size);",
    "o": [
      "3",
      "4",
      "2",
      "Undefined"
    ]
  },
  {
    "q": "Which of the following is true about `WeakSet`?",
    "o": [
      "It only stores objects.",
      "It allows duplicate values.",
      "It can be iterated using `forEach()`.",
      "It can store primitive values."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const map = new Map();\nmap.set(\"name\", \"Alice\");\nmap.set(\"age\", 25);\nconsole.log(map.get(\"name\"));",
    "o": [
      "\"Alice\"",
      "Undefined",
      "25",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about `WeakMap` is true?",
    "o": [
      "Keys must be objects.",
      "Keys can be strings or objects.",
      "It allows iteration.",
      "Values must be unique."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const value = null ?? \"default\";\nconsole.log(value);",
    "o": [
      "\"default\"",
      "null",
      "Undefined",
      "Error"
    ]
  },
  {
    "q": "Which operator returns the right-hand operand only if the left-hand operand is null or undefined?",
    "o": [
      "Nullish coalescing operator (??)",
      "Logical OR (||)",
      "Logical AND (&&)",
      "Ternary operator (?:)"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const person = { name: \"Bob\", address: null };\nconsole.log(person.address?.city);",
    "o": [
      "Undefined",
      "Error",
      "Null",
      "\"city\""
    ]
  },
  {
    "q": "What is a use case for the optional chaining operator (`?.`)?",
    "o": [
      "To safely access deeply nested properties.",
      "To check if an object is an instance of a class.",
      "To merge two objects.",
      "To prevent a function from throwing an error."
    ]
  },
  {
    "q": "Which statement correctly imports a module dynamically in JavaScript?",
    "o": [
      "import(\"./module.js\").then(module => console.log(module));",
      "import ./module.js;",
      "const module = require(\"./module.js\");",
      "dynamicImport(\"./module.js\");"
    ]
  },
  {
    "q": "Which of the following is true about dynamic imports in JavaScript?",
    "o": [
      "They return a promise.",
      "They must be at the top level of the file.",
      "They block script execution.",
      "They are only available in ES5."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "function tag(strings, value) {\n  return `${strings[0]}${value.toUpperCase()}${strings[1]}`;\n}\nconst name = \"alice\";\nconsole.log(tag`Hello, ${name}!`);",
    "o": [
      "\"Hello, ALICE!\"",
      "\"Hello, alice!\"",
      "Error",
      "Undefined"
    ]
  },
  {
    "q": "What is the purpose of tagged template literals in JavaScript?",
    "o": [
      "To process template literals with a function.",
      "To concatenate strings.",
      "To create multiline strings.",
      "To interpolate variables in strings."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const [a, b] = [10, 20];\nconsole.log(a, b);",
    "o": [
      "10 20",
      "[10, 20]",
      "Undefined",
      "Error"
    ]
  },
  {
    "q": "Which syntax correctly uses object destructuring?",
    "o": [
      "const { name, age } = person;",
      "const name, age = person;",
      "const name = person{ name };",
      "const [name, age] = person;"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "function greet(name = \"Guest\") {\n  console.log(`Hello, ${name}!`);\n}\ngreet();",
    "o": [
      "\"Hello, Guest!\"",
      "\"Hello, !\"",
      "Undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following is true about default parameters?",
    "o": [
      "They provide default values when arguments are missing.",
      "They throw an error if no argument is provided.",
      "They are required for all function parameters.",
      "They only work with arrow functions."
    ]
  },
  {
    "q": "What is the correct syntax for an arrow function?",
    "o": [
      "const add = (a, b) => a + b;",
      "const add = (a, b) => { return a + b; }",
      "Both A and B",
      "None of the above"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const promise = new Promise((resolve, reject) => {\n  resolve(\"Success\");\n});\npromise.then(console.log);",
    "o": [
      "\"Success\"",
      "Undefined",
      "Error",
      "Promise { <pending> }"
    ]
  },
  {
    "q": "Which statement correctly defines an async function?",
    "o": [
      "async function fetchData() { return \"Data\"; }",
      "function async fetchData() { return \"Data\"; }",
      "async fetchData() { return \"Data\"; }",
      "fetchData() async { return \"Data\"; }"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "async function fetchData() {\n  return \"Data\";\n}\nfetchData().then(console.log);",
    "o": [
      "\"Data\"",
      "Undefined",
      "Error",
      "Promise { <pending> }"
    ]
  },
  {
    "q": "Which of the following is true about the `Symbol` type in JavaScript?",
    "o": [
      "Symbols are unique and immutable.",
      "Symbols are the same if they have the same value.",
      "Symbols can be converted to strings implicitly.",
      "Symbols are primarily used to create arrays."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const id1 = Symbol(\"id\");\nconst id2 = Symbol(\"id\");\nconsole.log(id1 === id2);",
    "o": [
      "false",
      "true",
      "Undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following is NOT true about JavaScript `Map`?",
    "o": [
      "It allows any type of key.",
      "It maintains key order.",
      "It does not allow duplicate keys.",
      "It is the same as an object."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const set = new Set([1, 2, 3, 3, 4]);\nconsole.log(set.size);",
    "o": [
      "4",
      "5",
      "3",
      "Undefined"
    ]
  },
  {
    "q": "Which of the following is NOT a characteristic of `WeakMap`?",
    "o": [
      "It allows primitive values as keys.",
      "It prevents memory leaks.",
      "Its keys are garbage collected when they become unreachable.",
      "It does not allow iteration."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const obj = { name: \"Alice\" };\nconst weakMap = new WeakMap();\nweakMap.set(obj, \"Developer\");\nconsole.log(weakMap.get(obj));",
    "o": [
      "\"Developer\"",
      "Undefined",
      "Error",
      "Null"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const obj = { person: { name: \"Alice\" } };\nconsole.log(obj?.person?.name);",
    "o": [
      "\"Alice\"",
      "Undefined",
      "Error",
      "null"
    ]
  },
  {
    "q": "What does the optional chaining operator (?.) do?",
    "o": [
      "Prevents errors when accessing nested properties of undefined or null.",
      "Assigns a default value if a property is missing.",
      "Throws an error when a property is missing.",
      "Creates a deep copy of an object."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const value = null ?? \"Default\";\nconsole.log(value);",
    "o": [
      "\"Default\"",
      "null",
      "Error",
      "Undefined"
    ]
  },
  {
    "q": "Which of the following correctly describes the nullish coalescing operator (??)?",
    "o": [
      "It returns the right-hand value if the left-hand value is null or undefined.",
      "It behaves exactly like the logical OR (||) operator.",
      "It returns the left-hand value only if it is false.",
      "It only works with objects."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "class Person {\n  constructor(name) {\n    this.name = name;\n  }\n}\nconst p = new Person(\"Bob\");\nconsole.log(p.name);",
    "o": [
      "\"Bob\"",
      "Undefined",
      "Error",
      "null"
    ]
  },
  {
    "q": "Which of the following is true about JavaScript classes?",
    "o": [
      "They are syntactic sugar over constructor functions.",
      "They replace objects in JavaScript.",
      "They must always be declared using `var`.",
      "They do not support inheritance."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const obj = {\n  name: \"Alice\",\n  greet() {\n    console.log(`Hello, ${this.name}!`);\n  }\n};\nobj.greet();",
    "o": [
      "\"Hello, Alice!\"",
      "Undefined",
      "Error",
      "\"Hello, !\""
    ]
  },
  {
    "q": "Which of the following is a correct way to define an object method in ES6?",
    "o": [
      "const obj = { sayHello() { console.log(\"Hello!\"); } };",
      "const obj = { sayHello: function { console.log(\"Hello!\"); } };",
      "const obj = { function sayHello() { console.log(\"Hello!\"); } };",
      "const obj = { sayHello: => { console.log(\"Hello!\"); } };"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "async function fetchData() {\n  return \"Data\";\n}\nfetchData().then(console.log);",
    "o": [
      "\"Data\"",
      "Undefined",
      "Error",
      "Promise { <pending> }"
    ]
  },
  {
    "q": "Which of the following correctly defines an async function?",
    "o": [
      "async function getData() { return \"Hello\"; }",
      "function async getData() { return \"Hello\"; }",
      "getData() async { return \"Hello\"; }",
      "async getData { return \"Hello\"; }"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "function* generator() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\nconst gen = generator();\nconsole.log(gen.next().value);",
    "o": [
      "1",
      "2",
      "3",
      "Undefined"
    ]
  },
  {
    "q": "Which of the following is true about JavaScript generators?",
    "o": [
      "They allow functions to pause execution and resume later.",
      "They execute functions immediately and do not pause.",
      "They always return an array.",
      "They must return a Promise."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const [a, b] = [10, 20];\nconsole.log(a, b);",
    "o": [
      "10 20",
      "20 10",
      "Undefined Undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly demonstrates object destructuring?",
    "o": [
      "const { name, age } = { name: \"Alice\", age: 25 };",
      "const [ name, age ] = { name: \"Alice\", age: 25 };",
      "const name, age = { name: \"Alice\", age: 25 };",
      "const { name: Alice, age: 25 } = obj;"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "function greet(name = \"Guest\") {\n  console.log(`Hello, ${name}!`);\n}\ngreet();",
    "o": [
      "\"Hello, Guest!\"",
      "\"Hello, !\"",
      "Undefined",
      "Error"
    ]
  },
  {
    "q": "What is the purpose of default parameters in JavaScript functions?",
    "o": [
      "To assign a default value if an argument is not provided.",
      "To enforce that all function parameters are required.",
      "To automatically return a value from a function.",
      "To declare variables inside a function."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const add = (a, b) => a + b;\nconsole.log(add(5, 10));",
    "o": [
      "15",
      "5",
      "10",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a correct arrow function syntax?",
    "o": [
      "const greet = (name) => `Hello, ${name}!`;",
      "const greet(name) => `Hello, ${name}!`;",
      "const greet = name => { return `Hello, ${name}!` };",
      "const greet = (name) { return `Hello, ${name}!`; }"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const promise = new Promise((resolve, reject) => {\n  resolve(\"Success\");\n});\npromise.then(console.log);",
    "o": [
      "\"Success\"",
      "Undefined",
      "Error",
      "Promise { <pending> }"
    ]
  },
  {
    "q": "Which of the following statements about JavaScript Promises is correct?",
    "o": [
      "A Promise represents an asynchronous operation that may complete in the future.",
      "A Promise always resolves immediately.",
      "A Promise blocks execution until it is resolved.",
      "A Promise can only be used with async functions."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "import { myFunction } from \"./module.js\";\nconsole.log(typeof myFunction);",
    "o": [
      "\"function\"",
      "Undefined",
      "Error",
      "\"object\""
    ]
  },
  {
    "q": "Which of the following correctly exports a function from a JavaScript module?",
    "o": [
      "export function myFunction() {}",
      "export = function myFunction() {}",
      "export myFunction() {}",
      "export: function myFunction() {}"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "let x = 10;\nif (true) {\n  let x = 20;\n  console.log(x);\n}\nconsole.log(x);",
    "o": [
      "20 10",
      "10 20",
      "20 20",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about 'const' in JavaScript is true?",
    "o": [
      "Variables declared with 'const' cannot be reassigned.",
      "Variables declared with 'const' cannot hold objects.",
      "'const' variables are hoisted to the top like 'var'.",
      "A 'const' variable must be initialized inside a function."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "const name = \"Alice\";\nconst greeting = `Hello, ${name}!`;\nconsole.log(greeting);",
    "o": [
      "\"Hello, Alice!\"",
      "Hello, ${name}!",
      "Undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a correct use of template literals?",
    "o": [
      "const message = `My name is ${name}`;",
      "const message = 'My name is ${name}';",
      "const message = \"My name is ${name}\";",
      "const message = (`My name is ${name}`);"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3];\nconst newNumbers = [...numbers, 4, 5];\nconsole.log(newNumbers);",
    "o": [
      "[1, 2, 3, 4, 5]",
      "[[1, 2, 3], 4, 5]",
      "[1, 2, 3, [4, 5]]",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly demonstrates the use of the rest operator?",
    "o": [
      "function sum(...numbers) { return numbers.reduce((a, b) => a + b, 0); }",
      "function sum(numbers...) { return numbers.reduce((a, b) => a + b, 0); }",
      "function sum([...numbers]) { return numbers.reduce((a, b) => a + b, 0); }",
      "function sum(..numbers) { return numbers.reduce((a, b) => a + b, 0); }"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const person = { name: \"Alice\", age: 25 };\nconst clonedPerson = { ...person };\nconsole.log(clonedPerson);",
    "o": [
      "{ name: \"Alice\", age: 25 }",
      "{ { name: \"Alice\", age: 25 } }",
      "[\"Alice\", 25]",
      "Error"
    ]
  },
  {
    "q": "Which statement correctly imports a default export from a module?",
    "o": [
      "import myFunction from \"./module.js\";",
      "import { myFunction } from \"./module.js\";",
      "import { default as myFunction } from \"./module.js\";",
      "import default myFunction from \"./module.js\";"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "export const value = 42;\nexport default function greet() { return \"Hello!\"; }\n\nimport greet, { value } from \"./module.js\";\nconsole.log(greet(), value);",
    "o": [
      "\"Hello! 42\"",
      "\"Hello!\"",
      "42",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly exports multiple values from a module?",
    "o": [
      "export const a = 1; export const b = 2;",
      "exports a = 1; exports b = 2;",
      "export { a: 1, b: 2 };",
      "export (a = 1, b = 2);"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "let x = 5;\n{\n  const x = 10;\n  console.log(x);\n}\nconsole.log(x);",
    "o": [
      "10 5",
      "5 10",
      "10 10",
      "Error"
    ]
  },
  {
    "q": "Which statement about 'let' and 'const' is true?",
    "o": [
      "'let' allows reassignment, but 'const' does not.",
      "'const' variables are function-scoped.",
      "Both 'let' and 'const' are hoisted like 'var'.",
      "Variables declared with 'let' cannot be reassigned."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const firstName = \"John\";\nconst lastName = \"Doe\";\nconsole.log(`${firstName} ${lastName}`);",
    "o": [
      "\"John Doe\"",
      "\"${firstName} ${lastName}\"",
      "JohnDoe",
      "Error"
    ]
  },
  {
    "q": "Which of the following is an advantage of template literals?",
    "o": [
      "They allow multi-line strings without escape characters.",
      "They replace the need for functions in JavaScript.",
      "They prevent any syntax errors in string manipulation.",
      "They cannot be used with variables."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst result = [...arr1, ...arr2];\nconsole.log(result);",
    "o": [
      "[1, 2, 3, 4, 5, 6]",
      "[[1, 2, 3], [4, 5, 6]]",
      "Error",
      "[1, 2, 3, [4, 5, 6]]"
    ]
  },
  {
    "q": "Which is the correct way to use the rest parameter?",
    "o": [
      "function multiply(...numbers) { return numbers.reduce((a, b) => a * b, 1); }",
      "function multiply(numbers...) { return numbers.reduce((a, b) => a * b, 1); }",
      "function multiply([...numbers]) { return numbers.reduce((a, b) => a * b, 1); }",
      "function multiply(..numbers) { return numbers.reduce((a, b) => a * b, 1); }"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const person = { name: \"Alice\", age: 30 };\nconst updatedPerson = { ...person, age: 35 };\nconsole.log(updatedPerson.age);",
    "o": [
      "35",
      "30",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which statement correctly imports a named export from a module?",
    "o": [
      "import { myFunction } from \"./module.js\";",
      "import myFunction from \"./module.js\";",
      "import { default as myFunction } from \"./module.js\";",
      "import default myFunction from \"./module.js\";"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "export const value = 50;\nexport default function sayHello() { return \"Hi!\"; }\n\nimport sayHello, { value } from \"./module.js\";\nconsole.log(sayHello(), value);",
    "o": [
      "\"Hi! 50\"",
      "\"Hi!\"",
      "50",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly exports a function from a module?",
    "o": [
      "export function greet() { return \"Hello!\"; }",
      "exports function greet() { return \"Hello!\"; }",
      "export { function greet() { return \"Hello!\"; } };",
      "export (function greet() { return \"Hello!\"; });"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "let x = 10;\nx = 20;\nconsole.log(x);",
    "o": [
      "20",
      "10",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which of the following is true about 'const' in JavaScript?",
    "o": [
      "'const' variables cannot be reassigned after declaration.",
      "'const' variables are function-scoped.",
      "'const' variables can be redeclared in the same block scope.",
      "'const' variables are automatically global."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const greeting = `Hello, \\nWorld!`;\nconsole.log(greeting);",
    "o": [
      "\"Hello, \nWorld!\"",
      "\"Hello, World!\"",
      "\"Hello, \\nWorld!\"",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about template literals is correct?",
    "o": [
      "They allow string interpolation using `${}`.",
      "They require single quotes (' ') instead of backticks (` `).",
      "They do not support multi-line strings.",
      "They must always be used with a variable."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3];\nconst newNumbers = [...numbers, 4, 5];\nconsole.log(newNumbers);",
    "o": [
      "[1, 2, 3, 4, 5]",
      "[[1, 2, 3], 4, 5]",
      "[1, 2, 3, [4, 5]]",
      "Error"
    ]
  },
  {
    "q": "Which statement about the spread operator is true?",
    "o": [
      "It can be used to copy arrays and objects.",
      "It only works with arrays.",
      "It is used to group function parameters.",
      "It replaces all instances of a value in an array."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "function sum(...numbers) {\n  return numbers.reduce((acc, num) => acc + num, 0);\n}\nconsole.log(sum(1, 2, 3, 4));",
    "o": [
      "10",
      "[1, 2, 3, 4]",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which of the following is a correct use of the rest parameter?",
    "o": [
      "function combine(...args) { return args.join('-'); }",
      "function combine(args...) { return args.join('-'); }",
      "function combine([...args]) { return args.join('-'); }",
      "function combine(..args) { return args.join('-'); }"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const user = { name: \"Alice\", age: 25 };\nconst updatedUser = { ...user, age: 30 };\nconsole.log(updatedUser);",
    "o": [
      "{ name: \"Alice\", age: 30 }",
      "{ name: \"Alice\", age: 25 }",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which is the correct way to export a function from a module?",
    "o": [
      "export function greet() { return \"Hello!\"; }",
      "export { function greet() { return \"Hello!\"; } };",
      "exports function greet() { return \"Hello!\"; }",
      "export (function greet() { return \"Hello!\"; });"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "export const value = 42;\nexport default function greet() { return \"Hello!\"; }\n\nimport greet, { value } from \"./module.js\";\nconsole.log(greet(), value);",
    "o": [
      "\"Hello! 42\"",
      "42",
      "\"Hello!\"",
      "Error"
    ]
  },
  {
    "q": "Which statement correctly imports a default export?",
    "o": [
      "import myFunction from \"./module.js\";",
      "import { myFunction } from \"./module.js\";",
      "import default myFunction from \"./module.js\";",
      "import { default as myFunction } from \"./module.js\";"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "let x = 5;\nif (true) {\n  let x = 10;\n}\nconsole.log(x);",
    "o": [
      "5",
      "10",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which statement about 'let' and 'const' is true?",
    "o": [
      "'let' allows reassignment, but 'const' does not.",
      "'const' variables can be reassigned after declaration.",
      "'let' variables are global by default.",
      "'let' variables cannot be reassigned."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "const a = `Hello`;\nconst b = `World`;\nconsole.log(`${a}, ${b}!`);",
    "o": [
      "\"Hello, World!\"",
      "\"Hello World!\"",
      "\"${a}, ${b}!\"",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a correct use of template literals?",
    "o": [
      "const greeting = `Hello, ${name}!`;",
      "const greeting = \"Hello, ${name}!\";",
      "const greeting = `Hello, 'name'!`;",
      "const greeting = 'Hello, ${name}';"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const nums = [1, 2, 3];\nconst copy = [...nums];\nconsole.log(copy);",
    "o": [
      "[1, 2, 3]",
      "[[1, 2, 3]]",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which of the following is NOT a valid use of the spread operator?",
    "o": [
      "Spreading elements of an array.",
      "Spreading properties of an object.",
      "Concatenating arrays.",
      "Modifying a variable directly."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "function multiply(multiplier, ...nums) {\n  return nums.map(num => num * multiplier);\n}\nconsole.log(multiply(2, 1, 2, 3));",
    "o": [
      "[2, 4, 6]",
      "[1, 2, 3]",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which statement about the rest operator is true?",
    "o": [
      "It gathers multiple arguments into a single array.",
      "It is used to spread arrays into individual elements.",
      "It works only inside object literals.",
      "It is the same as the spread operator."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const user = { name: 'Alice', age: 30 };\nconst updatedUser = { ...user, age: 35 };\nconsole.log(updatedUser.age);",
    "o": [
      "35",
      "30",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which of the following is the correct way to export a variable?",
    "o": [
      "export const PI = 3.14;",
      "exports PI = 3.14;",
      "export { PI: 3.14 };",
      "export default const PI = 3.14;"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "export const message = \"Hello\";\nexport default function greet() { return \"Hi\"; }\n\nimport greet, { message } from \"./module.js\";\nconsole.log(greet(), message);",
    "o": [
      "\"Hi Hello\"",
      "\"Hello Hi\"",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which of the following correctly imports a named export?",
    "o": [
      "import { myFunction } from \"./module.js\";",
      "import myFunction from \"./module.js\";",
      "import default myFunction from \"./module.js\";",
      "import (myFunction) from \"./module.js\";"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "let x = 10;\nx = 20;\nconsole.log(x);",
    "o": [
      "20",
      "10",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which statement about 'const' is true?",
    "o": [
      "'const' variables cannot be reassigned after declaration.",
      "'const' variables are function-scoped.",
      "'const' is the same as 'let'.",
      "'const' variables must always store objects."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "const name = 'Alice';\nconsole.log(`Hello, ${name.toUpperCase()}!`);",
    "o": [
      "\"Hello, ALICE!\"",
      "\"Hello, Alice!\"",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which of the following correctly uses a template literal?",
    "o": [
      "const message = `The sum is ${5 + 10}`;",
      "const message = 'The sum is ${5 + 10}';",
      "const message = `The sum is ('5 + 10')`;",
      "const message = \"The sum is `5 + 10`\";"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\nconsole.log(combined);",
    "o": [
      "[1, 2, 3, 4, 5, 6]",
      "[[1, 2, 3], [4, 5, 6]]",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which of the following is NOT a correct use of the spread operator?",
    "o": [
      "Using it in function calls.",
      "Copying an object.",
      "Spreading into an array.",
      "Modifying an object property directly."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "function sum(...nums) {\n  return nums.reduce((acc, num) => acc + num, 0);\n}\nconsole.log(sum(1, 2, 3, 4, 5));",
    "o": [
      "15",
      "[1, 2, 3, 4, 5]",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which statement about the rest operator is true?",
    "o": [
      "It collects multiple function arguments into an array.",
      "It spreads elements into individual values.",
      "It is only used in function parameters.",
      "It cannot be used in object destructuring."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const person = { name: 'Alice', age: 30 };\nconst newPerson = { ...person, age: 35 };\nconsole.log(newPerson.name, newPerson.age);",
    "o": [
      "\"Alice 35\"",
      "\"Alice 30\"",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which is the correct way to export a default function?",
    "o": [
      "export default function greet() { return 'Hello'; }",
      "default export function greet() { return 'Hello'; }",
      "export { default greet }",
      "export function greet() = default;"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "export const PI = 3.14;\nexport default function area(radius) { return PI * radius * radius; }\n\nimport area, { PI } from \"./math.js\";\nconsole.log(area(2), PI);",
    "o": [
      "\"12.56 3.14\"",
      "Error",
      "undefined",
      "\"3.14 12.56\""
    ]
  },
  {
    "q": "Which of the following correctly imports multiple named exports?",
    "o": [
      "import { add, subtract } from \"./math.js\";",
      "import add, subtract from \"./math.js\";",
      "import { add subtract } from \"./math.js\";",
      "import (add, subtract) from \"./math.js\";"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "let x = 5;\nif (true) {\n  let x = 10;\n  console.log(x);\n}\nconsole.log(x);",
    "o": [
      "10, 5",
      "5, 10",
      "10, 10",
      "Error"
    ]
  },
  {
    "q": "What happens when trying to reassign a 'const' variable?",
    "l": "javascript",
    "c": "const number = 42;\nnumber = 50;",
    "o": [
      "Error",
      "50",
      "42",
      "undefined"
    ]
  },
  {
    "q": "Which of the following correctly uses template literals?",
    "o": [
      "console.log(`Hello, ${name}!`);",
      "console.log('Hello, ${name}!');",
      "console.log(`Hello, {name}!`);",
      "console.log(\"Hello, ${name}!\");"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "const user = { name: 'Alice', age: 25 };\nconst newUser = { ...user, age: 30 };\nconsole.log(newUser.age);",
    "o": [
      "30",
      "25",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3];\nconst newNumbers = [...numbers, 4, 5];\nconsole.log(newNumbers);",
    "o": [
      "[1, 2, 3, 4, 5]",
      "[[1, 2, 3], 4, 5]",
      "Error",
      "[1, 2, 3]"
    ]
  },
  {
    "q": "What is the purpose of the rest operator?",
    "o": [
      "It gathers multiple values into an array.",
      "It spreads an array into individual elements.",
      "It allows modifying constant variables.",
      "It is only used in function calls."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "function multiply(multiplier, ...numbers) {\n  return numbers.map(num => num * multiplier);\n}\nconsole.log(multiply(2, 1, 2, 3));",
    "o": [
      "[2, 4, 6]",
      "[1, 2, 3]",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which statement about ES6 modules is true?",
    "o": [
      "Each module has its own scope.",
      "All modules share the same global scope.",
      "Modules cannot export functions.",
      "Modules must be used inside classes."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "export const greeting = 'Hello';\nexport default function sayHi() { return 'Hi'; }\n\nimport sayHi, { greeting } from './module.js';\nconsole.log(sayHi(), greeting);",
    "o": [
      "'Hi', 'Hello'",
      "'Hello', 'Hi'",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which is the correct way to dynamically import a module?",
    "o": [
      "import('./module.js').then(module => module.default());",
      "import './module.js'.default();",
      "import default from './module.js';",
      "import module.default from './module.js';"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "let a = 10;\nconst b = 20;\na = 15;\nb = 25;\nconsole.log(a, b);",
    "o": [
      "Error",
      "15, 25",
      "10, 20",
      "undefined"
    ]
  },
  {
    "q": "Which of the following is a valid way to declare an arrow function?",
    "o": [
      "const add = (a, b) => a + b;",
      "const add = (a, b) => { return a + b; };",
      "const add = a, b => a + b;",
      "const add => (a, b) a + b;"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3, 4];\nconst [first, second, ...rest] = numbers;\nconsole.log(rest);",
    "o": [
      "[3, 4]",
      "[1, 2]",
      "[2, 3, 4]",
      "Error"
    ]
  },
  {
    "q": "Which statement about template literals is true?",
    "o": [
      "They allow embedding expressions using `${}`.",
      "They must use single quotes (' ').",
      "They are only used for multi-line strings.",
      "They cannot contain variables."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const person = { name: 'John', age: 30 };\nconst { name, age } = person;\nconsole.log(name, age);",
    "o": [
      "'John', 30",
      "['John', 30]",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which of the following is NOT a feature of the spread operator?",
    "o": [
      "It can be used to merge arrays.",
      "It can be used to copy objects.",
      "It modifies the original array or object.",
      "It spreads elements of an iterable."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "const greet = (name = 'Guest') => `Hello, ${name}!`;\nconsole.log(greet());",
    "o": [
      "'Hello, Guest!'",
      "'Hello, undefined!'",
      "'Hello, !'",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a correct way to create an async function?",
    "o": [
      "async function fetchData() { return await fetch(url); }",
      "function fetchData() async { return await fetch(url); }",
      "function async fetchData() { return await fetch(url); }",
      "async fetchData() { return await fetch(url); }"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "async function test() {\n  return 'Hello';\n}\ntest().then(console.log);",
    "o": [
      "'Hello'",
      "Promise { 'Hello' }",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which statement about ES6 modules is false?",
    "o": [
      "Modules always run in strict mode.",
      "Named exports must be imported using the same name.",
      "You can have multiple default exports in a single module.",
      "Modules are only executed once even if imported multiple times."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "let x = 5;\n{\n  let x = 10;\n  console.log(x);\n}\nconsole.log(x);",
    "o": [
      "10, 5",
      "5, 10",
      "10, 10",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly uses the spread operator?",
    "o": [
      "const arr1 = [1, 2, 3];\nconst arr2 = [...arr1, 4, 5];",
      "const arr1 = [1, 2, 3];\nconst arr2 = arr1...;",
      "const arr1 = [1, 2, 3];\nconst arr2 = (arr1, ...4, 5);",
      "const arr1 = [1, 2, 3];\nconst arr2 = [...arr1...];"
    ]
  },
  {
    "q": "What will the following code output?",
    "l": "javascript",
    "c": "const obj1 = { a: 1, b: 2 };\nconst obj2 = { ...obj1, b: 3, c: 4 };\nconsole.log(obj2);",
    "o": [
      "{ a: 1, b: 3, c: 4 }",
      "{ a: 1, b: 2, c: 4 }",
      "{ a: 1, b: 2 }",
      "{ a: 1, b: 3 }"
    ]
  },
  {
    "q": "Which statement about template literals is correct?",
    "o": [
      "They allow multi-line strings without concatenation.",
      "They must be enclosed in single quotes.",
      "They do not support expressions.",
      "They are identical to regular strings."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const numbers = [10, 20, 30];\nconst [first, , third] = numbers;\nconsole.log(first, third);",
    "o": [
      "10, 30",
      "10, 20",
      "20, 30",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly imports a default export?",
    "o": [
      "import myFunction from './module.js';",
      "import { myFunction } from './module.js';",
      "import * as myFunction from './module.js';",
      "import { default as myFunction } from './module.js';"
    ]
  },
  {
    "q": "What is the result of the following code?",
    "l": "javascript",
    "c": "const multiply = (a, b = 2) => a * b;\nconsole.log(multiply(5));",
    "o": [
      "10",
      "5",
      "Error",
      "NaN"
    ]
  },
  {
    "q": "Which of the following is NOT true about arrow functions?",
    "o": [
      "They do not have their own 'this'.",
      "They can be used as methods in objects.",
      "They are always anonymous.",
      "They have a concise syntax."
    ]
  },
  {
    "q": "What will the following async function return?",
    "l": "javascript",
    "c": "async function getData() {\n  return 'Hello';\n}\nconsole.log(getData());",
    "o": [
      "Promise { 'Hello' }",
      "'Hello'",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which statement about Promises is correct?",
    "o": [
      "A promise can be in one of three states: pending, fulfilled, or rejected.",
      "Promises execute synchronously.",
      "A rejected promise cannot be handled.",
      "Promises block the event loop."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "let count = 5;\ncount = 10;\nconsole.log(count);",
    "o": [
      "10",
      "5",
      "Error: Assignment to constant variable",
      "undefined"
    ]
  },
  {
    "q": "What is the main difference between 'let' and 'const'?",
    "o": [
      "'const' variables cannot be reassigned, but 'let' variables can.",
      "'let' is function-scoped, while 'const' is block-scoped.",
      "'const' is faster than 'let'.",
      "'let' variables cannot be reassigned, but 'const' variables can."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const person = { name: 'Alice' };\nperson.age = 25;\nconsole.log(person);",
    "o": [
      "{ name: 'Alice', age: 25 }",
      "Error: Assignment to constant variable",
      "{ name: 'Alice' }",
      "undefined"
    ]
  },
  {
    "q": "Which syntax correctly uses template literals?",
    "o": [
      "const name = 'John';\nconsole.log(`Hello, ${name}!`);",
      "const name = 'John';\nconsole.log('Hello, ${name}!');",
      "const name = 'John';\nconsole.log(`Hello, ' + name + '!`);",
      "const name = 'John';\nconsole.log(`Hello, ${name}`!);"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const arr1 = [1, 2, 3];\nconst arr2 = [...arr1, 4, 5];\nconsole.log(arr2);",
    "o": [
      "[1, 2, 3, 4, 5]",
      "[[1, 2, 3], 4, 5]",
      "[1, 2, 3], [4, 5]",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly uses the rest operator?",
    "o": [
      "function sum(...numbers) { return numbers.reduce((a, b) => a + b, 0); }",
      "function sum(numbers...) { return numbers.reduce((a, b) => a + b, 0); }",
      "function sum(...numbers) { return ...numbers.reduce((a, b) => a + b, 0); }",
      "function sum(numbers) { return ...numbers.reduce((a, b) => a + b, 0); }"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3];\nconst [first, ...rest] = numbers;\nconsole.log(rest);",
    "o": [
      "[2, 3]",
      "1",
      "[1, 2, 3]",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly imports a named export?",
    "o": [
      "import { myFunction } from './module.js';",
      "import myFunction from './module.js';",
      "import * from './module.js' as myFunction;",
      "import default myFunction from './module.js';"
    ]
  },
  {
    "q": "What will the following code return?",
    "l": "javascript",
    "c": "const arrowFunc = () => ({ name: 'John' });\nconsole.log(arrowFunc());",
    "o": [
      "{ name: 'John' }",
      "undefined",
      "'John'",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about async functions is true?",
    "o": [
      "Async functions always return a Promise.",
      "Async functions run synchronously.",
      "You cannot use 'await' inside an async function.",
      "Async functions do not return anything."
    ]
  },
  {
    "q": "What will the following code output?",
    "l": "javascript",
    "c": "const promise = new Promise((resolve) => resolve('Success'));\npromise.then(console.log);",
    "o": [
      "Success",
      "undefined",
      "Error",
      "Promise { 'Success' }"
    ]
  },
  {
    "q": "Which of the following statements about JavaScript modules is correct?",
    "o": [
      "Modules are imported using the 'import' statement.",
      "Modules can only export one function.",
      "Modules cannot be used in the browser.",
      "Modules must always have a default export."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2, c: 3 };\nconst { a, ...rest } = obj;\nconsole.log(rest);",
    "o": [
      "{ b: 2, c: 3 }",
      "{ a: 1 }",
      "{ a: 1, b: 2, c: 3 }",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly defines an arrow function with an implicit return?",
    "o": [
      "const add = (a, b) => a + b;",
      "const add = (a, b) => { return a + b };",
      "const add = (a, b) => return a + b;",
      "const add = (a, b) { a + b };"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "function printValues(a, b, c = 10) {\n  console.log(a, b, c);\n}\nprintValues(1, 2);",
    "o": [
      "1 2 10",
      "1 2 undefined",
      "Error",
      "1 2 0"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for destructuring an array?",
    "o": [
      "const [first, second] = [10, 20];",
      "const first, second = [10, 20];",
      "const { first, second } = [10, 20];",
      "const first = 10, second = 20;"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const fetchData = async () => 'Hello';\nconsole.log(await fetchData());",
    "o": [
      "'Hello'",
      "Promise { 'Hello' }",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly handles errors in a Promise chain?",
    "o": [
      "promise.then(result => console.log(result)).catch(error => console.error(error));",
      "promise.then(result => console.log(result)).then(error => console.error(error));",
      "promise.catch(result => console.log(result)).then(error => console.error(error));",
      "promise.finally(error => console.error(error));"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "let x = 10;\nif (true) {\n  let x = 20;\n  console.log(x);\n}\nconsole.log(x);",
    "o": [
      "20 10",
      "10 20",
      "20 20",
      "10 10"
    ]
  },
  {
    "q": "Which of the following is true about 'const' in JavaScript?",
    "o": [
      "A variable declared with 'const' cannot be reassigned.",
      "A variable declared with 'const' is not block-scoped.",
      "'const' variables are mutable and can be reassigned.",
      "'const' can only be used inside functions."
    ]
  },
  {
    "q": "What is the correct way to use template literals in JavaScript?",
    "o": [
      "const name = 'John';\nconsole.log(`Hello, ${name}!`);",
      "const name = 'John';\nconsole.log('Hello, ${name}!');",
      "const name = 'John';\nconsole.log(`Hello, ' + name + '!`);",
      "const name = 'John';\nconsole.log(`Hello, ${name}`!);"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const arr1 = [1, 2, 3];\nconst arr2 = [...arr1, 4, 5];\nconsole.log(arr2);",
    "o": [
      "[1, 2, 3, 4, 5]",
      "[[1, 2, 3], 4, 5]",
      "[1, 2, 3], [4, 5]",
      "Error"
    ]
  },
  {
    "q": "Which statement correctly uses the rest operator?",
    "o": [
      "function sum(...nums) { return nums.reduce((a, b) => a + b, 0); }",
      "function sum(nums...) { return nums.reduce((a, b) => a + b, 0); }",
      "function sum(...nums) { return ...nums.reduce((a, b) => a + b, 0); }",
      "function sum(nums) { return ...nums.reduce((a, b) => a + b, 0); }"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2, c: 3 };\nconst { a, ...rest } = obj;\nconsole.log(rest);",
    "o": [
      "{ b: 2, c: 3 }",
      "{ a: 1 }",
      "{ a: 1, b: 2, c: 3 }",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly imports a default export?",
    "o": [
      "import myFunction from './module.js';",
      "import { myFunction } from './module.js';",
      "import * from './module.js';",
      "import default myFunction from './module.js';"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3, 4, 5];\nfor (const num of numbers) {\n  console.log(num * 2);\n}",
    "o": [
      "2 4 6 8 10",
      "1 2 3 4 5",
      "Error",
      "10 8 6 4 2"
    ]
  },
  {
    "q": "Which of the following correctly defines an arrow function?",
    "o": [
      "const add = (a, b) => a + b;",
      "const add = (a, b) => { return a + b };",
      "const add = (a, b) => return a + b;",
      "const add = (a, b) { a + b };"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const fetchData = async () => 'Hello';\nconsole.log(await fetchData());",
    "o": [
      "'Hello'",
      "Promise { 'Hello' }",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "What is the correct way to handle a rejected promise?",
    "o": [
      "promise.then(result => console.log(result)).catch(error => console.error(error));",
      "promise.catch(result => console.log(result)).then(error => console.error(error));",
      "promise.finally(error => console.error(error));",
      "promise.then(result => console.log(result)).then(error => console.error(error));"
    ]
  },
  {
    "q": "What will the following code output?",
    "l": "javascript",
    "c": "const person = { name: 'Alice', age: null };\nconsole.log(person.age ?? 25);",
    "o": [
      "25",
      "null",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about optional chaining (?.) is correct?",
    "o": [
      "It allows safe access to deeply nested properties without throwing an error if a property is undefined.",
      "It automatically assigns default values to undefined properties.",
      "It converts undefined properties to an empty object.",
      "It works only with arrays."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const obj = { name: 'Alice', age: 25 };\ndelete obj.name;\nconsole.log(obj.name);",
    "o": [
      "undefined",
      "null",
      "Alice",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly destructures an array?",
    "o": [
      "const [first, second] = [10, 20];",
      "const first, second = [10, 20];",
      "const { first, second } = [10, 20];",
      "const first = 10, second = 20;"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for using 'for...of'?",
    "o": [
      "for (const item of array) { console.log(item); }",
      "for (let i = 0; i < array.length; i++) { console.log(array[i]); }",
      "array.forEach(item => console.log(item));",
      "for (let item in array) { console.log(item); }"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "let a = 0 ?? 5;\nconsole.log(a);",
    "o": [
      "0",
      "5",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly uses the 'finally' method in a Promise?",
    "o": [
      "promise.then(result => console.log(result)).finally(() => console.log('Done'));",
      "promise.finally(result => console.log(result));",
      "promise.finally().then(() => console.log('Done'));",
      "promise.catch().finally(() => console.log('Done'));"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const person = { name: 'Alice', age: 30 };\nconst { name, age } = person;\nconsole.log(name, age);",
    "o": [
      "'Alice', 30",
      "{ name: 'Alice', age: 30 }",
      "['Alice', 30]",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about the spread operator (...) is correct?",
    "o": [
      "It expands an array or object into individual elements.",
      "It merges objects into a single object.",
      "It removes duplicate values from an array.",
      "It creates a reference copy of an array."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "const obj1 = { a: 1, b: 2 };\nconst obj2 = { ...obj1, c: 3 };\nconsole.log(obj2);",
    "o": [
      "{ a: 1, b: 2, c: 3 }",
      "{ a: 1, b: 2 }",
      "[ 1, 2, 3 ]",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly demonstrates the use of default parameters?",
    "o": [
      "function greet(name = 'Guest') { console.log(`Hello, ${name}!`); }",
      "function greet(name) = 'Guest' { console.log(`Hello, ${name}!`); }",
      "function greet('Guest' = name) { console.log(`Hello, ${name}!`); }",
      "function greet(name: 'Guest') { console.log(`Hello, ${name}!`); }"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const greet = (name) => `Hello, ${name}!`;\nconsole.log(greet('John'));",
    "o": [
      "'Hello, John!'",
      "'Hello, name!'",
      "'Hello, undefined!'",
      "Error"
    ]
  },
  {
    "q": "What does the following Promise code output?",
    "l": "javascript",
    "c": "new Promise((resolve, reject) => {\n  resolve('Success');\n}).then(console.log).catch(console.error);",
    "o": [
      "'Success'",
      "undefined",
      "Error",
      "Promise { 'Success' }"
    ]
  },
  {
    "q": "Which statement about 'async' functions is correct?",
    "o": [
      "They always return a Promise.",
      "They execute synchronously.",
      "They block the event loop until completion.",
      "They cannot be used inside classes."
    ]
  },
  {
    "q": "What is the correct way to handle an error inside an async function?",
    "o": [
      "try { await someFunction(); } catch (error) { console.error(error); }",
      "await someFunction().catch(error => console.error(error));",
      "someFunction().catch(error => console.error(error));",
      "All of the above"
    ]
  },
  {
    "q": "What will be the output of the following async/await code?",
    "l": "javascript",
    "c": "async function test() {\n  return 'Hello';\n}\ntest().then(console.log);",
    "o": [
      "'Hello'",
      "Promise { 'Hello' }",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about optional chaining (?.) is correct?",
    "o": [
      "It allows safe access to deeply nested properties without throwing an error if a property is undefined.",
      "It automatically assigns default values to undefined properties.",
      "It works only with arrays.",
      "It converts undefined properties to null."
    ]
  },
  {
    "q": "What will the following code return?",
    "l": "javascript",
    "c": "const user = { name: 'Alice', address: null };\nconsole.log(user.address?.city);",
    "o": [
      "undefined",
      "Error",
      "null",
      "'city'"
    ]
  },
  {
    "q": "Which of the following best describes the event loop in JavaScript?",
    "o": [
      "It handles asynchronous operations by managing the execution of callbacks in the event queue.",
      "It executes synchronous code only.",
      "It blocks JavaScript execution until all functions are completed.",
      "It is a built-in JavaScript function."
    ]
  },
  {
    "q": "What will the following code output?",
    "l": "javascript",
    "c": "console.log(1);\nsetTimeout(() => console.log(2), 0);\nconsole.log(3);",
    "o": [
      "1 3 2",
      "1 2 3",
      "2 1 3",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly implements a closure?",
    "o": [
      "function outer() {\n  let count = 0;\n  return function() { count++; return count; };\n}",
      "function outer() {\n  return function() { return count++; };\n}",
      "function outer() {\n  return function(count) { return count++; };\n}",
      "function outer() {\n  return () => count++;\n}"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "function createCounter() {\n  let count = 0;\n  return function() { return ++count; };\n}\nconst counter = createCounter();\nconsole.log(counter(), counter());",
    "o": [
      "1 2",
      "0 1",
      "2 2",
      "Error"
    ]
  },
  {
    "q": "Which statement about iterators in JavaScript is correct?",
    "o": [
      "Iterators provide a standard way to loop through a collection.",
      "They can only be used with arrays.",
      "They do not work with generators.",
      "They must be manually initialized."
    ]
  },
  {
    "q": "What is the correct syntax to create a generator function?",
    "o": [
      "function* myGenerator() { yield 1; yield 2; }",
      "function myGenerator()* { yield 1; yield 2; }",
      "function myGenerator*() { yield 1; yield 2; }",
      "function myGenerator() { yield* 1, 2; }"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "function* gen() {\n  yield 1;\n  yield 2;\n}\nconst iterator = gen();\nconsole.log(iterator.next().value, iterator.next().value);",
    "o": [
      "1 2",
      "0 1",
      "undefined undefined",
      "Error"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "let x = 10;\n{\n  let x = 20;\n  console.log(x);\n}\nconsole.log(x);",
    "o": [
      "20 10",
      "10 20",
      "20 20",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly demonstrates the use of template literals?",
    "o": [
      "const name = 'John'; console.log(`Hello, ${name}!`);",
      "const name = 'John'; console.log('Hello, ' + name + '!');",
      "const name = 'John'; console.log('Hello, ${name}!');",
      "const name = 'John'; console.log(`Hello, ' + name + '!`);"
    ]
  },
  {
    "q": "What will be the output of the following spread operator example?",
    "l": "javascript",
    "c": "const arr1 = [1, 2, 3];\nconst arr2 = [...arr1, 4, 5];\nconsole.log(arr2);",
    "o": [
      "[1, 2, 3, 4, 5]",
      "[[1, 2, 3], 4, 5]",
      "[1, 2, 3, [4, 5]]",
      "Error"
    ]
  },
  {
    "q": "Which of the following is NOT a valid use of the spread operator?",
    "o": [
      "Expanding elements of an array into function arguments",
      "Cloning an object",
      "Merging two arrays",
      "Modifying an array in-place"
    ]
  },
  {
    "q": "What will be the output of the following arrow function?",
    "l": "javascript",
    "c": "const multiply = (a, b) => a * b;\nconsole.log(multiply(3, 4));",
    "o": [
      "12",
      "7",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which statement about JavaScript classes is correct?",
    "o": [
      "A class can have a constructor method that initializes its properties.",
      "Classes do not support inheritance.",
      "Classes in JavaScript are the same as in Java.",
      "You cannot create instances of a class."
    ]
  },
  {
    "q": "What will be the output of the following Promise chaining example?",
    "l": "javascript",
    "c": "Promise.resolve(1)\n  .then(num => num + 1)\n  .then(num => num * 2)\n  .then(console.log);",
    "o": [
      "4",
      "3",
      "2",
      "Error"
    ]
  },
  {
    "q": "What is the purpose of the 'finally' block in a Promise?",
    "o": [
      "It runs code after a promise is settled (either resolved or rejected).",
      "It handles errors in a promise.",
      "It returns a rejected promise.",
      "It cancels the execution of a promise."
    ]
  },
  {
    "q": "Which of the following is an example of using async/await correctly?",
    "o": [
      "async function fetchData() { let data = await getData(); console.log(data); }",
      "function fetchData() { let data = await getData(); console.log(data); }",
      "async function fetchData() { let data = getData().await; console.log(data); }",
      "async function fetchData() { let data = getData().then(await); console.log(data); }"
    ]
  },
  {
    "q": "What will be the output of this optional chaining example?",
    "l": "javascript",
    "c": "const user = { profile: { name: 'Alice' } };\nconsole.log(user.profile?.age ?? 'Unknown');",
    "o": [
      "'Unknown'",
      "undefined",
      "null",
      "Error"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "console.log(typeof null, typeof undefined);",
    "o": [
      "'object', 'undefined'",
      "'null', 'undefined'",
      "'undefined', 'null'",
      "'object', 'object'"
    ]
  },
  {
    "q": "Which of the following correctly defines a class in JavaScript?",
    "o": [
      "class Person { constructor(name) { this.name = name; } }",
      "function class Person() { constructor(name) { this.name = name; } }",
      "Person class { constructor(name) { this.name = name; } }",
      "class = Person { constructor(name) { this.name = name; } }"
    ]
  },
  {
    "q": "What will be logged by this closure example?",
    "l": "javascript",
    "c": "function outer() {\n  let count = 0;\n  return function() { return ++count; };\n}\nconst counter = outer();\nconsole.log(counter(), counter());",
    "o": [
      "1 2",
      "0 1",
      "2 2",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly describes a higher-order function?",
    "o": [
      "A function that takes another function as an argument or returns a function.",
      "A function that can only return a number.",
      "A function that executes before any other function.",
      "A function that always runs asynchronously."
    ]
  },
  {
    "q": "What will be the output of this generator function?",
    "l": "javascript",
    "c": "function* gen() {\n  yield 'A';\n  yield 'B';\n  yield 'C';\n}\nconst iterator = gen();\nconsole.log(iterator.next().value, iterator.next().value);",
    "o": [
      "'A B'",
      "'B C'",
      "'A C'",
      "Error"
    ]
  },
  {
    "q": "Which statement about JavaScript modules is correct?",
    "o": [
      "Modules allow code to be split into reusable files using 'import' and 'export'.",
      "Modules are automatically global and do not need to be imported.",
      "Modules must be defined in a 'modules.js' file.",
      "Modules do not work in modern browsers."
    ]
  },
  {
    "q": "What will be the result of the following JavaScript code?",
    "l": "javascript",
    "c": "const add = (a, b) => a + b;\nconst subtract = (a, b) => a - b;\nconst operate = (fn, x, y) => fn(x, y);\nconsole.log(operate(add, 5, 3), operate(subtract, 5, 3));",
    "o": [
      "8 2",
      "5 3",
      "3 8",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements is true about JavaScript’s event loop?",
    "o": [
      "It allows JavaScript to handle asynchronous operations without blocking the main thread.",
      "It executes synchronous code before any asynchronous code.",
      "It only processes asynchronous code.",
      "It pauses execution until all tasks are complete."
    ]
  },
  {
    "q": "What will be the output of this Promise and setTimeout example?",
    "l": "javascript",
    "c": "console.log('Start');\nsetTimeout(() => console.log('Timeout'), 0);\nPromise.resolve().then(() => console.log('Promise'));\nconsole.log('End');",
    "o": [
      "'Start', 'End', 'Promise', 'Timeout'",
      "'Start', 'Promise', 'End', 'Timeout'",
      "'Start', 'Timeout', 'End', 'Promise'",
      "'Start', 'End', 'Timeout', 'Promise'"
    ]
  },
  {
    "q": "Which of the following is NOT a valid way to declare a variable in JavaScript?",
    "o": [
      "let x = 5;",
      "const y = 10;",
      "var z = 15;",
      "define d = 20;"
    ]
  },
  {
    "q": "What is the main difference between Map and Object in JavaScript?",
    "o": [
      "Map allows any type of key, while Object only allows strings and symbols.",
      "Object allows any type of key, while Map only allows strings.",
      "Map is faster than Object for key-value storage.",
      "Object is immutable, while Map is not."
    ]
  },
  {
    "q": "Which of the following correctly demonstrates the use of WeakMap?",
    "l": "javascript",
    "c": "const wm = new WeakMap();\nlet obj = {};\nwm.set(obj, 'value');\nconsole.log(wm.get(obj));",
    "o": [
      "'value'",
      "undefined",
      "Error",
      "null"
    ]
  },
  {
    "q": "What will be the output of the following Set operation?",
    "l": "javascript",
    "c": "const set = new Set([1, 2, 2, 3]);\nconsole.log(set.size);",
    "o": [
      "3",
      "4",
      "2",
      "Error"
    ]
  },
  {
    "q": "Which method is used to check if a Set contains a specific value?",
    "o": [
      "has()",
      "includes()",
      "exists()",
      "contains()"
    ]
  },
  {
    "q": "What is the primary benefit of using a WeakSet over a Set?",
    "o": [
      "WeakSet holds only objects and does not prevent garbage collection.",
      "WeakSet allows duplicate values.",
      "WeakSet has better performance.",
      "WeakSet supports all data types as keys."
    ]
  },
  {
    "q": "What will be the output of this Proxy example?",
    "l": "javascript",
    "c": "const obj = { a: 10 };\nconst proxy = new Proxy(obj, {\n  get(target, prop) {\n    return prop in target ? target[prop] : 'Not Found';\n  }\n});\nconsole.log(proxy.a, proxy.b);",
    "o": [
      "10 'Not Found'",
      "'Not Found' 10",
      "undefined 'Not Found'",
      "Error"
    ]
  },
  {
    "q": "Which of the following is TRUE about JavaScript Symbols?",
    "o": [
      "Symbols create unique identifiers that do not clash with object property names.",
      "Symbols are the same as strings.",
      "Symbols are iterable.",
      "Symbols cannot be used as object keys."
    ]
  },
  {
    "q": "What will be the result of this iterator function?",
    "l": "javascript",
    "c": "function makeIterator(arr) {\n  let index = 0;\n  return {\n    next: function() {\n      return index < arr.length ?\n        { value: arr[index++], done: false } :\n        { done: true };\n    }\n  };\n}\nconst iterator = makeIterator([1, 2, 3]);\nconsole.log(iterator.next().value, iterator.next().value, iterator.next().done);",
    "o": [
      "1 2 false",
      "1 2 true",
      "1 3 false",
      "1 2 3"
    ]
  },
  {
    "q": "Which statement about JavaScript Generators is correct?",
    "o": [
      "Generators allow pausing and resuming execution.",
      "Generators run to completion immediately.",
      "Generators cannot return values.",
      "Generators are the same as Promises."
    ]
  },
  {
    "q": "What will be logged in this async/await example?",
    "l": "javascript",
    "c": "async function test() {\n  return 'Hello';\n}\ntest().then(console.log);",
    "o": [
      "'Hello'",
      "undefined",
      "Error",
      "Promise { 'Hello' }"
    ]
  },
  {
    "q": "Which of the following describes the purpose of Reflect in JavaScript?",
    "o": [
      "It provides methods for interacting with objects and proxies.",
      "It is a way to create asynchronous operations.",
      "It replaces the 'this' keyword.",
      "It is used for error handling in JavaScript."
    ]
  },
  {
    "q": "What will be the output of this Reflect example?",
    "l": "javascript",
    "c": "const obj = { x: 10 };\nReflect.set(obj, 'x', 20);\nconsole.log(obj.x);",
    "o": [
      "20",
      "10",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "What does Object.defineProperty() allow you to do?",
    "o": [
      "Define custom properties with specific attributes like writable and configurable.",
      "Create new objects.",
      "Lock an object to prevent modifications.",
      "Convert an object into an array."
    ]
  },
  {
    "q": "Which of the following is a valid way to define a private class field?",
    "o": [
      "class Person { #name; constructor(name) { this.#name = name; } }",
      "class Person { private name; constructor(name) { this.private name = name; } }",
      "class Person { this.name = private name; }",
      "class Person { name: private; }"
    ]
  },
  {
    "q": "What will be the output of this class example?",
    "l": "javascript",
    "c": "class Animal {\n  static sound() {\n    return 'Roar';\n  }\n}\nconsole.log(Animal.sound());",
    "o": [
      "'Roar'",
      "undefined",
      "Error",
      "null"
    ]
  },
  {
    "q": "Which statement about destructuring assignment is true?",
    "o": [
      "It allows extracting values from arrays or objects into variables.",
      "It creates new objects.",
      "It only works on arrays.",
      "It is equivalent to the spread operator."
    ]
  },
  {
    "q": "What will be the result of this destructuring example?",
    "l": "javascript",
    "c": "const { a, b } = { a: 1, b: 2, c: 3 };\nconsole.log(a, b);",
    "o": [
      "1 2",
      "1 3",
      "undefined 2",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly demonstrates optional chaining?",
    "o": [
      "const obj = { user: { name: 'Alice' } };\nconsole.log(obj.user?.name ?? 'Unknown');",
      "const obj = { user: { name: 'Alice' } };\nconsole.log(obj.user?.name || 'Unknown');",
      "const obj = { user: { name: 'Alice' } };\nconsole.log(obj.user.name?. || 'Unknown');",
      "const obj = { user: { name: 'Alice' } };\nconsole.log(obj.user?name ?? 'Unknown');"
    ]
  },
  {
    "q": "What will be the output of the following async function?",
    "l": "javascript",
    "c": "async function foo() {\n  return 42;\n}\nconsole.log(foo());",
    "o": [
      "Promise { 42 }",
      "42",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which event loop phase executes process.nextTick() callbacks?",
    "o": [
      "Before the next event loop tick starts",
      "During the timer phase",
      "During the I/O phase",
      "At the end of the event loop"
    ]
  },
  {
    "q": "What will this closure example return?",
    "l": "javascript",
    "c": "function outer() {\n  let count = 0;\n  return function inner() {\n    return ++count;\n  };\n}\nconst fn = outer();\nconsole.log(fn(), fn());",
    "o": [
      "1 2",
      "0 1",
      "undefined undefined",
      "Error"
    ]
  },
  {
    "q": "What is the main advantage of using Higher-Order Functions?",
    "o": [
      "They enable functional programming by allowing functions to be passed as arguments.",
      "They improve performance by optimizing loops.",
      "They prevent memory leaks.",
      "They replace the need for async functions."
    ]
  },
  {
    "q": "Which statement correctly imports a default export?",
    "o": [
      "import myModule from './module.js';",
      "import { myModule } from './module.js';",
      "import * as myModule from './module.js';",
      "require('./module.js').default"
    ]
  },
  {
    "q": "What will be logged when using a WeakRef?",
    "l": "javascript",
    "c": "let obj = { value: 10 };\nconst weakRef = new WeakRef(obj);\nobj = null;\nconsole.log(weakRef.deref());",
    "o": [
      "undefined (eventually, when garbage collected)",
      "{ value: 10 }",
      "null",
      "Error"
    ]
  },
  {
    "q": "How does the FinalizationRegistry work?",
    "o": [
      "It allows registering cleanup logic for garbage-collected objects.",
      "It forces garbage collection of objects.",
      "It prevents objects from being collected.",
      "It locks objects in memory indefinitely."
    ]
  },
  {
    "q": "What will be the output of this Intl.DateTimeFormat example?",
    "l": "javascript",
    "c": "console.log(new Intl.DateTimeFormat('en-GB', { dateStyle: 'full' }).format(new Date('2025-03-30')));",
    "o": [
      "'Sunday, 30 March 2025'",
      "'March 30, 2025'",
      "'30-03-2025'",
      "'2025/03/30'"
    ]
  },
  {
    "q": "Which of the following is true about BigInt?",
    "o": [
      "BigInt is used for arbitrarily large numbers beyond Number.MAX_SAFE_INTEGER.",
      "BigInt can be used in JSON.stringify() by default.",
      "BigInt operations are faster than Number operations.",
      "BigInt cannot be used in mathematical operations."
    ]
  },
  {
    "q": "What will be the output of this TypedArray operation?",
    "l": "javascript",
    "c": "const arr = new Uint8Array([1, 2, 3]);\narr[1] = 256;\nconsole.log(arr[1]);",
    "o": [
      "0",
      "2",
      "256",
      "Error"
    ]
  },
  {
    "q": "What will be the output of this arrow function example?",
    "l": "javascript",
    "c": "const obj = {\n  value: 10,\n  getValue: () => this.value\n};\nconsole.log(obj.getValue());",
    "o": [
      "undefined",
      "10",
      "Error",
      "null"
    ]
  },
  {
    "q": "Which statement correctly uses object destructuring with a default value?",
    "o": [
      "const { name = 'Guest' } = user;",
      "const [name = 'Guest'] = user;",
      "const name: 'Guest' = user;",
      "let { name } ? 'Guest' : user;"
    ]
  },
  {
    "q": "What will be logged when using Promise.all?",
    "l": "javascript",
    "c": "Promise.all([\n  Promise.resolve(1),\n  Promise.resolve(2),\n  Promise.reject('Error')\n]).then(console.log).catch(console.log);",
    "o": [
      "'Error'",
      "[1, 2, 'Error']",
      "undefined",
      "null"
    ]
  },
  {
    "q": "What will the following optional chaining expression return?",
    "l": "javascript",
    "c": "const user = { profile: { name: 'Alice' } };\nconsole.log(user.profile?.age);",
    "o": [
      "undefined",
      "Error",
      "null",
      "NaN"
    ]
  },
  {
    "q": "What is the main advantage of using Set over Array?",
    "o": [
      "Sets store only unique values.",
      "Sets are faster for indexing elements.",
      "Sets maintain order like arrays.",
      "Sets can hold duplicate values."
    ]
  },
  {
    "q": "What will this generator function output?",
    "l": "javascript",
    "c": "function* myGen() {\n  yield 1;\n  yield 2;\n  return 3;\n}\nconst gen = myGen();\nconsole.log(gen.next().value, gen.next().value, gen.next().value);",
    "o": [
      "1 2 undefined",
      "1 2 3",
      "Error",
      "1 2 null"
    ]
  },
  {
    "q": "How does the Proxy API work in JavaScript?",
    "o": [
      "It allows intercepting and modifying object operations.",
      "It prevents objects from being mutated.",
      "It optimizes objects for performance.",
      "It locks object properties."
    ]
  },
  {
    "q": "What will the following WeakMap example log?",
    "l": "javascript",
    "c": "let obj = { key: 'value' };\nconst wm = new WeakMap();\nwm.set(obj, 'Hello');\nobj = null;\nconsole.log(wm.has(obj));",
    "o": [
      "false",
      "true",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "What does the Reflect API do in JavaScript?",
    "o": [
      "Provides methods to interact with object properties and methods.",
      "Enhances performance of objects.",
      "Locks objects to prevent changes.",
      "Works only with asynchronous operations."
    ]
  },
  {
    "q": "What will be logged when using a WeakSet?",
    "l": "javascript",
    "c": "let obj = { id: 1 };\nconst ws = new WeakSet();\nws.add(obj);\nobj = null;\nconsole.log(ws.has(obj));",
    "o": [
      "false",
      "true",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "What will be the output of this async/await example?",
    "l": "javascript",
    "c": "async function fetchData() {\n  return 'Hello';\n}\nfetchData().then(console.log);",
    "o": [
      "'Hello'",
      "undefined",
      "Error",
      "Promise { 'Hello' }"
    ]
  },
  {
    "q": "Which method correctly checks if a value exists in a Set?",
    "o": [
      "mySet.has(value)",
      "mySet.includes(value)",
      "mySet.contains(value)",
      "mySet.exists(value)"
    ]
  },
  {
    "q": "What will be logged in this tagged template literal?",
    "l": "javascript",
    "c": "function tag(strings, value) {\n  return strings[0] + value.toUpperCase();\n}\nconsole.log(tag`Hello ${'world'}`);",
    "o": [
      "'Hello WORLD'",
      "'Hello world'",
      "'HELLO world'",
      "Error"
    ]
  },
  {
    "q": "What is the output of this JavaScript class using private fields?",
    "l": "javascript",
    "c": "class Person {\n  #name = 'Alice';\n  getName() { return this.#name; }\n}\nconst p = new Person();\nconsole.log(p.getName());",
    "o": [
      "'Alice'",
      "undefined",
      "Error",
      "null"
    ]
  },
  {
    "q": "What is the correct way to dynamically import a module in JavaScript?",
    "o": [
      "import('module.js').then(m => console.log(m))",
      "require('module.js')",
      "include('module.js')",
      "fetch('module.js').then(m => eval(m))"
    ]
  },
  {
    "q": "What will be the output of this optional chaining with an array?",
    "l": "javascript",
    "c": "const users = [{ name: 'Alice' }, { name: 'Bob' }];\nconsole.log(users[2]?.name);",
    "o": [
      "undefined",
      "Error",
      "'Alice'",
      "'Bob'"
    ]
  },
  {
    "q": "Which of the following demonstrates the `&&=` logical assignment operator?",
    "o": [
      "user.isAdmin &&= true;",
      "user.isAdmin ||= true;",
      "user.isAdmin ??= true;",
      "user.isAdmin = user.isAdmin && true;"
    ]
  },
  {
    "q": "What does the following code snippet output?",
    "l": "javascript",
    "c": "let count = 0;\nconst increment = () => count++;\nincrement() ??= 10;\nconsole.log(count);",
    "o": [
      "1",
      "10",
      "0",
      "Error"
    ]
  },
  {
    "q": "What is the purpose of `??=` operator?",
    "o": [
      "Assigns value only if the left-hand side is `null` or `undefined`.",
      "Assigns value if left-hand side is falsy.",
      "Always assigns the value.",
      "Checks if a value is not `undefined`."
    ]
  },
  {
    "q": "What will be logged in this case of logical assignment operators?",
    "l": "javascript",
    "c": "let x = null;\nx ||= 5;\nconsole.log(x);",
    "o": [
      "5",
      "null",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "What will be the output of the following arrow function?",
    "l": "javascript",
    "c": "const obj = {\n  value: 42,\n  getValue: () => this.value\n};\nconsole.log(obj.getValue());",
    "o": [
      "undefined",
      "42",
      "Error",
      "null"
    ]
  },
  {
    "q": "Which syntax correctly destructures an object in JavaScript?",
    "o": [
      "const { name, age } = person;",
      "const [ name, age ] = person;",
      "const name = person{name};",
      "const name, age = person;"
    ]
  },
  {
    "q": "What is the output of this default parameter example?",
    "l": "javascript",
    "c": "function greet(name = 'Guest') {\n  console.log(`Hello, ${name}!`);\n}\ngreet();",
    "o": [
      "'Hello, Guest!'",
      "'Hello, !'",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following demonstrates object property shorthand?",
    "o": [
      "const name = 'Alice';\nconst user = { name };",
      "const name = 'Alice';\nconst user = { 'name': name };",
      "const name = 'Alice';\nconst user = { name: () => name };",
      "const name = 'Alice';\nconst user = { name: function() { return name; } };"
    ]
  },
  {
    "q": "What will be logged by the following Promise chain?",
    "l": "javascript",
    "c": "Promise.resolve(10)\n  .then(x => x * 2)\n  .then(x => { throw new Error('Oops'); })\n  .catch(err => console.log(err.message));",
    "o": [
      "'Oops'",
      "20",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which of the following uses optional chaining correctly?",
    "o": [
      "console.log(user?.profile?.age);",
      "console.log(user.?profile.?age);",
      "console.log(user.profile?.age());",
      "console.log(user.profile?.age[]);"
    ]
  },
  {
    "q": "What will be the result of the nullish coalescing operator (`??`) in this code?",
    "l": "javascript",
    "c": "let x = null;\nlet y = x ?? 'default';\nconsole.log(y);",
    "o": [
      "'default'",
      "null",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following demonstrates the use of top-level await in ES2022?",
    "o": [
      "const data = await fetchData();",
      "async function getData() { const data = await fetchData(); }",
      "fetchData().then(data => console.log(data));",
      "await fetchData().then(data => console.log(data));"
    ]
  },
  {
    "q": "Which of the following correctly creates a `WeakMap`?",
    "o": [
      "const wm = new WeakMap();",
      "const wm = new WeakMap([]);",
      "const wm = WeakMap();",
      "const wm = new WeakMap({});"
    ]
  },
  {
    "q": "What will be the result of using a `WeakSet`?",
    "l": "javascript",
    "c": "let ws = new WeakSet();\nlet obj = { name: 'Alice' };\nws.add(obj);\nconsole.log(ws.has(obj));",
    "o": [
      "true",
      "false",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "What will be the output of the following Map example?",
    "l": "javascript",
    "c": "let myMap = new Map();\nmyMap.set('name', 'Alice');\nconsole.log(myMap.get('name'));",
    "o": [
      "'Alice'",
      "undefined",
      "Error",
      "null"
    ]
  },
  {
    "q": "Which of the following is a valid way to create a JavaScript class?",
    "o": [
      "class Person { constructor(name) { this.name = name; } }",
      "function class Person { constructor(name) { this.name = name; } }",
      "const class Person = function(name) { this.name = name; }",
      "class: Person { constructor(name) { this.name = name; } }"
    ]
  },
  {
    "q": "What will be the output of the following generator function?",
    "l": "javascript",
    "c": "function* generator() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\nconst gen = generator();\nconsole.log(gen.next().value);",
    "o": [
      "1",
      "2",
      "3",
      "undefined"
    ]
  },
  {
    "q": "What will be the output of this tagged template literal?",
    "l": "javascript",
    "c": "function tag(strings, name) {\n  return `Hello, ${name}!`;\n}\nconsole.log(tag`Welcome ${'Alice'}`);",
    "o": [
      "'Hello, Alice!'",
      "'Welcome Alice'",
      "'Hello, undefined!'",
      "'Error'"
    ]
  },
  {
    "q": "What will be the output of the following async function?",
    "l": "javascript",
    "c": "async function fetchData() {\n  throw new Error('Failed to fetch');\n}\nfetchData().catch(err => console.log(err.message));",
    "o": [
      "'Failed to fetch'",
      "undefined",
      "Error",
      "null"
    ]
  },
  {
    "q": "Which of the following correctly demonstrates dynamic import in JavaScript?",
    "o": [
      "import('module.js').then(module => console.log(module));",
      "import module from 'module.js';",
      "require('module.js');",
      "import { module } from 'module.js';"
    ]
  },
  {
    "q": "Which of the following correctly defines a BigInt in JavaScript?",
    "o": [
      "const big = 12345678901234567890n;",
      "const big = new BigInt(12345678901234567890);",
      "const big = BigInt.create(12345678901234567890);",
      "const big = 12345678901234567890;"
    ]
  },
  {
    "q": "What will be the output of the following private class field example?",
    "l": "javascript",
    "c": "class Person {\n  #age = 30;\n  getAge() { return this.#age; }\n}\nconst p = new Person();\nconsole.log(p.getAge());",
    "o": [
      "30",
      "undefined",
      "Error",
      "null"
    ]
  },
  {
    "q": "Which of the following is a correct way to export a function in ES6 modules?",
    "o": [
      "export function greet() { console.log('Hello'); }",
      "export: function greet() { console.log('Hello'); }",
      "exports.greet = function() { console.log('Hello'); };",
      "function export greet() { console.log('Hello'); }"
    ]
  },
  {
    "q": "What will be the output of this destructuring assignment?",
    "l": "javascript",
    "c": "const [a, , b] = [10, 20, 30];\nconsole.log(a, b);",
    "o": [
      "10 30",
      "10 20",
      "20 30",
      "undefined undefined"
    ]
  },
  {
    "q": "What will be the output of the following optional chaining example?",
    "l": "javascript",
    "c": "const user = { profile: { name: 'Alice' } };\nconsole.log(user.profile?.age);",
    "o": [
      "undefined",
      "null",
      "Error",
      "0"
    ]
  },
  {
    "q": "Which of the following correctly uses the nullish coalescing operator?",
    "o": [
      "const value = null ?? 'default';",
      "const value = null || 'default';",
      "const value = null && 'default';",
      "const value = 'default' ?? null;"
    ]
  },
  {
    "q": "What will be the output of the following `Promise.allSettled` example?",
    "l": "javascript",
    "c": "Promise.allSettled([\n  Promise.resolve('Success'),\n  Promise.reject('Error')\n]).then(console.log);",
    "o": [
      "[{ status: 'fulfilled', value: 'Success' }, { status: 'rejected', reason: 'Error' }]",
      "[{ status: 'resolved', value: 'Success' }, { status: 'rejected', reason: 'Error' }]",
      "[{ fulfilled: true, value: 'Success' }, { rejected: true, reason: 'Error' }]",
      "Error"
    ]
  },
  {
    "q": "Which of the following is true about WeakMap and WeakSet in JavaScript?",
    "o": [
      "They allow only objects as keys or values and do not prevent garbage collection.",
      "They allow primitive types as keys.",
      "They store values permanently in memory.",
      "They provide weak references to arrays and strings."
    ]
  },
  {
    "q": "What will be the output of the following Symbol example?",
    "l": "javascript",
    "c": "const sym1 = Symbol('desc');\nconst sym2 = Symbol('desc');\nconsole.log(sym1 === sym2);",
    "o": [
      "false",
      "true",
      "'desc'",
      "undefined"
    ]
  },
  {
    "q": "Which of the following correctly demonstrates the `reduce` method on an array?",
    "o": [
      "const sum = [1, 2, 3].reduce((acc, num) => acc + num, 0);",
      "const sum = [1, 2, 3].map((acc, num) => acc + num, 0);",
      "const sum = [1, 2, 3].filter((num) => num > 0);",
      "const sum = [1, 2, 3].forEach((num) => num + 0);"
    ]
  },
  {
    "q": "What will be the output of this arrow function?",
    "l": "javascript",
    "c": "const multiply = (a, b) => a * b;\nconsole.log(multiply(2, 3));",
    "o": [
      "6",
      "[Function]",
      "undefined",
      "NaN"
    ]
  },
  {
    "q": "Which of the following is a correct way to define a function with a default parameter in ES6?",
    "o": [
      "function greet(name = 'Guest') { console.log(`Hello, ${name}!`); }",
      "function greet(name: 'Guest') { console.log(`Hello, ${name}!`); }",
      "function greet(name == 'Guest') { console.log(`Hello, ${name}!`); }",
      "function greet(name ? 'Guest' : name) { console.log(`Hello, ${name}!`); }"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const key = 'name';\nconst user = { [key]: 'Alice' };\nconsole.log(user.name);",
    "o": [
      "'Alice'",
      "undefined",
      "Error",
      "'name'"
    ]
  },
  {
    "q": "Which statement is true about JavaScript Sets?",
    "o": [
      "They store only unique values.",
      "They allow duplicate values.",
      "They are key-value pairs like objects.",
      "They preserve insertion order like arrays."
    ]
  },
  {
    "q": "What will be the output of this async/await example?",
    "l": "javascript",
    "c": "async function fetchData() {\n  return 'Data received';\n}\nfetchData().then(console.log);",
    "o": [
      "'Data received'",
      "undefined",
      "Promise { 'Data received' }",
      "Error"
    ]
  },
  {
    "q": "What is the result of the following tagged template literal?",
    "l": "javascript",
    "c": "function tag(strings, value) {\n  return `${strings[0]}${value.toUpperCase()}${strings[1]}`;\n}\nconst result = tag`Hello, ${'world'}!`;\nconsole.log(result);",
    "o": [
      "'Hello, WORLD!'",
      "'Hello, world!'",
      "'Hello, undefined!'",
      "Error"
    ]
  },
  {
    "q": "What does `Object.entries(obj)` return?",
    "o": [
      "An array of key-value pairs",
      "An array of keys only",
      "An array of values only",
      "An object with key-value pairs"
    ]
  },
  {
    "q": "What will be the output of the following dynamic import?",
    "l": "javascript",
    "c": "import('./module.js').then(mod => console.log(mod.default));",
    "o": [
      "It loads the module asynchronously.",
      "It throws a syntax error.",
      "It blocks execution until the module loads.",
      "It imports synchronously."
    ]
  },
  {
    "q": "What will be the output of this destructuring assignment?",
    "l": "javascript",
    "c": "const [first, , third] = ['apple', 'banana', 'cherry'];\nconsole.log(third);",
    "o": [
      "'cherry'",
      "'banana'",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "What does the optional chaining operator `?.` do in JavaScript?",
    "o": [
      "Prevents errors when accessing deeply nested properties.",
      "Throws an error when a property is missing.",
      "Creates a new property in an object.",
      "Removes `null` or `undefined` values from an object."
    ]
  },
  {
    "q": "What will be the result of the following code using the nullish coalescing operator?",
    "l": "javascript",
    "c": "let value = null ?? 'default';\nconsole.log(value);",
    "o": [
      "'default'",
      "null",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly creates a JavaScript Promise?",
    "o": [
      "new Promise((resolve, reject) => { resolve('Success'); })",
      "Promise.create((resolve, reject) => { resolve('Success'); })",
      "promise((resolve, reject) => { resolve('Success'); })",
      "let p = new promise(() => { return 'Success'; })"
    ]
  },
  {
    "q": "What will `typeof Symbol('foo')` return?",
    "o": [
      "'symbol'",
      "'object'",
      "'string'",
      "'undefined'"
    ]
  },
  {
    "q": "What will be the output of this class syntax example?",
    "l": "javascript",
    "c": "class Person {\n  constructor(name) {\n    this.name = name;\n  }\n  greet() {\n    return `Hello, ${this.name}!`;\n  }\n}\nconst user = new Person('Alice');\nconsole.log(user.greet());",
    "o": [
      "'Hello, Alice!'",
      "undefined",
      "Error",
      "'greet'"
    ]
  },
  {
    "q": "Which of the following statements about iterators in JavaScript is true?",
    "o": [
      "Iterators provide a way to define custom iteration behavior.",
      "Iterators can only be used with arrays.",
      "Iterators must always return an array.",
      "Iterators are the same as generators."
    ]
  },
  {
    "q": "Which of the following is a key difference between WeakMap and Map in JavaScript?",
    "o": [
      "WeakMap keys must be objects.",
      "WeakMap allows primitive keys.",
      "WeakMap has size property.",
      "WeakMap does not allow object keys."
    ]
  },
  {
    "q": "What will be the output of this arrow function?",
    "l": "javascript",
    "c": "const add = (a, b) => a + b;\nconsole.log(add(5, 10));",
    "o": [
      "15",
      "undefined",
      "Error",
      "NaN"
    ]
  },
  {
    "q": "Which of the following is true about default function parameters in ES6?",
    "o": [
      "They allow functions to have default values for parameters.",
      "They must be defined at runtime.",
      "They can only be used in arrow functions.",
      "They throw an error if a value is not provided."
    ]
  },
  {
    "q": "What will be the output of this spread operator example?",
    "l": "javascript",
    "c": "const nums = [1, 2, 3];\nconst newNums = [...nums, 4, 5];\nconsole.log(newNums);",
    "o": [
      "[1, 2, 3, 4, 5]",
      "[[1, 2, 3], 4, 5]",
      "[1, 2, 3]",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly creates a Set in JavaScript?",
    "o": [
      "new Set([1, 2, 3])",
      "Set([1, 2, 3])",
      "new Set{1, 2, 3}",
      "set([1, 2, 3])"
    ]
  },
  {
    "q": "What will be the output of this async/await example?",
    "l": "javascript",
    "c": "async function fetchData() {\n  return 'Data Loaded';\n}\nfetchData().then(console.log);",
    "o": [
      "'Data Loaded'",
      "Promise { 'Data Loaded' }",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "What are tagged template literals used for?",
    "o": [
      "Custom processing of template literals.",
      "Defining global template strings.",
      "Reassigning `this` in template literals.",
      "Converting strings to arrays."
    ]
  },
  {
    "q": "What is a key feature of JavaScript Proxy objects?",
    "o": [
      "They allow interception of object operations.",
      "They copy all properties of an object.",
      "They work only with arrays.",
      "They modify the prototype of an object."
    ]
  },
  {
    "q": "What does `Promise.all()` do?",
    "o": [
      "Waits for all promises to resolve before returning results.",
      "Returns the first resolved promise.",
      "Rejects immediately if any promise fails.",
      "Executes promises sequentially."
    ]
  },
  {
    "q": "What will be the output of the following destructuring assignment?",
    "l": "javascript",
    "c": "const [a, b] = [10, 20];\nconsole.log(a, b);",
    "o": [
      "10 20",
      "[10, 20]",
      "undefined undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly uses optional chaining?",
    "o": [
      "const age = user?.profile?.age;",
      "const age = user?profile?age;",
      "const age = user!.profile!.age;",
      "const age = user.profile.age ?;"
    ]
  },
  {
    "q": "What will be the output of the following nullish coalescing example?",
    "l": "javascript",
    "c": "const val = null ?? 'Default';\nconsole.log(val);",
    "o": [
      "'Default'",
      "null",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly creates a Map in JavaScript?",
    "o": [
      "new Map([[1, 'one'], [2, 'two']])",
      "Map(1, 'one', 2, 'two')",
      "new Map({1: 'one', 2: 'two'})",
      "map([1, 'one'], [2, 'two'])"
    ]
  },
  {
    "q": "What is a key difference between WeakMap and Map?",
    "o": [
      "WeakMap keys must be objects, while Map keys can be any type.",
      "WeakMap keys can be primitive types.",
      "Map does not allow key-value pairs.",
      "WeakMap stores values as weak references only for arrays."
    ]
  },
  {
    "q": "What will `Object.entries({ x: 10, y: 20 })` return?",
    "o": [
      "[['x', 10], ['y', 20]]",
      "{ x: 10, y: 20 }",
      "['x', 'y']",
      "[10, 20]"
    ]
  },
  {
    "q": "Which statement correctly uses dynamic imports?",
    "o": [
      "import('module.js').then(module => console.log(module.default));",
      "import module from 'module.js';",
      "import module('module.js');",
      "import {'module.js'};"
    ]
  },
  {
    "q": "What will be the output of `console.log(9007199254740992n + 1n);`?",
    "o": [
      "9007199254740993n",
      "9007199254740992",
      "Error",
      "NaN"
    ]
  },
  {
    "q": "What is the purpose of WeakRef in JavaScript?",
    "o": [
      "It allows creating weak references to objects that do not prevent garbage collection.",
      "It creates immutable object references.",
      "It prevents object properties from being modified.",
      "It converts objects into primitive values."
    ]
  },
  {
    "q": "What does FinalizationRegistry do in JavaScript?",
    "o": [
      "It allows running cleanup code when an object is garbage collected.",
      "It prevents objects from being garbage collected.",
      "It registers an object globally.",
      "It allows objects to be frozen."
    ]
  },
  {
    "q": "What will be the output of the following arrow function?",
    "l": "javascript",
    "c": "const add = (a, b) => a + b;\nconsole.log(add(3, 4));",
    "o": [
      "7",
      "(a, b) => a + b",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly uses default parameters?",
    "o": [
      "function greet(name = 'Guest') { return `Hello, ${name}!`; }",
      "function greet(name : 'Guest') { return `Hello, ${name}!`; }",
      "function greet(name := 'Guest') { return `Hello, ${name}!`; }",
      "function greet(name => 'Guest') { return `Hello, ${name}!`; }"
    ]
  },
  {
    "q": "Which statement correctly creates a Set in JavaScript?",
    "o": [
      "new Set([1, 2, 3, 3])",
      "Set(1, 2, 3, 3)",
      "new Set({1, 2, 3, 3})",
      "set([1, 2, 3])"
    ]
  },
  {
    "q": "What will be logged when the following promise runs?",
    "l": "javascript",
    "c": "new Promise((resolve) => resolve('Success'))\n  .then(console.log)\n  .catch(console.error);",
    "o": [
      "'Success'",
      "undefined",
      "Error",
      "'Success' then 'undefined'"
    ]
  },
  {
    "q": "Which of the following is a correct way to define a Symbol?",
    "o": [
      "const mySymbol = Symbol('description');",
      "const mySymbol = new Symbol('description');",
      "const mySymbol = symbol('description');",
      "const mySymbol = Symbol.description('desc');"
    ]
  },
  {
    "q": "What is a tagged template literal in JavaScript?",
    "o": [
      "A function that processes a template literal before it is evaluated.",
      "A new way to define multi-line strings.",
      "A template literal with a tag attribute.",
      "A string template with embedded functions."
    ]
  },
  {
    "q": "What is the primary purpose of the Proxy object in JavaScript?",
    "o": [
      "To define custom behavior for fundamental operations like property lookup and assignment.",
      "To enhance object serialization.",
      "To create deep clones of objects.",
      "To store immutable object references."
    ]
  },
  {
    "q": "Which of the following methods belongs to the Reflect API?",
    "o": [
      "Reflect.get(target, property)",
      "Proxy.apply(target, thisArg, args)",
      "Object.define(target, key, value)",
      "Symbol.for(target)"
    ]
  },
  {
    "q": "Which statement correctly uses the Intl API for formatting dates?",
    "o": [
      "new Intl.DateTimeFormat('en-US').format(new Date())",
      "Intl.formatDate(new Date(), 'en-US')",
      "Intl.DateTime('en-US').format(new Date())",
      "new Intl.DateFormat('en-US', new Date())"
    ]
  },
  {
    "q": "What is the purpose of decorators in JavaScript?",
    "o": [
      "To modify the behavior of classes or methods at runtime.",
      "To create UI components.",
      "To define reusable function patterns.",
      "To replace arrow functions."
    ]
  },
  {
    "q": "What is the Temporal API in JavaScript used for?",
    "o": [
      "Handling date and time calculations with improved precision.",
      "Enhancing template literals with time-based expressions.",
      "Providing a replacement for the Proxy API.",
      "Creating immutable variables."
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconst { a, b } = obj;\nconsole.log(a, b);",
    "o": [
      "1 2",
      "{ a: 1, b: 2 }",
      "undefined undefined",
      "Error"
    ]
  },
  {
    "q": "What does optional chaining (`?.`) do in JavaScript?",
    "o": [
      "It safely accesses nested object properties without causing errors.",
      "It creates a new object instance.",
      "It throws an error if a property is undefined.",
      "It merges two objects together."
    ]
  },
  {
    "q": "Which of the following statements about the nullish coalescing operator (`??`) is correct?",
    "o": [
      "`null ?? 'default'` will return `'default'`",
      "`undefined ?? 'default'` will throw an error",
      "`false ?? 'default'` will return `'default'`",
      "`0 ?? 'default'` will return `'default'`"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "console.log(10n + 20n);",
    "o": [
      "30n",
      "30",
      "TypeError",
      "undefined"
    ]
  },
  {
    "q": "Which of the following is a correct way to dynamically import a module in JavaScript?",
    "o": [
      "import('module.js').then(module => console.log(module))",
      "require('module.js')",
      "fetch('module.js')",
      "import module from 'module.js'"
    ]
  },
  {
    "q": "What is the primary difference between WeakSet and Set?",
    "o": [
      "WeakSet holds weak references to objects and allows garbage collection.",
      "WeakSet allows any data type as keys, whereas Set only supports objects.",
      "WeakSet automatically converts values to strings.",
      "WeakSet is immutable."
    ]
  },
  {
    "q": "What is a characteristic of private fields in JavaScript classes?",
    "o": [
      "They are declared using `#` and cannot be accessed outside the class.",
      "They are defined using `private` keyword.",
      "They must be declared in the constructor.",
      "They are publicly accessible."
    ]
  },
  {
    "q": "Which logical assignment operator is used to assign a value only if the variable is nullish (null or undefined)?",
    "o": [
      "??=",
      "||=",
      "&&=",
      "!=="
    ]
  },
  {
    "q": "What is the difference between `Promise.all()` and `Promise.allSettled()`?",
    "o": [
      "`Promise.allSettled()` waits for all promises to resolve or reject, while `Promise.all()` rejects immediately if any promise fails.",
      "`Promise.allSettled()` only works with resolved promises.",
      "`Promise.allSettled()` stops executing once a single promise resolves.",
      "`Promise.allSettled()` returns only the resolved promises."
    ]
  },
  {
    "q": "Which of the following is a valid usage of top-level await in JavaScript?",
    "o": [
      "In ES Modules, outside of any function.",
      "Inside a standard script file (`.js`) outside any function.",
      "Inside an IIFE function.",
      "Inside a function marked as `async`."
    ]
  },
  {
    "q": "What will be the output of the following arrow function?",
    "l": "javascript",
    "c": "const add = (a, b) => a + b;\nconsole.log(add(5, 10));",
    "o": [
      "15",
      "5",
      "10",
      "Error"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for setting a default parameter value?",
    "o": [
      "function greet(name = 'Guest') { console.log(`Hello, ${name}!`); }",
      "function greet(name: 'Guest') { console.log(`Hello, ${name}!`); }",
      "function greet(name) = 'Guest' { console.log(`Hello, ${name}!`); }",
      "function greet(name ? 'Guest' : 'Unknown') { console.log(`Hello, ${name}!`); }"
    ]
  },
  {
    "q": "What will be the output of the following tagged template literal?",
    "l": "javascript",
    "c": "function tag(strings, name) {\n  return `${strings[0]}${name.toUpperCase()}${strings[1]}`;\n}\nconsole.log(tag`Hello, ${'world'}!`);",
    "o": [
      "Hello, WORLD!",
      "Hello, world!",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which of the following is a unique property of `Set` in JavaScript?",
    "o": [
      "It stores only unique values.",
      "It allows duplicate keys and values.",
      "It works only with objects.",
      "It is slower than arrays."
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const sym = Symbol('desc');\nconsole.log(typeof sym);",
    "o": [
      "\"symbol\"",
      "\"object\"",
      "\"string\"",
      "\"undefined\""
    ]
  },
  {
    "q": "Which of the following is a correct way to create a generator function?",
    "o": [
      "function* generator() { yield 1; yield 2; yield 3; }",
      "function generator*() { yield 1; yield 2; yield 3; }",
      "function generator() { *yield 1; *yield 2; *yield 3; }",
      "function generator() { return *[1, 2, 3]; }"
    ]
  },
  {
    "q": "What will be the output of the following async function?",
    "l": "javascript",
    "c": "async function fetchData() {\n  return 'Hello, Async!';\n}\nfetchData().then(console.log);",
    "o": [
      "\"Hello, Async!\"",
      "Promise { <pending> }",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "What is the purpose of a JavaScript Proxy?",
    "o": [
      "To define custom behavior for fundamental operations like property access, assignment, and function calls.",
      "To increase performance by caching JavaScript objects.",
      "To create a deep copy of an object.",
      "To restrict object properties."
    ]
  },
  {
    "q": "What is the primary use case of the Reflect API in JavaScript?",
    "o": [
      "It provides methods for performing object operations similar to `Object` methods but in a more predictable way.",
      "It is used to manipulate the DOM more efficiently.",
      "It speeds up mathematical computations in JavaScript.",
      "It replaces the `new` keyword for object instantiation."
    ]
  },
  {
    "q": "What is the purpose of `WeakRef` in JavaScript?",
    "o": [
      "It allows creating weak references to objects that do not prevent garbage collection.",
      "It makes objects immutable.",
      "It forces JavaScript to retain an object indefinitely.",
      "It allows direct access to the garbage collector."
    ]
  },
  {
    "q": "What will be the output of the following destructuring assignment?",
    "l": "javascript",
    "c": "const [a, b = 10] = [5];\nconsole.log(a, b);",
    "o": [
      "5 10",
      "5 undefined",
      "10 5",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly uses optional chaining?",
    "o": [
      "const city = user?.address?.city;",
      "const city = user.address.city?;",
      "const city = user?.address.city?;",
      "const city = user.address?.city?;"
    ]
  },
  {
    "q": "What is the result of the following expression using nullish coalescing?",
    "l": "javascript",
    "c": "let value = null ?? 'Default';\nconsole.log(value);",
    "o": [
      "\"Default\"",
      "null",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which statement correctly describes `Promise.all()`?",
    "o": [
      "It runs multiple promises in parallel and resolves when all of them succeed.",
      "It runs multiple promises but only waits for the first one to resolve.",
      "It executes promises sequentially one after another.",
      "It rejects immediately when one of the promises rejects."
    ]
  },
  {
    "q": "What will happen when using top-level await in an ES module?",
    "l": "javascript",
    "c": "console.log(\"Before\");\nawait new Promise(resolve => setTimeout(resolve, 2000));\nconsole.log(\"After\");",
    "o": [
      "The module execution will pause until the await statement completes.",
      "An error will be thrown because `await` is only valid inside async functions.",
      "The module will execute synchronously without waiting for the await statement.",
      "The module will execute in a separate thread."
    ]
  },
  {
    "q": "What is the correct way to define a private field in a JavaScript class?",
    "o": [
      "class Example { #privateField = 42; }",
      "class Example { privateField = 42; }",
      "class Example { this.#privateField = 42; }",
      "class Example { var #privateField = 42; }"
    ]
  },
  {
    "q": "What will be the output of the following code using BigInt?",
    "l": "javascript",
    "c": "const big = 9007199254740991n + 1n;\nconsole.log(big);",
    "o": [
      "9007199254740992n",
      "9007199254740992",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which of the following correctly demonstrates dynamic import?",
    "o": [
      "import('module.js').then(module => module.function());",
      "require('module.js').then(module => module.function());",
      "import module from 'module.js';",
      "import 'module.js';"
    ]
  },
  {
    "q": "What does the `Intl.DateTimeFormat` API do?",
    "o": [
      "Formats dates and times according to different locales.",
      "Formats only numbers and currencies.",
      "Handles time zones automatically without manual conversion.",
      "Creates time delays in JavaScript execution."
    ]
  },
  {
    "q": "Which of the following statements is true about WeakMap?",
    "o": [
      "It allows garbage collection of keys that are no longer referenced.",
      "It stores keys and values permanently in memory.",
      "It allows iteration over its keys and values.",
      "It can only store primitive values as keys."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "let x = 5;\nif (true) {\n  let x = 10;\n}\nconsole.log(x);",
    "o": [
      "5",
      "10",
      "undefined",
      "ReferenceError"
    ]
  },
  {
    "q": "Which of the following is the correct way to declare a constant in JavaScript?",
    "o": [
      "const PI = 3.14;",
      "let PI = 3.14;",
      "var PI = 3.14;",
      "constant PI = 3.14;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const name = 'Alice';\nconsole.log(`Hello, ${name}!`);",
    "o": [
      "Hello, Alice!",
      "Hello, ${name}!",
      "Hello, name!",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following is a valid use of template literals?",
    "o": [
      "`Total: ${price * quantity}`",
      "'Total: ${price * quantity}'",
      "\"Total: ${price * quantity}\"",
      "'Total: ' + price * quantity"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3];\nconst newNumbers = [...numbers, 4, 5];\nconsole.log(newNumbers);",
    "o": [
      "[1, 2, 3, 4, 5]",
      "[1, 2, 3, [4, 5]]",
      "[...[1, 2, 3], 4, 5]",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following correctly demonstrates the rest operator?",
    "o": [
      "function sum(...args) { return args.reduce((a, b) => a + b); }",
      "function sum(args) { return ...args.reduce((a, b) => a + b); }",
      "function sum(...args) { return ...args.reduce((a, b) => a + b); }",
      "function sum(args...) { return args.reduce((a, b) => a + b); }"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const [first, ...rest] = [1, 2, 3, 4];\nconsole.log(rest);",
    "o": [
      "[2, 3, 4]",
      "[1, 2, 3]",
      "[1, [2, 3, 4]]",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following is the correct way to import a named export from a module?",
    "o": [
      "import { myFunction } from './myModule';",
      "import myFunction from './myModule';",
      "import './myModule' as myFunction;",
      "require { myFunction } from './myModule';"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj1 = { a: 1, b: 2 };\nconst obj2 = { ...obj1, c: 3 };\nconsole.log(obj2);",
    "o": [
      "{ a: 1, b: 2, c: 3 }",
      "{ a: 1, b: 2 }",
      "{ ...obj1, c: 3 }",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following is the correct way to export multiple functions from a module?",
    "o": [
      "export function func1() {}\nexport function func2() {}",
      "export [func1, func2];",
      "export (func1, func2);",
      "exports = { func1, func2 };"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const greet = (name = 'Guest') => `Welcome, ${name}!`;\nconsole.log(greet());",
    "o": [
      "Welcome, Guest!",
      "Welcome, undefined!",
      "Welcome, ${name}!",
      "ReferenceError"
    ]
  },
  {
    "q": "Which of the following is a valid default export in ES6 modules?",
    "o": [
      "export default function() {}",
      "export function default() {}",
      "default export function() {}",
      "export = function() {}"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst [x, , z] = arr;\nconsole.log(z);",
    "o": [
      "3",
      "1",
      "2",
      "undefined"
    ]
  },
  {
    "q": "Which of the following correctly uses template literals for multiline strings?",
    "o": [
      "`Line 1\nLine 2`",
      "'Line 1\nLine 2'",
      "\"Line 1\\nLine 2\"",
      "'Line 1' + '\\n' + 'Line 2'"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconst { a: x, b: y } = obj;\nconsole.log(x);",
    "o": [
      "1",
      "2",
      "{ a: 1 }",
      "ReferenceError"
    ]
  },
  {
    "q": "Which of the following is a valid use of the rest operator in function parameters?",
    "o": [
      "function logNames(...names) { console.log(names); }",
      "function logNames(names...) { console.log(names); }",
      "function logNames(...names) { console.log(...names); }",
      "function logNames(&names) { console.log(names); }"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "let a = 1;\nlet b = 2;\n[a, b] = [b, a];\nconsole.log(a);",
    "o": [
      "2",
      "1",
      "undefined",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following correctly imports a default export from a module?",
    "o": [
      "import myModule from './myModule';",
      "import { myModule } from './myModule';",
      "import * as myModule from './myModule';",
      "import default myModule from './myModule';"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const str = 'Hello';\nconsole.log(...str);",
    "o": [
      "H e l l o",
      "Hello",
      "[ 'H', 'e', 'l', 'l', 'o' ]",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following is true about `let` and `const`?",
    "o": [
      "`const` variables cannot be reassigned after declaration",
      "`let` variables are hoisted and initialized with `undefined`",
      "`const` allows reassignment if the variable is an object",
      "`let` variables are function-scoped"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const nums = [1, 2, 3];\nconst max = Math.max(...nums);\nconsole.log(max);",
    "o": [
      "3",
      "[1, 2, 3]",
      "NaN",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following is the correct way to dynamically include a module in ES6?",
    "o": [
      "import('./module.js').then(module => {});",
      "require('./module.js').then(module => {});",
      "import * from './module.js';",
      "dynamic import('./module.js');"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const name = 'Bob';\nconst age = 25;\nconsole.log(`${name} is ${age > 18 ? 'adult' : 'minor'}`);",
    "o": [
      "Bob is adult",
      "Bob is minor",
      "undefined is adult",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following correctly exports a default and named export together?",
    "o": [
      "export const foo = 'bar';\nexport default function() {};",
      "export default const foo = 'bar';",
      "export { foo as default, bar };",
      "default export function() {};\nexport const foo = 'bar';"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const func = (x, y, ...z) => console.log(z.length);\nfunc(1, 2, 3, 4, 5);",
    "o": [
      "3",
      "2",
      "5",
      "undefined"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of tagged template literals?",
    "o": [
      "function tag(strings, ...values) { return strings.raw[0]; }",
      "function tag(...strings, values) { return strings[0]; }",
      "const tag = (strings) => strings.join('');",
      "tag`${1 + 1}` = function() {};"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nObject.freeze(obj);\nobj.a = 2;\nconsole.log(obj.a);",
    "o": [
      "1",
      "2",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly imports all named exports as an object?",
    "o": [
      "import * as utils from './utils.js';",
      "import { all } from './utils.js';",
      "import utils from './utils.js';",
      "import './utils.js' as utils;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const map = new Map([['a', 1]]);\nconsole.log([...map][0][1]);",
    "o": [
      "1",
      "'a'",
      "['a', 1]",
      "undefined"
    ]
  },
  {
    "q": "Which of the following is true about const declarations?",
    "o": [
      "They must be initialized during declaration",
      "They can be redeclared in the same scope",
      "They are mutable for primitive values",
      "They are hoisted with undefined value"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const asyncFunc = async () => {\n  return await Promise.resolve('Done');\n};\nasyncFunc().then(console.log);",
    "o": [
      "'Done'",
      "Promise {<resolved>}",
      "undefined",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following correctly re-exports all named exports from another module?",
    "o": [
      "export * from './other-module.js';",
      "import * from './other-module.js';",
      "export all from './other-module.js';",
      "re-export './other-module.js';"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const set = new Set([1, 2, 2, 3]);\nconsole.log([...set].length);",
    "o": [
      "3",
      "4",
      "2",
      "1"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of dynamic imports?",
    "o": [
      "const module = await import('./module.js');",
      "const module = import await './module.js';",
      "const module = dynamicImport('./module.js');",
      "await import module from './module.js';"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const { a = 10, b = 5 } = { a: 1 };\nconsole.log(a + b);",
    "o": [
      "6",
      "15",
      "NaN",
      "ReferenceError"
    ]
  },
  {
    "q": "Which of the following is true about ES6 modules?",
    "o": [
      "They are always in strict mode",
      "They support circular dependencies natively",
      "Top-level variables are global by default",
      "They are loaded synchronously by default"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2];\nconst result = [...arr, ...[3, 4]];\nconsole.log(result[3]);",
    "o": [
      "4",
      "3",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly exports a function with a renamed alias?",
    "o": [
      "export { originalFunc as newName };",
      "export originalFunc as newName;",
      "export default originalFunc as newName;",
      "export newName = originalFunc;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const str = `2 + 2 = ${2 + 2}`;\nconsole.log(str);",
    "o": [
      "2 + 2 = 4",
      "2 + 2 = ${2 + 2}",
      "4",
      "NaN"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const { a: x = 10, b: y = 20 } = { a: 1 };\nconsole.log(x + y);",
    "o": [
      "21",
      "30",
      "11",
      "ReferenceError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the spread operator with objects?",
    "o": [
      "const merged = { ...obj1, ...obj2 };",
      "const merged = [...obj1, ...obj2];",
      "const merged = { obj1, obj2 };",
      "const merged = Object.spread(obj1, obj2);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const nums = [1, 2, 3];\nconst double = n => n * 2;\nconsole.log(nums.map(double).join('|'));",
    "o": [
      "2|4|6",
      "1|2|3",
      "[2,4,6]",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following is true about ES6 module imports?",
    "o": [
      "They are hoisted to the top of the file",
      "They execute only when called",
      "They are synchronous by default",
      "They can be conditionally executed"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const greet = (name = 'User') => `Hello ${name}`;\nconsole.log(greet(null));",
    "o": [
      "Hello null",
      "Hello User",
      "Hello undefined",
      "ReferenceError"
    ]
  },
  {
    "q": "Which of the following correctly exports multiple named exports?",
    "o": [
      "export const foo = 1;\nexport const bar = 2;",
      "export [foo, bar] = [1, 2];",
      "export default { foo: 1, bar: 2 };",
      "exports = { foo: 1, bar: 2 };"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const str = 'hello';\nconsole.log([...str].reverse().join(''));",
    "o": [
      "olleh",
      "hello",
      "[o,l,l,e,h]",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following is a valid use of const?",
    "o": [
      "const PI = 3.14;",
      "const user;\nuser = { name: 'John' };",
      "const 1abc = 'invalid';",
      "const = 'reserved';"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst [first, ...rest] = arr;\nconsole.log(rest.length);",
    "o": [
      "2",
      "1",
      "3",
      "undefined"
    ]
  },
  {
    "q": "Which of the following demonstrates proper module tree-shaking?",
    "o": [
      "import { specificFunction } from './utils';",
      "import * as utils from './utils';",
      "require('./utils');",
      "import './utils';"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { x: 1, y: 2 };\nconst { x: newX } = obj;\nconsole.log(newX);",
    "o": [
      "1",
      "2",
      "{ x: 1 }",
      "ReferenceError"
    ]
  },
  {
    "q": "Which of the following template literals escapes backticks properly?",
    "o": [
      "`This \\`is\\` escaped`",
      "`This `is` escaped`",
      "`This \\'is\\' escaped`",
      "`This \"is\" escaped`"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const add = (a, b = 1) => a + b;\nconsole.log(add(5, undefined));",
    "o": [
      "6",
      "NaN",
      "undefined",
      "ReferenceError"
    ]
  },
  {
    "q": "Which of the following correctly imports a default export with a named export?",
    "o": [
      "import defaultExport, { namedExport } from './module';",
      "import { default as defaultExport, namedExport } from './module';",
      "import defaultExport.namedExport from './module';",
      "import defaultExport, namedExport from './module';"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const calc = (x, y, z = x + y) => z;\nconsole.log(calc(1, 2));",
    "o": [
      "3",
      "undefined",
      "NaN",
      "ReferenceError"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconst { a, ...rest } = obj;\nconsole.log(rest);",
    "o": [
      "{ b: 2 }",
      "{ a: 1, b: 2 }",
      "{ a: 1 }",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of dynamic import() with async/await?",
    "o": [
      "const module = await import('./module.js');",
      "const module = import('./module.js').await();",
      "const module = await import './module.js';",
      "async const module = import('./module.js');"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [...'hello'].map((c, i) => `${i}:${c}`);\nconsole.log(arr[2]);",
    "o": [
      "2:l",
      "h:e:l:l:o",
      "1:e",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following is true about const declarations in block scope?",
    "o": [
      "They create a temporal dead zone until declaration",
      "They are hoisted with undefined value",
      "They can be redeclared in the same block",
      "They are accessible before declaration"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const fn = (x = 1, y = x * 2) => [x, y];\nconsole.log(fn(undefined, 3));",
    "o": [
      "[1, 3]",
      "[undefined, 3]",
      "[1, 2]",
      "ReferenceError"
    ]
  },
  {
    "q": "Which of the following correctly implements a module that exports both default and named exports?",
    "o": [
      "export default function() {};\nexport const helper = () => {};",
      "export default const main = () => {};\nexport helper = () => {};",
      "export function default() {};\nexport function helper() {};",
      "default export () => {};\nnamed export helper = () => {};"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const data = { a: 1, b: 2 };\nconst clone = { ...data, c: 3 };\ndata.a = 5;\nconsole.log(clone.a);",
    "o": [
      "1",
      "5",
      "undefined",
      "ReferenceError"
    ]
  },
  {
    "q": "Which of the following template literals demonstrates proper HTML escaping?",
    "o": [
      "`<div>${userInput.replace(/</g, '&lt;')}</div>`",
      "`<div>${userInput}</div>`",
      "`<div>\"${userInput}\"</div>`",
      "`<div>'${userInput}'</div>`"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const [x = 1, y = x] = [];\nconsole.log(y);",
    "o": [
      "1",
      "undefined",
      "ReferenceError",
      "NaN"
    ]
  },
  {
    "q": "Which of the following correctly imports a default export with an alias?",
    "o": [
      "import { default as Alias } from './module';",
      "import Alias from './module' as default;",
      "import default Alias from './module';",
      "import './module' as Alias;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst [x, , { length }] = [arr, 9, arr];\nconsole.log(length);",
    "o": [
      "3",
      "1",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of rest parameters in arrow functions?",
    "o": [
      "const sum = (...nums) => nums.reduce((a, b) => a + b);",
      "const sum = nums... => nums.reduce((a, b) => a + b);",
      "const sum = (...nums) => ...nums.reduce((a, b) => a + b);",
      "const sum = (...nums, last) => nums.reduce((a, b) => a + b) + last;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const str = `Line 1\nLine 2`;\nconsole.log(str.split('\\n').length);",
    "o": [
      "2",
      "1",
      "0",
      "undefined"
    ]
  },
  {
    "q": "Which of the following is true about ES6 module exports?",
    "o": [
      "They are live bindings to the exported values",
      "They create copies of the exported values",
      "They cannot be modified after import",
      "They are evaluated only when imported"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nconst { a, b = 2 } = obj;\nconsole.log(a + b);",
    "o": [
      "3",
      "NaN",
      "undefined",
      "ReferenceError"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const { a: { b = 10 } = {} } = { a: null };\nconsole.log(b);",
    "o": [
      "TypeError",
      "10",
      "null",
      "undefined"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the nullish coalescing operator (??) with default parameters?",
    "o": [
      "const fn = (x = null) => x ?? 'default';",
      "const fn = (x = null) => x || 'default';",
      "const fn = (x) => x ??= 'default';",
      "const fn = (x) => x ? 'default' : x;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2];\nconst obj = { ...arr, length: arr.length };\nconsole.log(obj[1]);",
    "o": [
      "2",
      "1",
      "undefined",
      "{1: 1, 2: 2, length: 2}"
    ]
  },
  {
    "q": "Which of the following correctly implements a private class field using ES2022 syntax?",
    "o": [
      "class Test { #privateField = 42; }",
      "class Test { private privateField = 42; }",
      "class Test { _privateField = 42; }",
      "class Test { const #privateField = 42; }"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const str = `\\u{1F600}`;\nconsole.log([...str].length);",
    "o": [
      "1",
      "2",
      "6",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper top-level await in ES modules?",
    "o": [
      "const data = await fetch(url);",
      "async function main() { await fetch(url); }",
      "await.then(fetch(url));",
      "module.await(fetch(url));"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nconst { a, b = a * 2 } = obj;\nconsole.log(b);",
    "o": [
      "2",
      "1",
      "NaN",
      "ReferenceError"
    ]
  },
  {
    "q": "Which of the following correctly uses Object.groupBy() (ES2023)?",
    "o": [
      "Object.groupBy(items, ({ type }) => type);",
      "items.groupBy(({ type }) => type);",
      "Object.groupBy(({ type }) => type, items);",
      "items.groupBy({ type } => type);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const map = new Map([['a', 1]]);\nconst { size } = map;\nconsole.log(size);",
    "o": [
      "1",
      "undefined",
      "Map { 'a' => 1 }",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of Array.prototype.at()?",
    "o": [
      "['a','b','c'].at(-1);",
      "['a','b','c'].at[-1];",
      "['a','b','c'].at('-1');",
      "['a','b','c'].at(3.5);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const regex = /(?<group>\\d+)/;\nconst { groups } = '123'.match(regex);\nconsole.log(groups.group);",
    "o": [
      "123",
      "undefined",
      "['123']",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following correctly uses the Temporal API (ES2022)?",
    "o": [
      "Temporal.Now.instant();",
      "new Temporal.Instant();",
      "Temporal.Instant.now();",
      "Date.temporalNow();"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const weakRef = new WeakRef({ data: 42 });\nconsole.log(weakRef.deref()?.data);",
    "o": [
      "42",
      "undefined",
      "null",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of Error.cause?",
    "o": [
      "throw new Error('New', { cause: originalError });",
      "throw new Error('New').cause(originalError);",
      "throw new Error('New', originalError);",
      "throw new Error('New').withCause(originalError);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr.with(1, 4);\nconsole.log(arr[1]);",
    "o": [
      "2",
      "4",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const data = { a: 1, b: { c: 2 } };\nconst { a, b: { c: renamed } } = data;\nconsole.log(renamed);",
    "o": [
      "2",
      "1",
      "{ c: 2 }",
      "ReferenceError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of optional chaining with nullish coalescing?",
    "o": [
      "const value = obj?.prop ?? 'default';",
      "const value = obj?prop || 'default';",
      "const value = obj.prop ?? 'default';",
      "const value = obj?.prop ? 'default' : obj.prop;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, , 3];\nconst [x = 10, y = 20, z = 30] = arr;\nconsole.log(y);",
    "o": [
      "20",
      "undefined",
      "null",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following correctly uses import.meta in an ES module?",
    "o": [
      "const url = import.meta.url;",
      "const meta = import('meta');",
      "const url = import.meta().url;",
      "const url = this.import.meta.url;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const fn = (x, y = () => x) => y();\nconsole.log(fn(5));",
    "o": [
      "5",
      "undefined",
      "() => x",
      "ReferenceError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of private methods in classes?",
    "o": [
      "class Test { #method() {} }",
      "class Test { private method() {} }",
      "class Test { _method() {} }",
      "class Test { static #method() {} }"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const regex = /(?<year>\\d{4})-(?<month>\\d{2})/;\nconst { groups } = regex.exec('2023-05');\nconsole.log(groups.month);",
    "o": [
      "05",
      "2023",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses Array.prototype.findLast()?",
    "o": [
      "[1, 2, 3].findLast(n => n > 1);",
      "[1, 2, 3].findLastIndex(n => n > 1);",
      "[1, 2, 3].lastFind(n => n > 1);",
      "[1, 2, 3].reverse().find(n => n > 1);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nconst proxy = new Proxy(obj, {});\nproxy.a = 2;\nconsole.log(obj.a);",
    "o": [
      "2",
      "1",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the pipeline operator (|>)?",
    "o": [
      "const result = x |> double |> increment;",
      "const result = x -> double -> increment;",
      "const result = x | double | increment;",
      "const result = x |> (double, increment);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const set = new Set([1, 2, 3]);\nconst arr = Array.from(set, x => x * 2);\nconsole.log(arr);",
    "o": [
      "[2, 4, 6]",
      "[1, 2, 3]",
      "Set { 2, 4, 6 }",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses logical assignment (&&=)?",
    "o": [
      "x &&= y;",
      "x = x && y;",
      "x && y = x;",
      "x =&& y;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const weakMap = new WeakMap();\nconst obj = {};\nweakMap.set(obj, 'data');\nconsole.log(weakMap.get(obj));",
    "o": [
      "'data'",
      "undefined",
      "{}",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of Intl.Segmenter?",
    "o": [
      "const segmenter = new Intl.Segmenter('ja');",
      "const segmenter = Intl.Segmenter('ja');",
      "const segmenter = new Segmenter('ja');",
      "const segmenter = Intl.new.Segmenter('ja');"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst { 1: middle } = arr;\nconsole.log(middle);",
    "o": [
      "2",
      "1",
      "[2]",
      "SyntaxError"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nObject.defineProperty(obj, 'b', { value: 2, enumerable: false });\nconsole.log({ ...obj });",
    "o": [
      "{ a: 1 }",
      "{ a: 1, b: 2 }",
      "{ b: 2 }",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the Record and Tuple proposal (Stage 2)?",
    "o": [
      "const record = #{ x: 1, y: 2 };",
      "const record = { x: 1, y: 2 }#;",
      "const record = #[x: 1, y: 2];",
      "const record = new Record({ x: 1, y: 2 });"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr[Symbol.isConcatSpreadable] = false;\nconsole.log([].concat(arr));",
    "o": [
      "[[1, 2, 3]]",
      "[1, 2, 3]",
      "[]",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the new Array.prototype.toReversed() method?",
    "o": [
      "const reversed = [1, 2, 3].toReversed();",
      "const reversed = [1, 2, 3].toReversed;",
      "const reversed = toReversed([1, 2, 3]);",
      "const reversed = [1, 2, 3].reversed();"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const sym = Symbol('test');\nconst obj = { [sym]: 42 };\nconsole.log(obj[sym]);",
    "o": [
      "42",
      "undefined",
      "'test'",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the Decorators proposal (Stage 3)?",
    "o": [
      "@decorator class MyClass {}",
      "@decorator() class MyClass {}",
      "class MyClass @decorator {}",
      "class @decorator MyClass {}"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const p1 = Promise.resolve(1);\nconst p2 = Promise.resolve(2);\nPromise.all([p1, p2]).then(([x, y]) => console.log(x + y));",
    "o": [
      "3",
      "Promise {<fulfilled>: 3}",
      "[1, 2]",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the Temporal.PlainDate API?",
    "o": [
      "const date = Temporal.PlainDate.from('2023-05-15');",
      "const date = new Temporal.PlainDate(2023, 5, 15);",
      "const date = Temporal.Date('2023-05-15');",
      "const date = Temporal.createDate('2023-05-15');"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const map = new Map([['a', 1]]);\nconst clone = new Map(map);\nmap.set('a', 2);\nconsole.log(clone.get('a'));",
    "o": [
      "1",
      "2",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the new Error.prototype.cause property?",
    "o": [
      "throw new Error('New', { cause: originalError });",
      "throw new Error('New').cause(originalError);",
      "throw new Error('New', originalError);",
      "throw new Error('New').withCause(originalError);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst iter = arr[Symbol.iterator]();\nconsole.log(iter.next().value);",
    "o": [
      "1",
      "2",
      "[1, 2, 3]",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the new Object.hasOwn() method?",
    "o": [
      "Object.hasOwn(obj, 'property');",
      "obj.hasOwn('property');",
      "Object.prototype.hasOwn(obj, 'property');",
      "hasOwn(obj, 'property');"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const weakSet = new WeakSet();\nconst obj = {};\nweakSet.add(obj);\nconsole.log(weakSet.has(obj));",
    "o": [
      "true",
      "false",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the new Array.prototype.toSpliced() method?",
    "o": [
      "const newArr = [1, 2, 3].toSpliced(1, 1, 4);",
      "const newArr = [1, 2, 3].toSpliced(1, 4);",
      "const newArr = toSpliced([1, 2, 3], 1, 1, 4);",
      "const newArr = [1, 2, 3].spliced(1, 1, 4);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const regExp = /\\p{Emoji}/u;\nconsole.log(regExp.test('😊'));",
    "o": [
      "true",
      "false",
      "null",
      "SyntaxError"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nconst proxy = new Proxy(obj, {\n  get(target, prop) {\n    return prop in target ? target[prop] : 42;\n  }\n});\nconsole.log(proxy.b);",
    "o": [
      "42",
      "undefined",
      "ReferenceError",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of private static class fields?",
    "o": [
      "class Test { static #count = 0; }",
      "class Test { private static count = 0; }",
      "class Test { static private count = 0; }",
      "class Test { #static count = 0; }"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const regex = /(?<word>\\w+)!/d;\nconst result = regex.exec('Hello!');\nconsole.log(result.indices.groups.word);",
    "o": [
      "[0, 5]",
      "['Hello']",
      "{ start: 0, end: 5 }",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the new .at() method with relative indexing?",
    "o": [
      "'JavaScript'.at(-2);",
      "'JavaScript'.at(-1);",
      "'JavaScript'.at(length - 1);",
      "'JavaScript'.at('last');"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const weakMap = new WeakMap();\n(function() {\n  const obj = {};\n  weakMap.set(obj, 'secret');\n})();\nconsole.log(weakMap.size);",
    "o": [
      "undefined",
      "0",
      "1",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the Temporal.Instant API?",
    "o": [
      "const now = Temporal.Now.instant();",
      "const now = new Temporal.Instant();",
      "const now = Temporal.Instant.now();",
      "const now = Instant.now();"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst { [1]: middle } = arr;\nconsole.log(middle);",
    "o": [
      "2",
      "1",
      "[2]",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following correctly uses the new Error.prototype.cause chain?",
    "o": [
      "throw new Error('Surface', { cause: new Error('Root') });",
      "throw new Error('Surface').because(new Error('Root'));",
      "throw new Error('Surface', new Error('Root'));",
      "throw new Error('Surface').withCause(new Error('Root'));"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const set = new Set([1, 2, 3]);\nconst newSet = new Set(set);\nset.add(4);\nconsole.log(newSet.has(4));",
    "o": [
      "false",
      "true",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the Array.prototype.with() method?",
    "o": [
      "const newArr = [1, 2, 3].with(1, 4);",
      "const newArr = [1, 2, 3].with(4, 1);",
      "const newArr = [1, 2, 3].with(1) = 4;",
      "const newArr = with([1, 2, 3], 1, 4);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconst { a: x, ...rest } = obj;\nconsole.log(rest.b);",
    "o": [
      "2",
      "1",
      "undefined",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following correctly uses the new Intl.NumberFormat features for compact notation?",
    "o": [
      "new Intl.NumberFormat('en', { notation: 'compact' }).format(1000);",
      "new Intl.NumberFormat('en', { compact: true }).format(1000);",
      "Intl.formatNumber(1000, { notation: 'compact' });",
      "new NumberFormatter('en').compact(1000);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst mapped = arr.map(x => x * 2).filter(x => x > 3);\nconsole.log(mapped);",
    "o": [
      "[4, 6]",
      "[2, 4, 6]",
      "[3]",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the new Object.hasOwn() method?",
    "o": [
      "Object.hasOwn(obj, 'property');",
      "obj.hasOwn('property');",
      "Object.prototype.hasOwn(obj, 'property');",
      "hasOwn(obj, 'property');"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const regExp = /\\p{Script=Greek}/u;\nconsole.log(regExp.test('Ω'));",
    "o": [
      "true",
      "false",
      "null",
      "SyntaxError"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconst { a: x, ...rest } = obj;\nconsole.log(rest);",
    "o": [
      "{ b: 2 }",
      "{ a: 1, b: 2 }",
      "{ a: 1 }",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the nullish coalescing assignment operator (??=)?",
    "o": [
      "x ??= 42;",
      "x = x ?? 42;",
      "x ?? 42 = x;",
      "x =?? 42;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const map = new Map([['a', 1]]);\nconst clone = new Map(map);\nmap.set('a', 2);\nconsole.log(clone.get('a'));",
    "o": [
      "1",
      "2",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the Temporal API to compare two dates?",
    "o": [
      "Temporal.PlainDate.compare(date1, date2);",
      "date1.compare(date2);",
      "Temporal.compare(date1, date2);",
      "date1 > date2;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst { 1: middle } = arr;\nconsole.log(middle);",
    "o": [
      "2",
      "1",
      "[2]",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of private class methods?",
    "o": [
      "class Test { #method() {} }",
      "class Test { private method() {} }",
      "class Test { _method() {} }",
      "class Test { static #method() {} }"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const weakRef = new WeakRef({ data: 42 });\nconsole.log(weakRef.deref()?.data);",
    "o": [
      "42",
      "undefined",
      "null",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the new Array.prototype.findLastIndex() method?",
    "o": [
      "[1, 2, 3].findLastIndex(n => n > 1);",
      "[1, 2, 3].findLast(n => n > 1);",
      "[1, 2, 3].lastIndex(n => n > 1);",
      "[1, 2, 3].reverse().findIndex(n => n > 1);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const regex = /(?<word>\\w+)!/d;\nconst result = regex.exec('Hello!');\nconsole.log(result.indices.groups.word);",
    "o": [
      "[0, 5]",
      "['Hello']",
      "{ start: 0, end: 5 }",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the Error.cause property?",
    "o": [
      "throw new Error('New', { cause: originalError });",
      "throw new Error('New').cause(originalError);",
      "throw new Error('New', originalError);",
      "throw new Error('New').withCause(originalError);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr.with(1, 4);\nconsole.log(arr[1]);",
    "o": [
      "2",
      "4",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the Object.groupBy() method?",
    "o": [
      "Object.groupBy(items, ({ type }) => type);",
      "items.groupBy(({ type }) => type);",
      "Object.groupBy(({ type }) => type, items);",
      "items.groupBy({ type } => type);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const set = new Set([1, 2, 3]);\nconst { size } = set;\nconsole.log(size);",
    "o": [
      "3",
      "undefined",
      "Set { 1, 2, 3 }",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the Intl.Segmenter API?",
    "o": [
      "const segmenter = new Intl.Segmenter('ja');",
      "const segmenter = Intl.Segmenter('ja');",
      "const segmenter = new Segmenter('ja');",
      "const segmenter = Intl.new.Segmenter('ja');"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const regExp = /\\p{Script=Greek}/u;\nconsole.log(regExp.test('Ω'));",
    "o": [
      "true",
      "false",
      "null",
      "SyntaxError"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconst { a: x, ...rest } = obj;\nconsole.log(rest);",
    "o": [
      "{ b: 2 }",
      "{ a: 1, b: 2 }",
      "{ a: 1 }",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the nullish coalescing assignment operator (??=)?",
    "o": [
      "x ??= 42;",
      "x = x ?? 42;",
      "x ?? 42 = x;",
      "x =?? 42;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const map = new Map([['a', 1]]);\nconst clone = new Map(map);\nmap.set('a', 2);\nconsole.log(clone.get('a'));",
    "o": [
      "1",
      "2",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the Temporal API to compare two dates?",
    "o": [
      "Temporal.PlainDate.compare(date1, date2);",
      "date1.compare(date2);",
      "Temporal.compare(date1, date2);",
      "date1 > date2;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst { 1: middle } = arr;\nconsole.log(middle);",
    "o": [
      "2",
      "1",
      "[2]",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of private class methods?",
    "o": [
      "class Test { #method() {} }",
      "class Test { private method() {} }",
      "class Test { _method() {} }",
      "class Test { static #method() {} }"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const weakRef = new WeakRef({ data: 42 });\nconsole.log(weakRef.deref()?.data);",
    "o": [
      "42",
      "undefined",
      "null",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the new Array.prototype.findLastIndex() method?",
    "o": [
      "[1, 2, 3].findLastIndex(n => n > 1);",
      "[1, 2, 3].findLast(n => n > 1);",
      "[1, 2, 3].lastIndex(n => n > 1);",
      "[1, 2, 3].reverse().findIndex(n => n > 1);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const regex = /(?<word>\\w+)!/d;\nconst result = regex.exec('Hello!');\nconsole.log(result.indices.groups.word);",
    "o": [
      "[0, 5]",
      "['Hello']",
      "{ start: 0, end: 5 }",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the Error.cause property?",
    "o": [
      "throw new Error('New', { cause: originalError });",
      "throw new Error('New').cause(originalError);",
      "throw new Error('New', originalError);",
      "throw new Error('New').withCause(originalError);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr.with(1, 4);\nconsole.log(arr[1]);",
    "o": [
      "2",
      "4",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the Object.groupBy() method?",
    "o": [
      "Object.groupBy(items, ({ type }) => type);",
      "items.groupBy(({ type }) => type);",
      "Object.groupBy(({ type }) => type, items);",
      "items.groupBy({ type } => type);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const set = new Set([1, 2, 3]);\nconst { size } = set;\nconsole.log(size);",
    "o": [
      "3",
      "undefined",
      "Set { 1, 2, 3 }",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the Intl.Segmenter API?",
    "o": [
      "const segmenter = new Intl.Segmenter('ja');",
      "const segmenter = Intl.Segmenter('ja');",
      "const segmenter = new Segmenter('ja');",
      "const segmenter = Intl.new.Segmenter('ja');"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const regExp = /\\p{Script=Greek}/u;\nconsole.log(regExp.test('Ω'));",
    "o": [
      "true",
      "false",
      "null",
      "SyntaxError"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, get b() { return this.a * 2 } };\nconst { a, b } = obj;\nconsole.log(b);",
    "o": [
      "2",
      "undefined",
      "{ get: function }",
      "ReferenceError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of private class fields with inheritance?",
    "o": [
      "class Parent { #field = 1 }\nclass Child extends Parent { getField() { return this.#field } }",
      "class Parent { private field = 1 }\nclass Child extends Parent { getField() { return this.field } }",
      "class Parent { #field = 1 }\nclass Child extends Parent { #field = 2 }",
      "class Parent { static #field = 1 }\nclass Child extends Parent { getField() { return this.#field } }"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst proxy = new Proxy(arr, {\n  get(target, prop) {\n    return Reflect.get(...arguments) * 2;\n  }\n});\nconsole.log(proxy[1]);",
    "o": [
      "4",
      "2",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the Temporal API to calculate the difference between two dates?",
    "o": [
      "date1.until(date2);",
      "Temporal.difference(date1, date2);",
      "date1 - date2;",
      "Temporal.PlainDate.diff(date1, date2);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const regex = /(?<word>\\w+)(?<punctuation>[!?.])/d;\nconst result = regex.exec('Hello!');\nconsole.log(result.indices.groups.punctuation);",
    "o": [
      "[5, 6]",
      "['!']",
      "{ start: 5, end: 6 }",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the new Array.prototype.toSpliced() method?",
    "o": [
      "const newArr = [1, 2, 3].toSpliced(1, 1, 4);",
      "const newArr = [1, 2, 3].toSpliced(1, 4);",
      "const newArr = toSpliced([1, 2, 3], 1, 1, 4);",
      "const newArr = [1, 2, 3].spliced(1, 1, 4);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const weakMap = new WeakMap();\n(function() {\n  const obj = {};\n  weakMap.set(obj, 'secret');\n})();\nconsole.log(weakMap.size);",
    "o": [
      "undefined",
      "0",
      "1",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the new Intl.NumberFormat v3 features for range formatting?",
    "o": [
      "new Intl.NumberFormat('en').formatRange(1, 10);",
      "Intl.formatRange(1, 10);",
      "new NumberRangeFormatter('en').format(1, 10);",
      "Intl.NumberFormat.range(1, 10);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nObject.defineProperty(obj, 'b', { \n  value: 2, \n  enumerable: false \n});\nconsole.log({ ...obj });",
    "o": [
      "{ a: 1 }",
      "{ a: 1, b: 2 }",
      "{ b: 2 }",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the Record and Tuple proposal (Stage 2)?",
    "o": [
      "const record = #{ x: 1, y: 2 };",
      "const record = { x: 1, y: 2 }#;",
      "const record = #[x: 1, y: 2];",
      "const record = new Record({ x: 1, y: 2 });"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr[Symbol.isConcatSpreadable] = false;\nconsole.log([].concat(arr));",
    "o": [
      "[[1, 2, 3]]",
      "[1, 2, 3]",
      "[]",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the Decorators proposal (Stage 3)?",
    "o": [
      "@decorator class MyClass {}",
      "@decorator() class MyClass {}",
      "class MyClass @decorator {}",
      "class @decorator MyClass {}"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const p1 = Promise.resolve(1);\nconst p2 = Promise.resolve(2);\nPromise.all([p1, p2]).then(([x, y]) => console.log(x + y));",
    "o": [
      "3",
      "Promise {<fulfilled>: 3}",
      "[1, 2]",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the new Error.prototype.stackTraceLimit property?",
    "o": [
      "Error.stackTraceLimit = 10;",
      "Error.prototype.stackTraceLimit = 10;",
      "new Error().stackTraceLimit = 10;",
      "Error.setStackTraceLimit(10);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const regExp = /\\p{Emoji_Modifier}/u;\nconsole.log(regExp.test('👍🏿'));",
    "o": [
      "true",
      "false",
      "null",
      "SyntaxError"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconst { a: x, ...rest } = obj;\nconsole.log(rest);",
    "o": [
      "{ b: 2 }",
      "{ a: 1, b: 2 }",
      "{ a: 1 }",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the nullish coalescing assignment operator (??=)?",
    "o": [
      "x ??= 42;",
      "x = x ?? 42;",
      "x ?? 42 = x;",
      "x =?? 42;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const map = new Map([['a', 1]]);\nconst clone = new Map(map);\nmap.set('a', 2);\nconsole.log(clone.get('a'));",
    "o": [
      "1",
      "2",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the Temporal API to compare two dates?",
    "o": [
      "Temporal.PlainDate.compare(date1, date2);",
      "date1.compare(date2);",
      "Temporal.compare(date1, date2);",
      "date1 > date2;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst { 1: middle } = arr;\nconsole.log(middle);",
    "o": [
      "2",
      "1",
      "[2]",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of private class methods?",
    "o": [
      "class Test { #method() {} }",
      "class Test { private method() {} }",
      "class Test { _method() {} }",
      "class Test { static #method() {} }"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const weakRef = new WeakRef({ data: 42 });\nconsole.log(weakRef.deref()?.data);",
    "o": [
      "42",
      "undefined",
      "null",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the new Array.prototype.findLastIndex() method?",
    "o": [
      "[1, 2, 3].findLastIndex(n => n > 1);",
      "[1, 2, 3].findLast(n => n > 1);",
      "[1, 2, 3].lastIndex(n => n > 1);",
      "[1, 2, 3].reverse().findIndex(n => n > 1);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const regex = /(?<word>\\w+)!/d;\nconst result = regex.exec('Hello!');\nconsole.log(result.indices.groups.word);",
    "o": [
      "[0, 5]",
      "['Hello']",
      "{ start: 0, end: 5 }",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the Error.cause property?",
    "o": [
      "throw new Error('New', { cause: originalError });",
      "throw new Error('New').cause(originalError);",
      "throw new Error('New', originalError);",
      "throw new Error('New').withCause(originalError);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr.with(1, 4);\nconsole.log(arr[1]);",
    "o": [
      "2",
      "4",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the Object.groupBy() method?",
    "o": [
      "Object.groupBy(items, ({ type }) => type);",
      "items.groupBy(({ type }) => type);",
      "Object.groupBy(({ type }) => type, items);",
      "items.groupBy({ type } => type);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const set = new Set([1, 2, 3]);\nconst { size } = set;\nconsole.log(size);",
    "o": [
      "3",
      "undefined",
      "Set { 1, 2, 3 }",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the Intl.Segmenter API?",
    "o": [
      "const segmenter = new Intl.Segmenter('ja');",
      "const segmenter = Intl.Segmenter('ja');",
      "const segmenter = new Segmenter('ja');",
      "const segmenter = Intl.new.Segmenter('ja');"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const regExp = /\\p{Script=Greek}/u;\nconsole.log(regExp.test('Ω'));",
    "o": [
      "true",
      "false",
      "null",
      "SyntaxError"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconst { a: x, ...rest } = obj;\nconsole.log(rest);",
    "o": [
      "{ b: 2 }",
      "{ a: 1, b: 2 }",
      "{ a: 1 }",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the nullish coalescing assignment operator (??=)?",
    "o": [
      "x ??= 42;",
      "x = x ?? 42;",
      "x ?? 42 = x;",
      "x =?? 42;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const map = new Map([['a', 1]]);\nconst clone = new Map(map);\nmap.set('a', 2);\nconsole.log(clone.get('a'));",
    "o": [
      "1",
      "2",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the Temporal API to compare two dates?",
    "o": [
      "Temporal.PlainDate.compare(date1, date2);",
      "date1.compare(date2);",
      "Temporal.compare(date1, date2);",
      "date1 > date2;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst { 1: middle } = arr;\nconsole.log(middle);",
    "o": [
      "2",
      "1",
      "[2]",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of private class methods?",
    "o": [
      "class Test { #method() {} }",
      "class Test { private method() {} }",
      "class Test { _method() {} }",
      "class Test { static #method() {} }"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const weakRef = new WeakRef({ data: 42 });\nconsole.log(weakRef.deref()?.data);",
    "o": [
      "42",
      "undefined",
      "null",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the new Array.prototype.findLastIndex() method?",
    "o": [
      "[1, 2, 3].findLastIndex(n => n > 1);",
      "[1, 2, 3].findLast(n => n > 1);",
      "[1, 2, 3].lastIndex(n => n > 1);",
      "[1, 2, 3].reverse().findIndex(n => n > 1);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const regex = /(?<word>\\w+)!/d;\nconst result = regex.exec('Hello!');\nconsole.log(result.indices.groups.word);",
    "o": [
      "[0, 5]",
      "['Hello']",
      "{ start: 0, end: 5 }",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the Error.cause property?",
    "o": [
      "throw new Error('New', { cause: originalError });",
      "throw new Error('New').cause(originalError);",
      "throw new Error('New', originalError);",
      "throw new Error('New').withCause(originalError);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr.with(1, 4);\nconsole.log(arr[1]);",
    "o": [
      "2",
      "4",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the Object.groupBy() method?",
    "o": [
      "Object.groupBy(items, ({ type }) => type);",
      "items.groupBy(({ type }) => type);",
      "Object.groupBy(({ type }) => type, items);",
      "items.groupBy({ type } => type);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const set = new Set([1, 2, 3]);\nconst { size } = set;\nconsole.log(size);",
    "o": [
      "3",
      "undefined",
      "Set { 1, 2, 3 }",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the Intl.Segmenter API?",
    "o": [
      "const segmenter = new Intl.Segmenter('ja');",
      "const segmenter = Intl.Segmenter('ja');",
      "const segmenter = new Segmenter('ja');",
      "const segmenter = Intl.new.Segmenter('ja');"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const regExp = /\\p{Script=Greek}/u;\nconsole.log(regExp.test('Ω'));",
    "o": [
      "true",
      "false",
      "null",
      "SyntaxError"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconst { a: x, ...rest } = obj;\nconsole.log(rest);",
    "o": [
      "{ b: 2 }",
      "{ a: 1, b: 2 }",
      "{ a: 1 }",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the nullish coalescing assignment operator (??=)?",
    "o": [
      "x ??= 42;",
      "x = x ?? 42;",
      "x ?? 42 = x;",
      "x =?? 42;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const map = new Map([['a', 1]]);\nconst clone = new Map(map);\nmap.set('a', 2);\nconsole.log(clone.get('a'));",
    "o": [
      "1",
      "2",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the Temporal API to compare two dates?",
    "o": [
      "Temporal.PlainDate.compare(date1, date2);",
      "date1.compare(date2);",
      "Temporal.compare(date1, date2);",
      "date1 > date2;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst { 1: middle } = arr;\nconsole.log(middle);",
    "o": [
      "2",
      "1",
      "[2]",
      "SyntaxError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of private class methods?",
    "o": [
      "class Test { #method() {} }",
      "class Test { private method() {} }",
      "class Test { _method() {} }",
      "class Test { static #method() {} }"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const weakRef = new WeakRef({ data: 42 });\nconsole.log(weakRef.deref()?.data);",
    "o": [
      "42",
      "undefined",
      "null",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the new Array.prototype.findLastIndex() method?",
    "o": [
      "[1, 2, 3].findLastIndex(n => n > 1);",
      "[1, 2, 3].findLast(n => n > 1);",
      "[1, 2, 3].lastIndex(n => n > 1);",
      "[1, 2, 3].reverse().findIndex(n => n > 1);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const regex = /(?<word>\\w+)!/d;\nconst result = regex.exec('Hello!');\nconsole.log(result.indices.groups.word);",
    "o": [
      "[0, 5]",
      "['Hello']",
      "{ start: 0, end: 5 }",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the Error.cause property?",
    "o": [
      "throw new Error('New', { cause: originalError });",
      "throw new Error('New').cause(originalError);",
      "throw new Error('New', originalError);",
      "throw new Error('New').withCause(originalError);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr.with(1, 4);\nconsole.log(arr[1]);",
    "o": [
      "2",
      "4",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following correctly uses the Object.groupBy() method?",
    "o": [
      "Object.groupBy(items, ({ type }) => type);",
      "items.groupBy(({ type }) => type);",
      "Object.groupBy(({ type }) => type, items);",
      "items.groupBy({ type } => type);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const set = new Set([1, 2, 3]);\nconst { size } = set;\nconsole.log(size);",
    "o": [
      "3",
      "undefined",
      "Set { 1, 2, 3 }",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following demonstrates proper use of the Intl.Segmenter API?",
    "o": [
      "const segmenter = new Intl.Segmenter('ja');",
      "const segmenter = Intl.Segmenter('ja');",
      "const segmenter = new Segmenter('ja');",
      "const segmenter = Intl.new.Segmenter('ja');"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const regExp = /\\p{Script=Greek}/u;\nconsole.log(regExp.test('Ω'));",
    "o": [
      "true",
      "false",
      "null",
      "SyntaxError"
    ]
  }
]