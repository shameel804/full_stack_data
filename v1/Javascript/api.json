[
  {
    "q": "What does the Fetch API return?",
    "o": [
      "A Promise",
      "The response data directly",
      "A callback function",
      "An event object"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "fetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data));",
    "o": [
      "The parsed JSON data from the API",
      "A Promise object",
      "The raw response object",
      "undefined"
    ]
  },
  {
    "q": "Which method is used to store data in localStorage?",
    "o": [
      "localStorage.setItem()",
      "localStorage.store()",
      "localStorage.save()",
      "localStorage.write()"
    ]
  },
  {
    "q": "What does the following code snippet do?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords),\n  error => console.error(error)\n);",
    "o": [
      "Logs the user's current coordinates or an error",
      "Requests permission to access location",
      "Creates a new geolocation object",
      "Returns a Promise with the location"
    ]
  },
  {
    "q": "How do you retrieve data from localStorage?",
    "o": [
      "localStorage.getItem()",
      "localStorage.retrieve()",
      "localStorage.read()",
      "localStorage.fetch()"
    ]
  },
  {
    "q": "What is the purpose of the headers in a Fetch API request?",
    "o": [
      "To provide metadata about the request",
      "To store the response data",
      "To handle errors",
      "To parse the response"
    ]
  },
  {
    "q": "What will this code snippet output if the user denies location access?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log('Success'),\n  error => console.log('Error')\n);",
    "o": [
      "'Error'",
      "'Success'",
      "undefined",
      "null"
    ]
  },
  {
    "q": "Which of these is the correct way to remove an item from localStorage?",
    "o": [
      "localStorage.removeItem()",
      "localStorage.delete()",
      "localStorage.clearItem()",
      "localStorage.erase()"
    ]
  },
  {
    "q": "What does the second parameter of the fetch() function represent?",
    "o": [
      "An options object for the request",
      "The request body",
      "A callback function",
      "Headers for the response"
    ]
  },
  {
    "q": "What is the maximum storage capacity of localStorage in most browsers?",
    "o": [
      "5MB",
      "10MB",
      "1MB",
      "Unlimited"
    ]
  },
  {
    "q": "Which method is used to check if the browser supports the Geolocation API?",
    "o": [
      "'geolocation' in navigator",
      "navigator.checkGeolocation()",
      "window.hasGeolocation()",
      "Geolocation.isSupported()"
    ]
  },
  {
    "q": "What does this code snippet do?",
    "l": "javascript",
    "c": "localStorage.setItem('theme', 'dark');\nconst theme = localStorage.getItem('theme');\nconsole.log(theme);",
    "o": [
      "Stores 'dark' in localStorage and logs it",
      "Creates a new theme preference",
      "Deletes the theme from localStorage",
      "Checks if dark theme is supported"
    ]
  },
  {
    "q": "What is the correct way to send a POST request using the Fetch API?",
    "o": [
      "fetch(url, { method: 'POST', body: JSON.stringify(data) })",
      "fetch(url, { type: 'POST', data: data })",
      "fetch.post(url, data)",
      "fetch(url).post(data)"
    ]
  },
  {
    "q": "What does the following code snippet log if the fetch request fails?",
    "l": "javascript",
    "c": "fetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.log('Failed'));",
    "o": [
      "'Failed'",
      "An empty object",
      "The raw error response",
      "undefined"
    ]
  },
  {
    "q": "Which method completely clears all data in localStorage?",
    "o": [
      "localStorage.clear()",
      "localStorage.removeAll()",
      "localStorage.reset()",
      "localStorage.deleteAll()"
    ]
  },
  {
    "q": "What does the `watchPosition()` method in the Geolocation API do?",
    "o": [
      "Continuously tracks the user's position",
      "Gets the user's position once",
      "Checks if location tracking is enabled",
      "Stores the last known position"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "localStorage.setItem('user', 'John');\nconst user = localStorage.user;\nconsole.log(user);",
    "o": [
      "'John'",
      "undefined",
      "null",
      "Throws an error"
    ]
  },
  {
    "q": "Which property in the Fetch API response contains the HTTP status code?",
    "o": [
      "response.status",
      "response.code",
      "response.statusCode",
      "response.httpStatus"
    ]
  },
  {
    "q": "How do you check if a specific key exists in localStorage?",
    "o": [
      "localStorage.getItem('key') !== null",
      "localStorage.has('key')",
      "'key' in localStorage",
      "localStorage.exists('key')"
    ]
  },
  {
    "q": "What does the `coords.accuracy` property in Geolocation represent?",
    "o": [
      "The accuracy of the position in meters",
      "The speed of the device",
      "The altitude of the device",
      "The timestamp of the position"
    ]
  },
  {
    "q": "What is the purpose of the `response.json()` method in the Fetch API?",
    "o": [
      "Parses the response as JSON",
      "Converts data to JSON before sending",
      "Validates JSON syntax",
      "Stringifies the response"
    ]
  },
  {
    "q": "What happens if you try to store a non-string value in localStorage?",
    "o": [
      "It gets automatically converted to a string",
      "It throws an error",
      "It stores as a raw object",
      "It silently fails"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  pos => console.log(pos.coords.latitude),\n  err => console.log(err.code)\n);",
    "o": [
      "Logs the latitude or an error code",
      "Logs the longitude or undefined",
      "Always logs the latitude",
      "Throws a syntax error"
    ]
  },
  {
    "q": "Which HTTP header is commonly used in Fetch API requests to specify JSON data?",
    "o": [
      "'Content-Type': 'application/json'",
      "'Accept': 'application/json'",
      "'Data-Type': 'json'",
      "'Type': 'JSON'"
    ]
  },
  {
    "q": "How do you store an object in localStorage?",
    "o": [
      "localStorage.setItem('key', JSON.stringify(obj))",
      "localStorage.setItem('key', obj)",
      "localStorage.storeObject('key', obj)",
      "localStorage.save('key', obj)"
    ]
  },
  {
    "q": "Which method is used to cancel an ongoing Geolocation watch?",
    "o": [
      "navigator.geolocation.clearWatch(watchId)",
      "navigator.geolocation.stop(watchId)",
      "navigator.geolocation.cancel(watchId)",
      "watchId.stop()"
    ]
  },
  {
    "q": "How do you include headers in a Fetch API request?",
    "o": [
      "fetch(url, { headers: { 'Content-Type': 'application/json' } })",
      "fetch(url, { headers: 'Content-Type: application/json' })",
      "fetch(url).headers('Content-Type', 'application/json')",
      "fetch(url).setHeader('Content-Type', 'application/json')"
    ]
  },
  {
    "q": "What does the following Fetch API code snippet do?",
    "l": "javascript",
    "c": "fetch('https://api.example.com/data', { method: 'DELETE' })",
    "o": [
      "Sends a DELETE request to the API",
      "Fetches data and then deletes it locally",
      "Throws an error because DELETE is not allowed",
      "Ignores the method and performs a GET request"
    ]
  },
  {
    "q": "What is the purpose of the `credentials: 'include'` option in Fetch?",
    "o": [
      "Sends cookies and HTTP authentication with the request",
      "Forces the request to use HTTPS",
      "Includes metadata in the response",
      "Enables CORS for all domains"
    ]
  },
  {
    "q": "What does this code snippet log if the API returns a 404 error?",
    "l": "javascript",
    "c": "fetch('https://api.example.com/missing')\n  .then(response => {\n    if (!response.ok) throw new Error('Not found');\n    return response.json();\n  })\n  .catch(error => console.log(error.message));",
    "o": [
      "'Not found'",
      "404",
      "undefined",
      "The raw 404 response"
    ]
  },
  {
    "q": "What is the scope of data stored in localStorage?",
    "o": [
      "Persists across browser sessions for the same origin",
      "Clears when the tab is closed",
      "Shared across all domains",
      "Expires after 24 hours"
    ]
  },
  {
    "q": "What happens when you run this code?",
    "l": "javascript",
    "c": "localStorage.setItem('temp', 123);\nconsole.log(typeof localStorage.getItem('temp'));",
    "o": [
      "Logs 'string' (numbers are converted to strings)",
      "Logs 'number' (keeps the original type)",
      "Throws an error",
      "Logs 'undefined'"
    ]
  },
  {
    "q": "How do you store and retrieve an array in localStorage?",
    "o": [
      "localStorage.setItem('arr', JSON.stringify([1, 2])); JSON.parse(localStorage.getItem('arr'));",
      "localStorage.setItem('arr', [1, 2]); localStorage.getArray('arr');",
      "localStorage.save('arr', [1, 2]); localStorage.load('arr');",
      "localStorage.write('arr', [1, 2]); localStorage.read('arr');"
    ]
  },
  {
    "q": "What is the difference between localStorage and sessionStorage?",
    "o": [
      "sessionStorage clears when the tab closes, localStorage persists",
      "localStorage is server-side, sessionStorage is client-side",
      "sessionStorage has a larger storage limit",
      "localStorage is faster than sessionStorage"
    ]
  },
  {
    "q": "Which permission must the user grant for Geolocation to work?",
    "o": [
      "Location access",
      "Camera access",
      "Microphone access",
      "Notifications"
    ]
  },
  {
    "q": "What does this code snippet log if location access is blocked?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  pos => console.log(pos),\n  err => console.log(err.message)\n);",
    "o": [
      "An error message (e.g., 'User denied Geolocation')",
      "undefined",
      "null",
      "The last known coordinates"
    ]
  },
  {
    "q": "Which Geolocation method is best for tracking a moving device?",
    "o": [
      "watchPosition()",
      "getCurrentPosition()",
      "trackPosition()",
      "followPosition()"
    ]
  },
  {
    "q": "What property in the Geolocation response provides the device's speed?",
    "o": [
      "coords.speed",
      "position.velocity",
      "location.speed",
      "geo.movement"
    ]
  },
  {
    "q": "What does this code snippet do?",
    "l": "javascript",
    "c": "if ('geolocation' in navigator) {\n  navigator.geolocation.getCurrentPosition(showPosition);\n} else {\n  console.log('Geolocation not supported');\n}",
    "o": [
      "Checks for Geolocation support and gets the current position",
      "Always logs 'Geolocation not supported'",
      "Forces the browser to enable Geolocation",
      "Throws an error if Geolocation is disabled"
    ]
  },
  {
    "q": "What is the output of this code?",
    "l": "javascript",
    "c": "localStorage.setItem('test', 'A');\nlocalStorage.setItem('test', 'B');\nconsole.log(localStorage.getItem('test'));",
    "o": [
      "'B' (last write wins)",
      "'A' (first write persists)",
      "['A', 'B'] (all values stored)",
      "null (duplicate keys are ignored)"
    ]
  },
  {
    "q": "What is missing in this Fetch API request to send JSON data?",
    "l": "javascript",
    "c": "fetch('https://api.example.com', {\n  method: 'POST',\n  body: { name: 'John' }\n});",
    "o": [
      "Headers: { 'Content-Type': 'application/json' } and JSON.stringify()",
      "A then() block to handle the response",
      "The URL is invalid",
      "Nothing, it will work as-is"
    ]
  },
  {
    "q": "What happens if you don't call .json() or .text() on a Fetch API response?",
    "o": [
      "The response body remains unread and memory leaks may occur",
      "The response is automatically parsed as JSON",
      "The Fetch request fails silently",
      "The response is converted to a string by default"
    ]
  },
  {
    "q": "How would you implement a timeout for a Fetch API request?",
    "o": [
      "Use Promise.race() with a timeout promise and fetch",
      "Set the timeout property in fetch options",
      "Use setTimeout() before the fetch call",
      "AbortController is the only way to timeout fetch"
    ]
  },
  {
    "q": "What is the output of this localStorage code?",
    "l": "javascript",
    "c": "localStorage.setItem('a', '1');\nlocalStorage.setItem('b', '2');\nconsole.log(localStorage.key(1));",
    "o": [
      "'b' (keys are stored in insertion order)",
      "'1' (returns the value at index 1)",
      "'a' (returns the first key)",
      "undefined (key() doesn't work this way)"
    ]
  },
  {
    "q": "Which Geolocation API option provides the highest possible accuracy?",
    "o": [
      "{ enableHighAccuracy: true }",
      "{ maximumAccuracy: true }",
      "{ precision: 'high' }",
      "{ exactPosition: true }"
    ]
  },
  {
    "q": "What does this Fetch API pattern accomplish?",
    "l": "javascript",
    "c": "const controller = new AbortController();\nfetch(url, { signal: controller.signal });\ncontroller.abort();",
    "o": [
      "Cancels the ongoing fetch request",
      "Pauses the fetch request temporarily",
      "Retries the fetch if it fails",
      "Signals the server to abort processing"
    ]
  },
  {
    "q": "How can you check localStorage usage?",
    "o": [
      "Using JSON.stringify(localStorage).length",
      "localStorage.remainingSpace()",
      "navigator.storage.estimate()",
      "There's no way to check programmatically"
    ]
  },
  {
    "q": "What's wrong with this Geolocation code?",
    "l": "javascript",
    "c": "const position = navigator.geolocation.getCurrentPosition();\nconsole.log(position.coords);",
    "o": [
      "getCurrentPosition() is asynchronous and doesn't return directly",
      "Missing error handling callback",
      "Should use watchPosition() instead",
      "Nothing is wrong with this code"
    ]
  },
  {
    "q": "What does this Fetch API code do?",
    "l": "javascript",
    "c": "fetch(url)\n  .then(response => response.blob())\n  .then(blob => console.log(blob.type));",
    "o": [
      "Downloads binary data and logs its MIME type",
      "Throws an error because blob() is invalid",
      "Logs 'undefined' for most requests",
      "Converts the response to a Blob URL"
    ]
  },
  {
    "q": "How do you make localStorage reactive in a modern framework?",
    "o": [
      "Use window.addEventListener('storage', callback)",
      "localStorage.onChange(callback)",
      "Implement a polling mechanism",
      "localStorage is natively reactive"
    ]
  },
  {
    "q": "What's the purpose of the PositionOptions.timeout in Geolocation?",
    "o": [
      "Maximum time (ms) to wait for a position before erroring",
      "How often to update the position",
      "Minimum time between position updates",
      "Time to cache the position result"
    ]
  },
  {
    "q": "What does this Fetch API headers pattern accomplish?",
    "l": "javascript",
    "c": "const headers = new Headers();\nheaders.append('X-Requested-With', 'Fetch');\nheaders.append('Accept', 'application/json');",
    "o": [
      "Creates a mutable headers object for fetch requests",
      "Automatically sends preflight OPTIONS requests",
      "Overrides browser default headers",
      "Nothing - Headers() constructor is invalid"
    ]
  },
  {
    "q": "How would you store and retrieve a Date object in localStorage?",
    "o": [
      "localStorage.setItem('date', date.toISOString()); new Date(localStorage.getItem('date'))",
      "localStorage.setItem('date', date); localStorage.getItem('date')",
      "localStorage.storeObject('date', date); localStorage.getObject('date')",
      "Date objects cannot be stored in localStorage"
    ]
  },
  {
    "q": "What's the difference between getCurrentPosition() and watchPosition() errors?",
    "o": [
      "watchPosition() continues triggering errors if permissions change",
      "getCurrentPosition() has more detailed error codes",
      "watchPosition() cannot report errors",
      "There is no difference in error handling"
    ]
  },
  {
    "q": "What does this Fetch API code log for a 301 redirect?",
    "l": "javascript",
    "c": "fetch('https://old.example.com', { redirect: 'manual' })\n  .then(res => console.log(res.status));",
    "o": [
      "301 (manual mode exposes redirect status)",
      "200 (follows redirects anyway)",
      "0 (blocks cross-origin redirects)",
      "undefined (redirects can't be detected)"
    ]
  },
  {
    "q": "How do you completely prevent localStorage security leaks?",
    "o": [
      "Impossible - always assume localStorage can be read by attackers",
      "Use localStorage.secure = true",
      "Encrypt all data before storage",
      "Set document.allowStorage = false"
    ]
  },
  {
    "q": "What happens when you exceed localStorage quota?",
    "o": [
      "A QuotaExceededError is thrown",
      "The oldest items are automatically evicted",
      "The browser silently ignores new writes",
      "The entire localStorage is cleared"
    ]
  },
  {
    "q": "How would you implement retry logic for a failed Fetch request?",
    "o": [
      "Wrap fetch in a function with recursive retries and exponential backoff",
      "Use response.retry() method",
      "Set { retry: 3 } in fetch options",
      "Browser automatically retries failed fetches"
    ]
  },
  {
    "q": "What does this Geolocation code demonstrate?",
    "l": "javascript",
    "c": "const options = {\n  maximumAge: 30000,\n  timeout: 27000,\n  enableHighAccuracy: false\n};",
    "o": [
      "Performance-optimized location requests (cached results allowed, lower battery impact)",
      "Incorrect configuration that will always timeout",
      "Maximum precision configuration regardless of battery cost",
      "Settings that violate privacy regulations"
    ]
  },
  {
    "q": "What's the security implication of this Fetch code?",
    "l": "javascript",
    "c": "fetch(userInputURL)\n  .then(res => res.json())\n  .then(data => injectToDOM(data));",
    "o": [
      "Severe XSS risk from uncontrolled URL and direct DOM injection",
      "Potential CORS violation but otherwise safe",
      "Completely secure with built-in Fetch protections",
      "Risk of memory leaks but no security issues"
    ]
  },
  {
    "q": "How would you synchronize localStorage across browser tabs?",
    "o": [
      "Listen to window's 'storage' event",
      "Implement WebSockets between tabs",
      "Use sessionStorage instead",
      "Poll localStorage every second"
    ]
  },
  {
    "q": "What does this modern Fetch pattern accomplish?",
    "l": "javascript",
    "c": "const cacheKey = url;\nconst cached = localStorage.getItem(cacheKey);\nif (cached) return Promise.resolve(JSON.parse(cached));\n\nreturn fetch(url)\n  .then(res => res.json())\n  .then(data => {\n    localStorage.setItem(cacheKey, JSON.stringify(data));\n    return data;\n  });",
    "o": [
      "Implements simple client-side caching strategy",
      "Creates a memory leak by caching indefinitely",
      "Violates HTTP caching standards",
      "Bypasses service worker caches"
    ]
  },
  {
    "q": "What Geolocation API alternative works in non-secure (HTTP) contexts?",
    "o": [
      "Third-party IP geolocation services",
      "navigator.geolocation always works",
      "window.geo fallback API",
      "There are no alternatives for HTTP"
    ]
  },
  {
    "q": "What does this code reveal about localStorage security?",
    "l": "javascript",
    "c": "if (localStorage.getItem('admin') === 'true') {\n  showAdminPanel();\n}",
    "o": [
      "Client-side checks are trivially bypassable",
      "This is a secure authorization pattern",
      "Works only with HTTPS",
      "Automatically encrypts the admin flag"
    ]
  },
  {
    "q": "How would you stream a large Fetch response?",
    "o": [
      "Use response.body with ReadableStream",
      "Set { stream: true } in fetch options",
      "Fetch automatically streams by default",
      "Chunk the URL and make multiple requests"
    ]
  },
  {
    "q": "What's the purpose of maximumAge in Geolocation?",
    "o": [
      "Accept cached positions not older than this value (ms)",
      "Maximum time to wait for location acquisition",
      "How long to remember denied permissions",
      "Minimum refresh rate between position updates"
    ]
  },
  {
    "q": "What does this Fetch error handling pattern miss?",
    "l": "javascript",
    "c": "fetch(url)\n  .catch(err => console.error('Network error', err))\n  .then(res => res.json());",
    "o": [
      "HTTP error status handling (404, 500 etc.)",
      "JSON parsing error handling",
      "Nothing - this is complete error handling",
      "CORS error detection"
    ]
  },
  {
    "q": "How would you implement localStorage expiration?",
    "o": [
      "Store timestamp with data and check on retrieval",
      "Use localStorage.expire(key, time)",
      "Set document.cookie with same value",
      "localStorage auto-expires after 24h"
    ]
  },
  {
    "q": "What does this Geolocation code optimize for?",
    "l": "javascript",
    "c": "navigator.geolocation.watchPosition(\n  success,\n  null,\n  { maximumAge: Infinity }\n);",
    "o": [
      "Battery efficiency (uses cached position whenever available)",
      "Maximum precision (always fresh location)",
      "Privacy (minimizes location sharing)",
      "Nothing - this is invalid configuration"
    ]
  },
  {
    "q": "What's wrong with this localStorage encryption attempt?",
    "l": "javascript",
    "c": "localStorage.setItem('secret', btoa('password123'));",
    "o": [
      "Base64 isn't encryption - data is easily reversible",
      "Should use localStorage.encrypt() instead",
      "Strings can't be stored encrypted",
      "Nothing - this is secure"
    ]
  },
  {
    "q": "How would you mock Geolocation in tests?",
    "o": [
      "Override navigator.geolocation with stub methods",
      "Use navigator.mockGeolocation()",
      "Physical GPS spoofing hardware",
      "Geolocation can't be mocked"
    ]
  },
  {
    "q": "What is the primary security risk when using JSON.parse() with localStorage data?",
    "o": [
      "Malicious JSON could execute code during parsing",
      "It automatically grants cross-origin access",
      "It exposes data to service workers",
      "There are no security risks with JSON.parse()"
    ]
  },
  {
    "q": "How can you detect when a user clears localStorage?",
    "o": [
      "It's impossible to reliably detect after the fact",
      "Using the localStorage.onClear event",
      "Checking window.localStorageCleared flag",
      "Comparing Date.now() to localStorage.lastCleared"
    ]
  },
  {
    "q": "What does this Fetch API pattern solve?",
    "l": "javascript",
    "c": "const res = await fetch(url);\nif (!res.ok) throw new Error(await res.text());",
    "o": [
      "Proper error handling including server error messages",
      "Prevents CORS errors from being suppressed",
      "Enables automatic request retries",
      "Nothing - this is redundant error checking"
    ]
  },
  {
    "q": "Why would you use Object.defineProperty with localStorage?",
    "o": [
      "To create protected properties that can't be overwritten",
      "To improve localStorage performance",
      "To enable automatic JSON serialization",
      "There's no valid reason to do this"
    ]
  },
  {
    "q": "What's wrong with this Geolocation caching implementation?",
    "l": "javascript",
    "c": "let lastPosition;\nnavigator.geolocation.watchPosition(pos => {\n  lastPosition = pos;\n});\nfunction getCachedPosition() {\n  return lastPosition || null;\n}",
    "o": [
      "Doesn't account for position accuracy decay over time",
      "Should use sessionStorage instead of a variable",
      "Missing maximumAge parameter in watchPosition",
      "Nothing - this is a valid caching pattern"
    ]
  },
  {
    "q": "How does this Fetch wrapper improve security?",
    "l": "javascript",
    "c": "async function safeFetch(url) {\n  const parsed = new URL(url, window.location.href);\n  if (parsed.origin !== window.location.origin) throw new Error('Cross-origin blocked');\n  return fetch(parsed.href);\n}",
    "o": [
      "Prevents SSRF attacks by validating URLs",
      "Enables CORS for all requests",
      "Adds automatic CSRF token injection",
      "Nothing - this reduces functionality"
    ]
  },
  {
    "q": "What localStorage technique helps prevent race conditions?",
    "o": [
      "Implementing a mutex lock using storage events",
      "Using async/await with localStorage",
      "JSON.stringify() all operations",
      "localStorage is inherently race-condition free"
    ]
  },
  {
    "q": "What does this Geolocation code optimize?",
    "l": "javascript",
    "c": "const options = {\n  enableHighAccuracy: false,\n  maximumAge: 5 * 60 * 1000,\n  timeout: 15000\n};",
    "o": [
      "Mobile battery life by accepting slightly stale positions",
      "Precision by forcing GPS hardware usage",
      "Privacy by minimizing location updates",
      "Nothing - these options conflict with each other"
    ]
  },
  {
    "q": "Why would you subclass the Fetch API's Response object?",
    "o": [
      "To add custom response processing methods",
      "To bypass CORS restrictions",
      "To enable automatic retries",
      "Response objects can't be subclassed"
    ]
  },
  {
    "q": "What's the risk of storing sensitive data in localStorage?",
    "o": [
      "Accessible by any JavaScript running in the same origin",
      "Automatically synced to the cloud",
      "Gets sent with every HTTP request",
      "There are no risks with modern browsers"
    ]
  },
  {
    "q": "How does this Fetch pattern help with analytics?",
    "l": "javascript",
    "c": "const start = performance.now();\nfetch(url)\n  .finally(() => {\n    reportTiming(performance.now() - start);\n  });",
    "o": [
      "Measures actual network latency for monitoring",
      "Prevents requests from being cached",
      "Enables distributed tracing headers",
      "Nothing - this skews timing measurements"
    ]
  },
  {
    "q": "What's the purpose of the Geolocation clearWatch() method?",
    "o": [
      "Stop ongoing position monitoring to save resources",
      "Clear cached position data",
      "Reset location permission state",
      "Remove all stored watchPosition callbacks"
    ]
  },
  {
    "q": "Why would you use a Symbol as a localStorage key?",
    "o": [
      "Prevent naming collisions with third-party scripts",
      "Enable faster key lookups",
      "Automatically encrypt the stored value",
      "Symbols can't be used as localStorage keys"
    ]
  },
  {
    "q": "What does this Fetch API optimization accomplish?",
    "l": "javascript",
    "c": "const ac = new AbortController();\nsetTimeout(() => ac.abort(), 5000);\nfetch(url, { signal: ac.signal });",
    "o": [
      "Prevents hung requests from consuming resources indefinitely",
      "Enables faster TCP connection reuse",
      "Bypasses browser request throttling",
      "Nothing - this is an anti-pattern"
    ]
  },
  {
    "q": "How would you implement a localStorage quota monitor?",
    "o": [
      "Try/catch around setItem() with incremental test data",
      "Use navigator.storage.estimate()",
      "Check localStorage.remainingSpace property",
      "Calculate UTF-16 byte length of all items"
    ]
  },
  {
    "q": "What is the critical flaw in this localStorage high-availability pattern?",
    "l": "javascript",
    "c": "function getWithFallback(key) {\n  try {\n    return localStorage.getItem(key);\n  } catch (e) {\n    return sessionStorage.getItem(key);\n  }\n}",
    "o": [
      "sessionStorage won't have the data if localStorage fails (different scopes)",
      "Not using JSON.parse() for proper data handling",
      "Missing quota exceeded error handling",
      "Synchronous try-catch blocks are bad practice"
    ]
},
  {
    "q": "Why would you use a Web Worker with Geolocation API?",
    "o": [
      "To prevent UI thread jank during continuous position monitoring",
      "Web Workers provide more accurate GPS data",
      "To bypass browser permission prompts",
      "Geolocation only works in Workers"
    ]
},
  {
    "q": "What does this Fetch API optimization pattern achieve?",
    "l": "javascript",
    "c": "const cache = new Map();\nasync function fetchCached(url) {\n  if (cache.has(url)) {\n    return cache.get(url);\n  }\n  const promise = fetch(url).then(r => r.json());\n  cache.set(url, promise);\n  return promise;\n}",
    "o": [
      "Prevents duplicate concurrent requests for the same resource",
      "Creates an infinite memory leak by never clearing the cache",
      "Bypasses HTTP cache headers entirely",
      "Only works for JSON responses"
    ]
},
  {
    "q": "How does this Geolocation error handling improve UX?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  showMap,\n  err => {\n    if (err.code === err.TIMEOUT) suggestRetry();\n    if (err.code === err.PERMISSION_DENIED) showFallbackUI();\n  }\n);",
    "o": [
      "Provides context-specific recovery options for different failures",
      "Reduces the accuracy requirements for location services",
      "Automatically retries after errors",
      "Nothing - error codes are unreliable"
    ]
},
  {
    "q": "What's the security implication of this localStorage pattern?",
    "l": "javascript",
    "c": "const data = JSON.parse(localStorage.userData || '{}');\ndata.admin = true;\nlocalStorage.userData = JSON.stringify(data);",
    "o": [
      "Client-side elevation of privilege is trivial to exploit",
      "Potential XSS from unescaped JSON parsing",
      "Data corruption risk from concurrent writes",
      "No significant security issues"
    ]
},
  {
    "q": "Why would you use navigator.permissions.query() with Geolocation?",
    "o": [
      "To check permission state without triggering a prompt",
      "To get higher accuracy location data",
      "To bypass permission requirements entirely",
      "To support legacy browsers"
    ]
},
  {
    "q": "What does this Fetch wrapper implement?",
    "l": "javascript",
    "c": "async function fetchWithTimeout(url, ms, { signal } = {}) {\n  const controller = new AbortController();\n  const timeout = setTimeout(() => controller.abort(), ms);\n  \n  try {\n    return await fetch(url, { \n      ...signal && { signal },\n      signal: controller.signal \n    });\n  } finally {\n    clearTimeout(timeout);\n  }\n}",
    "o": [
      "Composable timeout and external abort signals",
      "Automatic retry on timeout failures",
      "Nested signal handling that may conflict",
      "Memory leak from uncleared timeout"
    ]
},
  {
    "q": "How does this localStorage technique support migrations?",
    "l": "javascript",
    "c": "const LEGACY_KEY = 'oldData';\nconst CURRENT_KEY = 'newData';\n\nif (localStorage.getItem(LEGACY_KEY) && !localStorage.getItem(CURRENT_KEY)) {\n  migrateData(JSON.parse(localStorage.getItem(LEGACY_KEY)));\n  localStorage.removeItem(LEGACY_KEY);\n}",
    "o": [
      "Safely transitions users from old to new data format",
      "Risk of data loss if migration fails",
      "Unnecessary since localStorage persists forever",
      "Slows down app startup with migration checks"
    ]
},
  {
    "q": "What's the purpose of the coords.altitudeAccuracy property?",
    "o": [
      "Indicates reliability of altitude measurement in meters",
      "Confirms GPS satellite lock quality",
      "Measures vertical movement speed",
      "No longer used in modern Geolocation"
    ]
},
  {
    "q": "Why is this Fetch error handling problematic?",
    "l": "javascript",
    "c": "fetch(url)\n  .then(res => {\n    if (!res.ok) throw new Error(res.status);\n    return res.json();\n  })\n  .catch(err => showError(err.message));",
    "o": [
      "Loses response body details from HTTP errors",
      "Should use res.text() instead of res.json()",
      "Missing network error handling",
      "Nothing - this is proper error handling"
    ]
},
  {
    "q": "What does this localStorage compression technique achieve?",
    "l": "javascript",
    "c": "function setCompressed(key, value) {\n  const compressed = LZString.compressToUTF16(JSON.stringify(value));\n  localStorage.setItem(key, compressed);\n}",
    "o": [
      "Bypasses storage quota by reducing size",
      "Automatically encrypts stored data",
      "Prevents XSS attacks through storage",
      "Nothing - compression hurts performance"
    ]
},
  {
    "q": "How does this Geolocation pattern optimize battery usage?",
    "l": "javascript",
    "c": "let watchId;\nfunction startTracking() {\n  watchId = navigator.geolocation.watchPosition(\n    updatePosition,\n    handleError,\n    { enableHighAccuracy: false, maximumAge: 30000 }\n  );\n}\nfunction pauseTracking() {\n  navigator.geolocation.clearWatch(watchId);\n}",
    "o": [
      "Allows disabling GPS when not needed",
      "Uses low-power location sources only",
      "Aggressively caches positions",
      "Nothing - watchPosition always drains battery"
    ]
},
  {
    "q": "What's the risk in this Fetch API caching strategy?",
    "l": "javascript",
    "c": "const cache = {};\nasync function fetchCached(url) {\n  if (!cache[url]) {\n    cache[url] = fetch(url).then(r => r.json());\n  }\n  return cache[url];\n}",
    "o": [
      "Memory leaks from never evicting cache entries",
      "Ignores HTTP caching headers completely",
      "Race conditions during cache population",
      "No risks - this is a solid pattern"
    ]
},
  {
    "q": "Why would you use WeakMap with localStorage data?",
    "o": [
      "To associate private metadata without extending storage lifetime",
      "WeakMap automatically serializes to localStorage",
      "To bypass same-origin restrictions",
      "There's no reason to combine these"
    ]
},
  {
    "q": "What does this progressive enhancement pattern for Geolocation achieve?",
    "l": "javascript",
    "c": "function getPosition() {\n  return new Promise((resolve) => {\n    if (!navigator.geolocation) {\n      resolve(fallbackIPGeolocation());\n    } else {\n      navigator.geolocation.getCurrentPosition(resolve, () => {\n        resolve(fallbackIPGeolocation());\n      });\n    }\n  });\n}",
    "o": [
      "Guarantees some location data even when GPS fails",
      "Violates user privacy by ignoring denials",
      "Slower than using either API alone",
      "Nothing - the fallback will never trigger"
    ]
},
  {
    "q": "What is the critical performance consideration when using localStorage in a SPA?",
    "o": [
      "Frequent synchronous access can block the main thread",
      "LocalStorage operations are always asynchronous",
      "JSON serialization overhead is negligible",
      "Storage events degrade React rendering"
    ]
},
  {
    "q": "How does this Geolocation optimization pattern reduce power consumption?",
    "l": "javascript",
    "c": "let watchId;\nfunction startTracking() {\n  const options = {\n    enableHighAccuracy: false,\n    maximumAge: 60000,\n    timeout: 5000\n  };\n  watchId = navigator.geolocation.watchPosition(update, error, options);\n}",
    "o": [
      "Uses cached locations and avoids continuous GPS activation",
      "Disables all hardware sensors",
      "Short timeout prevents any location acquisition",
      "Actually increases power by forcing faster timeouts"
    ]
},
  {
    "q": "What architectural benefit does this Fetch wrapper provide?",
    "l": "javascript",
    "c": "const api = {\n  get: (endpoint) => fetchWithCache(`/api/${endpoint}`),\n  post: (endpoint, body) => fetch(`/api/${endpoint}`, {\n    method: 'POST',\n    body: JSON.stringify(body)\n  })\n};",
    "o": [
      "Centralized API surface with consistent behavior",
      "Automatic CSRF protection",
      "Built-in request retry logic",
      "WebSocket fallback support"
    ]
},
  {
    "q": "Why is this localStorage data structure pattern problematic?",
    "l": "javascript",
    "c": "localStorage.setItem('users', JSON.stringify({\n  'user1': { name: 'Alice' },\n  'user2': { name: 'Bob' }\n}));",
    "o": [
      "Whole-object writes cause unnecessary I/O overhead",
      "Lacks compression for names",
      "Should use Array instead of Object",
      "No problems - this is optimal"
    ]
},
  {
    "q": "What does this Fetch API timeout implementation lack?",
    "l": "javascript",
    "c": "function fetchWithTimeout(url, timeout) {\n  return Promise.race([\n    fetch(url),\n    new Promise((_, reject) => \n      setTimeout(() => reject(new Error('Timeout')), timeout)\n    )\n  ]);\n}",
    "o": [
      "Request cancellation cleanup",
      "Proper error type checking",
      "Both A and B",
      "Nothing - this is complete"
    ]
},
  {
    "q": "How does this Geolocation error recovery strategy improve reliability?",
    "l": "javascript",
    "c": "async function getLocation(retries = 3) {\n  try {\n    return await new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(resolve, reject, {\n        enableHighAccuracy: false,\n        timeout: 10000\n      });\n    });\n  } catch (err) {\n    if (retries > 0) return getLocation(retries - 1);\n    throw err;\n  }\n}",
    "o": [
      "Automatic retries with decaying accuracy requirements",
      "Forces high accuracy after failures",
      "Circumvents user permissions",
      "Actually decreases reliability by catching errors"
    ]
},
  {
    "q": "What security measure does this localStorage pattern violate?",
    "l": "javascript",
    "c": "function saveAuthToken(token) {\n  localStorage.authToken = token;\n  localStorage.tokenExpiry = Date.now() + 3600000;\n}",
    "o": [
      "Storing sensitive tokens in unencrypted storage",
      "Not using JSON.stringify()",
      "Setting properties directly instead of setItem()",
      "No security violations"
    ]
},
  {
    "q": "What does this Fetch API middleware architecture enable?",
    "l": "javascript",
    "c": "const middleware = [\n  addBaseUrl,\n  addAuthHeader,\n  handleErrors,\n  parseJSON\n];\n\nconst fetchWithMiddleware = middleware.reduce(\n  (chain, fn) => chain.then(fn), \n  Promise.resolve()\n);",
    "o": [
      "Composable request/response transformations",
      "Automatic request deduplication",
      "Built-in offline caching",
      "Nothing - middleware is redundant"
    ]
},
  {
    "q": "Why is this localStorage size monitoring approach flawed?",
    "l": "javascript",
    "c": "function getUsedSpace() {\n  return Object.keys(localStorage)\n    .map(k => k.length + localStorage[k].length)\n    .reduce((a,b) => a + b, 0);\n}",
    "o": [
      "Underestimates by ignoring storage overhead",
      "Blocks main thread with synchronous ops",
      "Both A and B",
      "Provides accurate measurements"
    ]
},
  {
    "q": "What does this Geolocation permission flow optimize for?",
    "l": "javascript",
    "c": "async function requestLocation() {\n  const { state } = await navigator.permissions.query({ name: 'geolocation' });\n  if (state === 'granted') return getPosition();\n  if (state === 'prompt') return showCustomPrompt();\n  return useFallback();\n}",
    "o": [
      "User experience by avoiding redundant prompts",
      "Location accuracy at all costs",
      "Battery consumption over precision",
      "Nothing - permissions API is unreliable"
    ]
},
  {
    "q": "What's the primary benefit of this Fetch caching strategy?",
    "l": "javascript",
    "c": "const cache = new Map();\nwindow.addEventListener('unload', () => {\n  localStorage.cache = JSON.stringify([...cache]);\n});",
    "o": [
      "Persists cache across sessions without constant I/O",
      "Automatically clears stale entries",
      "Works in service workers",
      "Nothing - Map can't be serialized"
    ]
},
  {
    "q": "Why would you implement a write queue for localStorage?",
    "o": [
      "To prevent main thread blocking during rapid updates",
      "localStorage requires ordered writes",
      "To bypass storage quotas",
      "Queues are unnecessary for storage APIs"
    ]
},
  {
    "q": "What does this Geolocation watch optimization accomplish?",
    "l": "javascript",
    "c": "let lastPos;\nconst watchId = navigator.geolocation.watchPosition(pos => {\n  if (!lastPos || haversine(pos, lastPos) > 100) {\n    lastPos = pos;\n    updateMap(pos);\n  }\n});",
    "o": [
      "Throttles updates to significant location changes",
      "Ensures high accuracy at all times",
      "Circumvents maximumAge restrictions",
      "Nothing - this is an anti-pattern"
    ]
},
  {
    "q": "What's missing from this secure Fetch implementation?",
    "l": "javascript",
    "c": "async function secureFetch(url, body) {\n  const res = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers: { \n      'Content-Type': 'application/json',\n      'X-CSRF-Token': getCSRFToken()\n    }\n  });\n  return res.json();\n}",
    "o": [
      "Response validation and error handling",
      "CORS mode configuration",
      "Both A and B",
      "Nothing - this is fully secure"
    ]
},
  {
    "q": "Why is this localStorage abstraction more maintainable?",
    "l": "javascript",
    "c": "const storage = {\n  get: (key) => {\n    const value = localStorage.getItem(key);\n    try { return JSON.parse(value); } \n    catch { return value; }\n  },\n  set: (key, value) => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n};",
    "o": [
      "Centralized serialization/deserialization logic",
      "Automatic compression",
      "Built-in expiry handling",
      "Nothing - adds unnecessary complexity"
    ]
},
  {
    "q": "What is the primary architectural advantage of this Fetch API wrapper pattern?",
    "l": "javascript",
    "c": "const apiClient = (baseURL) => {\n  const client = (endpoint, config) => \n    fetch(`${baseURL}${endpoint}`, config)\n      .then(handleErrors);\n\n  return {\n    get: (endpoint) => client(endpoint),\n    post: (endpoint, body) => \n      client(endpoint, { method: 'POST', body: JSON.stringify(body) })\n  };\n}",
    "o": [
      "Encapsulates API domain and provides method-specific interfaces",
      "Forces all requests to be GET or POST only",
      "Prevents the use of custom fetch options",
      "Just syntactic sugar with no real benefit"
    ]
},
  {
    "q": "Why would you implement a write-behind queue for localStorage in a analytics-heavy app?",
    "o": [
      "To batch storage operations and prevent main thread jank during high-volume events",
      "Because localStorage requires ordered writes for analytics data",
      "To bypass the 5MB storage limit",
      "localStorage automatically queues writes so this is redundant"
    ]
},
  {
    "q": "What does this advanced Geolocation pattern optimize for?",
    "l": "javascript",
    "c": "function getPreciseLocation() {\n  return new Promise((resolve) => {\n    const watchId = navigator.geolocation.watchPosition(\n      pos => {\n        if (pos.coords.accuracy < 50) {\n          navigator.geolocation.clearWatch(watchId);\n          resolve(pos);\n        }\n      },\n      null,\n      { enableHighAccuracy: true }\n    );\n  });\n}",
    "o": [
      "Waits for high-accuracy GPS lock before resolving",
      "Continuously monitors location after meeting threshold",
      "Settles for the first available position regardless of accuracy",
      "Prioritizes battery life over precision"
    ]
},
  {
    "q": "What is the critical race condition risk in this localStorage transaction pattern?",
    "l": "javascript",
    "c": "function incrementCounter() {\n  const count = parseInt(localStorage.getItem('count') || 0);\n  localStorage.setItem('count', count + 1);\n}",
    "o": [
      "Concurrent tabs can overwrite each other's increments",
      "JSON parsing might fail on corrupted data",
      "Integer overflow isn't handled",
      "No race conditions exist with localStorage"
    ]
},
  {
    "q": "Why would you implement a hybrid caching strategy with both localStorage and IndexedDB for Fetch responses?",
    "o": [
      "To leverage localStorage speed for small assets while using IndexedDB for large payloads",
      "Because IndexedDB can't store Fetch responses",
      "To work around IndexedDB's 5MB limit",
      "localStorage provides better query capabilities than IndexedDB"
    ]
},
  {
    "q": "What does this Fetch API timeout enhancement improve over basic implementations?",
    "l": "javascript",
    "c": "async function fetchWithTimeout(url, options = {}, timeout = 5000) {\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), timeout);\n  \n  try {\n    const response = await fetch(url, { \n      ...options, \n      signal: controller.signal \n    });\n    clearTimeout(timeoutId);\n    return response;\n  } catch (err) {\n    clearTimeout(timeoutId);\n    if (err.name === 'AbortError') {\n      throw new Error(`Request timed out after ${timeout}ms`);\n    }\n    throw err;\n  }\n}",
    "o": [
      "Proper cleanup and typed timeout errors",
      "Automatic retry on timeout failures",
      "Support for progress events",
      "Nothing - equivalent to basic timeout patterns"
    ]
},
  {
    "q": "What is the primary benefit of this Geolocation permission flow?",
    "l": "javascript",
    "c": "async function requestLocationAccess() {\n  try {\n    const { state } = await navigator.permissions.query({ name: 'geolocation' });\n    if (state === 'denied') return false;\n    \n    const position = await new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(resolve, reject, {\n        enableHighAccuracy: false,\n        timeout: 10000\n      });\n    });\n    \n    return position.coords.accuracy < 1000;\n  } catch {\n    return false;\n  }\n}",
    "o": [
      "Verifies both permission and minimum usable accuracy",
      "Always forces high accuracy mode",
      "Bypasses permission prompts entirely",
      "Just combines existing APIs with no added value"
    ]
},
  {
    "q": "Why would you implement a versioned schema for localStorage data?",
    "o": [
      "To enable seamless migrations when data structures evolve",
      "Because localStorage automatically versions stored data",
      "To work around browser compatibility issues",
      "Versioning is only needed for IndexedDB"
    ]
},
  {
    "q": "What does this Fetch middleware pattern enable that simple wrappers cannot?",
    "l": "javascript",
    "c": "function createFetchStack(middleware) {\n  return (input, init) => {\n    let index = 0;\n    const next = () => {\n      const layer = middleware[index++];\n      return layer(input, init, next);\n    };\n    return next();\n  };\n}",
    "o": [
      "Conditional middleware processing and short-circuiting",
      "Automatic request deduplication",
      "Built-in offline caching support",
      "Nothing - this is just a more complex wrapper"
    ]
},
  {
    "q": "What is the primary risk in this localStorage capacity detection approach?",
    "l": "javascript",
    "c": "function getRemainingSpace() {\n  let data = '';\n  try {\n    while (true) {\n      data += 'x'.repeat(1024 * 1024);\n      localStorage.setItem('test', data);\n    }\n  } catch (e) {\n    localStorage.removeItem('test');\n    return data.length;\n  }\n}",
    "o": [
      "Blocks main thread and may crash the tab during measurement",
      "Doesn't account for storage overhead per key",
      "Both A and B",
      "Provides perfectly accurate measurements safely"
    ]
},
  {
    "q": "Why would you combine Web Locks API with Geolocation watchPosition?",
    "o": [
      "To prevent multiple tabs from concurrently activating GPS hardware",
      "Because watchPosition requires lock permission",
      "To synchronize locations across browser tabs",
      "Web Locks have no relation to Geolocation"
    ]
},
  {
    "q": "What does this localStorage transaction pattern solve?",
    "l": "javascript",
    "c": "function transactionalUpdate(key, updater) {\n  window.addEventListener('storage', function listener(event) {\n    if (event.key === key) {\n      window.removeEventListener('storage', listener);\n      transactionalUpdate(key, updater);\n    }\n  });\n  \n  const currentValue = JSON.parse(localStorage.getItem(key));\n  const newValue = updater(currentValue);\n  localStorage.setItem(key, JSON.stringify(newValue));\n}",
    "o": [
      "Cross-tab race conditions during updates",
      "JSON serialization errors",
      "Storage quota exceeded errors",
      "Nothing - localStorage is inherently transactional"
    ]
},
  {
    "q": "What does this advanced Fetch caching strategy optimize?",
    "l": "javascript",
    "c": "const cache = new Map();\nconst inflight = new Map();\n\nasync function cachedFetch(url) {\n  if (cache.has(url)) return cache.get(url);\n  if (inflight.has(url)) return inflight.get(url);\n  \n  const promise = fetch(url)\n    .then(res => res.json())\n    .then(data => {\n      cache.set(url, data);\n      inflight.delete(url);\n      return data;\n    })\n    .catch(err => {\n      inflight.delete(url);\n      throw err;\n    });\n  \n  inflight.set(url, promise);\n  return promise;\n}",
    "o": [
      "Prevents duplicate concurrent requests while caching results",
      "Automatically purges stale cache entries",
      "Works in service worker contexts",
      "Nothing - just reimplements basic memoization"
    ]
},
  {
    "q": "Why would you implement exponential backoff for failed Geolocation requests?",
    "o": [
      "To progressively relax accuracy requirements after failures",
      "Because the Geolocation API requires it",
      "To circumvent browser permission denials",
      "Just to demonstrate clever coding"
    ]
},
  {
    "q": "What is the primary benefit of this localStorage proxy pattern?",
    "l": "javascript",
    "c": "const storage = new Proxy(localStorage, {\n  get(target, prop) {\n    const value = target.getItem(prop);\n    try { return JSON.parse(value); }\n    catch { return value; }\n  },\n  set(target, prop, value) {\n    target.setItem(prop, JSON.stringify(value));\n    return true;\n  }\n});",
    "o": [
      "Transparent serialization without wrapper function calls",
      "Automatic data compression",
      "Built-in TTL expiration",
      "Nothing - proxies are slower than direct access"
    ]
},
  {
    "q": "What is the primary advantage of using AbortController with Fetch API in a React application?",
    "o": [
      "Prevents memory leaks by canceling pending requests on component unmount",
      "Automatically retries failed requests",
      "Improves request performance by reducing headers",
      "Bypasses CORS restrictions"
    ]
},
  {
    "q": "Why would you implement a write-ahead log for localStorage in a financial application?",
    "o": [
      "To ensure data integrity and recovery if writes fail mid-operation",
      "Because localStorage has a 1MB limit in financial apps",
      "To comply with banking encryption standards",
      "localStorage automatically logs writes so this is redundant"
    ]
},
  {
    "q": "What does this advanced Geolocation smoothing algorithm accomplish?",
    "l": "javascript",
    "c": "let positions = [];\nfunction smoothPosition(newPos) {\n  positions.push(newPos);\n  if (positions.length > 5) positions.shift();\n  \n  return {\n    latitude: median(positions.map(p => p.coords.latitude)),\n    longitude: median(positions.map(p => p.coords.longitude)),\n    accuracy: Math.max(...positions.map(p => p.coords.accuracy))\n  };\n}",
    "o": [
      "Reduces GPS jitter by using a moving median filter",
      "Increases accuracy by averaging raw coordinates",
      "Decreases battery usage by throttling updates",
      "Nothing - this actually decreases location quality"
    ]
},
  {
    "q": "What is the critical race condition in this localStorage transaction pattern?",
    "l": "javascript",
    "c": "function transfer(fromKey, toKey, amount) {\n  const fromVal = parseInt(localStorage.getItem(fromKey));\n  const toVal = parseInt(localStorage.getItem(toKey));\n  \n  localStorage.setItem(fromKey, fromVal - amount);\n  localStorage.setItem(toKey, toVal + amount);\n}",
    "o": [
      "Interleaved reads/writes between tabs can cause balance inconsistencies",
      "Missing error handling for NaN values",
      "Integer overflow isn't prevented",
      "No race conditions exist with localStorage"
    ]
},
  {
    "q": "Why would you implement a Bloom filter for localStorage key existence checks?",
    "o": [
      "To reduce expensive key scans with probabilistic existence checks",
      "Because localStorage lacks a native .exists() method",
      "To work around the 5MB storage limit",
      "Bloom filters are only useful for server-side databases"
    ]
},
  {
    "q": "What does this Fetch API circuit breaker pattern improve?",
    "l": "javascript",
    "c": "function createCircuitBreaker(fn, timeout, threshold) {\n  let failures = 0;\n  let lastFailure = 0;\n  \n  return async (...args) => {\n    if (failures >= threshold && Date.now() - lastFailure < timeout) {\n      throw new Error('Service unavailable');\n    }\n    \n    try {\n      const result = await fn(...args);\n      failures = 0;\n      return result;\n    } catch (err) {\n      failures++;\n      lastFailure = Date.now();\n      throw err;\n    }\n  };\n}",
    "o": [
      "Prevents cascading failures by temporarily blocking after repeated errors",
      "Automatically retries failed requests with exponential backoff",
      "Improves request latency by caching failed responses",
      "Nothing - this is just redundant error handling"
    ]
},
  {
    "q": "What is the primary benefit of this dual-layer Geolocation strategy?",
    "l": "javascript",
    "c": "async function getBestLocation() {\n  try {\n    const precise = await getPreciseLocation(); // Uses GPS\n    if (precise.accuracy < 100) return precise;\n  } catch {\n    // Fall through to IP-based\n  }\n  return await getIPLocation(); // Less accurate but always works\n}",
    "o": [
      "Balances accuracy with reliability across different environments",
      "Guarantees the highest possible accuracy at all times",
      "Reduces battery usage by avoiding GPS entirely",
      "Nothing - just adds unnecessary complexity"
    ]
},
  {
    "q": "Why would you implement a Merkle tree for localStorage data validation?",
    "o": [
      "To efficiently detect tampering or corruption in large datasets",
      "Because localStorage requires hash trees for encryption",
      "To work around the key enumeration limitation",
      "Merkle trees are only useful for blockchain applications"
    ]
},
  {
    "q": "What does this Fetch API request deduplication pattern optimize?",
    "l": "javascript",
    "c": "const inflight = new Map();\n\nasync function dedupedFetch(url) {\n  if (inflight.has(url)) {\n    return inflight.get(url);\n  }\n  \n  const promise = fetch(url).finally(() => {\n    inflight.delete(url);\n  });\n  \n  inflight.set(url, promise);\n  return promise;\n}",
    "o": [
      "Prevents duplicate concurrent requests for the same resource",
      "Improves cache hit rates by normalizing URLs",
      "Automatically retries failed requests",
      "Nothing - fetch already handles deduplication"
    ]
},
  {
    "q": "What is the primary risk in this localStorage compression technique?",
    "l": "javascript",
    "c": "function setCompressed(key, value) {\n  const compressed = LZString.compressToUTF16(JSON.stringify(value));\n  if (compressed.length > 500000) {\n    localStorage.setItem(key, compressed.slice(0, 500000));\n  } else {\n    localStorage.setItem(key, compressed);\n  }\n}",
    "o": [
      "Silent data corruption from truncation without checksums",
      "Increased memory usage during compression",
      "Slower read performance due to decompression",
      "No risks - this is a safe optimization"
    ]
},
  {
    "q": "Why would you implement a priority queue for Geolocation updates?",
    "o": [
      "To dynamically adjust accuracy based on application state changes",
      "Because watchPosition requires ordered callbacks",
      "To work around the 1Hz update limit",
      "Priority queues are useless for Geolocation"
    ]
},
  {
    "q": "What does this localStorage sharding pattern solve?",
    "l": "javascript",
    "c": "function setLargeData(key, data) {\n  const chunks = [];\n  for (let i = 0; i < data.length; i += 50000) {\n    const chunkKey = `${key}_chunk_${i}`;\n    const chunk = data.slice(i, i + 50000);\n    localStorage.setItem(chunkKey, chunk);\n    chunks.push(chunkKey);\n  }\n  localStorage.setItem(key, JSON.stringify(chunks));\n}",
    "o": [
      "Storing data larger than individual key limits by splitting across multiple keys",
      "Improving read performance through parallel loading",
      "Adding automatic encryption to stored data",
      "Nothing - localStorage doesn't need sharding"
    ]
},
  {
    "q": "What does this Fetch API progress tracking pattern enable?",
    "l": "javascript",
    "c": "async function fetchWithProgress(url, onProgress) {\n  const response = await fetch(url);\n  const reader = response.body.getReader();\n  \n  let received = 0;\n  const chunks = [];\n  \n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) break;\n    \n    chunks.push(value);\n    received += value.length;\n    onProgress(received);\n  }\n  \n  return new Blob(chunks);\n}",
    "o": [
      "Real-time download progress monitoring for large files",
      "Automatic retry of failed chunks",
      "Improved throughput via parallel downloading",
      "Nothing - fetch already provides progress events"
    ]
},
  {
    "q": "Why would you implement a dead reckoning system with Geolocation?",
    "o": [
      "To provide smooth position updates between GPS fixes using inertial estimation",
      "Because watchPosition doesn't work on mobile devices",
      "To reduce the accuracy requirements for banking apps",
      "Dead reckoning is only used in marine navigation systems"
    ]
},
  {
    "q": "What is the primary benefit of this localStorage proxy revocation pattern?",
    "l": "javascript",
    "c": "function createSecureStorage() {\n  const handler = {\n    get(target, prop) {\n      if (prop === 'revoke') {\n        return () => { handler.get = () => throw new Error('Revoked'); };\n      }\n      return localStorage.getItem(prop);\n    }\n  };\n  \n  return new Proxy({}, handler);\n}",
    "o": [
      "Provides temporary access that can be programmatically revoked",
      "Automatically encrypts all stored values",
      "Improves performance by lazy-loading keys",
      "Nothing - this is just a complex wrapper"
    ]
},
  {
    "q": "What is the primary advantage of using a Service Worker with the Fetch API for caching strategies?",
    "o": [
      "Enables offline functionality and network resilience",
      "Automatically compresses all responses",
      "Bypasses CORS restrictions",
      "Eliminates the need for localStorage"
    ]
},
  {
    "q": "Why would you implement a Least Recently Used (LRU) cache eviction policy for localStorage?",
    "o": [
      "To intelligently manage storage limits by removing oldest unused items",
      "Because localStorage automatically implements LRU",
      "To comply with GDPR data retention policies",
      "LRU is only useful for server-side caching"
    ]
},
  {
    "q": "What does this advanced Geolocation drift correction algorithm accomplish?",
    "l": "javascript",
    "c": "function correctDrift(position, lastPosition) {\n  const DISTANCE_THRESHOLD = 50; // meters\n  const bearing = calculateBearing(lastPosition, position);\n  const expected = calculateNewPosition(lastPosition, bearing);\n  \n  if (haversine(position, expected) > DISTANCE_THRESHOLD) {\n    return interpolatePosition(lastPosition, expected);\n  }\n  return position;\n}",
    "o": [
      "Filters out implausible GPS jumps using movement prediction",
      "Increases accuracy by averaging multiple satellites",
      "Reduces battery usage by disabling GPS between updates",
      "Nothing - this actually introduces more location errors"
    ]
},
  {
    "q": "What is the critical security vulnerability in this localStorage authentication pattern?",
    "l": "javascript",
    "c": "function login(user) {\n  localStorage.setItem('auth', JSON.stringify({\n    user: user.email,\n    token: user.token,\n    expires: Date.now() + 3600000\n  }));\n}",
    "o": [
      "Storing sensitive tokens in localStorage makes them vulnerable to XSS",
      "Missing password hashing before storage",
      "Not setting the Secure flag on cookies",
      "No vulnerability - this is a secure pattern"
    ]
},
  {
    "q": "Why would you implement HTTP/2 Server Push with the Fetch API?",
    "o": [
      "To preemptively send resources before the client requests them",
      "Because Fetch requires HTTP/2 for all requests",
      "To work around browser connection limits",
      "HTTP/2 Push is incompatible with Fetch"
    ]
},
  {
    "q": "What does this localStorage namespacing pattern prevent?",
    "l": "javascript",
    "c": "const storage = {\n  get: (key) => localStorage.getItem(`myapp_${key}`),\n  set: (key, value) => localStorage.setItem(`myapp_${key}`, value)\n};",
    "o": [
      "Key collisions with other scripts using localStorage",
      "XSS attacks on stored data",
      "Automatic data expiration",
      "Nothing - this is just syntactic sugar"
    ]
},
  {
    "q": "What is the primary benefit of this Fetch API request batching pattern?",
    "l": "javascript",
    "c": "async function batchRequests(urls) {\n  const batchId = Date.now();\n  const response = await fetch('/batch', {\n    method: 'POST',\n    body: JSON.stringify({ batchId, urls })\n  });\n  return response.json();\n}",
    "o": [
      "Reduces HTTP overhead by combining multiple requests",
      "Automatically retries failed requests",
      "Improves caching efficiency",
      "Nothing - this is just a wrapper"
    ]
},
  {
    "q": "Why would you implement a TTL (Time-To-Live) mechanism for localStorage?",
    "o": [
      "To automatically expire stale data according to business rules",
      "Because localStorage has a 24-hour expiration limit",
      "To comply with EU data protection laws",
      "TTL is only useful for sessionStorage"
    ]
},
  {
    "q": "What does this Geolocation dead zone handling pattern accomplish?",
    "l": "javascript",
    "c": "let lastGoodPosition;\n\nfunction handlePosition(position) {\n  if (position.coords.accuracy < 100) {\n    lastGoodPosition = position;\n    updateMap(position);\n  } else if (lastGoodPosition) {\n    updateMap(lastGoodPosition); // Revert to last known good\n  }\n}",
    "o": [
      "Maintains UI stability during temporary GPS degradation",
      "Increases accuracy by ignoring bad signals",
      "Reduces battery usage in urban areas",
      "Nothing - this causes position jumps"
    ]
},
  {
    "q": "What is the critical performance consideration in this localStorage bulk read pattern?",
    "l": "javascript",
    "c": "function getAllItems() {\n  return Object.keys(localStorage).reduce((acc, key) => {\n    acc[key] = localStorage.getItem(key);\n    return acc;\n  }, {});\n}",
    "o": [
      "Synchronous iteration blocks the main thread with large datasets",
      "Missing error handling for corrupted data",
      "Not using JSON.parse() for all values",
      "No performance issues - this is optimal"
    ]
},
  {
    "q": "Why would you implement request prioritization with the Fetch API?",
    "o": [
      "To ensure critical resources load first during bandwidth contention",
      "Because browsers process requests in random order",
      "To work around HTTP/2 connection limits",
      "Fetch automatically prioritizes requests"
    ]
},
  {
    "q": "What does this localStorage data versioning pattern enable?",
    "l": "javascript",
    "c": "function getData() {\n  const data = JSON.parse(localStorage.getItem('data'));\n  if (!data || data.version !== CURRENT_VERSION) {\n    return migrateData(data);\n  }\n  return data;\n}",
    "o": [
      "Seamless schema migrations between application versions",
      "Automatic compression of old data",
      "Compliance with data protection laws",
      "Nothing - versioning is handled automatically"
    ]
},
  {
    "q": "What is the primary benefit of this Fetch API proxy pattern?",
    "l": "javascript",
    "c": "function createApiProxy(endpoints) {\n  return new Proxy({}, {\n    get(target, prop) {\n      return endpoints[prop] \n        ? (data) => fetch(endpoints[prop], data)\n        : undefined;\n    }\n  });\n}",
    "o": [
      "Dynamic endpoint mapping with a clean interface",
      "Automatic retry of failed requests",
      "Built-in response caching",
      "Nothing - just adds unnecessary complexity"
    ]
},
  {
    "q": "Why would you implement a heartbeat with Geolocation watchPosition?",
    "o": [
      "To detect when the browser stops sending updates silently",
      "Because watchPosition requires periodic heartbeats",
      "To reduce accuracy during stationary periods",
      "Heartbeats are only useful for WebSockets"
    ]
},
  {
    "q": "What does this localStorage memory management pattern solve?",
    "l": "javascript",
    "c": "function cleanupStorage() {\n  const threshold = Date.now() - 30 * 24 * 60 * 60 * 1000; // 30 days\n  Object.keys(localStorage).forEach(key => {\n    const item = JSON.parse(localStorage.getItem(key));\n    if (item.lastAccessed < threshold) {\n      localStorage.removeItem(key);\n    }\n  });\n}",
    "o": [
      "Automatic removal of stale data based on usage patterns",
      "Fragmentation of the localStorage database",
      "Corruption of serialized JSON data",
      "Nothing - localStorage doesn't need cleanup"
    ]
},
  {
    "q": "What is the primary benefit of using the Cache API with Fetch in a PWA?",
    "o": [
      "Enables full offline functionality with programmatic cache control",
      "Automatically handles CORS requirements",
      "Provides larger storage than localStorage",
      "Eliminates the need for service workers"
    ]
},
  {
    "q": "Why would you implement a binary search algorithm for localStorage key lookups?",
    "o": [
      "To optimize performance when dealing with sorted timestamped keys",
      "Because localStorage.keys() returns sorted results",
      "To work around the 5MB storage limit",
      "Binary search is only useful for server databases"
    ]
},
  {
    "q": "What does this advanced Geolocation sensor fusion pattern accomplish?",
    "l": "javascript",
    "c": "function fuseSensors(gpsPos, deviceOrientation) {\n  const adjustedPos = {\n    ...gpsPos.coords,\n    heading: deviceOrientation.alpha\n  };\n  \n  if (deviceOrientation.acceleration) {\n    adjustedPos.speed = Math.sqrt(\n      deviceOrientation.acceleration.x**2 +\n      deviceOrientation.acceleration.y**2\n    );\n  }\n  \n  return adjustedPos;\n}",
    "o": [
      "Combines multiple device sensors for more accurate positioning",
      "Reduces battery usage by disabling GPS",
      "Circumvents browser permission requirements",
      "Nothing - this introduces more error sources"
    ]
},
  {
    "q": "What is the critical race condition in this localStorage transaction pattern?",
    "l": "javascript",
    "c": "function debitAccount(accountId, amount) {\n  const balance = Number(localStorage.getItem(accountId));\n  if (balance >= amount) {\n    localStorage.setItem(accountId, balance - amount);\n    return true;\n  }\n  return false;\n}",
    "o": [
      "Concurrent debits could overdraft the account",
      "Missing error handling for NaN values",
      "Integer overflow isn't prevented",
      "No race conditions exist with localStorage"
    ]
},
  {
    "q": "Why would you implement a delta encoding strategy for localStorage updates?",
    "o": [
      "To minimize write operations by only storing changed data",
      "Because localStorage requires delta encoding for large objects",
      "To automatically compress stored values",
      "Delta encoding is only useful for video streaming"
    ]
},
  {
    "q": "What does this Fetch API request coalescing pattern optimize?",
    "l": "javascript",
    "c": "const inflight = new Map();\n\nasync function coalescedFetch(url) {\n  if (inflight.has(url)) {\n    return inflight.get(url);\n  }\n  \n  const promise = fetch(url)\n    .then(res => res.json())\n    .finally(() => inflight.delete(url));\n  \n  inflight.set(url, promise);\n  return promise;\n}",
    "o": [
      "Prevents duplicate concurrent requests for the same resource",
      "Automatically retries failed requests",
      "Improves cache hit rates by normalizing URLs",
      "Nothing - fetch already handles deduplication"
    ]
},
  {
    "q": "What is the primary security risk in this localStorage pattern?",
    "l": "javascript",
    "c": "function storeUser(user) {\n  localStorage.user = JSON.stringify({\n    ...user,\n    isAdmin: user.email.endsWith('@admin.com')\n  });\n}",
    "o": [
      "Client-side privilege escalation is trivial to exploit",
      "Missing data validation before storage",
      "Potential XSS from unescaped JSON",
      "No significant security issues"
    ]
},
  {
    "q": "Why would you implement a priority-based queue for Geolocation updates?",
    "o": [
      "To dynamically adjust accuracy based on application state",
      "Because watchPosition requires ordered callbacks",
      "To work around the 1Hz update limit",
      "Priority queues are useless for Geolocation"
    ]
},
  {
    "q": "What does this Fetch API middleware chain enable?",
    "l": "javascript",
    "c": "const chain = [auth, logging, caching];\n\nasync function processRequest(input, init) {\n  let result = { input, init };\n  for (const middleware of chain) {\n    result = await middleware(result);\n  }\n  return fetch(result.input, result.init);\n}",
    "o": [
      "Composable cross-cutting concerns for requests",
      "Automatic retry of failed middleware",
      "Built-in offline caching support",
      "Nothing - this is just a complex wrapper"
    ]
},
  {
    "q": "What is the primary benefit of this localStorage sharding pattern?",
    "l": "javascript",
    "c": "function storeLargeData(key, data) {\n  const shards = [];\n  for (let i = 0; i < data.length; i += 100000) {\n    const shardKey = `${key}_shard_${i}`;\n    localStorage.setItem(shardKey, data.slice(i, i + 100000));\n    shards.push(shardKey);\n  }\n  localStorage.setItem(key, JSON.stringify(shards));\n}",
    "o": [
      "Stores data exceeding per-key size limits",
      "Automatically encrypts large values",
      "Improves read performance through parallel loading",
      "Nothing - localStorage doesn't need sharding"
    ]
},
  {
    "q": "Why would you implement exponential backoff for failed Geolocation requests?",
    "o": [
      "To progressively relax accuracy requirements after failures",
      "Because the Geolocation API requires it",
      "To circumvent browser permission denials",
      "Just to demonstrate clever coding"
    ]
},
  {
    "q": "What does this Fetch API streaming pattern enable?",
    "l": "javascript",
    "c": "async function streamResponse(url, onChunk) {\n  const response = await fetch(url);\n  const reader = response.body.getReader();\n  \n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) break;\n    onChunk(value);\n  }\n}",
    "o": [
      "Processing large responses as they arrive",
      "Automatic retry of failed chunks",
      "Improved throughput via parallel downloading",
      "Nothing - fetch already streams by default"
    ]
},
  {
    "q": "What is the primary advantage of this localStorage proxy pattern?",
    "l": "javascript",
    "c": "const storage = new Proxy({}, {\n  get(target, prop) {\n    const value = localStorage.getItem(prop);\n    try { return JSON.parse(value); }\n    catch { return value; }\n  },\n  set(target, prop, value) {\n    localStorage.setItem(prop, JSON.stringify(value));\n    return true;\n  }\n});",
    "o": [
      "Transparent serialization without method calls",
      "Automatic data compression",
      "Built-in TTL expiration",
      "Nothing - proxies are slower than direct access"
    ]
},
  {
    "q": "Why would you implement a Kalman filter for Geolocation data?",
    "o": [
      "To reduce noise and improve position accuracy over time",
      "Because watchPosition requires signal processing",
      "To work around GPS drift issues",
      "Kalman filters are only used in aviation"
    ]
},
  {
    "q": "What does this Fetch API circuit breaker pattern prevent?",
    "l": "javascript",
    "c": "function createCircuitBreaker(fn, timeout, threshold) {\n  let failures = 0;\n  let lastFailure = 0;\n  \n  return async (...args) => {\n    if (failures >= threshold && Date.now() - lastFailure < timeout) {\n      throw new Error('Service unavailable');\n    }\n    \n    try {\n      const result = await fn(...args);\n      failures = 0;\n      return result;\n    } catch (err) {\n      failures++;\n      lastFailure = Date.now();\n      throw err;\n    }\n  };\n}",
    "o": [
      "Cascading failures during service outages",
      "Duplicate requests to the same endpoint",
      "Memory leaks from hanging promises",
      "Nothing - this is just redundant error handling"
    ]
},
  {
    "q": "What is the primary advantage of using the Broadcast Channel API with localStorage in a multi-tab application?",
    "o": [
      "Enables real-time synchronization across tabs without polling",
      "Automatically merges conflicting localStorage updates",
      "Bypasses the same-origin policy for shared storage",
      "Provides larger storage capacity than localStorage alone"
    ]
},
  {
    "q": "Why would you implement a WebAssembly-based compression layer for localStorage?",
    "o": [
      "To achieve higher compression ratios for complex data structures",
      "Because JavaScript compression libraries are too slow",
      "To work around localStorage's 5MB limit on mobile devices",
      "WebAssembly can't interact with localStorage directly"
    ]
},
  {
    "q": "What does this novel Geolocation 'confidence scoring' algorithm accomplish?",
    "l": "javascript",
    "c": "function calculateConfidence(position) {\n  const score = 100 - position.coords.accuracy;\n  const timeDecay = (Date.now() - position.timestamp) / 1000;\n  return Math.max(0, score - (timeDecay * 0.5));\n}",
    "o": [
      "Dynamically weights position reliability based on accuracy and freshness",
      "Automatically switches between GPS and Wi-Fi positioning",
      "Predicts future user location based on movement patterns",
      "Nothing - confidence scoring is handled by the browser"
    ]
},
  {
    "q": "What is the critical limitation of using IndexedDB as a localStorage polyfill for large datasets?",
    "o": [
      "Asynchronous API requires substantial code restructuring",
      "IndexedDB has a smaller storage limit than localStorage",
      "Lacks support for JSON data serialization",
      "Doesn't work in mobile browsers"
    ]
},
  {
    "q": "Why would you implement a Merkle Patricia Trie for versioned localStorage data?",
    "o": [
      "Efficiently proves data integrity and enables incremental sync",
      "Because localStorage requires cryptographic hashing",
      "To work around the lack of native indexing",
      "Merkle trees are only useful for blockchain applications"
    ]
},
  {
    "q": "What does this Fetch API 'speculative preloading' pattern optimize?",
    "l": "javascript",
    "c": "const preloadCache = new Map();\n\nfunction speculateFetch(url, probability = 0.5) {\n  if (Math.random() < probability && !preloadCache.has(url)) {\n    preloadCache.set(url, fetch(url).then(r => r.json()));\n  }\n  return preloadCache.get(url) || fetch(url).then(r => r.json());\n}",
    "o": [
      "Reduces perceived latency by probabilistically preloading resources",
      "Guarantees all assets will be preloaded eventually",
      "Improves cache hit rates by normalizing URLs",
      "Nothing - this may waste bandwidth on unused preloads"
    ]
},
  {
    "q": "What is the primary security consideration when using localStorage with Web Workers?",
    "o": [
      "Workers can access same-origin localStorage, expanding attack surface",
      "Workers require special permissions to use localStorage",
      "localStorage operations become asynchronous in workers",
      "Workers can't access localStorage due to thread safety"
    ]
},
  {
    "q": "Why would you implement a Riemann sum algorithm for Geolocation path distance calculation?",
    "o": [
      "Provides accurate distance measurements despite GPS drift and irregular sampling",
      "Because the Haversine formula is too computationally expensive",
      "To work around missing timestamps in position data",
      "Riemann sums are only useful for mathematical applications"
    ]
},
  {
    "q": "What does this localStorage 'write-behind proxy' pattern accomplish?",
    "l": "javascript",
    "c": "function createWriteBehindProxy() {\n  const cache = new Map();\n  const pendingWrites = new Set();\n  \n  setInterval(() => {\n    pendingWrites.forEach(key => {\n      localStorage.setItem(key, cache.get(key));\n      pendingWrites.delete(key);\n    });\n  }, 1000);\n  \n  return new Proxy({}, {\n    get: (_, key) => cache.get(key) || localStorage.getItem(key),\n    set: (_, key, value) => {\n      cache.set(key, value);\n      pendingWrites.add(key);\n      return true;\n    }\n  });\n}",
    "o": [
      "Batches write operations to minimize main thread blocking",
      "Automatically merges concurrent updates to the same key",
      "Provides transactional guarantees for complex operations",
      "Nothing - this just delays write operations unnecessarily"
    ]
},
  {
    "q": "What is the primary advantage of using the File System Access API with Fetch responses?",
    "o": [
      "Enables direct disk caching of large assets with streaming access",
      "Bypasses CORS restrictions for local file saving",
      "Provides better compression than localStorage",
      "File System API can't interact with Fetch responses"
    ]
},
  {
    "q": "Why would you implement a Voronoi diagram algorithm for Geolocation geofencing?",
    "o": [
      "Enables efficient nearest-neighbor queries for thousands of geofences",
      "Because geofencing APIs are unreliable on mobile devices",
      "To visualize location data as heatmaps",
      "Voronoi diagrams are only useful for graphics applications"
    ]
},
  {
    "q": "What does this novel Fetch API 'bandwidth estimation' pattern enable?",
    "l": "javascript",
    "c": "async function adaptiveFetch(url, options = {}) {\n  const testSize = 1024 * 10; // 10KB sample\n  const start = performance.now();\n  \n  const testRes = await fetch(`${url}?test=1`, {\n    ...options,\n    headers: { ...options.headers, Range: `bytes=0-${testSize}` }\n  });\n  \n  const mbps = (testSize * 8) / ((performance.now() - start) * 1000);\n  return mbps > 5 ? fetch(url, options) : fetch(url, { ...options, priority: 'low' });\n}",
    "o": [
      "Dynamic quality adjustment based on real-time network conditions",
      "Guaranteed download completion regardless of bandwidth",
      "Automatic retry of failed requests on slow networks",
      "Nothing - bandwidth estimation is handled by the browser"
    ]
},
  {
    "q": "What is the primary benefit of using a CRDT (Conflict-Free Replicated Data Type) with localStorage for offline apps?",
    "o": [
      "Enables automatic conflict resolution during multi-device sync",
      "Because localStorage requires special data structures",
      "To work around the 5MB storage limit",
      "CRDTs are only useful for real-time collaboration"
    ]
},
  {
    "q": "Why would you implement a particle filter for Geolocation in indoor environments?",
    "o": [
      "Handles ambiguous signal data through probabilistic estimation",
      "Because GPS doesn't work indoors",
      "To visualize user movement patterns",
      "Particle filters are too computationally expensive for web apps"
    ]
},
  {
    "q": "What does this localStorage 'differential synchronization' pattern accomplish?",
    "l": "javascript",
    "c": "function syncChanges(remoteChanges) {\n  const localData = JSON.parse(localStorage.getItem('data'));\n  const changes = diff(localData, remoteChanges);\n  \n  if (changes.conflict) {\n    return handleConflict(localData, remoteChanges);\n  }\n  \n  const merged = merge(localData, changes);\n  localStorage.setItem('data', JSON.stringify(merged));\n  return { status: 'synced', changes };\n}",
    "o": [
      "Minimizes sync payload size while handling merge conflicts",
      "Automatically encrypts data before synchronization",
      "Provides real-time collaboration capabilities",
      "Nothing - differential sync is only for server databases"
    ]
},
  {
    "q": "What is the primary advantage of using the Compression Streams API with localStorage?",
    "o": [
      "Enables real-time compression/decompression with streaming support",
      "Bypasses the 5MB localStorage limit entirely",
      "Automatically encrypts data during compression",
      "Provides faster access than uncompressed data"
    ]
},
  {
    "q": "Why would you implement a Hilbert curve spatial index for Geolocation geofencing?",
    "o": [
      "Preserves spatial locality in one-dimensional storage for efficient range queries",
      "Because geofencing APIs can't handle complex polygons",
      "To visualize location data as fractal patterns",
      "Hilbert curves are only useful for image processing"
    ]
},
  {
    "q": "What does this novel 'differential privacy' technique for Geolocation data accomplish?",
    "l": "javascript",
    "c": "function addPrivacyNoise(position, epsilon = 0.1) {\n  const noise = () => (Math.random() * 2 - 1) * (100 / epsilon);\n  return {\n    ...position,\n    coords: {\n      ...position.coords,\n      latitude: position.coords.latitude + noise(),\n      longitude: position.coords.longitude + noise()\n    }\n  };\n}",
    "o": [
      "Protects user privacy while maintaining aggregate data usefulness",
      "Improves GPS accuracy by averaging random errors",
      "Circumvents browser permission requirements",
      "Nothing - this just makes locations inaccurate"
    ]
},
  {
    "q": "What is the primary benefit of using Web Locks API with Fetch requests?",
    "o": [
      "Prevents duplicate mutations during concurrent resource updates",
      "Allows bypassing of CORS restrictions",
      "Automatically retries failed requests",
      "Web Locks can't be used with Fetch API"
    ]
},
  {
    "q": "Why would you implement a Hexagonal Grid system for Geolocation spatial partitioning?",
    "o": [
      "Provides uniform distance metrics and efficient neighbor lookups",
      "Because GPS coordinates are inherently hexagonal",
      "To reduce the accuracy of location data intentionally",
      "Hexagonal grids are only useful for game development"
    ]
},
  {
    "q": "What does this 'speculative execution' pattern for Fetch API optimize?",
    "l": "javascript",
    "c": "const speculativeCache = new Map();\n\nasync function speculativeFetch(url, predictor) {\n  if (predictor(url) && !speculativeCache.has(url)) {\n    speculativeCache.set(url, fetch(url)\n      .then(r => r.json())\n      .catch(() => null));\n  }\n  return speculativeCache.get(url) || fetch(url).then(r => r.json());\n}",
    "o": [
      "Preloads likely-needed resources based on predictive algorithms",
      "Guarantees all assets will be loaded eventually",
      "Improves caching efficiency by pre-warming the cache",
      "Nothing - this may waste bandwidth on unused preloads"
    ]
},
  {
    "q": "What is the primary security benefit of using the Web Cryptography API with localStorage?",
    "o": [
      "Enables client-side encryption while maintaining data usability",
      "Bypasses the same-origin policy for secure data sharing",
      "Automatically compresses encrypted data",
      "Web Crypto is incompatible with localStorage"
    ]
},
  {
    "q": "Why would you implement a Kalman Filter with Federated Learning for Geolocation in crowd-sourced apps?",
    "o": [
      "Continuously improves location accuracy across user base without raw data collection",
      "Because traditional GPS is too inaccurate for crowd-sourcing",
      "To reduce battery usage on mobile devices",
      "Federated learning is only useful for server-side processing"
    ]
},
  {
    "q": "What does this 'storage quota budgeting' system for localStorage accomplish?",
    "l": "javascript",
    "c": "class StorageBudget {\n  constructor(total = 4.5 * 1024 * 1024) {\n    this.total = total;\n    this.used = 0;\n  }\n\n  allocate(size) {\n    if (this.used + size > this.total) {\n      this.reclaim(size);\n    }\n    this.used += size;\n  }\n}",
    "o": [
      "Proactively manages storage usage within safe limits",
      "Bypasses browser storage quotas entirely",
      "Automatically compresses data when budget is exceeded",
      "Nothing - localStorage manages its own budget"
    ]
},
  {
    "q": "What is the primary advantage of using the Web Periodic Background Sync API with Fetch requests?",
    "o": [
      "Enables reliable background updates even with poor connectivity",
      "Allows bypassing of CORS restrictions in service workers",
      "Provides faster response times than regular Fetch",
      "Periodic Sync can't be used with Fetch API"
    ]
},
  {
    "q": "Why would you implement a R*-tree spatial index for Geolocation geoqueries in localStorage?",
    "o": [
      "Optimizes both point and range queries for complex spatial data",
      "Because localStorage requires special indexing for geodata",
      "To reduce the accuracy of location queries intentionally",
      "R*-trees are only useful for database servers"
    ]
},
  {
    "q": "What does this 'predictive prefetching' pattern for Fetch API leverage?",
    "l": "javascript",
    "c": "const prefetchModel = new PredictiveModel();\n\nfunction predictFetch(url) {\n  const nextUrls = prefetchModel.predict(url);\n  nextUrls.forEach(u => {\n    if (!prefetchCache.has(u)) {\n      prefetchCache.set(u, fetch(u).then(r => r.json()));\n    }\n  });\n  return fetch(url).then(r => r.json());\n}",
    "o": [
      "Machine learning to anticipate and preload likely-next resources",
      "Guarantees all assets will be loaded in optimal order",
      "Improves caching efficiency by analyzing user behavior",
      "Nothing - prefetching is handled by the browser automatically"
    ]
},
  {
    "q": "What is the primary benefit of using the WebAssembly Garbage Collector with localStorage?",
    "o": [
      "Enables efficient memory management for complex stored objects",
      "Automatically compresses data using WASM algorithms",
      "Bypasses localStorage size limitations",
      "WASM GC can't interact with localStorage"
    ]
},
  {
    "q": "Why would you implement a Bloom filter with localStorage for large-scale applications?",
    "o": [
      "Provides space-efficient existence checks for massive datasets",
      "Because localStorage lacks a native .exists() method",
      "To work around the 5MB storage limit on mobile devices",
      "Bloom filters are only useful for server-side applications"
    ]
},
  {
    "q": "What does this 'storage pressure event' handler for localStorage optimize?",
    "l": "javascript",
    "c": "navigator.storage.persist().then(granted => {\n  if (granted) {\n    navigator.storage.onpersist = () => {\n      // Emergency storage cleanup\n    };\n  }\n});",
    "o": [
      "Proactive cleanup before system-level storage constraints are hit",
      "Automatic compression of all stored data",
      "Migration of data to IndexedDB when limits are reached",
      "Nothing - storage pressure events are just notifications"
    ]
},
  {
    "q": "What is the primary advantage of using the WebTransport API as a replacement for Fetch in real-time location applications?",
    "o": [
      "Enables multiplexed, unreliable datagrams for low-latency position updates",
      "Provides automatic compression of location data streams",
      "Bypasses CORS restrictions for cross-origin location services",
      "WebTransport cannot handle Geolocation data"
    ]
},
  {
    "q": "Why would you implement a Homomorphic Encryption scheme with localStorage for privacy-sensitive applications?",
    "o": [
      "Allows computation on encrypted data without decryption",
      "Because localStorage requires encryption for all sensitive data",
      "To work around the 5MB storage limit through compression",
      "Homomorphic encryption is only useful for server-side processing"
    ]
},
  {
    "q": "What does this 'Quantum-Resistant Storage' pattern for localStorage achieve?",
    "l": "javascript",
    "c": "function storeWithPQC(key, value) {\n  const encrypted = window.crypto.subtle.encrypt(\n    { name: 'CRYSTALS-KYBER' },\n    publicKey,\n    new TextEncoder().encode(JSON.stringify(value))\n  );\n  localStorage.setItem(key, btoa(String.fromCharCode(...new Uint8Array(encrypted)));\n}",
    "o": [
      "Future-proof encryption against quantum computing attacks",
      "Automatic compression of stored data using quantum algorithms",
      "Bypassing of all browser storage quotas",
      "Nothing - quantum-resistant crypto doesn't work in browsers"
    ]
},
  {
    "q": "What is the primary benefit of using WebGPU for Geolocation data visualization?",
    "o": [
      "Massively parallel processing of large geospatial datasets",
      "Automatic conversion of GPS coordinates to 3D models",
      "Bypassing browser security restrictions for location access",
      "WebGPU cannot be used with Geolocation data"
    ]
},
  {
    "q": "Why would you implement a Differential Synchronization protocol with localStorage for collaborative mapping apps?",
    "o": [
      "Efficient conflict resolution for simultaneous offline edits",
      "Because localStorage requires special sync protocols",
      "To automatically compress map data during synchronization",
      "Differential sync is only useful for text documents"
    ]
},
  {
    "q": "What does this 'Federated Analytics' pattern for Geolocation data enable?",
    "l": "javascript",
    "c": "function reportLocationStats(position) {\n  const noisyPosition = addDifferentialPrivacyNoise(position);\n  const encoded = federatedLearning.encodeUpdate(noisyPosition);\n  fetch('/analytics', {\n    method: 'POST',\n    body: encoded,\n    keepalive: true\n  });\n}",
    "o": [
      "Privacy-preserving crowd analytics without raw data collection",
      "Automatic compression of location data before transmission",
      "Bypassing of browser permission requirements",
      "Nothing - federated analytics requires server-side processing"
    ]
},
  {
    "q": "What is the primary advantage of using the File System Access API for caching Fetch responses?",
    "o": [
      "Enables memory-mapped access to multi-gigabyte cache datasets",
      "Provides automatic compression of cached responses",
      "Bypasses CORS restrictions for cached resources",
      "File System API cannot be used for caching"
    ]
},
  {
    "q": "Why would you implement a Top-K Frequency Sketch with localStorage for location analytics?",
    "o": [
      "Space-efficient tracking of frequently visited locations without storing raw data",
      "Because localStorage requires probabilistic data structures",
      "To work around the 5MB storage limit for location history",
      "Frequency sketches are only useful for server-side analytics"
    ]
},
  {
    "q": "What does this 'Edge-Side Storage' pattern using Service Workers accomplish?",
    "l": "javascript",
    "c": "self.addEventListener('fetch', (event) => {\n  if (event.request.url.includes('/location/')) {\n    const cached = localStorage.getItem(`edge_${event.request.url}`);\n    if (cached) {\n      event.respondWith(new Response(cached));\n    }\n  }\n});",
    "o": [
      "Distributes storage across client edge nodes for reduced latency",
      "Automatically encrypts all cached location data",
      "Bypasses the need for Geolocation APIs entirely",
      "Nothing - Service Workers can't access localStorage"
    ]
},
  {
    "q": "What is the primary benefit of using WebCodecs with Geolocation video streams?",
    "o": [
      "Hardware-accelerated processing of geotagged video frames",
      "Automatic extraction of location metadata from videos",
      "Bypassing browser security restrictions for camera access",
      "WebCodecs cannot process Geolocation data"
    ]
},
  {
    "q": "Why would you implement a Hierarchical Temporal Memory model with Geolocation data?",
    "o": [
      "Predictive modeling of movement patterns using biological learning principles",
      "Because traditional GPS data requires neural network processing",
      "To reduce the accuracy of location data for privacy",
      "HTM models are only useful for server-side machine learning"
    ]
},
  {
    "q": "What does this 'Storage-Compute Tradeoff' algorithm for localStorage optimize?",
    "l": "javascript",
    "c": "function storeComputable(key, data, computeFn) {\n  const storageCost = JSON.stringify(data).length;\n  const computeCost = estimateComputeCost(computeFn);\n  \n  if (storageCost < computeCost * 100) {\n    localStorage.setItem(key, JSON.stringify(data));\n  } else {\n    localStorage.setItem(key, computeFn.toString());\n  }\n}",
    "o": [
      "Dynamically chooses between storing data or regeneration function",
      "Automatically compresses data when storage is expensive",
      "Migrates data to IndexedDB when too large",
      "Nothing - this is just a theoretical exercise"
    ]
},
  {
    "q": "What is the primary advantage of using WebAssembly SIMD for Geolocation calculations?",
    "o": [
      "Parallel processing of vectorized location data at near-native speed",
      "Automatic conversion of GPS coordinates between formats",
      "Bypassing browser security restrictions for location access",
      "WebAssembly cannot accelerate Geolocation APIs"
    ]
},
  {
    "q": "Why would you implement a Probabilistic Data Structure with localStorage for location privacy?",
    "o": [
      "Enables aggregate analytics without storing identifiable position trails",
      "Because localStorage requires fuzzy data structures",
      "To work around the 5MB storage limit for location history",
      "Probabilistic structures increase privacy risks"
    ]
  },
  {
    "q": "What does this 'Energy-Aware Location Sampling' algorithm optimize?",
    "l": "javascript",
    "c": "function adjustSamplingRate(batteryLevel) {\n  const baseRate = 10000; // 10s\n  const scalingFactor = 1 + (1 - batteryLevel) * 4; // 1-5x\n  return baseRate * scalingFactor;\n}",
    "o": [
      "Dynamically balances accuracy with battery consumption",
      "Guarantees maximum accuracy regardless of battery level",
      "Disables location services when battery is low",
      "Nothing - browsers manage power automatically"
    ]
},
  {
    "q": "What is the primary advantage of using the Web Neural Network API with Geolocation data?",
    "o": [
      "Enables on-device movement pattern recognition without server calls",
      "Automatically improves GPS accuracy using AI",
      "Bypasses browser permission requirements for location",
      "WebNN cannot process Geolocation data"
    ]
},
  {
    "q": "Why would you implement a Private Set Intersection protocol with localStorage for location-based apps?",
    "o": [
      "Enables secure discovery of shared locations without revealing full histories",
      "Because localStorage requires cryptographic proofs for access",
      "To work around the 5MB storage limit for location data",
      "PSI is only useful for server-to-server communication"
    ]
},
  {
    "q": "What does this 'Geofence Bloom Filter' pattern accomplish?",
    "l": "javascript",
    "c": "function createGeofenceFilter(locations) {\n  const filter = new BloomFilter(10000, 0.01);\n  locations.forEach(loc => {\n    filter.add(geoHash(loc, 6));\n  });\n  localStorage.setItem('geofences', filter.serialize());\n}",
    "o": [
      "Space-efficient geofence checking with controlled false positives",
      "Automatic compression of geofence polygons",
      "Bypassing of browser geofencing API limits",
      "Nothing - Bloom filters can't represent geofences"
    ]
},
  {
    "q": "What is the primary benefit of using WebTransport's unidirectional streams for location updates?",
    "o": [
      "Enables fire-and-forget telemetry with congestion control",
      "Provides automatic compression of position data",
      "Bypasses CORS restrictions for location services",
      "WebTransport can't handle unidirectional location data"
    ]
},
  {
    "q": "Why would you implement a Fully Homomorphic Encryption scheme with localStorage for health tracking apps?",
    "o": [
      "Allows analysis of sensitive location patterns without decryption",
      "Because localStorage requires FHE for medical data",
      "To work around storage limits through encryption",
      "FHE is too slow for client-side JavaScript"
    ]
},
  {
    "q": "What does this 'Adaptive Location Resolution' algorithm optimize?",
    "l": "javascript",
    "c": "function getResolution(activityType) {\n  const resolutions = {\n    'driving': { enableHighAccuracy: true, maximumAge: 1000 },\n    'walking': { enableHighAccuracy: false, maximumAge: 3000 },\n    'stationary': { enableHighAccuracy: false, maximumAge: 10000 }\n  };\n  return resolutions[activityType] || resolutions.stationary;\n}",
    "o": [
      "Balances accuracy and battery based on detected movement context",
      "Guarantees maximum accuracy regardless of battery impact",
      "Disables location services when stationary",
      "Nothing - browsers handle resolution automatically"
    ]
},
  {
    "q": "What is the primary advantage of using the WebAssembly Threads proposal with localStorage?",
    "o": [
      "Parallel processing of large stored datasets without main thread blocking",
      "Automatic compression of stored data using multiple cores",
      "Bypassing the 5MB storage limit through threading",
      "WASM threads can't interact with localStorage"
    ]
},
  {
    "q": "Why would you implement a Zero-Knowledge Proof system with localStorage for location sharing?",
    "o": [
      "Enables proving location attributes without revealing coordinates",
      "Because localStorage requires ZKP for all sensitive data",
      "To work around storage limits through cryptographic compression",
      "ZKP is only useful for cryptocurrency applications"
    ]
  },
  {
    "q": "What does this 'Storage Tiering' pattern with the File System Access API accomplish?",
    "l": "javascript",
    "c": "async function storeLargeData(key, data) {\n  if (data.size < 1MB) {\n    localStorage.setItem(key, data);\n  } else {\n    const handle = await window.showSaveFilePicker();\n    const writable = await handle.createWritable();\n    await writable.write(data);\n    localStorage.setItem(key, handle.name);\n  }\n}",
    "o": [
      "Automatic migration between storage backends based on size",
      "Transparent encryption of large files before storage",
      "Bypassing all browser storage quotas",
      "Nothing - this just complicates storage access"
    ]
},
  {
    "q": "What is the primary benefit of using WebAssembly Exception Handling with Geolocation processing?",
    "o": [
      "Structured error recovery for complex location analysis pipelines",
      "Automatic retry of failed GPS acquisitions",
      "Bypassing browser permission requirements",
      "WASM exceptions can't handle Geolocation errors"
    ]
},
  {
    "q": "Why would you implement a Federated Analytics pipeline with localStorage for location data?",
    "o": [
      "Enables privacy-preserving insights without raw data leaving devices",
      "Because localStorage requires federated processing",
      "To work around storage limits through distributed analysis",
      "Federated analytics is only possible server-side"
    ]
},
  {
    "q": "What does this 'Energy-Proportional Location Sampling' algorithm optimize?",
    "l": "javascript",
    "c": "function getSamplingRate(battery, activity) {\n  const baseRates = { driving: 1000, walking: 3000, stationary: 10000 };\n  const rate = baseRates[activity] * (battery.level / 0.8);\n  return Math.min(1000, Math.max(10000, rate));\n}",
    "o": [
      "Dynamically adjusts sampling based on both battery and movement",
      "Guarantees maximum accuracy regardless of conditions",
      "Disables location services below 20% battery",
      "Nothing - browsers handle power management automatically"
    ]
},
  {
    "q": "What is the primary advantage of using the WebAssembly SIMD proposal with Fetch responses?",
    "o": [
      "Parallel processing of binary geodata at near-native speed",
      "Automatic compression of all fetched resources",
      "Bypassing CORS restrictions through SIMD operations",
      "WASM SIMD can't be used with Fetch API"
    ]
},
  {
    "q": "Why would you implement a Secure Multi-Party Computation protocol with localStorage?",
    "o": [
      "Enables collaborative analysis without exposing individual location data",
      "Because localStorage requires MPC for all shared data",
      "To work around storage limits through distributed computation",
      "MPC is too computationally intensive for browsers"
    ]
},
  {
    "q": "What does this 'Differential Privacy Budget' pattern for location analytics accomplish?",
    "l": "javascript",
    "c": "class PrivacyBudget {\n  constructor(totalEpsilon = 1.0) {\n    this.remaining = totalEpsilon;\n  }\n\n  spend(epsilon) {\n    if (this.remaining >= epsilon) {\n      this.remaining -= epsilon;\n      return true;\n    }\n    return false;\n  }\n}",
    "o": [
      "Controls cumulative privacy loss across multiple analytics queries",
      "Automatically encrypts location data when budget is exhausted",
      "Disables location services when privacy budget is spent",
      "Nothing - differential privacy doesn't need budgeting"
    ]
  },
  {
    "q": "What will be logged to the console when the following code runs?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(response => response.json())\n  .then(data => console.log(data.title));",
    "o": [
      "delectus aut autem",
      "undefined",
      "Error: fetch is not defined",
      "null"
    ]
  },
  {
    "q": "Which method is used to store data in the browser's local storage?",
    "o": [
      "localStorage.setItem()",
      "localStorage.store()",
      "localStorage.save()",
      "localStorage.write()"
    ]
  },
  {
    "q": "What will the following code output if the user allows location access?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(position => {\n  console.log(position.coords.latitude, position.coords.longitude);\n});",
    "o": [
      "User's latitude and longitude",
      "null null",
      "undefined undefined",
      "Error: Geolocation is not supported"
    ]
  },
  {
    "q": "Which of the following statements is true about the Fetch API?",
    "o": [
      "It returns a Promise that resolves to the Response object.",
      "It is a synchronous method to make HTTP requests.",
      "It can only make GET requests.",
      "It does not support JSON responses."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "localStorage.setItem('name', 'John');\nconsole.log(localStorage.getItem('name'));",
    "o": [
      "John",
      "undefined",
      "null",
      "Error"
    ]
  },
  {
    "q": "Which of the following methods is used to remove an item from local storage?",
    "o": [
      "localStorage.removeItem()",
      "localStorage.deleteItem()",
      "localStorage.clearItem()",
      "localStorage.dropItem()"
    ]
  },
  {
    "q": "What happens when the following code is executed?",
    "l": "javascript",
    "c": "fetch('https://invalid.url')\n  .then(response => response.json())\n  .catch(error => console.log('Error:', error.message));",
    "o": [
      "Error: Failed to fetch",
      "undefined",
      "null",
      "404 Not Found"
    ]
  },
  {
    "q": "Which event is triggered when the user's location is successfully retrieved using the Geolocation API?",
    "o": [
      "success",
      "geolocationSuccess",
      "locationRetrieved",
      "positionSuccess"
    ]
  },
  {
    "q": "What will be logged to the console when this code is run?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position),\n  error => console.log(error.message)\n);",
    "o": [
      "Either location data or an error message",
      "Always location data",
      "Always an error message",
      "undefined"
    ]
  },
  {
    "q": "Which of the following statements about localStorage is true?",
    "o": [
      "Data stored in localStorage does not expire.",
      "Data stored in localStorage is cleared after the session ends.",
      "localStorage can only store numbers.",
      "localStorage can store objects directly."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.text())\n  .then(data => console.log(typeof data));",
    "o": [
      "\"string\"",
      "\"object\"",
      "\"undefined\"",
      "\"number\""
    ]
  },
  {
    "q": "Which of the following is true about the Fetch API?",
    "o": [
      "Fetch returns a Promise that resolves to the Response object.",
      "Fetch only works in modern browsers with WebSockets enabled.",
      "Fetch is synchronous by default.",
      "Fetch does not support handling response headers."
    ]
  },
  {
    "q": "What will happen when the following code runs?",
    "l": "javascript",
    "c": "localStorage.setItem('count', 10);\nlocalStorage.setItem('count', localStorage.getItem('count') + 1);\nconsole.log(localStorage.getItem('count'));",
    "o": [
      "\"101\"",
      "\"11\"",
      "11",
      "101"
    ]
  },
  {
    "q": "Which method removes all data stored in localStorage?",
    "o": [
      "localStorage.clear()",
      "localStorage.removeAll()",
      "localStorage.deleteAll()",
      "localStorage.reset()"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log('Latitude:', position.coords.latitude),\n  error => console.log('Error:', error.message)\n);",
    "o": [
      "\"Latitude:\" followed by the user's latitude",
      "\"Error: User denied geolocation access\"",
      "\"undefined\"",
      "\"null\""
    ]
  },
  {
    "q": "Which statement about the Geolocation API is correct?",
    "o": [
      "It requires user permission to access location data.",
      "It can fetch the user's location without permission.",
      "It can only return the user's country, not exact coordinates.",
      "It does not work in modern browsers."
    ]
  },
  {
    "q": "What will be stored in localStorage after running this code?",
    "l": "javascript",
    "c": "localStorage.setItem('user', JSON.stringify({name: 'Alice', age: 25}));",
    "o": [
      "\"{\"name\":\"Alice\",\"age\":25}\"",
      "Alice, 25",
      "{name: 'Alice', age: 25}",
      "[Alice, 25]"
    ]
  },
  {
    "q": "Which of the following best describes the Fetch API?",
    "o": [
      "An API used to make network requests and handle responses asynchronously.",
      "An API used to store data in the browser's local storage.",
      "A framework used for building server-side applications in JavaScript.",
      "A method used for fetching files from the user's computer."
    ]
  },
  {
    "q": "What happens when you try to retrieve a non-existent key from localStorage?",
    "l": "javascript",
    "c": "console.log(localStorage.getItem('nonExistentKey'));",
    "o": [
      "null",
      "undefined",
      "An error is thrown",
      "\"\" (empty string)"
    ]
  },
  {
    "q": "Which of the following statements is true about the Geolocation API?",
    "o": [
      "It provides latitude and longitude coordinates of the user.",
      "It always returns the exact address of the user.",
      "It only works with Wi-Fi connections.",
      "It does not require user permission."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/users/1')\n  .then(response => response.json())\n  .then(data => console.log(data.email));",
    "o": [
      "An email address",
      "undefined",
      "null",
      "An error message"
    ]
  },
  {
    "q": "Which of the following is true about the Fetch API?",
    "o": [
      "It supports making HTTP requests asynchronously.",
      "It only works for GET requests.",
      "It is a replacement for WebSockets.",
      "It automatically parses JSON responses."
    ]
  },
  {
    "q": "What will be stored in localStorage after executing this code?",
    "l": "javascript",
    "c": "localStorage.setItem('num', 5);\nlocalStorage.setItem('num', localStorage.getItem('num') + 2);\nconsole.log(localStorage.getItem('num'));",
    "o": [
      "\"52\"",
      "7",
      "\"7\"",
      "Error"
    ]
  },
  {
    "q": "Which method retrieves an item from localStorage?",
    "o": [
      "localStorage.getItem()",
      "localStorage.fetchItem()",
      "localStorage.retrieve()",
      "localStorage.load()"
    ]
  },
  {
    "q": "What will happen if the user denies location access when running the following code?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords.latitude),\n  error => console.log(error.message)\n);",
    "o": [
      "\"User denied Geolocation\"",
      "0",
      "null",
      "Nothing will happen"
    ]
  },
  {
    "q": "Which of the following statements about localStorage is correct?",
    "o": [
      "Data persists even after closing and reopening the browser.",
      "Data is cleared when the page is refreshed.",
      "It can only store up to 10MB of data.",
      "It is automatically encrypted for security."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('user', JSON.stringify({name: 'John', age: 30}));\nconsole.log(typeof localStorage.getItem('user'));",
    "o": [
      "\"string\"",
      "\"object\"",
      "\"undefined\"",
      "\"number\""
    ]
  },
  {
    "q": "Which statement about the Fetch API is correct?",
    "o": [
      "It allows sending network requests using JavaScript.",
      "It only supports retrieving data, not sending it.",
      "It requires an external library to work.",
      "It blocks the main thread while fetching data."
    ]
  },
  {
    "q": "What is the default HTTP method when making a Fetch API request?",
    "l": "javascript",
    "c": "fetch('https://example.com/data');",
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What will happen when the following code executes?",
    "l": "javascript",
    "c": "localStorage.setItem('key', 'value');\nlocalStorage.clear();\nconsole.log(localStorage.getItem('key'));",
    "o": [
      "null",
      "\"value\"",
      "undefined",
      "An error is thrown"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts', {\n  method: 'POST',\n  body: JSON.stringify({ title: 'Hello', body: 'World', userId: 1 }),\n  headers: { 'Content-type': 'application/json; charset=UTF-8' }\n})\n.then(response => response.json())\n.then(data => console.log(data));",
    "o": [
      "An object containing the posted data with an ID",
      "An error message",
      "null",
      "undefined"
    ]
  },
  {
    "q": "Which of the following statements about the Fetch API is correct?",
    "o": [
      "fetch() returns a Promise that resolves to a Response object.",
      "fetch() is only available in Node.js, not browsers.",
      "fetch() automatically retries failed network requests.",
      "fetch() is synchronous by default."
    ]
  },
  {
    "q": "What will be stored in localStorage after executing this code?",
    "l": "javascript",
    "c": "localStorage.setItem('count', 1);\nlocalStorage.setItem('count', parseInt(localStorage.getItem('count')) + 1);\nconsole.log(localStorage.getItem('count'));",
    "o": [
      "\"2\"",
      "2",
      "\"11\"",
      "null"
    ]
  },
  {
    "q": "Which method removes a single item from localStorage?",
    "o": [
      "localStorage.removeItem('key')",
      "localStorage.deleteItem('key')",
      "localStorage.clearItem('key')",
      "localStorage.dropItem('key')"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords.latitude, position.coords.longitude),\n  error => console.log(error.code)\n);",
    "o": [
      "User's latitude and longitude or an error code",
      "Always an error message",
      "Only the latitude value",
      "Undefined"
    ]
  },
  {
    "q": "Which of the following statements is true about sessionStorage and localStorage?",
    "o": [
      "sessionStorage data is cleared when the page session ends, but localStorage persists.",
      "localStorage data is cleared after 24 hours, but sessionStorage persists.",
      "sessionStorage and localStorage store data in encrypted format.",
      "Both sessionStorage and localStorage only store numeric values."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(data => console.log(Array.isArray(data)));",
    "o": [
      "true",
      "false",
      "undefined",
      "An error is thrown"
    ]
  },
  {
    "q": "Which statement about the Fetch API error handling is correct?",
    "o": [
      "fetch() does not reject the Promise on HTTP errors like 404 or 500.",
      "fetch() throws an error automatically if the request fails.",
      "fetch() can only make GET requests, so error handling is unnecessary.",
      "fetch() is a blocking function, which prevents execution until the request completes."
    ]
  },
  {
    "q": "What will be the value of storedData?",
    "l": "javascript",
    "c": "localStorage.setItem('data', JSON.stringify({ name: 'Alice', age: 30 }));\nlet storedData = localStorage.getItem('data');\nconsole.log(typeof storedData);",
    "o": [
      "\"string\"",
      "\"object\"",
      "\"undefined\"",
      "\"number\""
    ]
  },
  {
    "q": "Which of the following is a feature of the Geolocation API?",
    "o": [
      "It allows web applications to request a user's location.",
      "It can track a user without permission.",
      "It provides only an approximate country location.",
      "It does not work on mobile devices."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(response => response.text())\n  .then(data => console.log(typeof data));",
    "o": [
      "\"string\"",
      "\"object\"",
      "\"undefined\"",
      "\"number\""
    ]
  },
  {
    "q": "Which method is used to check if a key exists in localStorage?",
    "o": [
      "localStorage.getItem('key') !== null",
      "localStorage.exists('key')",
      "localStorage.hasKey('key')",
      "localStorage.contains('key')"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('name', 'John');\nconsole.log(localStorage.key(0));",
    "o": [
      "\"name\"",
      "\"John\"",
      "\"0\"",
      "null"
    ]
  },
  {
    "q": "Which of the following statements about sessionStorage is correct?",
    "o": [
      "Data stored in sessionStorage is cleared when the browser tab is closed.",
      "Data in sessionStorage persists even after the browser is closed.",
      "sessionStorage can only store numeric values.",
      "sessionStorage does not allow setting values dynamically."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/users/1')\n  .then(response => console.log(response.ok));",
    "o": [
      "true",
      "false",
      "undefined",
      "null"
    ]
  },
  {
    "q": "Which of the following is true about the Fetch API?",
    "o": [
      "fetch() does not automatically throw an error on HTTP errors like 404.",
      "fetch() can only be used to make GET requests.",
      "fetch() works synchronously by default.",
      "fetch() does not support CORS."
    ]
  },
  {
    "q": "What happens when localStorage.clear() is called?",
    "o": [
      "All data stored in localStorage is removed.",
      "Only the first item in localStorage is removed.",
      "It clears localStorage for the current session only.",
      "It throws an error if there are no items stored."
    ]
  },
  {
    "q": "What is the correct way to store an array in localStorage?",
    "o": [
      "localStorage.setItem('list', JSON.stringify([1,2,3]))",
      "localStorage.setItem('list', [1,2,3])",
      "localStorage.storeArray('list', [1,2,3])",
      "localStorage.list = [1,2,3]"
    ]
  },
  {
    "q": "Which statement about the Geolocation API is correct?",
    "o": [
      "It requires user permission before accessing location data.",
      "It works without an internet connection.",
      "It can track a user's location in real time without permission.",
      "It is only supported on mobile devices."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "navigator.geolocation.watchPosition(\n  position => console.log(position.coords.latitude, position.coords.longitude),\n  error => console.log(error.message)\n);",
    "o": [
      "Updates the latitude and longitude continuously as the user moves",
      "Logs the location once and stops",
      "Throws an error immediately",
      "Returns undefined"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.json())\n  .then(data => console.log(data.title));",
    "o": [
      "The title of the post with ID 1",
      "undefined",
      "An error message",
      "null"
    ]
  },
  {
    "q": "Which of the following is a correct way to retrieve data from localStorage?",
    "o": [
      "localStorage.getItem('key')",
      "localStorage.retrieve('key')",
      "localStorage.fetch('key')",
      "localStorage['key'].get()"
    ]
  },
  {
    "q": "What happens when calling fetch() with an invalid URL?",
    "l": "javascript",
    "c": "fetch('invalid_url')\n  .then(response => console.log(response))\n  .catch(error => console.log(error.message));",
    "o": [
      "The catch block executes and logs an error message",
      "fetch() retries the request automatically",
      "fetch() executes successfully and returns null",
      "An infinite loop occurs"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('user', JSON.stringify({ name: 'Alice', age: 25 }));\nlet user = JSON.parse(localStorage.getItem('user'));\nconsole.log(user.age);",
    "o": [
      "25",
      "undefined",
      "\"25\"",
      "null"
    ]
  },
  {
    "q": "Which statement about fetch() is correct?",
    "o": [
      "fetch() returns a Promise that resolves to a Response object.",
      "fetch() blocks the main thread until data is received.",
      "fetch() only supports GET requests.",
      "fetch() automatically retries failed network requests."
    ]
  },
  {
    "q": "What does the Geolocation API require to work?",
    "o": [
      "User permission",
      "A premium API key",
      "A special browser extension",
      "A connection to an external Bluetooth device"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "localStorage.setItem('test', 123);\nconsole.log(typeof localStorage.getItem('test'));",
    "o": [
      "\"string\"",
      "\"number\"",
      "\"object\"",
      "\"undefined\""
    ]
  },
  {
    "q": "Which method is used to continuously track a user's location?",
    "o": [
      "navigator.geolocation.watchPosition()",
      "navigator.geolocation.getCurrentPosition()",
      "navigator.geolocation.track()",
      "navigator.geolocation.getPosition()"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(response => response.json())\n  .then(data => console.log(data.completed));",
    "o": [
      "true or false",
      "undefined",
      "null",
      "An error message"
    ]
  },
  {
    "q": "Which of the following is true about sessionStorage?",
    "o": [
      "Data is cleared when the browser tab is closed.",
      "Data persists even after the browser is restarted.",
      "Data is automatically encrypted for security.",
      "sessionStorage can store only string values."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts', { method: 'POST', body: JSON.stringify({ title: 'Test' }), headers: { 'Content-Type': 'application/json' } })\n  .then(response => response.status)\n  .then(status => console.log(status));",
    "o": [
      "201",
      "200",
      "404",
      "500"
    ]
  },
  {
    "q": "Which of the following statements about localStorage is correct?",
    "o": [
      "localStorage stores data with no expiration time.",
      "localStorage automatically encrypts data.",
      "localStorage is limited to 100MB per domain.",
      "localStorage can store functions."
    ]
  },
  {
    "q": "What happens if the Fetch API encounters a 404 error?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/invalid-url')\n  .then(response => console.log(response.ok))\n  .catch(error => console.log(error.message));",
    "o": [
      "false",
      "true",
      "An error is thrown immediately",
      "undefined"
    ]
  },
  {
    "q": "Which of the following correctly deletes a key from localStorage?",
    "o": [
      "localStorage.removeItem('key')",
      "localStorage.delete('key')",
      "localStorage.clear('key')",
      "localStorage['key'] = null"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords.latitude, position.coords.longitude),\n  error => console.log(error.message)\n);",
    "o": [
      "The user's latitude and longitude",
      "null",
      "An error message immediately",
      "\"undefined undefined\""
    ]
  },
  {
    "q": "Which of the following statements about fetch() is correct?",
    "o": [
      "fetch() returns a Promise that resolves to a Response object.",
      "fetch() blocks execution until a response is received.",
      "fetch() does not support CORS requests.",
      "fetch() automatically parses the response as JSON."
    ]
  },
  {
    "q": "What will be stored in localStorage?",
    "l": "javascript",
    "c": "localStorage.setItem('user', JSON.stringify({ name: 'John', age: 30 }));",
    "o": [
      "{\"name\":\"John\",\"age\":30}",
      "{name: John, age: 30}",
      "['John', 30]",
      "undefined"
    ]
  },
  {
    "q": "Which of the following is a correct way to handle fetch errors?",
    "o": [
      "fetch(url).catch(error => console.error(error))",
      "fetch(url).finally(error => console.error(error))",
      "fetch(url).throw(error => console.error(error))",
      "fetch(url).handle(error => console.error(error))"
    ]
  },
  {
    "q": "Which Geolocation API method is used to get the user's current location once?",
    "o": [
      "navigator.geolocation.getCurrentPosition()",
      "navigator.geolocation.watchPosition()",
      "navigator.geolocation.trackPosition()",
      "navigator.geolocation.getPosition()"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "sessionStorage.setItem('count', 10);\nsessionStorage.setItem('count', 20);\nconsole.log(sessionStorage.getItem('count'));",
    "o": [
      "\"20\"",
      "\"10\"",
      "null",
      "undefined"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(response => response.json())\n  .then(data => console.log(data.userId));",
    "o": [
      "A number representing the user ID",
      "undefined",
      "null",
      "An error message"
    ]
  },
  {
    "q": "Which statement about localStorage and sessionStorage is correct?",
    "o": [
      "localStorage persists even after the browser is closed, while sessionStorage is cleared when the tab is closed.",
      "sessionStorage persists even after the browser is closed, while localStorage is cleared when the tab is closed.",
      "Both localStorage and sessionStorage are cleared when the browser is closed.",
      "localStorage automatically encrypts data, while sessionStorage does not."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "localStorage.setItem('color', 'blue');\nconsole.log(localStorage.getItem('color'));\nlocalStorage.removeItem('color');\nconsole.log(localStorage.getItem('color'));",
    "o": [
      "\"blue\", null",
      "\"blue\", \"blue\"",
      "\"blue\", \"undefined\"",
      "An error occurs"
    ]
  },
  {
    "q": "Which of the following is a correct Fetch API call to send JSON data?",
    "o": [
      "fetch('https://example.com/data', { method: 'POST', body: JSON.stringify({ name: 'John' }), headers: { 'Content-Type': 'application/json' } })",
      "fetch('https://example.com/data', { method: 'POST', data: { name: 'John' }, type: 'json' })",
      "fetch('https://example.com/data', { method: 'POST', JSON: { name: 'John' } })",
      "fetch('https://example.com/data', { method: 'POST', body: { name: 'John' } })"
    ]
  },
  {
    "q": "Which of the following will correctly store an object in localStorage?",
    "o": [
      "localStorage.setItem('user', JSON.stringify({ name: 'Alice', age: 25 }))",
      "localStorage.setItem('user', { name: 'Alice', age: 25 })",
      "localStorage.store('user', { name: 'Alice', age: 25 })",
      "localStorage.saveItem('user', JSON.stringify({ name: 'Alice', age: 25 }))"
    ]
  },
  {
    "q": "What will happen if a user denies location access for the Geolocation API?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position),\n  error => console.log(error.message)\n);",
    "o": [
      "An error message will be logged to the console",
      "The browser will automatically grant access after retrying",
      "The request will hang indefinitely",
      "The function will return null"
    ]
  },
  {
    "q": "Which of the following correctly retrieves the user's location?",
    "o": [
      "navigator.geolocation.getCurrentPosition(successCallback, errorCallback)",
      "navigator.geolocation.getUserPosition(successCallback, errorCallback)",
      "navigator.location.getCurrentPosition(successCallback, errorCallback)",
      "navigator.location.fetchCoordinates(successCallback, errorCallback)"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "sessionStorage.setItem('name', 'Bob');\nconsole.log(sessionStorage.getItem('name'));\nsessionStorage.clear();\nconsole.log(sessionStorage.getItem('name'));",
    "o": [
      "\"Bob\", null",
      "\"Bob\", \"Bob\"",
      "\"Bob\", \"undefined\"",
      "An error occurs"
    ]
  },
  {
    "q": "What is the default request method used by fetch() if not specified?",
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "Which of the following best describes the purpose of the Geolocation API?",
    "o": [
      "It allows web applications to access the user's geographic location.",
      "It enables websites to store data in the cloud automatically.",
      "It is used to fetch live traffic data from Google Maps.",
      "It helps users track their browsing history."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/users/1')\n  .then(response => response.json())\n  .then(data => console.log(data.name));",
    "o": [
      "The name of the user with ID 1",
      "undefined",
      "null",
      "An error message"
    ]
  },
  {
    "q": "Which of the following correctly retrieves a value from localStorage?",
    "o": [
      "localStorage.getItem('username')",
      "localStorage.fetch('username')",
      "localStorage.retrieveItem('username')",
      "localStorage.username"
    ]
  },
  {
    "q": "What will happen if fetch() is called with an incorrect URL?",
    "l": "javascript",
    "c": "fetch('https://invalid-url.com')\n  .then(response => console.log(response.status))\n  .catch(error => console.log(error.message));",
    "o": [
      "An error message is logged",
      "response.status is 200",
      "response.status is 404",
      "Nothing happens"
    ]
  },
  {
    "q": "Which method continuously tracks the user's location?",
    "o": [
      "navigator.geolocation.watchPosition()",
      "navigator.geolocation.getCurrentPosition()",
      "navigator.geolocation.trackUser()",
      "navigator.geolocation.followPosition()"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('count', '5');\nlocalStorage.clear();\nconsole.log(localStorage.getItem('count'));",
    "o": [
      "null",
      "\"5\"",
      "undefined",
      "An error message"
    ]
  },
  {
    "q": "Which of the following is true about fetch()?",
    "o": [
      "fetch() returns a Promise that resolves to a Response object.",
      "fetch() immediately throws an error if the response is not 200.",
      "fetch() automatically retries on failure.",
      "fetch() is a synchronous function."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "sessionStorage.setItem('user', 'Alice');\nsessionStorage.removeItem('user');\nconsole.log(sessionStorage.getItem('user'));",
    "o": [
      "null",
      "\"Alice\"",
      "undefined",
      "An error message"
    ]
  },
  {
    "q": "Which statement about localStorage is correct?",
    "o": [
      "localStorage only stores data as strings.",
      "localStorage can store objects directly without conversion.",
      "localStorage automatically deletes data after 24 hours.",
      "localStorage is cleared when the browser is closed."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts')\n  .then(response => response.text())\n  .then(data => console.log(typeof data));",
    "o": [
      "\"string\"",
      "\"object\"",
      "\"undefined\"",
      "An error message"
    ]
  },
  {
    "q": "Which method is used to remove all data stored in localStorage?",
    "o": [
      "localStorage.clear()",
      "localStorage.removeAll()",
      "localStorage.deleteAll()",
      "localStorage.reset()"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/todos/2')\n  .then(response => response.json())\n  .then(data => console.log(data.title));",
    "o": [
      "The title of the todo with ID 2",
      "undefined",
      "null",
      "An error message"
    ]
  },
  {
    "q": "Which of the following statements about localStorage is true?",
    "o": [
      "localStorage data persists even after the browser is closed.",
      "localStorage automatically encrypts stored data.",
      "localStorage can store functions and objects directly.",
      "localStorage is limited to 10MB of storage."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => console.log(response.ok));",
    "o": [
      "true",
      "false",
      "undefined",
      "An error occurs"
    ]
  },
  {
    "q": "Which of the following methods will return the user's latitude and longitude?",
    "o": [
      "navigator.geolocation.getCurrentPosition()",
      "navigator.geolocation.getLocation()",
      "navigator.geolocation.getUserCoordinates()",
      "navigator.location.getGeo()"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('theme', 'dark');\nconsole.log(localStorage.getItem('theme'));\nlocalStorage.clear();\nconsole.log(localStorage.getItem('theme'));",
    "o": [
      "\"dark\", null",
      "\"dark\", \"dark\"",
      "\"dark\", \"undefined\"",
      "An error occurs"
    ]
  },
  {
    "q": "Which statement is true about the Fetch API?",
    "o": [
      "fetch() does not reject on HTTP errors like 404 or 500.",
      "fetch() automatically converts the response to JSON.",
      "fetch() must always include headers.",
      "fetch() requires a callback function."
    ]
  },
  {
    "q": "What is the purpose of the watchPosition() method?",
    "o": [
      "It continuously tracks the user's location.",
      "It retrieves the user's current position once.",
      "It stops tracking the user's location.",
      "It saves the user's location in localStorage."
    ]
  },
  {
    "q": "What will happen if a user denies location access when using the Geolocation API?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position),\n  error => console.log(error.message)\n);",
    "o": [
      "An error message will be logged to the console.",
      "The browser will retry until permission is granted.",
      "The function will return null.",
      "The request will hang indefinitely."
    ]
  },
  {
    "q": "Which of the following correctly sends a GET request using fetch()?",
    "o": [
      "fetch('https://api.example.com/data')",
      "fetch('https://api.example.com/data', { method: 'POST' })",
      "fetch({ url: 'https://api.example.com/data' })",
      "fetch.get('https://api.example.com/data')"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "sessionStorage.setItem('token', '12345');\nsessionStorage.removeItem('token');\nconsole.log(sessionStorage.getItem('token'));",
    "o": [
      "null",
      "\"12345\"",
      "undefined",
      "An error occurs"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/3')\n  .then(response => response.json())\n  .then(data => console.log(data.id));",
    "o": [
      "3",
      "undefined",
      "null",
      "An error message"
    ]
  },
  {
    "q": "Which of the following correctly stores an object in localStorage?",
    "o": [
      "localStorage.setItem('user', JSON.stringify({ name: 'Alice' }));",
      "localStorage.setItem('user', { name: 'Alice' });",
      "localStorage.storeObject('user', { name: 'Alice' });",
      "localStorage.save('user', JSON.stringify({ name: 'Alice' }));"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('score', '100');\nlocalStorage.removeItem('score');\nconsole.log(localStorage.getItem('score'));",
    "o": [
      "null",
      "\"100\"",
      "undefined",
      "An error message"
    ]
  },
  {
    "q": "Which of the following statements about fetch() is correct?",
    "o": [
      "fetch() returns a Promise that resolves to a Response object.",
      "fetch() is a synchronous function.",
      "fetch() automatically retries failed requests.",
      "fetch() can only be used with the GET method."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords.latitude),\n  error => console.log('Error:', error.message)\n);",
    "o": [
      "The user's latitude",
      "An error message",
      "undefined",
      "null"
    ]
  },
  {
    "q": "Which method should be used to continuously track the user's location?",
    "o": [
      "navigator.geolocation.watchPosition()",
      "navigator.geolocation.getCurrentPosition()",
      "navigator.geolocation.trackLocation()",
      "navigator.geolocation.startTracking()"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "sessionStorage.setItem('level', '5');\nsessionStorage.clear();\nconsole.log(sessionStorage.getItem('level'));",
    "o": [
      "null",
      "\"5\"",
      "undefined",
      "An error message"
    ]
  },
  {
    "q": "Which of the following statements about localStorage and sessionStorage is true?",
    "o": [
      "localStorage persists across browser sessions, while sessionStorage is cleared when the page is closed.",
      "Both localStorage and sessionStorage are cleared when the browser is closed.",
      "sessionStorage data is shared across all browser tabs.",
      "localStorage can only store strings with a maximum limit of 1MB."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/4')\n  .then(response => response.json())\n  .then(data => console.log(typeof data));",
    "o": [
      "\"object\"",
      "\"string\"",
      "\"undefined\"",
      "An error occurs"
    ]
  },
  {
    "q": "Which of the following correctly checks if an item exists in localStorage?",
    "o": [
      "localStorage.getItem('key') !== null",
      "localStorage.exists('key')",
      "localStorage.hasItem('key')",
      "localStorage.contains('key')"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/users/1')\n  .then(response => response.json())\n  .then(data => console.log(data.name));",
    "o": [
      "The name of the user with ID 1",
      "undefined",
      "null",
      "An error occurs"
    ]
  },
  {
    "q": "Which of the following is true about sessionStorage?",
    "o": [
      "Data stored in sessionStorage is deleted when the browser tab is closed.",
      "sessionStorage data persists across browser sessions.",
      "sessionStorage data is automatically synced between browser tabs.",
      "sessionStorage can only store numbers."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "localStorage.setItem('username', 'John');\nconsole.log(localStorage.getItem('username'));\nlocalStorage.clear();\nconsole.log(localStorage.getItem('username'));",
    "o": [
      "\"John\", null",
      "\"John\", \"John\"",
      "\"John\", \"undefined\"",
      "An error occurs"
    ]
  },
  {
    "q": "Which of the following is a valid way to send a POST request using fetch()?",
    "o": [
      "fetch('https://api.example.com/data', { method: 'POST', body: JSON.stringify({ key: 'value' }), headers: { 'Content-Type': 'application/json' } })",
      "fetch('https://api.example.com/data', { method: 'POST', params: { key: 'value' } })",
      "fetch.post('https://api.example.com/data', { key: 'value' })",
      "fetch('https://api.example.com/data').post({ key: 'value' })"
    ]
  },
  {
    "q": "What does the following code do?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(position => console.log(position.coords.latitude, position.coords.longitude));",
    "o": [
      "Logs the user's latitude and longitude.",
      "Logs null values.",
      "Throws an error if the user is offline.",
      "Returns the user's location in an alert box."
    ]
  },
  {
    "q": "Which of the following is NOT a method of the Geolocation API?",
    "o": [
      "navigator.geolocation.stopTracking()",
      "navigator.geolocation.getCurrentPosition()",
      "navigator.geolocation.watchPosition()",
      "navigator.geolocation.clearWatch()"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "localStorage.setItem('score', '200');\nlocalStorage.removeItem('score');\nconsole.log(localStorage.getItem('score'));",
    "o": [
      "null",
      "\"200\"",
      "undefined",
      "An error occurs"
    ]
  },
  {
    "q": "Which statement about fetch() is correct?",
    "o": [
      "fetch() returns a Promise that resolves to a Response object.",
      "fetch() automatically parses JSON responses.",
      "fetch() is a blocking function.",
      "fetch() can only be used for GET requests."
    ]
  },
  {
    "q": "What does the following fetch() call do?",
    "l": "javascript",
    "c": "fetch('https://api.example.com/users', { method: 'DELETE' })",
    "o": [
      "Sends a DELETE request to remove data from the API.",
      "Sends a GET request to fetch user data.",
      "Throws an error because DELETE requests require a body.",
      "Creates a new user entry in the API."
    ]
  },
  {
    "q": "Which method should be used to stop tracking the user's location?",
    "o": [
      "navigator.geolocation.clearWatch()",
      "navigator.geolocation.stop()",
      "navigator.geolocation.disableTracking()",
      "navigator.geolocation.cancelWatch()"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.text())\n  .then(data => console.log(typeof data));",
    "o": [
      "\"string\"",
      "\"object\"",
      "\"undefined\"",
      "An error occurs"
    ]
  },
  {
    "q": "Which of the following statements about localStorage is true?",
    "o": [
      "localStorage stores data as key-value pairs in string format.",
      "localStorage can store objects directly without conversion.",
      "localStorage data is automatically encrypted.",
      "localStorage is cleared when the browser is closed."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('theme', 'dark');\nlocalStorage.setItem('theme', 'light');\nconsole.log(localStorage.getItem('theme'));",
    "o": [
      "\"light\"",
      "\"dark\"",
      "null",
      "undefined"
    ]
  },
  {
    "q": "How can you parse a JSON response from fetch()?",
    "o": [
      "fetch(url).then(response => response.json())",
      "fetch(url).then(response => JSON.parse(response))",
      "fetch(url).then(response => response.toJSON())",
      "fetch(url).then(response => parseJSON(response))"
    ]
  },
  {
    "q": "Which of the following is the correct way to check if geolocation is available in the user's browser?",
    "o": [
      "'geolocation' in navigator",
      "navigator.hasGeolocation()",
      "typeof navigator.geolocation !== 'undefined'",
      "navigator.geolocation.available()"
    ]
  },
  {
    "q": "What does the following JavaScript code do?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords.latitude, position.coords.longitude),\n  error => console.log(error.message)\n);",
    "o": [
      "Logs the user's latitude and longitude or an error message.",
      "Always logs an error message.",
      "Returns the user's location in an alert box.",
      "Throws an error if the user is offline."
    ]
  },
  {
    "q": "Which of the following correctly updates an existing item in localStorage?",
    "o": [
      "localStorage.setItem('username', 'Alice');",
      "localStorage.updateItem('username', 'Alice');",
      "localStorage.modify('username', 'Alice');",
      "localStorage.changeItem('username', 'Alice');"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "sessionStorage.setItem('level', '10');\nsessionStorage.clear();\nconsole.log(sessionStorage.getItem('level'));",
    "o": [
      "null",
      "\"10\"",
      "undefined",
      "An error occurs"
    ]
  },
  {
    "q": "Which of the following statements about fetch() is correct?",
    "o": [
      "fetch() is an asynchronous function that returns a Promise.",
      "fetch() blocks the execution of JavaScript until the response is received.",
      "fetch() can only be used for GET requests.",
      "fetch() automatically retries failed requests."
    ]
  },
  {
    "q": "Which method should be used to track the user's location in real-time?",
    "o": [
      "navigator.geolocation.watchPosition()",
      "navigator.geolocation.trackLocation()",
      "navigator.geolocation.getCurrentPosition()",
      "navigator.geolocation.enableTracking()"
    ]
  },
  {
    "q": "What is the purpose of the 'mode' option in fetch()?",
    "o": [
      "It determines the request mode, such as 'cors', 'no-cors', or 'same-origin'.",
      "It sets the response type to JSON.",
      "It specifies the HTTP method of the request.",
      "It determines whether the request should be asynchronous."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(response => response.json())\n  .then(data => console.log(data.userId));",
    "o": [
      "The userId of the todo with ID 1",
      "undefined",
      "An error occurs",
      "null"
    ]
  },
  {
    "q": "Which of the following is a correct way to store an object in localStorage?",
    "o": [
      "localStorage.setItem('user', JSON.stringify({ name: 'Alice', age: 25 }));",
      "localStorage.setItem('user', { name: 'Alice', age: 25 });",
      "localStorage.storeObject('user', { name: 'Alice', age: 25 });",
      "localStorage.save('user', JSON.stringify({ name: 'Alice', age: 25 }));"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('count', '5');\nlocalStorage.removeItem('count');\nconsole.log(localStorage.getItem('count'));",
    "o": [
      "null",
      "\"5\"",
      "undefined",
      "An error occurs"
    ]
  },
  {
    "q": "Which of the following statements about sessionStorage is correct?",
    "o": [
      "Data in sessionStorage is only available for the duration of the page session.",
      "sessionStorage persists even after closing the browser.",
      "sessionStorage allows data to be shared between tabs of the same website.",
      "sessionStorage automatically encrypts data for security."
    ]
  },
  {
    "q": "What does the following code do?",
    "l": "javascript",
    "c": "navigator.geolocation.watchPosition(position => console.log(position.coords.latitude, position.coords.longitude));",
    "o": [
      "Continuously tracks the user's location and logs latitude and longitude.",
      "Logs the user's location once and stops tracking.",
      "Throws an error if the user declines location access.",
      "Sends the user's location to the server."
    ]
  },
  {
    "q": "Which of the following correctly checks if localStorage contains a key?",
    "o": [
      "localStorage.getItem('key') !== null",
      "'key' in localStorage",
      "localStorage.contains('key')",
      "localStorage.hasKey('key')"
    ]
  },
  {
    "q": "Which method can be used to stop tracking the user's real-time location?",
    "o": [
      "navigator.geolocation.clearWatch()",
      "navigator.geolocation.stopTracking()",
      "navigator.geolocation.disable()",
      "navigator.geolocation.endWatch()"
    ]
  },
  {
    "q": "What is the default HTTP method used by fetch() if not specified?",
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('name', 'John');\nconsole.log(localStorage.length);",
    "o": [
      "1",
      "0",
      "\"John\"",
      "undefined"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/users/1')\n  .then(response => response.ok)\n  .then(status => console.log(status));",
    "o": [
      "true",
      "false",
      "\"ok\"",
      "undefined"
    ]
  },
  {
    "q": "Which of the following statements about localStorage is correct?",
    "o": [
      "localStorage data persists even after closing the browser.",
      "localStorage data is deleted when the user closes the tab.",
      "localStorage is only available for HTTPS pages.",
      "localStorage can store JavaScript functions."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('isLoggedIn', 'true');\nconsole.log(typeof localStorage.getItem('isLoggedIn'));",
    "o": [
      "\"string\"",
      "\"boolean\"",
      "\"object\"",
      "\"undefined\""
    ]
  },
  {
    "q": "Which of the following is the correct way to remove all data from localStorage?",
    "o": [
      "localStorage.clear();",
      "localStorage.removeAll();",
      "localStorage.deleteAll();",
      "localStorage.destroy();"
    ]
  },
  {
    "q": "Which of the following is NOT a valid option in the fetch API?",
    "o": [
      "\"track\"",
      "\"method\"",
      "\"headers\"",
      "\"body\""
    ]
  },
  {
    "q": "What is the purpose of the second parameter in fetch()?",
    "l": "javascript",
    "c": "fetch('https://api.example.com/data', { method: 'POST', body: JSON.stringify({ key: 'value' }) })",
    "o": [
      "It defines request options like method, headers, and body.",
      "It sets a timeout for the request.",
      "It specifies the expected response type.",
      "It determines whether the request is synchronous or asynchronous."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(position => console.log(position));",
    "o": [
      "An object containing latitude and longitude.",
      "A string with the user's location.",
      "undefined",
      "An error message."
    ]
  },
  {
    "q": "Which of the following statements about sessionStorage is correct?",
    "o": [
      "sessionStorage is cleared when the tab is closed.",
      "sessionStorage is shared across all browser tabs.",
      "sessionStorage persists even after restarting the browser.",
      "sessionStorage can store more data than localStorage."
    ]
  },
  {
    "q": "How do you properly handle errors in fetch()?",
    "o": [
      "Using .catch() to handle network failures.",
      "Checking response.status inside .then().",
      "Using try-catch directly on fetch().",
      "Setting an 'error' option in fetch()."
    ]
  },
  {
    "q": "Which of the following APIs allows continuous tracking of a user's location?",
    "o": [
      "navigator.geolocation.watchPosition()",
      "navigator.geolocation.getLocation()",
      "navigator.geolocation.trackUser()",
      "navigator.geolocation.enable()"
    ]
  },
  {
    "q": "Which method is used to send data in a POST request using the Fetch API?",
    "o": [
      "fetch(url, { method: 'POST', body: JSON.stringify(data) })",
      "fetch(url, { send: 'POST', data: JSON.stringify(data) })",
      "fetch.post(url, JSON.stringify(data))",
      "fetch(url).post(data)"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts')\n  .then(response => response.status)\n  .then(status => console.log(status));",
    "o": [
      "200",
      "undefined",
      "true",
      "\"ok\""
    ]
  },
  {
    "q": "Which of the following statements is true about localStorage?",
    "o": [
      "localStorage can only store string values.",
      "localStorage automatically converts objects into strings.",
      "localStorage encrypts stored data for security.",
      "localStorage is cleared when the page is refreshed."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('user', JSON.stringify({ name: 'Alice' }));\nconsole.log(localStorage.getItem('user').name);",
    "o": [
      "An error",
      "\"Alice\"",
      "null",
      "undefined"
    ]
  },
  {
    "q": "Which function is used to retrieve an item from sessionStorage?",
    "o": [
      "sessionStorage.getItem('key')",
      "sessionStorage.retrieve('key')",
      "sessionStorage.fetch('key')",
      "sessionStorage.read('key')"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "sessionStorage.setItem('count', '10');\nsessionStorage.clear();\nconsole.log(sessionStorage.getItem('count'));",
    "o": [
      "null",
      "\"10\"",
      "undefined",
      "An error"
    ]
  },
  {
    "q": "Which method allows real-time location tracking?",
    "o": [
      "navigator.geolocation.watchPosition()",
      "navigator.geolocation.getLocation()",
      "navigator.geolocation.fetchLocation()",
      "navigator.geolocation.trackPosition()"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords.latitude, position.coords.longitude),\n  error => console.log(error.message)\n);",
    "o": [
      "Latitude and longitude values",
      "An error message",
      "undefined",
      "A warning about permissions"
    ]
  },
  {
    "q": "Which option correctly checks if geolocation is supported?",
    "o": [
      "'geolocation' in navigator",
      "navigator.supports('geolocation')",
      "navigator.hasFeature('geolocation')",
      "typeof navigator.geolocation !== 'undefined'"
    ]
  },
  {
    "q": "Which of the following fetch() options is used to send authentication credentials with the request?",
    "o": [
      "{ credentials: 'include' }",
      "{ authentication: 'true' }",
      "{ credentials: 'true' }",
      "{ auth: 'enable' }"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.json())\n  .then(data => console.log(typeof data));",
    "o": [
      "\"object\"",
      "\"string\"",
      "\"undefined\"",
      "\"boolean\""
    ]
  },
  {
    "q": "Which of the following correctly sets an item in localStorage?",
    "o": [
      "localStorage.setItem('user', 'Alice');",
      "localStorage.store('user', 'Alice');",
      "localStorage.saveItem('user', 'Alice');",
      "localStorage.user = 'Alice';"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('age', 25);\nconsole.log(localStorage.getItem('age') + 5);",
    "o": [
      "\"255\"",
      "30",
      "undefined",
      "An error"
    ]
  },
  {
    "q": "Which method removes a single item from localStorage?",
    "o": [
      "localStorage.removeItem('key');",
      "localStorage.deleteItem('key');",
      "localStorage.clearItem('key');",
      "localStorage.purgeItem('key');"
    ]
  },
  {
    "q": "Which of the following correctly sends a POST request using Fetch API?",
    "o": [
      "fetch(url, { method: 'POST', body: JSON.stringify(data) })",
      "fetch(url).post(data)",
      "fetch.post(url, data)",
      "fetch(url, { send: 'POST', payload: data })"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts', { method: 'POST', body: JSON.stringify({ title: 'Hello' }) })\n  .then(response => console.log(response.ok));",
    "o": [
      "true",
      "false",
      "undefined",
      "\"ok\""
    ]
  },
  {
    "q": "Which Fetch API option sets custom headers?",
    "o": [
      "{ headers: { 'Content-Type': 'application/json' } }",
      "{ header: { 'Content-Type': 'application/json' } }",
      "{ setHeaders: { 'Content-Type': 'application/json' } }",
      "{ config: { 'Content-Type': 'application/json' } }"
    ]
  },
  {
    "q": "Which of the following is the correct way to watch the user's location continuously?",
    "o": [
      "navigator.geolocation.watchPosition(successCallback, errorCallback);",
      "navigator.geolocation.getCurrentPosition(successCallback, errorCallback, { watch: true });",
      "navigator.geolocation.trackPosition(successCallback);",
      "navigator.geolocation.enableTracking(successCallback);"
    ]
  },
  {
    "q": "What will be logged if the user denies geolocation permission?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords.latitude, position.coords.longitude),\n  error => console.log(error.message)\n);",
    "o": [
      "An error message",
      "Latitude and longitude",
      "undefined",
      "null"
    ]
  },
  {
    "q": "Which method cancels real-time location tracking?",
    "o": [
      "navigator.geolocation.clearWatch(id);",
      "navigator.geolocation.stopWatch(id);",
      "navigator.geolocation.cancelTracking(id);",
      "navigator.geolocation.disableWatch(id);"
    ]
  },
  {
    "q": "Which of the following correctly retrieves JSON data using the Fetch API?",
    "o": [
      "fetch(url).then(response => response.json()).then(data => console.log(data));",
      "fetch(url).then(response => JSON.parse(response)).then(data => console.log(data));",
      "fetch(url).then(response => response.text()).then(data => console.log(JSON.parse(data)));",
      "fetch(url).then(response => console.data());"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.ok)\n  .then(ok => console.log(ok));",
    "o": [
      "true",
      "false",
      "undefined",
      "\"ok\""
    ]
  },
  {
    "q": "Which of the following is NOT a valid HTTP method for fetch()?",
    "o": [
      "\"FETCH\"",
      "\"GET\"",
      "\"POST\"",
      "\"PUT\""
    ]
  },
  {
    "q": "Which method removes all data stored in localStorage?",
    "o": [
      "localStorage.clear();",
      "localStorage.removeAll();",
      "localStorage.deleteAll();",
      "localStorage.purge();"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('name', 'Alice');\nlocalStorage.clear();\nconsole.log(localStorage.getItem('name'));",
    "o": [
      "null",
      "\"Alice\"",
      "undefined",
      "An error"
    ]
  },
  {
    "q": "Which of the following is a correct way to store an object in localStorage?",
    "o": [
      "localStorage.setItem('user', JSON.stringify({ name: 'Alice' }));",
      "localStorage.setItem('user', { name: 'Alice' });",
      "localStorage.store('user', JSON.stringify({ name: 'Alice' }));",
      "localStorage.saveItem('user', { name: 'Alice' });"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords.latitude),\n  error => console.log('Location access denied')\n);",
    "o": [
      "Latitude value or 'Location access denied'",
      "Always 'Location access denied'",
      "Always 'undefined'",
      "An error message without execution"
    ]
  },
  {
    "q": "Which option ensures fetch() only resolves if the response is successful?",
    "o": [
      "fetch(url).then(response => response.ok ? response.json() : Promise.reject('Error'))",
      "fetch(url).then(response => response.json()).catch(err => console.error(err))",
      "fetch(url).then(response => response.status === 500 ? response.json() : response.text())",
      "fetch(url).then(response => response.data())"
    ]
  },
  {
    "q": "Which method is used to continuously track a user's location?",
    "o": [
      "navigator.geolocation.watchPosition()",
      "navigator.geolocation.getLocation()",
      "navigator.geolocation.track()",
      "navigator.geolocation.enableTracking()"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "sessionStorage.setItem('score', '100');\nsessionStorage.clear();\nconsole.log(sessionStorage.getItem('score'));",
    "o": [
      "null",
      "\"100\"",
      "undefined",
      "An error"
    ]
  },
  {
    "q": "Which statement correctly handles a fetch error?",
    "o": [
      "fetch(url).catch(error => console.error(error));",
      "fetch(url).then(response => console.log(response)).error(err => console.log(err));",
      "fetch(url).handle(error => console.error(error));",
      "fetch(url, { handleError: true });"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.status)\n  .then(status => console.log(status));",
    "o": [
      "200",
      "404",
      "500",
      "undefined"
    ]
  },
  {
    "q": "Which method is used to store data in sessionStorage?",
    "o": [
      "sessionStorage.setItem('key', 'value');",
      "sessionStorage.store('key', 'value');",
      "sessionStorage.save('key', 'value');",
      "sessionStorage.push('key', 'value');"
    ]
  },
  {
    "q": "What happens when the user closes the browser after storing data in sessionStorage?",
    "o": [
      "Data is deleted",
      "Data remains for 24 hours",
      "Data remains until the user logs out",
      "Data is moved to localStorage"
    ]
  },
  {
    "q": "Which of the following correctly retrieves the user's current location?",
    "o": [
      "navigator.geolocation.getCurrentPosition(successCallback, errorCallback);",
      "navigator.geolocation.currentLocation(successCallback, errorCallback);",
      "navigator.geolocation.getLocation(successCallback);",
      "navigator.geolocation.retrievePosition(successCallback);"
    ]
  },
  {
    "q": "What will be logged to the console if the user denies location access?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords.latitude),\n  error => console.log(error.code)\n);",
    "o": [
      "An error code (e.g., 1)",
      "Latitude value",
      "undefined",
      "An empty string"
    ]
  },
  {
    "q": "Which of the following correctly deletes an item from localStorage?",
    "o": [
      "localStorage.removeItem('key');",
      "localStorage.delete('key');",
      "localStorage.clearItem('key');",
      "localStorage.purge('key');"
    ]
  },
  {
    "q": "What will happen if you try to store a non-string value in localStorage without converting it to a string?",
    "o": [
      "It will be stored as '[object Object]'.",
      "It will throw an error.",
      "It will be automatically converted to JSON.",
      "It will store a null value."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('number', 42);\nconsole.log(localStorage.getItem('number') + 10);",
    "o": [
      "\"4210\"",
      "52",
      "undefined",
      "An error"
    ]
  },
  {
    "q": "Which Fetch API option allows including credentials such as cookies in a request?",
    "o": [
      "{ credentials: 'include' }",
      "{ authentication: true }",
      "{ withCredentials: true }",
      "{ auth: 'include' }"
    ]
  },
  {
    "q": "Which of the following correctly sends a POST request using the Fetch API?",
    "o": [
      "fetch(url, { method: 'POST', body: JSON.stringify(data), headers: { 'Content-Type': 'application/json' } })",
      "fetch(url).post(data)",
      "fetch.post(url, data)",
      "fetch(url, { send: 'POST', body: data })"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.headers.get('Content-Type'))\n  .then(type => console.log(type));",
    "o": [
      "\"application/json; charset=utf-8\"",
      "\"text/html\"",
      "null",
      "undefined"
    ]
  },
  {
    "q": "Which method retrieves an item from localStorage?",
    "o": [
      "localStorage.getItem('key');",
      "localStorage.retrieve('key');",
      "localStorage.fetch('key');",
      "localStorage.read('key');"
    ]
  },
  {
    "q": "What happens when trying to access localStorage in an incognito/private browsing mode in some browsers?",
    "o": [
      "It may throw an error or not persist data",
      "It works the same as in normal mode",
      "It stores data only for a few minutes",
      "It prompts the user for permission"
    ]
  },
  {
    "q": "Which of the following is the correct way to continuously track a user's location?",
    "o": [
      "navigator.geolocation.watchPosition(successCallback, errorCallback);",
      "navigator.geolocation.trackPosition(successCallback, errorCallback);",
      "navigator.geolocation.getLivePosition(successCallback, errorCallback);",
      "navigator.geolocation.enableTracking(successCallback, errorCallback);"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "navigator.geolocation.watchPosition(\n  position => console.log(position.coords.latitude),\n  error => console.log('Error: ' + error.message)\n);",
    "o": [
      "Latitude value or 'Error: message'",
      "Always 'Error: message'",
      "Always undefined",
      "It will log nothing"
    ]
  },
  {
    "q": "Which method removes only a specific key-value pair from sessionStorage?",
    "o": [
      "sessionStorage.removeItem('key');",
      "sessionStorage.clear();",
      "sessionStorage.deleteItem('key');",
      "sessionStorage.remove('key');"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('age', '25');\nconsole.log(typeof localStorage.getItem('age'));",
    "o": [
      "\"string\"",
      "\"number\"",
      "\"undefined\"",
      "An error"
    ]
  },
  {
    "q": "Which fetch() option allows you to specify custom request headers?",
    "o": [
      "{ headers: { 'Content-Type': 'application/json' } }",
      "{ requestHeaders: { 'Content-Type': 'application/json' } }",
      "{ setHeaders: { 'Content-Type': 'application/json' } }",
      "{ customHeaders: { 'Content-Type': 'application/json' } }"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts')\n  .then(response => response.json())\n  .then(data => console.log(Array.isArray(data)));",
    "o": [
      "true",
      "false",
      "undefined",
      "An error"
    ]
  },
  {
    "q": "Which of the following correctly retrieves JSON data using the Fetch API?",
    "o": [
      "fetch(url).then(response => response.json()).then(data => console.log(data));",
      "fetch(url).then(data => console.log(data));",
      "fetch(url).getJSON().then(data => console.log(data));",
      "fetchJSON(url).then(response => console.log(response));"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.text())\n  .then(data => console.log(typeof data));",
    "o": [
      "\"string\"",
      "\"object\"",
      "\"undefined\"",
      "\"number\""
    ]
  },
  {
    "q": "Which method stores data persistently in the browser?",
    "o": [
      "localStorage.setItem('key', 'value');",
      "sessionStorage.setItem('key', 'value');",
      "document.cookie = 'key=value';",
      "memoryStorage.setItem('key', 'value');"
    ]
  },
  {
    "q": "What happens when you try to store an object directly in localStorage?",
    "l": "javascript",
    "c": "localStorage.setItem('user', { name: 'Alice' });",
    "o": [
      "An error occurs",
      "The object is stored as a JavaScript object",
      "The object is stored and can be retrieved normally",
      "The object is converted to XML"
    ]
  },
  {
    "q": "Which geolocation method retrieves the user's current location only once?",
    "o": [
      "navigator.geolocation.getCurrentPosition(successCallback, errorCallback);",
      "navigator.geolocation.watchPosition(successCallback, errorCallback);",
      "navigator.geolocation.trackLocation(successCallback, errorCallback);",
      "navigator.geolocation.enablePosition(successCallback, errorCallback);"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords.longitude),\n  error => console.log('Error: ' + error.message)\n);",
    "o": [
      "Longitude value or 'Error: message'",
      "Always 'Error: message'",
      "Always undefined",
      "It will log nothing"
    ]
  },
  {
    "q": "Which of the following correctly deletes an item from localStorage?",
    "o": [
      "localStorage.removeItem('key');",
      "localStorage.delete('key');",
      "localStorage.clearItem('key');",
      "localStorage.drop('key');"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('isLoggedIn', true);\nconsole.log(localStorage.getItem('isLoggedIn'));",
    "o": [
      "\"true\"",
      "true",
      "\"undefined\"",
      "An error"
    ]
  },
  {
    "q": "Which fetch() option allows you to send credentials (e.g., cookies) with the request?",
    "o": [
      "{ credentials: 'include' }",
      "{ credentials: true }",
      "{ allowCookies: true }",
      "{ withCredentials: true }"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts', { method: 'POST', body: JSON.stringify({ title: 'Hello' }) })\n  .then(response => console.log(response.status));",
    "o": [
      "201",
      "200",
      "404",
      "500"
    ]
  },
  {
    "q": "Which of the following correctly sends a POST request using the Fetch API?",
    "o": [
      "fetch(url, { method: 'POST', body: JSON.stringify(data), headers: { 'Content-Type': 'application/json' } });",
      "fetch(url, { method: 'POST', data: JSON.stringify(data) });",
      "fetch.post(url, JSON.stringify(data));",
      "postRequest(url, data);"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.ok)\n  .then(ok => console.log(ok));",
    "o": [
      "true",
      "false",
      "undefined",
      "null"
    ]
  },
  {
    "q": "Which method retrieves an item from localStorage?",
    "o": [
      "localStorage.getItem('key');",
      "localStorage.fetch('key');",
      "localStorage.retrieveItem('key');",
      "localStorage.load('key');"
    ]
  },
  {
    "q": "What will happen if you try to store a non-string value in localStorage?",
    "l": "javascript",
    "c": "localStorage.setItem('user', { name: 'Alice' });",
    "o": [
      "It will store '[object Object]'",
      "It will throw an error",
      "It will store the object correctly",
      "It will store 'undefined'"
    ]
  },
  {
    "q": "Which method continuously tracks the user's location?",
    "o": [
      "navigator.geolocation.watchPosition(successCallback, errorCallback);",
      "navigator.geolocation.getCurrentPosition(successCallback, errorCallback);",
      "navigator.geolocation.trackPosition(successCallback, errorCallback);",
      "navigator.geolocation.updateLocation(successCallback, errorCallback);"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "navigator.geolocation.watchPosition(position => console.log(position.coords.latitude));",
    "o": [
      "Latitude value repeatedly",
      "A single latitude value",
      "Always 'undefined'",
      "Nothing, it will throw an error"
    ]
  },
  {
    "q": "Which of the following correctly clears all localStorage data?",
    "o": [
      "localStorage.clear();",
      "localStorage.removeAll();",
      "localStorage.dropAll();",
      "localStorage.purge();"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('count', 5);\nconsole.log(typeof localStorage.getItem('count'));",
    "o": [
      "\"string\"",
      "\"number\"",
      "\"undefined\"",
      "\"object\""
    ]
  },
  {
    "q": "Which fetch() option allows you to send a DELETE request?",
    "o": [
      "{ method: 'DELETE' }",
      "{ method: 'REMOVE' }",
      "{ delete: true }",
      "{ action: 'delete' }"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1', { method: 'DELETE' })\n  .then(response => console.log(response.status));",
    "o": [
      "200",
      "201",
      "404",
      "500"
    ]
  },
  {
    "q": "Which of the following correctly retrieves JSON data using the Fetch API?",
    "o": [
      "fetch(url).then(response => response.json()).then(data => console.log(data));",
      "fetch(url).then(response => response.text()).then(data => JSON.parse(data));",
      "fetch(url).then(response => JSON.parse(response));",
      "fetch(url).json().then(data => console.log(data));"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts')\n  .then(response => response.json())\n  .then(data => console.log(typeof data));",
    "o": [
      "\"object\"",
      "\"string\"",
      "\"undefined\"",
      "\"number\""
    ]
  },
  {
    "q": "Which of the following is a valid way to store an object in localStorage?",
    "o": [
      "localStorage.setItem('user', JSON.stringify({ name: 'Alice' }));",
      "localStorage.setItem('user', { name: 'Alice' });",
      "localStorage.store('user', { name: 'Alice' });",
      "localStorage.saveItem('user', JSON.stringify({ name: 'Alice' }));"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('counter', '10');\nlocalStorage.setItem('counter', 20);\nconsole.log(localStorage.getItem('counter'));",
    "o": [
      "\"20\"",
      "\"10\"",
      "20",
      "undefined"
    ]
  },
  {
    "q": "Which of the following best describes the use of navigator.geolocation.getCurrentPosition()?",
    "o": [
      "It retrieves the user's location once.",
      "It continuously tracks the user's location.",
      "It fetches the location every 10 seconds.",
      "It stores the user's location in localStorage."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(position => console.log(position.coords.latitude));",
    "o": [
      "The user's latitude value",
      "An array of latitude values",
      "\"undefined\"",
      "Nothing, it will throw an error"
    ]
  },
  {
    "q": "Which of the following is true about Fetch API error handling?",
    "o": [
      "The fetch() function does not reject on HTTP errors (like 404).",
      "fetch() rejects the promise if the response status is not 200.",
      "fetch() automatically retries on failure.",
      "fetch() always returns a JSON object."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://invalid.url')\n  .then(response => console.log('Success'))\n  .catch(error => console.log('Failed'));",
    "o": [
      "\"Failed\"",
      "\"Success\"",
      "\"undefined\"",
      "Nothing, it will throw an error"
    ]
  },
  {
    "q": "Which method removes a specific item from localStorage?",
    "o": [
      "localStorage.removeItem('key');",
      "localStorage.clear('key');",
      "localStorage.deleteItem('key');",
      "localStorage.forget('key');"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('color', 'blue');\nlocalStorage.removeItem('color');\nconsole.log(localStorage.getItem('color'));",
    "o": [
      "null",
      "\"blue\"",
      "undefined",
      "An empty string"
    ]
  },
  {
    "q": "Which HTTP method is used by default in a fetch() request?",
    "o": [
      "\"GET\"",
      "\"POST\"",
      "\"PUT\"",
      "\"DELETE\""
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(response => response.text())\n  .then(data => console.log(typeof data));",
    "o": [
      "\"string\"",
      "\"object\"",
      "\"undefined\"",
      "\"number\""
    ]
  },
  {
    "q": "Which of the following correctly sends a POST request with JSON data?",
    "o": [
      "fetch('https://api.example.com/data', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({ name: 'John' })\n});",
      "fetch('https://api.example.com/data', {\n  method: 'POST',\n  body: { name: 'John' }\n});",
      "fetch('https://api.example.com/data', {\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({ name: 'John' })\n});",
      "fetch('https://api.example.com/data', {\n  method: 'GET',\n  body: JSON.stringify({ name: 'John' })\n});"
    ]
  },
  {
    "q": "What happens when calling localStorage.getItem('nonExistentKey')?",
    "o": [
      "It returns null.",
      "It throws an error.",
      "It returns undefined.",
      "It returns an empty string."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('name', 'Alice');\nlocalStorage.setItem('name', 'Bob');\nconsole.log(localStorage.getItem('name'));",
    "o": [
      "\"Bob\"",
      "\"Alice\"",
      "undefined",
      "null"
    ]
  },
  {
    "q": "Which of the following best describes sessionStorage?",
    "o": [
      "It stores data for the duration of the page session.",
      "It persists data even after the browser is closed.",
      "It can store only strings, not objects.",
      "It shares data across all browser tabs."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "sessionStorage.setItem('score', '100');\nsessionStorage.clear();\nconsole.log(sessionStorage.getItem('score'));",
    "o": [
      "null",
      "\"100\"",
      "undefined",
      "0"
    ]
  },
  {
    "q": "What will happen if the user denies location access when using navigator.geolocation.getCurrentPosition()?",
    "o": [
      "An error callback is triggered.",
      "The function still retrieves an approximate location.",
      "The function returns a default location.",
      "The browser crashes."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "navigator.geolocation.watchPosition(\n  position => console.log('Tracking:', position.coords.latitude),\n  error => console.log('Error:', error.message)\n);",
    "o": [
      "\"Tracking: <latitude_value>\"",
      "\"Error: User denied Geolocation\"",
      "\"undefined\"",
      "Nothing will be logged."
    ]
  },
  {
    "q": "Which of the following stops tracking the user's location using Geolocation API?",
    "o": [
      "navigator.geolocation.clearWatch(id);",
      "navigator.geolocation.stopTracking();",
      "navigator.geolocation.endWatch();",
      "navigator.geolocation.disableTracking();"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.json())\n  .then(data => console.log(typeof data));",
    "o": [
      "\"object\"",
      "\"string\"",
      "\"undefined\"",
      "\"number\""
    ]
  },
  {
    "q": "Which of the following is the correct way to handle fetch errors?",
    "o": [
      "fetch('https://api.example.com')\n  .then(response => {\n    if (!response.ok) throw new Error('Network response was not ok');\n    return response.json();\n  })\n  .catch(error => console.error('Fetch error:', error));",
      "fetch('https://api.example.com')\n  .catch(error => console.error('Fetch error:', error))\n  .then(response => response.json());",
      "fetch('https://api.example.com')\n  .then(response => response.json());",
      "fetch('https://api.example.com')\n  .finally(() => console.log('Fetch completed'));"
    ]
  },
  {
    "q": "What will be stored in localStorage when executing the following code?",
    "l": "javascript",
    "c": "localStorage.setItem('isLoggedIn', true);",
    "o": [
      "\"true\" (as a string)",
      "true (as a boolean)",
      "\"undefined\"",
      "null"
    ]
  },
  {
    "q": "Which of the following statements is true about localStorage?",
    "o": [
      "Data stored in localStorage persists even after the browser is closed.",
      "localStorage can store only objects and arrays.",
      "localStorage automatically expires after a session ends.",
      "localStorage is limited to 100MB of storage per site."
    ]
  },
  {
    "q": "What is the correct way to store an object in localStorage?",
    "o": [
      "localStorage.setItem('user', JSON.stringify({ name: 'Alice' }));",
      "localStorage.setItem('user', { name: 'Alice' });",
      "localStorage.setItem('user', 'Alice');",
      "localStorage.setObject('user', { name: 'Alice' });"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('score', '50');\nlocalStorage.removeItem('score');\nconsole.log(localStorage.getItem('score'));",
    "o": [
      "null",
      "\"50\"",
      "undefined",
      "0"
    ]
  },
  {
    "q": "Which of the following correctly retrieves a stored object from localStorage?",
    "o": [
      "JSON.parse(localStorage.getItem('user'))",
      "localStorage.getObject('user')",
      "localStorage.getItem('user')",
      "JSON.stringify(localStorage.getItem('user'))"
    ]
  },
  {
    "q": "Which event is triggered when localStorage is updated in another tab?",
    "o": [
      "\"storage\"",
      "\"update\"",
      "\"change\"",
      "\"localStorageModified\""
    ]
  },
  {
    "q": "What will be logged if geolocation is not supported in a browser?",
    "l": "javascript",
    "c": "if ('geolocation' in navigator) {\n  console.log('Geolocation is supported');\n} else {\n  console.log('Geolocation is not supported');\n}",
    "o": [
      "\"Geolocation is not supported\"",
      "\"Geolocation is supported\"",
      "\"undefined\"",
      "An error message"
    ]
  },
  {
    "q": "What is required for navigator.geolocation.getCurrentPosition() to work?",
    "o": [
      "User permission",
      "A paid API key",
      "HTTPS protocol is optional",
      "It works automatically without any conditions"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.text())\n  .then(data => console.log(typeof data));",
    "o": [
      "\"string\"",
      "\"object\"",
      "\"undefined\"",
      "\"number\""
    ]
  },
  {
    "q": "Which of the following methods is used to send a POST request with JSON data using Fetch API?",
    "o": [
      "fetch('https://api.example.com', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({ name: 'Alice' })\n})",
      "fetch('https://api.example.com', {\n  method: 'GET',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({ name: 'Alice' })\n})",
      "fetch('https://api.example.com', {\n  method: 'POST',\n  body: { name: 'Alice' }\n})",
      "fetch('https://api.example.com', {\n  method: 'PUT',\n  headers: { 'Accept': 'application/json' },\n  body: JSON.stringify({ name: 'Alice' })\n})"
    ]
  },
  {
    "q": "What is the default HTTP method when using fetch()?",
    "o": [
      "\"GET\"",
      "\"POST\"",
      "\"PUT\"",
      "\"DELETE\""
    ]
  },
  {
    "q": "What will happen when running this code?",
    "l": "javascript",
    "c": "localStorage.setItem('age', 25);\nconsole.log(localStorage.getItem('age'));",
    "o": [
      "\"25\"",
      "25",
      "undefined",
      "null"
    ]
  },
  {
    "q": "Which of the following is NOT a limitation of localStorage?",
    "o": [
      "It can store data only as strings",
      "It has a storage limit of around 5MB",
      "It is synchronous and can block the main thread",
      "It automatically deletes old data when storage is full"
    ]
  },
  {
    "q": "What is the purpose of sessionStorage?",
    "o": [
      "To store data that persists only during the session",
      "To store data permanently across sessions",
      "To store large files in the browser",
      "To store JavaScript functions"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "sessionStorage.setItem('username', 'Alice');\nsessionStorage.clear();\nconsole.log(sessionStorage.getItem('username'));",
    "o": [
      "null",
      "\"Alice\"",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly retrieves the user's latitude and longitude using Geolocation API?",
    "o": [
      "navigator.geolocation.getCurrentPosition(position => console.log(position.coords.latitude, position.coords.longitude));",
      "navigator.getCurrentPosition(position => console.log(position.coords.lat, position.coords.lng));",
      "navigator.location.getCurrentPosition(position => console.log(position.latitude, position.longitude));",
      "navigator.geolocation.position((lat, lng) => console.log(lat, lng));"
    ]
  },
  {
    "q": "What is the purpose of the error callback in getCurrentPosition()?",
    "o": [
      "To handle errors like denied permissions or location retrieval failure",
      "To log the user's location in the browser console",
      "To prevent the function from executing if GPS is disabled",
      "To refresh the page if geolocation fails"
    ]
  },
  {
    "q": "Which option best describes the watchPosition() method in Geolocation API?",
    "o": [
      "It continuously tracks the user's location until stopped",
      "It retrieves the user's location only once",
      "It requires an API key to function",
      "It can only be used in secure (HTTPS) environments"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts')\n  .then(response => response.json())\n  .then(data => console.log(Array.isArray(data)));",
    "o": [
      "true",
      "false",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly retrieves and parses JSON data using Fetch API?",
    "o": [
      "fetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data));",
      "fetch('https://api.example.com/data')\n  .then(response => JSON.parse(response))\n  .then(data => console.log(data));",
      "fetch('https://api.example.com/data')\n  .then(response => response.text())\n  .then(data => JSON.stringify(data));",
      "fetch('https://api.example.com/data')\n  .then(response => console.log(response.json()));"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('user', JSON.stringify({name: 'Alice', age: 25}));\nconsole.log(localStorage.getItem('user'));",
    "o": [
      "'{\"name\":\"Alice\",\"age\":25}'",
      "{name: 'Alice', age: 25}",
      "undefined",
      "null"
    ]
  },
  {
    "q": "Which of the following is a valid way to store and retrieve an object in localStorage?",
    "o": [
      "localStorage.setItem('user', JSON.stringify({name: 'Alice'}));\nlet user = JSON.parse(localStorage.getItem('user'));",
      "localStorage.setItem('user', {name: 'Alice'});\nlet user = localStorage.getItem('user');",
      "localStorage.storeObject('user', {name: 'Alice'});\nlet user = localStorage.retrieveObject('user');",
      "localStorage.set('user', {name: 'Alice'});\nlet user = JSON.parse(localStorage.get('user'));"
    ]
  },
  {
    "q": "Which of the following statements about localStorage and sessionStorage is correct?",
    "o": [
      "localStorage persists data across sessions, while sessionStorage clears data when the session ends.",
      "Both localStorage and sessionStorage persist data across sessions.",
      "sessionStorage persists data permanently unless manually cleared.",
      "localStorage can only store data for a specific domain session."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords.latitude, position.coords.longitude),\n  error => console.log(error.message)\n);",
    "o": [
      "The user's latitude and longitude",
      "'User denied Geolocation' (if permission is denied)",
      "An error message if location cannot be retrieved",
      "All of the above"
    ]
  },
  {
    "q": "Which of the following best describes the purpose of the third parameter in getCurrentPosition()?",
    "o": [
      "It is an options object that allows setting timeout, maximum age, and high accuracy.",
      "It specifies the API key required for Geolocation API.",
      "It defines the interval at which location should be updated.",
      "It determines whether the function should run in the background."
    ]
  },
  {
    "q": "What is the correct way to continuously track the user's location?",
    "o": [
      "navigator.geolocation.watchPosition(position => console.log(position.coords.latitude, position.coords.longitude));",
      "navigator.geolocation.getPosition(position => console.log(position.coords.latitude, position.coords.longitude));",
      "navigator.geolocation.trackLocation(position => console.log(position.coords.latitude, position.coords.longitude));",
      "navigator.geolocation.onPositionChange(position => console.log(position.coords.latitude, position.coords.longitude));"
    ]
  },
  {
    "q": "Which of the following methods is used to stop tracking a user's location with watchPosition()?",
    "o": [
      "navigator.geolocation.clearWatch(id);",
      "navigator.geolocation.stopWatch(id);",
      "navigator.geolocation.removePosition(id);",
      "navigator.geolocation.terminateWatch(id);"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('theme', 'dark');\nlocalStorage.removeItem('theme');\nconsole.log(localStorage.getItem('theme'));",
    "o": [
      "null",
      "'dark'",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/users/1')\n  .then(response => response.json())\n  .then(data => console.log(data.name));",
    "o": [
      "Leanne Graham",
      "undefined",
      "[Object object]",
      "Error"
    ]
  },
  {
    "q": "Which of the following options correctly stores data in localStorage?",
    "o": [
      "localStorage.setItem('user', JSON.stringify({name: 'Bob'}));",
      "localStorage.store('user', {name: 'Bob'});",
      "localStorage.setObject('user', {name: 'Bob'});",
      "localStorage['user'] = {name: 'Bob'};"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('count', '5');\nlocalStorage.setItem('count', parseInt(localStorage.getItem('count')) + 1);\nconsole.log(localStorage.getItem('count'));",
    "o": [
      "'6'",
      "6",
      "'5'",
      "Error"
    ]
  },
  {
    "q": "Which method can be used to remove all stored data from localStorage?",
    "o": [
      "localStorage.clear();",
      "localStorage.removeAll();",
      "localStorage.deleteAll();",
      "localStorage.reset();"
    ]
  },
  {
    "q": "What happens if a user denies permission to use the Geolocation API?",
    "o": [
      "The error callback of getCurrentPosition() will be triggered.",
      "The request will be retried automatically.",
      "The API will return a default location.",
      "The browser will force the user to accept."
    ]
  },
  {
    "q": "Which of the following is NOT true about Fetch API?",
    "o": [
      "Fetch API returns a Promise.",
      "Fetch API can handle both GET and POST requests.",
      "Fetch API automatically parses JSON response without .json() call.",
      "Fetch API works asynchronously."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "sessionStorage.setItem('username', 'Alice');\nconsole.log(localStorage.getItem('username'));",
    "o": [
      "null",
      "'Alice'",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following best describes the difference between localStorage and sessionStorage?",
    "o": [
      "localStorage persists data after closing the browser, while sessionStorage does not.",
      "sessionStorage can store larger data than localStorage.",
      "localStorage encrypts data automatically, while sessionStorage does not.",
      "sessionStorage works offline, but localStorage does not."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.text())\n  .then(data => console.log(typeof data));",
    "o": [
      "'string'",
      "'object'",
      "'undefined'",
      "'JSON'"
    ]
  },
  {
    "q": "Which method is used to handle errors in Fetch API?",
    "o": [
      ".catch()",
      ".error()",
      ".fail()",
      ".reject()"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts', {\n  method: 'POST',\n  body: JSON.stringify({ title: 'foo', body: 'bar', userId: 1 }),\n  headers: { 'Content-Type': 'application/json' }\n})\n.then(response => response.json())\n.then(data => console.log(data.id));",
    "o": [
      "101",
      "undefined",
      "null",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about Fetch API is true?",
    "o": [
      "fetch() does not reject on HTTP errors like 404 or 500.",
      "fetch() automatically retries failed requests.",
      "fetch() blocks execution until the request is complete.",
      "fetch() is only supported in Node.js."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "localStorage.setItem('key', 'value');\nconsole.log(localStorage.length);",
    "o": [
      "1",
      "0",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following can store JavaScript objects in localStorage?",
    "o": [
      "localStorage.setItem('data', JSON.stringify({name: 'Alice'}));",
      "localStorage.setItemObject('data', {name: 'Alice'});",
      "localStorage.storeObject('data', {name: 'Alice'});",
      "localStorage.set('data', {name: 'Alice'});"
    ]
  },
  {
    "q": "What happens when the following code is executed?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords.latitude, position.coords.longitude),\n  error => console.log(error.message),\n  { timeout: 5000 }\n);",
    "o": [
      "Gets the user's latitude and longitude or logs an error if the request times out.",
      "Always returns the user's location instantly.",
      "Throws an error if the user denies permission, but does not timeout.",
      "Only works if the user has an active internet connection."
    ]
  },
  {
    "q": "Which of the following is NOT a valid property of the GeolocationPosition object?",
    "o": [
      "position.coords.speed",
      "position.coords.accuracy",
      "position.coords.height",
      "position.coords.longitude"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "sessionStorage.setItem('data', 'Hello');\nconsole.log(sessionStorage.getItem('data'));\nsessionStorage.clear();\nconsole.log(sessionStorage.getItem('data'));",
    "o": [
      "'Hello' followed by 'null'",
      "'Hello' followed by 'Hello'",
      "'null' followed by 'Hello'",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about sessionStorage is true?",
    "o": [
      "sessionStorage data is cleared when the browser tab is closed.",
      "sessionStorage persists data even after restarting the browser.",
      "sessionStorage encrypts data automatically.",
      "sessionStorage can store more data than localStorage."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.ok ? response.json() : Promise.reject('Error'))\n  .then(data => console.log(data.title))\n  .catch(error => console.log(error));",
    "o": [
      "The title of post 1",
      "'Error'",
      "undefined",
      "null"
    ]
  },
  {
    "q": "Which method is used to remove a single item from localStorage?",
    "o": [
      "localStorage.removeItem('key');",
      "localStorage.deleteItem('key');",
      "localStorage.clearItem('key');",
      "localStorage.remove('key');"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/users/1')\n  .then(response => response.json())\n  .then(data => console.log(data.name));",
    "o": [
      "Leanne Graham",
      "undefined",
      "Error",
      "null"
    ]
  },
  {
    "q": "Which of the following is NOT a valid HTTP method for the Fetch API?",
    "o": [
      "FETCH",
      "GET",
      "POST",
      "PUT"
    ]
  },
  {
    "q": "What will be stored in localStorage after executing this code?",
    "l": "javascript",
    "c": "localStorage.setItem('score', 100);\nlocalStorage.setItem('score', 200);\nconsole.log(localStorage.getItem('score'));",
    "o": [
      "200",
      "100",
      "null",
      "undefined"
    ]
  },
  {
    "q": "Which of the following statements about localStorage is correct?",
    "o": [
      "Data stored in localStorage persists even after the browser is closed.",
      "localStorage automatically encrypts stored data.",
      "localStorage can only store numbers.",
      "localStorage is a server-side storage solution."
    ]
  },
  {
    "q": "What happens when the following code runs?",
    "l": "javascript",
    "c": "navigator.geolocation.watchPosition(\n  position => console.log(position.coords.latitude, position.coords.longitude),\n  error => console.log(error.message)\n);",
    "o": [
      "Continuously updates the user's location until stopped.",
      "Gets the user's location once and stops.",
      "Throws an error if location access is denied.",
      "Works only on mobile devices."
    ]
  },
  {
    "q": "Which of the following is true about the Fetch API?",
    "o": [
      "fetch() returns a Promise that resolves to the Response object.",
      "fetch() blocks the execution of JavaScript until the response is received.",
      "fetch() automatically parses JSON responses.",
      "fetch() is a synchronous function."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "sessionStorage.setItem('theme', 'dark');\nconsole.log(sessionStorage.getItem('theme'));\nsessionStorage.removeItem('theme');\nconsole.log(sessionStorage.getItem('theme'));",
    "o": [
      "'dark' followed by 'null'",
      "'dark' followed by 'dark'",
      "'null' followed by 'dark'",
      "Error"
    ]
  },
  {
    "q": "Which method is used to completely remove all stored items in localStorage?",
    "o": [
      "localStorage.clear();",
      "localStorage.removeAll();",
      "localStorage.deleteAll();",
      "localStorage.reset();"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1', { method: 'DELETE' })\n  .then(response => console.log(response.status));",
    "o": [
      "200",
      "404",
      "500",
      "201"
    ]
  },
  {
    "q": "Which of the following statements about Geolocation API is correct?",
    "o": [
      "Geolocation API requires user permission to access location.",
      "Geolocation API works only with HTTPS.",
      "Geolocation API is available only on mobile devices.",
      "Geolocation API always returns accurate location."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(response => response.text())\n  .then(data => console.log(typeof data));",
    "o": [
      "\"string\"",
      "\"object\"",
      "\"undefined\"",
      "\"number\""
    ]
  },
  {
    "q": "Which of the following statements about the Fetch API is true?",
    "o": [
      "fetch() does not reject HTTP error responses (like 404 or 500).",
      "fetch() automatically converts responses to JSON.",
      "fetch() is a synchronous function.",
      "fetch() blocks the UI until the response is received."
    ]
  },
  {
    "q": "What will be stored in localStorage after executing this code?",
    "l": "javascript",
    "c": "localStorage.setItem('isLoggedIn', true);\nconsole.log(localStorage.getItem('isLoggedIn'));",
    "o": [
      "\"true\"",
      "true",
      "1",
      "\"1\""
    ]
  },
  {
    "q": "Which method is used to retrieve a stored item from localStorage?",
    "o": [
      "localStorage.getItem('key');",
      "localStorage.fetchItem('key');",
      "localStorage.retrieveItem('key');",
      "localStorage.queryItem('key');"
    ]
  },
  {
    "q": "What does the following code do?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords.latitude, position.coords.longitude),\n  error => console.log(error.message)\n);",
    "o": [
      "Gets the user's current latitude and longitude.",
      "Continuously tracks the user's location.",
      "Returns the last known location without asking for permission.",
      "Throws an error unless run on a mobile device."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts', {\n  method: 'POST',\n  body: JSON.stringify({ title: 'Test', body: 'Hello', userId: 1 }),\n  headers: { 'Content-Type': 'application/json' }\n})\n.then(response => console.log(response.status));",
    "o": [
      "201",
      "200",
      "404",
      "500"
    ]
  },
  {
    "q": "Which of the following statements about sessionStorage is correct?",
    "o": [
      "sessionStorage data is cleared when the page session ends.",
      "sessionStorage data persists even after the browser is closed.",
      "sessionStorage and localStorage store data the same way.",
      "sessionStorage requires cookies to function."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('user', JSON.stringify({ name: 'Alice', age: 25 }));\nconsole.log(localStorage.getItem('user'));",
    "o": [
      "\"{\\\"name\\\":\\\"Alice\\\",\\\"age\\\":25}\"",
      "{ name: 'Alice', age: 25 }",
      "[object Object]",
      "null"
    ]
  },
  {
    "q": "Which of the following statements about the Geolocation API is false?",
    "o": [
      "Geolocation API always returns precise location data.",
      "Geolocation API requires user permission.",
      "Geolocation API can be accessed using navigator.geolocation.",
      "Geolocation API may return an error if location services are disabled."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const storedValue = localStorage.getItem('nonExistingKey');\nconsole.log(storedValue);",
    "o": [
      "null",
      "undefined",
      "\"\"",
      "Error"
    ]
  },
  {
    "q": "What will happen when the following code runs?",
    "l": "javascript",
    "c": "fetch('https://example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.log('Error:', error));",
    "o": [
      "It will fetch the data and log the JSON response.",
      "It will throw an error because fetch() does not support JSON.",
      "It will log 'undefined' since fetch() does not return a response.",
      "It will block the execution of further code until the response is received."
    ]
  },
  {
    "q": "Which of the following statements about localStorage is true?",
    "o": [
      "Data stored in localStorage persists even after the browser is closed.",
      "localStorage automatically expires after 24 hours.",
      "localStorage is limited to 50MB per domain.",
      "localStorage can store objects directly without converting to a string."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('counter', 5);\nlocalStorage.setItem('counter', 10);\nconsole.log(localStorage.getItem('counter'));",
    "o": [
      "\"10\"",
      "\"5\"",
      "null",
      "undefined"
    ]
  },
  {
    "q": "Which method is used to remove a specific item from localStorage?",
    "o": [
      "localStorage.removeItem('key');",
      "localStorage.deleteItem('key');",
      "localStorage.clear('key');",
      "localStorage.dropItem('key');"
    ]
  },
  {
    "q": "What does the following code do?",
    "l": "javascript",
    "c": "navigator.geolocation.watchPosition(\n  position => console.log(position.coords.latitude, position.coords.longitude),\n  error => console.log(error.message)\n);",
    "o": [
      "Continuously tracks the user's location updates.",
      "Gets the user's location once and stops.",
      "Only works on mobile browsers.",
      "Fails if run on localhost."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://api.example.com/users')\n  .then(response => response.ok ? 'Success' : 'Failure')\n  .then(result => console.log(result));",
    "o": [
      "\"Success\" if the response status is 200-299, otherwise \"Failure\".",
      "\"Success\" always, regardless of response status.",
      "\"Failure\" always, regardless of response status.",
      "An error will be thrown if the status is not 200."
    ]
  },
  {
    "q": "Which of the following correctly checks if localStorage is available in a browser?",
    "o": [
      "if (typeof Storage !== 'undefined') { console.log('Available'); }",
      "if (localStorage !== null) { console.log('Available'); }",
      "if (window.localStorage.exists()) { console.log('Available'); }",
      "if (localStorage.isAvailable()) { console.log('Available'); }"
    ]
  },
  {
    "q": "What will happen when the following code runs?",
    "l": "javascript",
    "c": "fetch('https://api.example.com/data', { method: 'DELETE' })\n  .then(response => console.log(response.status));",
    "o": [
      "Logs the HTTP status code of the response.",
      "Deletes data from the browser’s localStorage.",
      "Deletes a file from the server's filesystem.",
      "Throws an error because DELETE is not a valid HTTP method."
    ]
  },
  {
    "q": "Which of the following is NOT a valid response type in the Fetch API?",
    "o": [
      "\"document\"",
      "\"json\"",
      "\"text\"",
      "\"blob\""
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "sessionStorage.setItem('sessionUser', 'Alice');\nconsole.log(sessionStorage.getItem('sessionUser'));\nsessionStorage.clear();\nconsole.log(sessionStorage.getItem('sessionUser'));",
    "o": [
      "\"Alice\" followed by \"null\"",
      "\"Alice\" followed by \"Alice\"",
      "\"null\" followed by \"Alice\"",
      "\"undefined\" followed by \"null\""
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://example.com/api')\n  .then(response => response.text())\n  .then(text => console.log(typeof text));",
    "o": [
      "\"string\"",
      "\"object\"",
      "\"undefined\"",
      "\"boolean\""
    ]
  },
  {
    "q": "Which of the following statements about the Fetch API is correct?",
    "o": [
      "fetch() returns a Promise that resolves to the Response object.",
      "fetch() blocks JavaScript execution until the response is received.",
      "fetch() always sends requests synchronously.",
      "fetch() can only be used to make GET requests."
    ]
  },
  {
    "q": "What will the following code output?",
    "l": "javascript",
    "c": "localStorage.setItem('user', JSON.stringify({ name: 'Alice', age: 25 }));\nconsole.log(typeof localStorage.getItem('user'));",
    "o": [
      "\"string\"",
      "\"object\"",
      "\"undefined\"",
      "\"null\""
    ]
  },
  {
    "q": "How can you remove all stored items from localStorage?",
    "o": [
      "localStorage.clear();",
      "localStorage.removeAll();",
      "localStorage.deleteAll();",
      "localStorage.drop();"
    ]
  },
  {
    "q": "What will happen when this code executes?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords.latitude, position.coords.longitude),\n  error => console.log(error.message),\n  { enableHighAccuracy: true }\n);",
    "o": [
      "It will attempt to fetch the user’s precise location.",
      "It will always return the same hardcoded coordinates.",
      "It will throw an error because enableHighAccuracy is not a valid option.",
      "It will only work in mobile browsers."
    ]
  },
  {
    "q": "Which statement about sessionStorage is true?",
    "o": [
      "sessionStorage data is cleared when the tab or window is closed.",
      "sessionStorage persists even after the browser is closed.",
      "sessionStorage can only store numbers.",
      "sessionStorage items are limited to 5MB per domain."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "const data = { user: 'Alice', score: 10 };\nlocalStorage.setItem('gameData', JSON.stringify(data));\nlocalStorage.removeItem('gameData');\nconsole.log(localStorage.getItem('gameData'));",
    "o": [
      "null",
      "{\"user\": \"Alice\", \"score\": 10}",
      "undefined",
      "\"Alice\""
    ]
  },
  {
    "q": "Which of the following Fetch API methods correctly sends JSON data in a POST request?",
    "o": [
      "fetch('https://api.example.com', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({ name: 'John' })\n});",
      "fetch('https://api.example.com', {\n  method: 'GET',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({ name: 'John' })\n});",
      "fetch('https://api.example.com', {\n  method: 'POST',\n  body: { name: 'John' }\n});",
      "fetch('https://api.example.com', {\n  method: 'POST',\n  headers: { 'Accept': 'application/json' },\n  body: '{ name: John }'\n});"
    ]
  },
  {
    "q": "Which of the following correctly retrieves an item from localStorage and converts it back to an object?",
    "o": [
      "JSON.parse(localStorage.getItem('userData'));",
      "localStorage.getItem('userData');",
      "localStorage.fetch('userData');",
      "localStorage.retrieve('userData');"
    ]
  },
  {
    "q": "What does the following code do?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords.latitude, position.coords.longitude),\n  error => console.error(error)\n);",
    "o": [
      "Retrieves the user’s current location.",
      "Returns a fixed set of GPS coordinates.",
      "Throws an error in all browsers.",
      "Disables location tracking."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(response => response.json())\n  .then(data => console.log(typeof data));",
    "o": [
      "\"object\"",
      "\"string\"",
      "\"undefined\"",
      "\"boolean\""
    ]
  },
  {
    "q": "Which of the following is a correct way to handle errors in a Fetch API request?",
    "o": [
      "fetch('https://example.com')\n  .then(response => {\n    if (!response.ok) throw new Error('Network error');\n    return response.json();\n  })\n  .catch(error => console.error(error));",
      "fetch('https://example.com')\n  .catch(error => console.log('Error:', error));",
      "try {\n  fetch('https://example.com');\n} catch (error) {\n  console.error(error);\n}",
      "fetch('https://example.com').then(response => response.json());"
    ]
  },
  {
    "q": "What will the following code output?",
    "l": "javascript",
    "c": "localStorage.setItem('user', 'John Doe');\nlocalStorage.clear();\nconsole.log(localStorage.getItem('user'));",
    "o": [
      "null",
      "\"John Doe\"",
      "undefined",
      "Error: user is not defined"
    ]
  },
  {
    "q": "Which of the following is true about the localStorage API?",
    "o": [
      "Data in localStorage persists even after the browser is closed.",
      "Data in localStorage is deleted when the user closes the tab.",
      "localStorage can only store numbers.",
      "localStorage requires an internet connection to function."
    ]
  },
  {
    "q": "What will happen when this code executes?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords),\n  error => console.log(error),\n  { timeout: 5000 }\n);",
    "o": [
      "It will attempt to fetch the user's location within 5 seconds.",
      "It will always return null if the timeout is set.",
      "It will throw an error if executed in a browser.",
      "It will automatically grant location permission."
    ]
  },
  {
    "q": "Which method can be used to remove a specific item from localStorage?",
    "o": [
      "localStorage.removeItem('key');",
      "localStorage.deleteItem('key');",
      "localStorage.drop('key');",
      "localStorage.erase('key');"
    ]
  },
  {
    "q": "What will the following code output?",
    "l": "javascript",
    "c": "sessionStorage.setItem('score', '100');\nsessionStorage.removeItem('score');\nconsole.log(sessionStorage.getItem('score'));",
    "o": [
      "null",
      "\"100\"",
      "undefined",
      "Error: score is not defined"
    ]
  },
  {
    "q": "Which Fetch API option allows sending custom headers with a request?",
    "o": [
      "headers",
      "method",
      "body",
      "cache"
    ]
  },
  {
    "q": "Which of the following correctly checks if geolocation is available in the browser?",
    "o": [
      "\"geolocation\" in navigator",
      "navigator.hasOwnProperty(\"geolocation\")",
      "typeof navigator.geolocation !== \"undefined\"",
      "navigator.supports(\"geolocation\")"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('data', JSON.stringify({ name: 'Alice' }));\nconsole.log(typeof localStorage.getItem('data'));",
    "o": [
      "\"string\"",
      "\"object\"",
      "\"undefined\"",
      "\"boolean\""
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.text())\n  .then(data => console.log(typeof data));",
    "o": [
      "\"string\"",
      "\"object\"",
      "\"undefined\"",
      "\"boolean\""
    ]
  },
  {
    "q": "Which of the following correctly sends a POST request using Fetch API?",
    "o": [
      "fetch('https://api.example.com/data', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({ name: 'Alice' })\n})",
      "fetch('https://api.example.com/data', {\n  method: 'SEND',\n  headers: { 'Accept': 'application/json' },\n  data: { name: 'Alice' }\n})",
      "fetch('https://api.example.com/data', {\n  headers: { 'Accept': 'application/json' },\n  body: JSON.stringify({ name: 'Alice' })\n})",
      "fetch('https://api.example.com/data', {\n  method: 'POST',\n  headers: { 'Content-Type': 'text/plain' },\n  data: { name: 'Alice' }\n})"
    ]
  },
  {
    "q": "What will the following code output?",
    "l": "javascript",
    "c": "localStorage.setItem('count', 10);\nlocalStorage.setItem('count', parseInt(localStorage.getItem('count')) + 5);\nconsole.log(localStorage.getItem('count'));",
    "o": [
      "\"15\"",
      "15",
      "\"10\"",
      "undefined"
    ]
  },
  {
    "q": "Which of the following is NOT true about localStorage?",
    "o": [
      "localStorage can only store string values.",
      "localStorage is synchronous and may block the main thread.",
      "localStorage data is automatically cleared when the browser is closed.",
      "localStorage allows storing up to 5MB of data per origin."
    ]
  },
  {
    "q": "What will happen when executing this code?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(position => console.log(position.coords.latitude), console.error);",
    "o": [
      "It will print the user's latitude if permission is granted.",
      "It will throw an error because getCurrentPosition() requires an argument.",
      "It will return undefined.",
      "It will always return 0 as the latitude."
    ]
  },
  {
    "q": "How can you check if an item exists in localStorage?",
    "o": [
      "localStorage.getItem('key') !== null",
      "localStorage.hasOwnProperty('key')",
      "localStorage.exists('key')",
      "localStorage.contains('key')"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "sessionStorage.setItem('user', 'John');\nsessionStorage.clear();\nconsole.log(sessionStorage.getItem('user'));",
    "o": [
      "null",
      "\"John\"",
      "undefined",
      "Error: user is not defined"
    ]
  },
  {
    "q": "Which HTTP method is used by default in a Fetch API request?",
    "o": [
      "GET",
      "POST",
      "PUT",
      "DELETE"
    ]
  },
  {
    "q": "Which statement about the Geolocation API is correct?",
    "o": [
      "It requires user permission to access location data.",
      "It can be used without any user interaction.",
      "It always provides an accurate location.",
      "It works only on mobile devices."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('data', JSON.stringify({ age: 25 }));\nconsole.log(typeof localStorage.getItem('data'));",
    "o": [
      "\"string\"",
      "\"object\"",
      "\"undefined\"",
      "\"number\""
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.json())\n  .then(data => console.log(typeof data));",
    "o": [
      "\"object\"",
      "\"string\"",
      "\"undefined\"",
      "\"number\""
    ]
  },
  {
    "q": "Which of the following is true about the Fetch API?",
    "o": [
      "It returns a Promise that resolves to the Response object.",
      "It requires a callback function instead of Promises.",
      "It only works with GET requests.",
      "It automatically parses JSON responses."
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('username', 'John');\nlocalStorage.removeItem('username');\nconsole.log(localStorage.getItem('username'));",
    "o": [
      "null",
      "\"John\"",
      "undefined",
      "An error is thrown"
    ]
  },
  {
    "q": "Which of the following is NOT a valid way to store data in localStorage?",
    "o": [
      "localStorage.setItem('key', { name: 'Alice' })",
      "localStorage.setItem('key', 'value')",
      "localStorage.setItem('key', JSON.stringify({ name: 'Alice' }))",
      "localStorage.setItem('key', 123)"
    ]
  },
  {
    "q": "What will happen when executing the following code?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(position => console.log(position.coords.longitude));",
    "o": [
      "The user's longitude is printed if permission is granted.",
      "An error is thrown because getCurrentPosition() requires arguments.",
      "It returns undefined.",
      "It always returns 0 as the longitude."
    ]
  },
  {
    "q": "How can you remove all items from localStorage?",
    "o": [
      "localStorage.clear()",
      "localStorage.removeAll()",
      "localStorage.deleteAll()",
      "localStorage.purge()"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://api.example.com/data')\n  .then(response => console.status)\n  .then(status => console.log(status))\n  .catch(error => console.error(error));",
    "o": [
      "An error because status is not a property of response",
      "200",
      "undefined",
      "null"
    ]
  },
  {
    "q": "Which of the following is NOT true about sessionStorage?",
    "o": [
      "sessionStorage persists data even after the browser is closed.",
      "sessionStorage only stores data for the duration of the page session.",
      "sessionStorage works similarly to localStorage but is temporary.",
      "sessionStorage cannot be accessed across different browser tabs."
    ]
  },
  {
    "q": "Which function is used to parse JSON data from a Fetch API response?",
    "o": [
      "response.json()",
      "response.parseJSON()",
      "response.toJSON()",
      "JSON.parse(response)"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "localStorage.setItem('score', '20');\nconsole.log(localStorage.getItem('score') + 10);",
    "o": [
      "\"2010\"",
      "30",
      "NaN",
      "An error is thrown"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts', {\n  method: 'POST',\n  body: JSON.stringify({ title: 'Test' }),\n  headers: { 'Content-Type': 'application/json' }\n})\n.then(response => response.ok)\n.then(ok => console.log(ok));",
    "o": [
      "true",
      "false",
      "undefined",
      "An error occurs"
    ]
  },
  {
    "q": "Which method retrieves an item from localStorage?",
    "o": [
      "localStorage.getItem('key')",
      "localStorage.retrieve('key')",
      "localStorage.fetchItem('key')",
      "localStorage.get('key')"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "sessionStorage.setItem('data', 'value');\nsessionStorage.clear();\nconsole.log(sessionStorage.getItem('data'));",
    "o": [
      "null",
      "\"value\"",
      "undefined",
      "An error occurs"
    ]
  },
  {
    "q": "What is the correct way to check if the browser supports the Fetch API?",
    "o": [
      "'fetch' in window",
      "window.hasFeature('fetch')",
      "typeof fetch !== 'undefined'",
      "window.supports('fetch')"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "navigator.geolocation.getCurrentPosition(\n  position => console.log(position.coords.latitude),\n  error => console.log(error.message)\n);",
    "o": [
      "Either the user's latitude or an error message",
      "Always the user's latitude",
      "Always an error message",
      "Undefined"
    ]
  },
  {
    "q": "Which of the following is true about Fetch API error handling?",
    "o": [
      "The fetch() call does not reject on HTTP errors like 404 or 500.",
      "fetch() automatically retries failed requests.",
      "fetch() requires async/await to handle errors.",
      "fetch() will throw an exception if the response status is not 200."
    ]
  },
  {
    "q": "What happens if you try to access localStorage in an incognito mode where storage is disabled?",
    "o": [
      "An error is thrown",
      "It returns null",
      "It returns undefined",
      "It behaves normally"
    ]
  },
  {
    "q": "Which function is used to delete an item from localStorage?",
    "o": [
      "localStorage.removeItem('key')",
      "localStorage.delete('key')",
      "localStorage.clearItem('key')",
      "localStorage.drop('key')"
    ]
  },
  {
    "q": "What will be logged to the console?",
    "l": "javascript",
    "c": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.text())\n  .then(text => console.log(typeof text));",
    "o": [
      "\"string\"",
      "\"object\"",
      "\"undefined\"",
      "\"number\""
    ]
  },
  {
    "q": "Which of the following is NOT true about geolocation API?",
    "o": [
      "It can be blocked by the user for privacy reasons.",
      "It can be accessed without user permission.",
      "It provides latitude and longitude coordinates.",
      "It may be inaccurate depending on the device."
    ]
  }
]