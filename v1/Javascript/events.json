[
  {
    "q": "What will be logged when the following code runs?",
    "l": "javascript",
    "c": "document.getElementById(\"btn\").addEventListener(\"click\", function() {\n    console.log(\"Button clicked!\");\n});",
    "o": [
      "\"Button clicked!\"",
      "Nothing happens",
      "Error: getElementById is not a function",
      "undefined"
    ]
  },
  {
    "q": "Which method is used to attach an event listener to an element?",
    "o": [
      "element.addEventListener(event, function)",
      "element.attachEvent(event, function)",
      "element.onEvent(event, function)",
      "element.listen(event, function)"
    ]
  },
  {
    "q": "What will be logged when clicking on the child element inside the parent?",
    "l": "javascript",
    "c": "<div id=\"parent\">\n    <button id=\"child\">Click me</button>\n</div>\n\n<script>\ndocument.getElementById(\"parent\").addEventListener(\"click\", function() {\n    console.log(\"Parent clicked\");\n});\ndocument.getElementById(\"child\").addEventListener(\"click\", function() {\n    console.log(\"Child clicked\");\n});\n</script>",
    "o": [
      "\"Child clicked!\" followed by \"Parent clicked!\"",
      "\"Parent clicked!\" followed by \"Child clicked!\"",
      "\"Parent clicked!\" only",
      "\"Child clicked!\" only"
    ]
  },
  {
    "q": "What is event delegation in JavaScript?",
    "o": [
      "A technique where a single event listener is attached to a parent element to handle events on its child elements",
      "A way to delegate JavaScript execution to the browser",
      "A built-in JavaScript method for event handling",
      "An event that is only triggered once"
    ]
  },
  {
    "q": "What happens when event.stopPropagation() is called inside an event handler?",
    "o": [
      "It prevents the event from propagating to parent elements",
      "It stops the default action of the event",
      "It removes the event listener",
      "It prevents the event from being triggered again"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click Me</button>\n\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    console.log(\"Button clicked!\");\n});\n</script>",
    "o": [
      "\"Button clicked!\"",
      "Error: preventDefault is not a function",
      "Nothing happens",
      "undefined"
    ]
  },
  {
    "q": "Which of the following statements about event bubbling is correct?",
    "o": [
      "In event bubbling, the event first triggers on the target element and then propagates up to its ancestors",
      "In event bubbling, the event first triggers on the root element and then propagates down to the target element",
      "Event bubbling is disabled by default in JavaScript",
      "Event bubbling only occurs for mouse events"
    ]
  },
  {
    "q": "What will be logged when clicking the button inside the div?",
    "l": "javascript",
    "c": "<div id=\"container\">\n    <button id=\"btn\">Click Me</button>\n</div>\n\n<script>\ndocument.getElementById(\"container\").addEventListener(\"click\", function() {\n    console.log(\"Container clicked\");\n}, true);\n\ndocument.getElementById(\"btn\").addEventListener(\"click\", function() {\n    console.log(\"Button clicked\");\n});\n</script>",
    "o": [
      "\"Container clicked\" followed by \"Button clicked\"",
      "\"Button clicked\" followed by \"Container clicked\"",
      "Only \"Button clicked\"",
      "Only \"Container clicked\""
    ]
  },
  {
    "q": "Which property can be used to prevent the default action of an event?",
    "o": [
      "event.preventDefault()",
      "event.stopPropagation()",
      "event.cancel()",
      "event.halt()"
    ]
  },
  {
    "q": "What will be the output when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    event.stopPropagation();\n    console.log(\"Button clicked\");\n});\n\ndocument.body.addEventListener(\"click\", function() {\n    console.log(\"Body clicked\");\n});\n</script>",
    "o": [
      "\"Button clicked\"",
      "\"Button clicked\" followed by \"Body clicked\"",
      "\"Body clicked\" followed by \"Button clicked\"",
      "No output"
    ]
  },
  {
    "q": "Which of the following is true about event capturing (or trickling)?",
    "o": [
      "In event capturing, the event propagates from the root element down to the target element",
      "In event capturing, the event propagates from the target element to the root",
      "Event capturing only works for mouse events",
      "Event capturing is enabled by default"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click</button>\n\n<script>\nfunction handleClick() {\n    console.log(\"Clicked\");\n    this.removeEventListener(\"click\", handleClick);\n}\ndocument.getElementById(\"btn\").addEventListener(\"click\", handleClick);\n</script>",
    "o": [
      "\"Clicked\" only once, even on multiple clicks",
      "\"Clicked\" every time the button is clicked",
      "Error: removeEventListener is not a function",
      "Nothing happens"
    ]
  },
  {
    "q": "Which of the following is an advantage of event delegation?",
    "o": [
      "It reduces memory usage by adding a single event listener instead of multiple listeners",
      "It prevents event bubbling",
      "It makes event handling synchronous",
      "It disables default event actions"
    ]
  },
  {
    "q": "What happens if event listeners are added without removing them properly?",
    "o": [
      "It may cause memory leaks",
      "It prevents the event from triggering",
      "It stops the propagation of the event",
      "It automatically removes itself"
    ]
  },
  {
    "q": "Which event will be prevented when using event.preventDefault() on an anchor tag?",
    "l": "javascript",
    "c": "<a href=\"https://example.com\" id=\"link\">Click me</a>\n\n<script>\ndocument.getElementById(\"link\").addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    console.log(\"Link clicked, but navigation prevented\");\n});\n</script>",
    "o": [
      "Navigation to 'https://example.com' will be prevented",
      "Nothing happens",
      "Console logs 'Link clicked, but navigation prevented' and still navigates",
      "Error: preventDefault is not a function"
    ]
  },
  {
    "q": "Which event listener method will run only once and then be automatically removed?",
    "o": [
      "element.addEventListener(event, handler, { once: true })",
      "element.once(event, handler)",
      "element.addEvent(event, handler, { remove: true })",
      "element.handleEvent(event, { once: true })"
    ]
  },
  {
    "q": "Which event property can be used to identify the element on which the event originally occurred?",
    "o": [
      "event.target",
      "event.currentTarget",
      "event.srcElement",
      "event.origin"
    ]
  },
  {
    "q": "What happens if multiple event listeners are added to the same element for the same event?",
    "o": [
      "All listeners will be executed in the order they were added",
      "Only the last added listener will execute",
      "Only the first added listener will execute",
      "An error will be thrown"
    ]
  },
  {
    "q": "What will be logged when clicking the button inside the div?",
    "l": "javascript",
    "c": "<div id=\"outer\">\n    <button id=\"inner\">Click me</button>\n</div>\n\n<script>\ndocument.getElementById(\"outer\").addEventListener(\"click\", function() {\n    console.log(\"Div clicked\");\n});\ndocument.getElementById(\"inner\").addEventListener(\"click\", function(event) {\n    console.log(\"Button clicked\");\n    event.stopPropagation();\n});\n</script>",
    "o": [
      "\"Button clicked\"",
      "\"Button clicked\" followed by \"Div clicked\"",
      "\"Div clicked\" followed by \"Button clicked\"",
      "Nothing happens"
    ]
  },
  {
    "q": "Which statement about event delegation is true?",
    "o": [
      "It allows a parent element to listen for events on its dynamically added child elements",
      "It prevents event bubbling",
      "It only works with click events",
      "It requires manually binding event handlers to each child element"
    ]
  },
  {
    "q": "Which method is used to remove an event listener?",
    "o": [
      "element.removeEventListener(event, handler)",
      "element.detachEvent(event, handler)",
      "element.off(event, handler)",
      "element.clearEvent(event, handler)"
    ]
  },
  {
    "q": "What is the purpose of the 'once' option in addEventListener?",
    "o": [
      "It ensures the event listener runs only once and then removes itself",
      "It prevents event bubbling",
      "It allows the event listener to persist indefinitely",
      "It makes the event listener run twice before removal"
    ]
  },
  {
    "q": "What will happen if event.preventDefault() is used on a submit button inside a form?",
    "l": "javascript",
    "c": "<form>\n    <button type=\"submit\" id=\"submitBtn\">Submit</button>\n</form>\n\n<script>\ndocument.getElementById(\"submitBtn\").addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    console.log(\"Form submission prevented\");\n});\n</script>",
    "o": [
      "The form will not be submitted",
      "The form will be submitted as usual",
      "An error will be thrown",
      "The button will be disabled"
    ]
  },
  {
    "q": "What is the difference between event.target and event.currentTarget?",
    "o": [
      "event.target is the element that triggered the event, while event.currentTarget is the element to which the event listener is attached",
      "event.target and event.currentTarget always return the same value",
      "event.currentTarget refers to the root element of the DOM",
      "event.target refers to the parent element of the triggered event"
    ]
  },
  {
    "q": "Which of the following is true about event bubbling?",
    "o": [
      "It allows events to propagate from the target element up to its ancestors",
      "It allows events to propagate from the root element down to the target element",
      "Event bubbling only works for click events",
      "Event bubbling is disabled by default"
    ]
  },
  {
    "q": "What will be the output when clicking the button inside the div?",
    "l": "javascript",
    "c": "<div id=\"parent\">\n    <button id=\"child\">Click me</button>\n</div>\n\n<script>\ndocument.getElementById(\"parent\").addEventListener(\"click\", function(event) {\n    console.log(\"Parent clicked\");\n    event.stopImmediatePropagation();\n});\ndocument.getElementById(\"child\").addEventListener(\"click\", function() {\n    console.log(\"Child clicked\");\n});\n</script>",
    "o": [
      "\"Parent clicked\" only",
      "\"Child clicked\" followed by \"Parent clicked\"",
      "Nothing happens",
      "\"Parent clicked\" followed by \"Child clicked\""
    ]
  },
  {
    "q": "What is the default behavior of an anchor tag (<a>) when clicked?",
    "o": [
      "It navigates to the specified href",
      "It submits a form",
      "It reloads the page",
      "It prevents the event from propagating"
    ]
  },
  {
    "q": "Which of the following is an example of event delegation?",
    "l": "javascript",
    "c": "<ul id=\"menu\">\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n</ul>\n\n<script>\ndocument.getElementById(\"menu\").addEventListener(\"click\", function(event) {\n    console.log(\"Clicked on: \" + event.target.textContent);\n});\n</script>",
    "o": [
      "The parent <ul> listens for clicks on its child <li> elements",
      "Each <li> has its own individual event listener",
      "Events are prevented from bubbling",
      "An error occurs due to missing event listeners"
    ]
  },
  {
    "q": "Which event phase runs first when using event capturing?",
    "o": [
      "The event propagates from the root element down to the target",
      "The event propagates from the target element to the root",
      "The event is executed only on the target",
      "Event capturing and bubbling occur simultaneously"
    ]
  },
  {
    "q": "How can you ensure an event listener executes only once?",
    "o": [
      "By using { once: true } in addEventListener",
      "By calling removeEventListener before execution",
      "By setting the event listener to passive mode",
      "By using stopPropagation()"
    ]
  },
  {
    "q": "Which property allows you to check if the default action of an event was prevented?",
    "o": [
      "event.defaultPrevented",
      "event.preventDefault()",
      "event.stopPropagation()",
      "event.isCanceled"
    ]
  },
  {
    "q": "Which event is triggered when a user clicks inside an input field?",
    "o": [
      "focus",
      "click",
      "change",
      "keydown"
    ]
  },
  {
    "q": "Which of the following methods is used to stop event propagation?",
    "o": [
      "event.stopPropagation()",
      "event.preventDefault()",
      "event.halt()",
      "event.cancel()"
    ]
  },
  {
    "q": "What will be logged when clicking the paragraph inside the div?",
    "l": "javascript",
    "c": "<div id=\"container\">\n    <p id=\"text\">Click me</p>\n</div>\n\n<script>\ndocument.getElementById(\"container\").addEventListener(\"click\", function() {\n    console.log(\"Div clicked\");\n});\ndocument.getElementById(\"text\").addEventListener(\"click\", function(event) {\n    console.log(\"Paragraph clicked\");\n});\n</script>",
    "o": [
      "\"Paragraph clicked\" followed by \"Div clicked\"",
      "\"Div clicked\" followed by \"Paragraph clicked\"",
      "Only \"Paragraph clicked\"",
      "Only \"Div clicked\""
    ]
  },
  {
    "q": "Which statement is true about the addEventListener method?",
    "o": [
      "It allows adding multiple handlers for the same event on the same element",
      "It replaces any existing event listeners on the element",
      "It can only listen to 'click' events",
      "It must be removed using removeEventListener() immediately after execution"
    ]
  },
  {
    "q": "What happens when event.stopImmediatePropagation() is called?",
    "o": [
      "It stops the current event and prevents other listeners of the same event from executing",
      "It stops event propagation but allows other event listeners on the same element",
      "It prevents the default action of an event",
      "It stops capturing but allows bubbling"
    ]
  },
  {
    "q": "Which option correctly explains the difference between event.preventDefault() and event.stopPropagation()?",
    "o": [
      "event.preventDefault() stops the default action, event.stopPropagation() stops event bubbling",
      "event.preventDefault() stops event bubbling, event.stopPropagation() prevents default actions",
      "Both methods do the same thing",
      "event.preventDefault() removes the event listener, while event.stopPropagation() cancels the event"
    ]
  },
  {
    "q": "Which of the following events does NOT bubble by default?",
    "o": [
      "focus",
      "click",
      "keydown",
      "dblclick"
    ]
  },
  {
    "q": "What will be the output when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"myBtn\">Click Me</button>\n\n<script>\ndocument.getElementById(\"myBtn\").addEventListener(\"click\", function(event) {\n    console.log(\"Button clicked\");\n    event.preventDefault();\n});\n</script>",
    "o": [
      "\"Button clicked\"",
      "The default action of the button will execute",
      "An error will be thrown",
      "Nothing will be logged"
    ]
  },
  {
    "q": "In event delegation, where should the event listener be added?",
    "o": [
      "On a parent element",
      "On each individual child element",
      "On the document object only",
      "On a dynamically created event handler"
    ]
  },
  {
    "q": "Which event should be used to detect when a user releases a key?",
    "o": [
      "keyup",
      "keydown",
      "keypress",
      "release"
    ]
  },
  {
    "q": "What will happen if you call removeEventListener on a function that was declared inline within addEventListener?",
    "o": [
      "It won't remove the event listener",
      "It will remove the event listener",
      "An error will occur",
      "The event listener will execute once before removal"
    ]
  },
  {
    "q": "Which event is triggered when a user right-clicks on a webpage?",
    "o": [
      "contextmenu",
      "click",
      "dblclick",
      "mousedown"
    ]
  },
  {
    "q": "Which property is used to check which mouse button was clicked?",
    "o": [
      "event.button",
      "event.keyCode",
      "event.mouseClick",
      "event.which"
    ]
  },
  {
    "q": "What will happen when clicking the link?",
    "l": "javascript",
    "c": "<a href=\"https://example.com\" id=\"myLink\">Click me</a>\n\n<script>\ndocument.getElementById(\"myLink\").addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    console.log(\"Link clicked but not followed\");\n});\n</script>",
    "o": [
      "\"Link clicked but not followed\"",
      "The page will navigate to 'https://example.com'",
      "An error will occur",
      "Nothing happens"
    ]
  },
  {
    "q": "Which of the following is NOT a valid JavaScript event?",
    "o": [
      "onswipe",
      "onfocus",
      "ondblclick",
      "onkeydown"
    ]
  },
  {
    "q": "What is the correct way to attach a 'click' event to a button using JavaScript?",
    "o": [
      "button.addEventListener(\"click\", myFunction);",
      "button.onclick = myFunction();",
      "button.onClick(myFunction);",
      "button.clickEvent = myFunction();"
    ]
  },
  {
    "q": "Which statement best describes the capture phase in event propagation?",
    "o": [
      "Events travel from the root element to the target element",
      "Events travel from the target element to the root",
      "The event fires only at the target element",
      "It prevents default actions from occurring"
    ]
  },
  {
    "q": "What will be the output when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click</button>\n\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function() {\n    console.log(\"First listener\");\n});\ndocument.getElementById(\"btn\").addEventListener(\"click\", function() {\n    console.log(\"Second listener\");\n});\n</script>",
    "o": [
      "\"First listener\" followed by \"Second listener\"",
      "Only \"First listener\"",
      "Only \"Second listener\"",
      "Nothing happens"
    ]
  },
  {
    "q": "Which event is triggered when a user moves the mouse over an element?",
    "o": [
      "mouseover",
      "mouseenter",
      "mousemove",
      "mousehover"
    ]
  },
  {
    "q": "Which event is used to detect changes in an input field?",
    "o": [
      "change",
      "input",
      "keyup",
      "keydown"
    ]
  },
  {
    "q": "What will be logged when clicking the input field?",
    "l": "javascript",
    "c": "<input type=\"text\" id=\"myInput\">\n\n<script>\ndocument.getElementById(\"myInput\").addEventListener(\"focus\", function() {\n    console.log(\"Input field focused\");\n});\n</script>",
    "o": [
      "\"Input field focused\"",
      "\"Input field clicked\"",
      "Nothing",
      "An error occurs"
    ]
  },
  {
    "q": "Which method is used to remove an event listener in JavaScript?",
    "o": [
      "element.removeEventListener()",
      "element.offEvent()",
      "element.detachEvent()",
      "element.clearEventListener()"
    ]
  },
  {
    "q": "What will be the output when clicking the child div?",
    "l": "javascript",
    "c": "<div id=\"parent\">\n    <div id=\"child\">Click me</div>\n</div>\n\n<script>\ndocument.getElementById(\"parent\").addEventListener(\"click\", function() {\n    console.log(\"Parent clicked\");\n});\ndocument.getElementById(\"child\").addEventListener(\"click\", function(event) {\n    console.log(\"Child clicked\");\n    event.stopPropagation();\n});\n</script>",
    "o": [
      "\"Child clicked\"",
      "\"Child clicked\" followed by \"Parent clicked\"",
      "Only \"Parent clicked\"",
      "Nothing happens"
    ]
  },
  {
    "q": "Which of the following correctly describes event bubbling?",
    "o": [
      "Events propagate from the target element up to its ancestors",
      "Events propagate from the root down to the target element",
      "Events fire only on the element where they are registered",
      "Events do not propagate at all"
    ]
  },
  {
    "q": "Which of the following is NOT a valid way to attach an event listener?",
    "o": [
      "element.on('click', handler);",
      "element.addEventListener('click', handler);",
      "element.onclick = handler;",
      "element[\"onclick\"] = handler;"
    ]
  },
  {
    "q": "Which event should be used to detect when a form is submitted?",
    "o": [
      "submit",
      "change",
      "input",
      "click"
    ]
  },
  {
    "q": "What happens when event.preventDefault() is used?",
    "o": [
      "It prevents the default browser behavior for the event",
      "It stops event propagation",
      "It removes the event listener",
      "It cancels all event listeners on the page"
    ]
  },
  {
    "q": "What will be logged when the button is clicked?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click Me</button>\n\n<script>\nfunction handleClick() {\n    console.log(\"Button clicked\");\n}\ndocument.getElementById(\"btn\").addEventListener(\"click\", handleClick);\ndocument.getElementById(\"btn\").removeEventListener(\"click\", handleClick);\n</script>",
    "o": [
      "Nothing happens",
      "\"Button clicked\"",
      "An error occurs",
      "Event listener is removed after one click"
    ]
  },
  {
    "q": "Which of the following describes event delegation?",
    "o": [
      "Using a parent element to listen for events on child elements",
      "Attaching an event listener to each child element",
      "Stopping event propagation",
      "Preventing default behavior of an event"
    ]
  },
  {
    "q": "What will be logged when clicking on 'Item 2'?",
    "l": "javascript",
    "c": "<ul id=\"list\">\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n</ul>\n\n<script>\ndocument.getElementById(\"list\").addEventListener(\"click\", function(event) {\n    console.log(event.target.textContent);\n});\n</script>",
    "o": [
      "\"Item 2\"",
      "\"list\"",
      "\"undefined\"",
      "Nothing happens"
    ]
  },
  {
    "q": "Which event is triggered when an input field loses focus?",
    "o": [
      "blur",
      "focus",
      "change",
      "input"
    ]
  },
  {
    "q": "What is the difference between mouseover and mouseenter events?",
    "o": [
      "mouseenter does not bubble, mouseover does",
      "mouseover does not bubble, mouseenter does",
      "Both events are identical",
      "mouseenter fires only once, while mouseover fires continuously"
    ]
  },
  {
    "q": "What will happen when the link is clicked?",
    "l": "javascript",
    "c": "<a href=\"https://example.com\" id=\"link\">Click me</a>\n\n<script>\ndocument.getElementById(\"link\").addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    console.log(\"Link clicked but navigation prevented\");\n});\n</script>",
    "o": [
      "\"Link clicked but navigation prevented\"",
      "Navigates to 'https://example.com'",
      "Nothing happens",
      "An error occurs"
    ]
  },
  {
    "q": "Which of the following statements is true about the keydown event?",
    "o": [
      "It fires when a key is pressed down",
      "It fires when a key is released",
      "It only detects alphanumeric keys",
      "It does not work for special keys like Shift or Ctrl"
    ]
  },
  {
    "q": "Which of the following events fires when an element is double-clicked?",
    "o": [
      "dblclick",
      "click",
      "mousedown",
      "mouseup"
    ]
  },
  {
    "q": "What will be logged when clicking the input field?",
    "l": "javascript",
    "c": "<input type=\"text\" id=\"myInput\">\n\n<script>\ndocument.getElementById(\"myInput\").addEventListener(\"focus\", function() {\n    console.log(\"Input focused\");\n});\n</script>",
    "o": [
      "\"Input focused\"",
      "\"Input clicked\"",
      "Nothing",
      "An error occurs"
    ]
  },
  {
    "q": "Which event is fired when a user presses and releases a key?",
    "o": [
      "keypress",
      "keydown",
      "keyup",
      "input"
    ]
  },
  {
    "q": "Which event should be used to detect scrolling?",
    "o": [
      "scroll",
      "wheel",
      "mousemove",
      "onscroll"
    ]
  },
  {
    "q": "Which property contains the element that triggered the event?",
    "o": [
      "event.target",
      "event.currentTarget",
      "event.sourceElement",
      "event.origin"
    ]
  },
  {
    "q": "Which event fires when the user resizes the browser window?",
    "o": [
      "resize",
      "scroll",
      "change",
      "windowResize"
    ]
  },
  {
    "q": "Which method is used to stop event propagation?",
    "o": [
      "event.stopPropagation()",
      "event.preventDefault()",
      "event.stopEvent()",
      "event.cancel()"
    ]
  },
  {
    "q": "What will be the output when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click Me</button>\n\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function() {\n    console.log(\"Button Clicked\");\n}, true);\ndocument.body.addEventListener(\"click\", function() {\n    console.log(\"Body Clicked\");\n}, true);\n</script>",
    "o": [
      "\"Body Clicked\" followed by \"Button Clicked\"",
      "\"Button Clicked\" followed by \"Body Clicked\"",
      "Only \"Button Clicked\"",
      "Only \"Body Clicked\""
    ]
  },
  {
    "q": "Which of the following is TRUE about event delegation?",
    "o": [
      "It allows a parent element to handle events for its child elements",
      "It requires adding event listeners to each child element individually",
      "It prevents event bubbling",
      "It is only used for form elements"
    ]
  },
  {
    "q": "What is the purpose of capturing phase in event propagation?",
    "o": [
      "Events are handled from the root element down to the target",
      "Events are handled from the target up to the root",
      "Events are only handled at the target element",
      "Events do not propagate in capturing phase"
    ]
  },
  {
    "q": "What will be logged when clicking on the div?",
    "l": "javascript",
    "c": "<div id=\"box\">Click me</div>\n\n<script>\ndocument.getElementById(\"box\").addEventListener(\"click\", function(event) {\n    console.log(event.currentTarget.id);\n});\n</script>",
    "o": [
      "\"box\"",
      "\"Click me\"",
      "\"undefined\"",
      "Nothing happens"
    ]
  },
  {
    "q": "Which event is triggered when a user right-clicks on an element?",
    "o": [
      "contextmenu",
      "click",
      "mousedown",
      "mouseup"
    ]
  },
  {
    "q": "Which of the following describes the default action of a form submit event?",
    "o": [
      "The form data is sent to the specified action URL",
      "The page reloads automatically",
      "The form gets cleared",
      "The form submission is prevented"
    ]
  },
  {
    "q": "What will be logged when clicking the child div?",
    "l": "javascript",
    "c": "<div id=\"parent\">\n    <div id=\"child\">Click me</div>\n</div>\n\n<script>\ndocument.getElementById(\"parent\").addEventListener(\"click\", function() {\n    console.log(\"Parent clicked\");\n});\ndocument.getElementById(\"child\").addEventListener(\"click\", function() {\n    console.log(\"Child clicked\");\n});\n</script>",
    "o": [
      "\"Child clicked\" followed by \"Parent clicked\"",
      "\"Parent clicked\" followed by \"Child clicked\"",
      "Only \"Child clicked\"",
      "Only \"Parent clicked\""
    ]
  },
  {
    "q": "Which property returns the element that the event was originally dispatched on?",
    "o": [
      "event.target",
      "event.currentTarget",
      "event.delegateTarget",
      "event.sourceElement"
    ]
  },
  {
    "q": "What will happen when the link is clicked?",
    "l": "javascript",
    "c": "<a href=\"https://example.com\" id=\"link\">Click me</a>\n\n<script>\ndocument.getElementById(\"link\").addEventListener(\"click\", function(event) {\n    console.log(\"Link clicked\");\n    event.preventDefault();\n});\n</script>",
    "o": [
      "\"Link clicked\"",
      "Navigates to 'https://example.com'",
      "Nothing happens",
      "An error occurs"
    ]
  },
  {
    "q": "Which event fires when a user starts pressing a key?",
    "o": [
      "keydown",
      "keypress",
      "keyup",
      "input"
    ]
  },
  {
    "q": "What will happen if an event listener is added twice to the same element?",
    "o": [
      "The callback function will be executed twice",
      "The second listener will override the first one",
      "An error will occur",
      "Only the first listener will execute"
    ]
  },
  {
    "q": "Which event is triggered when an element is removed from the DOM?",
    "o": [
      "There is no built-in event for this",
      "removed",
      "unload",
      "destroy"
    ]
  },
  {
    "q": "Which of the following events does NOT bubble?",
    "o": [
      "focus",
      "click",
      "keydown",
      "mousedown"
    ]
  },
  {
    "q": "Which of the following is true about event.preventDefault()?",
    "o": [
      "It prevents the default action of an event but does not stop propagation",
      "It prevents event bubbling",
      "It removes the event listener",
      "It stops event delegation"
    ]
  },
  {
    "q": "What will be logged when clicking inside the div?",
    "l": "javascript",
    "c": "<div id=\"container\">\n    <button id=\"btn\">Click Me</button>\n</div>\n\n<script>\ndocument.getElementById(\"container\").addEventListener(\"click\", function(event) {\n    console.log(\"Container clicked\");\n});\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    console.log(\"Button clicked\");\n    event.stopPropagation();\n});\n</script>",
    "o": [
      "\"Button clicked\"",
      "\"Button clicked\" followed by \"Container clicked\"",
      "\"Container clicked\" followed by \"Button clicked\"",
      "Nothing happens"
    ]
  },
  {
    "q": "Which of the following is the correct way to delegate a click event?",
    "o": [
      "document.addEventListener(\"click\", function(event) { if (event.target.matches(\".btn\")) { console.log(\"Button clicked\"); } });",
      "document.querySelector(\".btn\").addEventListener(\"click\", function() { console.log(\"Button clicked\"); });",
      "document.getElementById(\"btn\").delegate(\"click\", function() { console.log(\"Button clicked\"); });",
      "document.addEvent(\"click\", \".btn\", function() { console.log(\"Button clicked\"); });"
    ]
  },
  {
    "q": "Which method is used to attach an event listener to an element?",
    "o": [
      "element.addEventListener()",
      "element.onEvent()",
      "element.attachEvent()",
      "element.bindEvent()"
    ]
  },
  {
    "q": "What will be the output when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click Me</button>\n\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    console.log(event.type);\n});\n</script>",
    "o": [
      "\"click\"",
      "\"button\"",
      "\"undefined\"",
      "\"event\""
    ]
  },
  {
    "q": "Which of the following is NOT true about event bubbling?",
    "o": [
      "It propagates events from the target element to its ancestors",
      "It is the default event propagation behavior",
      "It propagates events from the root element to the target",
      "It can be stopped using event.stopPropagation()"
    ]
  },
  {
    "q": "What will be logged when clicking the child div?",
    "l": "javascript",
    "c": "<div id=\"parent\">\n    <div id=\"child\">Click me</div>\n</div>\n\n<script>\ndocument.getElementById(\"parent\").addEventListener(\"click\", function() {\n    console.log(\"Parent clicked\");\n}, true);\ndocument.getElementById(\"child\").addEventListener(\"click\", function() {\n    console.log(\"Child clicked\");\n}, true);\n</script>",
    "o": [
      "\"Parent clicked\" followed by \"Child clicked\"",
      "\"Child clicked\" followed by \"Parent clicked\"",
      "Only \"Child clicked\"",
      "Only \"Parent clicked\""
    ]
  },
  {
    "q": "Which of the following events will trigger first in capturing phase?",
    "o": [
      "The event listener on the outermost ancestor",
      "The event listener on the target element",
      "The event listener on the parent of the target",
      "The event listener on the body element"
    ]
  },
  {
    "q": "Which event property prevents a form submission from reloading the page?",
    "o": [
      "event.preventDefault()",
      "event.stopPropagation()",
      "event.cancelBubble()",
      "event.stopImmediatePropagation()"
    ]
  },
  {
    "q": "What will be logged when clicking on the paragraph?",
    "l": "javascript",
    "c": "<div id=\"container\">\n    <p id=\"text\">Click here</p>\n</div>\n\n<script>\ndocument.getElementById(\"container\").addEventListener(\"click\", function(event) {\n    console.log(event.target.tagName);\n});\n</script>",
    "o": [
      "\"P\"",
      "\"DIV\"",
      "\"Click here\"",
      "\"undefined\""
    ]
  },
  {
    "q": "Which method removes an event listener from an element?",
    "o": [
      "element.removeEventListener()",
      "element.detachEvent()",
      "element.off()",
      "element.unbind()"
    ]
  },
  {
    "q": "Which phase of event propagation executes first?",
    "o": [
      "Capturing phase",
      "Bubbling phase",
      "Target phase",
      "Execution phase"
    ]
  },
  {
    "q": "What is the correct way to stop both event bubbling and the default action?",
    "o": [
      "event.preventDefault(); event.stopPropagation();",
      "event.stopPropagation(); event.cancelBubble();",
      "event.preventDefault(); event.cancelBubble();",
      "event.stopEvent(); event.stopDefault();"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    console.log(event.currentTarget.tagName);\n});\n</script>",
    "o": [
      "\"BUTTON\"",
      "\"click\"",
      "\"undefined\"",
      "\"btn\""
    ]
  },
  {
    "q": "Which of the following describes event delegation?",
    "o": [
      "Attaching an event listener to a parent element to handle events for child elements",
      "Attaching an event listener to each child element separately",
      "Preventing event propagation",
      "Removing default browser behaviors"
    ]
  },
  {
    "q": "What will be logged when clicking the span element?",
    "l": "javascript",
    "c": "<div id=\"parent\">\n    <span id=\"child\">Click me</span>\n</div>\n\n<script>\ndocument.getElementById(\"parent\").addEventListener(\"click\", function(event) {\n    console.log(event.target.id);\n});\n</script>",
    "o": [
      "\"child\"",
      "\"parent\"",
      "\"Click me\"",
      "\"undefined\""
    ]
  },
  {
    "q": "Which event listener syntax is correct for capturing phase?",
    "o": [
      "element.addEventListener(\"click\", handler, true);",
      "element.addEventListener(\"click\", handler, false);",
      "element.onClick = handler(true);",
      "element.captureEvent(\"click\", handler);"
    ]
  },
  {
    "q": "What will be the result when clicking the link?",
    "l": "javascript",
    "c": "<a href=\"https://example.com\" id=\"myLink\">Click me</a>\n\n<script>\ndocument.getElementById(\"myLink\").addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    console.log(\"Link clicked but not redirected\");\n});\n</script>",
    "o": [
      "\"Link clicked but not redirected\"",
      "Navigates to 'https://example.com'",
      "An error occurs",
      "Nothing happens"
    ]
  },
  {
    "q": "What will be logged when clicking anywhere inside the table?",
    "l": "javascript",
    "c": "<table id=\"myTable\">\n    <tr>\n        <td>Click me</td>\n    </tr>\n</table>\n\n<script>\ndocument.getElementById(\"myTable\").addEventListener(\"click\", function(event) {\n    console.log(event.target.tagName);\n});\n</script>",
    "o": [
      "\"TD\"",
      "\"TR\"",
      "\"TABLE\"",
      "\"undefined\""
    ]
  },
  {
    "q": "Which of the following events does NOT bubble?",
    "o": [
      "blur",
      "click",
      "mousedown",
      "keyup"
    ]
  },
  {
    "q": "Which of the following correctly implements event delegation?",
    "o": [
      "document.addEventListener(\"click\", function(event) { if (event.target.matches(\"button\")) { console.log(\"Button clicked\"); } });",
      "document.querySelector(\"button\").addEventListener(\"click\", function() { console.log(\"Button clicked\"); });",
      "document.getElementById(\"btn\").delegate(\"click\", function() { console.log(\"Button clicked\"); });",
      "document.addEvent(\"click\", \"button\", function() { console.log(\"Button clicked\"); });"
    ]
  },
  {
    "q": "Which of the following correctly adds a 'click' event listener to a button?",
    "o": [
      "document.getElementById(\"myBtn\").addEventListener(\"click\", function() { console.log(\"Button clicked\"); });",
      "document.getElementById(\"myBtn\").onClick = function() { console.log(\"Button clicked\"); };",
      "document.getElementById(\"myBtn\").bind(\"click\", function() { console.log(\"Button clicked\"); });",
      "document.getElementById(\"myBtn\").click(function() { console.log(\"Button clicked\"); });"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click</button>\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    console.log(event.target.innerText);\n});\n</script>",
    "o": [
      "\"Click\"",
      "\"btn\"",
      "\"undefined\"",
      "\"Event\""
    ]
  },
  {
    "q": "Which method can be used to stop the event from propagating to parent elements?",
    "o": [
      "event.stopPropagation()",
      "event.preventDefault()",
      "event.stopImmediatePropagation()",
      "event.cancelBubble()"
    ]
  },
  {
    "q": "What happens when event.stopImmediatePropagation() is called?",
    "o": [
      "Stops all further event listeners from executing on the same event",
      "Stops the default action of the event",
      "Stops event propagation to parent elements",
      "Removes the event listener from the element"
    ]
  },
  {
    "q": "Which of the following is a valid way to remove an event listener?",
    "o": [
      "element.removeEventListener(\"click\", myFunction);",
      "element.off(\"click\", myFunction);",
      "element.detach(\"click\", myFunction);",
      "element.unbind(\"click\", myFunction);"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click</button>\n<script>\nfunction handleClick() {\n    console.log(\"Button clicked\");\n}\ndocument.getElementById(\"btn\").addEventListener(\"click\", handleClick);\ndocument.getElementById(\"btn\").removeEventListener(\"click\", handleClick);\n</script>",
    "o": [
      "Nothing",
      "\"Button clicked\"",
      "An error occurs",
      "Undefined"
    ]
  },
  {
    "q": "Which event phase does the event target receive the event?",
    "o": [
      "Target phase",
      "Capturing phase",
      "Bubbling phase",
      "Propagation phase"
    ]
  },
  {
    "q": "Which method prevents the default browser action for an event?",
    "o": [
      "event.preventDefault()",
      "event.stopPropagation()",
      "event.stopImmediatePropagation()",
      "event.cancelBubble()"
    ]
  },
  {
    "q": "Which of the following events do NOT bubble?",
    "o": [
      "focus",
      "click",
      "keydown",
      "mousedown"
    ]
  },
  {
    "q": "What will be logged when clicking the span?",
    "l": "javascript",
    "c": "<div id=\"parent\">\n    <span id=\"child\">Click</span>\n</div>\n<script>\ndocument.getElementById(\"parent\").addEventListener(\"click\", function(event) {\n    console.log(event.currentTarget.id);\n});\n</script>",
    "o": [
      "\"parent\"",
      "\"child\"",
      "\"Click\"",
      "\"undefined\""
    ]
  },
  {
    "q": "What will happen when clicking the link below?",
    "l": "javascript",
    "c": "<a href=\"https://example.com\" id=\"myLink\">Click</a>\n<script>\ndocument.getElementById(\"myLink\").addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    console.log(\"Link clicked but not followed\");\n});\n</script>",
    "o": [
      "\"Link clicked but not followed\"",
      "Navigates to 'https://example.com'",
      "An error occurs",
      "Nothing happens"
    ]
  },
  {
    "q": "What is the main advantage of event delegation?",
    "o": [
      "Improves performance by reducing the number of event listeners",
      "Prevents event bubbling",
      "Ensures all event handlers execute synchronously",
      "Allows multiple handlers for the same event"
    ]
  },
  {
    "q": "What will be logged when clicking the span inside the div?",
    "l": "javascript",
    "c": "<div id=\"wrapper\">\n    <span id=\"text\">Click me</span>\n</div>\n<script>\ndocument.getElementById(\"wrapper\").addEventListener(\"click\", function(event) {\n    console.log(event.target.id);\n});\n</script>",
    "o": [
      "\"text\"",
      "\"wrapper\"",
      "\"Click me\"",
      "\"undefined\""
    ]
  },
  {
    "q": "Which of the following is true about event bubbling?",
    "o": [
      "The event propagates from the target element to its ancestors",
      "The event propagates from the root to the target element",
      "The event stops at the target element",
      "The event is always captured before it bubbles"
    ]
  },
  {
    "q": "What happens when a click event is registered on the document but a button inside has event.stopPropagation()?",
    "o": [
      "The event will not reach the document",
      "The event will still bubble up to the document",
      "An error occurs",
      "The document event listener will be executed first"
    ]
  },
  {
    "q": "How can you detect which element triggered an event in event delegation?",
    "o": [
      "event.target",
      "event.currentTarget",
      "event.delegateTarget",
      "this"
    ]
  },
  {
    "q": "Which of the following is true about event capturing?",
    "o": [
      "Events are handled from the outermost element down to the target",
      "Events are handled from the target element up to the outermost element",
      "Event capturing happens after bubbling",
      "Event capturing only occurs on form elements"
    ]
  },
  {
    "q": "Which of the following statements about event bubbling is true?",
    "o": [
      "In event bubbling, the event starts at the target element and propagates up to the root.",
      "In event bubbling, the event starts at the root and propagates down to the target.",
      "Event bubbling only occurs on input elements.",
      "Event bubbling does not work with dynamically added elements."
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<div id=\"container\">\n  <button id=\"btn\">Click Me</button>\n</div>\n<script>\ndocument.getElementById(\"container\").addEventListener(\"click\", function() {\n    console.log(\"Container clicked\");\n});\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    console.log(\"Button clicked\");\n    event.stopPropagation();\n});\n</script>",
    "o": [
      "\"Button clicked\"",
      "\"Button clicked\" followed by \"Container clicked\"",
      "\"Container clicked\"",
      "Nothing"
    ]
  },
  {
    "q": "Which of the following is NOT a valid JavaScript event?",
    "o": [
      "onPress",
      "onClick",
      "onMouseOver",
      "onKeyDown"
    ]
  },
  {
    "q": "What will happen when the form's submit button is clicked?",
    "l": "javascript",
    "c": "<form id=\"myForm\">\n  <input type=\"text\" />\n  <button type=\"submit\">Submit</button>\n</form>\n<script>\ndocument.getElementById(\"myForm\").addEventListener(\"submit\", function(event) {\n    event.preventDefault();\n    console.log(\"Form submission prevented\");\n});\n</script>",
    "o": [
      "\"Form submission prevented\"",
      "The form will be submitted",
      "An error occurs",
      "Nothing happens"
    ]
  },
  {
    "q": "Which of the following statements about event delegation is true?",
    "o": [
      "Event delegation allows handling events on dynamically added elements.",
      "Event delegation increases the number of event listeners needed.",
      "Event delegation only works with inline event handlers.",
      "Event delegation prevents event bubbling."
    ]
  },
  {
    "q": "How can you add an event listener that only executes once?",
    "o": [
      "element.addEventListener(\"click\", myFunction, { once: true });",
      "element.addEventListenerOnce(\"click\", myFunction);",
      "element.onClickOnce = myFunction;",
      "element.singleEventListener(\"click\", myFunction);"
    ]
  },
  {
    "q": "What will be logged when clicking the link?",
    "l": "javascript",
    "c": "<a href=\"https://example.com\" id=\"link\">Go to Example</a>\n<script>\ndocument.getElementById(\"link\").addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    console.log(\"Navigation prevented\");\n});\n</script>",
    "o": [
      "\"Navigation prevented\"",
      "Navigates to 'https://example.com'",
      "An error occurs",
      "Nothing happens"
    ]
  },
  {
    "q": "What does the event.currentTarget property return?",
    "o": [
      "The element that the event listener is attached to",
      "The element that triggered the event",
      "The event type",
      "The parent element of the event target"
    ]
  },
  {
    "q": "Which of the following events do not bubble?",
    "o": [
      "blur",
      "click",
      "keydown",
      "mouseover"
    ]
  },
  {
    "q": "Which method is used to remove an event listener?",
    "o": [
      "element.removeEventListener(\"click\", myFunction);",
      "element.off(\"click\", myFunction);",
      "element.detachEvent(\"click\", myFunction);",
      "element.unbind(\"click\", myFunction);"
    ]
  },
  {
    "q": "What will happen when clicking the child div?",
    "l": "javascript",
    "c": "<div id=\"parent\">\n  <div id=\"child\">Click Me</div>\n</div>\n<script>\ndocument.getElementById(\"parent\").addEventListener(\"click\", function() {\n    console.log(\"Parent clicked\");\n}, true);\ndocument.getElementById(\"child\").addEventListener(\"click\", function() {\n    console.log(\"Child clicked\");\n});\n</script>",
    "o": [
      "\"Parent clicked\" followed by \"Child clicked\"",
      "\"Child clicked\" followed by \"Parent clicked\"",
      "Only \"Child clicked\"",
      "Only \"Parent clicked\""
    ]
  },
  {
    "q": "Which of the following is a valid example of event delegation?",
    "o": [
      "document.getElementById(\"list\").addEventListener(\"click\", function(event) {\n    if (event.target.tagName === \"LI\") {\n        console.log(\"List item clicked\");\n    }\n});",
      "document.querySelectorAll(\"li\").forEach(li => {\n    li.addEventListener(\"click\", function() {\n        console.log(\"List item clicked\");\n    });\n});",
      "document.getElementById(\"list\").onClick = function(event) {\n    console.log(\"List item clicked\");\n};",
      "document.getElementById(\"list\").bind(\"click\", function() {\n    console.log(\"List item clicked\");\n});"
    ]
  },
  {
    "q": "What will be logged when clicking the inner span?",
    "l": "javascript",
    "c": "<div id=\"outer\">\n  <span id=\"inner\">Click</span>\n</div>\n<script>\ndocument.getElementById(\"outer\").addEventListener(\"click\", function(event) {\n    console.log(event.target.tagName);\n});\n</script>",
    "o": [
      "\"SPAN\"",
      "\"DIV\"",
      "\"Click\"",
      "\"undefined\""
    ]
  },
  {
    "q": "What does event.preventDefault() do?",
    "o": [
      "Prevents the default behavior of an event",
      "Stops the event from bubbling up",
      "Prevents the event listener from executing",
      "Removes the event listener"
    ]
  },
  {
    "q": "Which of the following correctly binds an event listener that runs in the capturing phase?",
    "o": [
      "element.addEventListener(\"click\", myFunction, true);",
      "element.addEventListener(\"click\", myFunction, false);",
      "element.onClickCapture = myFunction;",
      "element.addEventCapture(\"click\", myFunction);"
    ]
  },
  {
    "q": "Which method is used to attach an event handler to an element in JavaScript?",
    "o": [
      "element.addEventListener(\"click\", myFunction);",
      "element.attachEvent(\"click\", myFunction);",
      "element.on(\"click\", myFunction);",
      "element.bind(\"click\", myFunction);"
    ]
  },
  {
    "q": "What will happen when clicking the paragraph inside the div?",
    "l": "javascript",
    "c": "<div id=\"outer\">\n  <p id=\"inner\">Click me</p>\n</div>\n<script>\ndocument.getElementById(\"outer\").addEventListener(\"click\", function() {\n    console.log(\"Div clicked\");\n});\ndocument.getElementById(\"inner\").addEventListener(\"click\", function() {\n    console.log(\"Paragraph clicked\");\n});\n</script>",
    "o": [
      "\"Paragraph clicked\" followed by \"Div clicked\"",
      "\"Div clicked\" followed by \"Paragraph clicked\"",
      "Only \"Paragraph clicked\"",
      "Only \"Div clicked\""
    ]
  },
  {
    "q": "Which of the following statements about event.stopPropagation() is true?",
    "o": [
      "It prevents the event from bubbling up or capturing down the DOM tree.",
      "It prevents the default action of the event.",
      "It removes the event listener.",
      "It stops the event from being registered in the event queue."
    ]
  },
  {
    "q": "What is the correct way to delegate an event in JavaScript?",
    "o": [
      "parentElement.addEventListener(\"click\", function(event) {\n    if (event.target.matches(\".child\")) {\n        console.log(\"Child clicked\");\n    }\n});",
      "document.querySelectorAll(\".child\").forEach(el => {\n    el.addEventListener(\"click\", () => console.log(\"Child clicked\"));\n});",
      "childElement.delegateEvent(\"click\", () => console.log(\"Child clicked\"));",
      "event.delegate(\"click\", parentElement, childElement, () => console.log(\"Child clicked\"));"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"myButton\">Click me</button>\n<script>\ndocument.getElementById(\"myButton\").addEventListener(\"click\", function(event) {\n    console.log(event.type);\n});\n</script>",
    "o": [
      "\"click\"",
      "\"button\"",
      "\"myButton\"",
      "\"undefined\""
    ]
  },
  {
    "q": "Which event phase does an event handler execute in by default?",
    "o": [
      "Bubbling phase",
      "Capturing phase",
      "Target phase",
      "Default phase"
    ]
  },
  {
    "q": "Which JavaScript method prevents a link from navigating to its href?",
    "o": [
      "event.preventDefault();",
      "event.stopPropagation();",
      "event.stopImmediatePropagation();",
      "event.cancel();"
    ]
  },
  {
    "q": "What is the purpose of event.stopImmediatePropagation()?",
    "o": [
      "It prevents other event listeners of the same event type from executing on the same element.",
      "It prevents the default behavior of an event.",
      "It prevents the event from bubbling up the DOM.",
      "It removes all event listeners from the element."
    ]
  },
  {
    "q": "What will happen when clicking the div?",
    "l": "javascript",
    "c": "<div id=\"box\">Click me</div>\n<script>\ndocument.getElementById(\"box\").addEventListener(\"click\", function(event) {\n    event.stopPropagation();\n    console.log(\"Div clicked\");\n});\ndocument.body.addEventListener(\"click\", function() {\n    console.log(\"Body clicked\");\n});\n</script>",
    "o": [
      "\"Div clicked\"",
      "\"Div clicked\" followed by \"Body clicked\"",
      "\"Body clicked\"",
      "Nothing"
    ]
  },
  {
    "q": "Which of the following correctly attaches an event listener that fires only once?",
    "o": [
      "element.addEventListener(\"click\", myFunction, { once: true });",
      "element.addEventListenerOnce(\"click\", myFunction);",
      "element.one(\"click\", myFunction);",
      "element.addEventListener(\"click\", myFunction, false);"
    ]
  },
  {
    "q": "What will happen when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function() {\n    alert(\"Button clicked\");\n    this.removeEventListener(\"click\", arguments.callee);\n});\n</script>",
    "o": [
      "The alert will appear only once",
      "The alert will appear every time the button is clicked",
      "The button will stop working immediately",
      "An error will be thrown"
    ]
  },
  {
    "q": "Which property returns the element that triggered the event?",
    "o": [
      "event.target",
      "event.currentTarget",
      "event.srcElement",
      "event.trigger"
    ]
  },
  {
    "q": "Which of the following events does NOT bubble up?",
    "o": [
      "focus",
      "click",
      "keydown",
      "mouseup"
    ]
  },
  {
    "q": "Which of the following is the correct way to remove an event listener?",
    "o": [
      "element.removeEventListener(\"click\", myFunction);",
      "element.off(\"click\", myFunction);",
      "element.unbind(\"click\", myFunction);",
      "element.detachEvent(\"click\", myFunction);"
    ]
  },
  {
    "q": "What will be logged when clicking the list item?",
    "l": "javascript",
    "c": "<ul id=\"list\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>\n<script>\ndocument.getElementById(\"list\").addEventListener(\"click\", function(event) {\n    console.log(event.target.tagName);\n});\n</script>",
    "o": [
      "\"LI\"",
      "\"UL\"",
      "\"Item 1\"",
      "\"undefined\""
    ]
  },
  {
    "q": "Which JavaScript event fires when a user presses a key?",
    "o": [
      "keydown",
      "keypress",
      "keyup",
      "keyclick"
    ]
  },
  {
    "q": "What is the difference between event.target and event.currentTarget?",
    "o": [
      "event.target is the element that triggered the event, while event.currentTarget is the element that the event listener is attached to.",
      "event.target is the element that the event listener is attached to, while event.currentTarget is the element that triggered the event.",
      "Both properties always return the same element.",
      "event.currentTarget is only available in capturing phase."
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n<script>\nconst btn = document.getElementById(\"btn\");\nbtn.addEventListener(\"click\", function(event) {\n    console.log(event.currentTarget === btn);\n});\n</script>",
    "o": [
      "true",
      "false",
      "undefined",
      "An error will be thrown"
    ]
  },
  {
    "q": "Which of the following statements about event delegation is true?",
    "o": [
      "Event delegation allows handling multiple child elements' events using a single parent event listener.",
      "Event delegation requires adding an event listener to each child element separately.",
      "Event delegation only works for 'click' events.",
      "Event delegation prevents event bubbling."
    ]
  },
  {
    "q": "Which method removes an event listener from an element?",
    "o": [
      "element.removeEventListener(\"click\", myFunction);",
      "element.detachEvent(\"click\", myFunction);",
      "element.off(\"click\", myFunction);",
      "element.stopListening(\"click\", myFunction);"
    ]
  },
  {
    "q": "What will be logged when clicking the inner div?",
    "l": "javascript",
    "c": "<div id=\"outer\">\n  <div id=\"inner\">Click me</div>\n</div>\n<script>\ndocument.getElementById(\"outer\").addEventListener(\"click\", function() {\n    console.log(\"Outer div clicked\");\n}, true);\n\ndocument.getElementById(\"inner\").addEventListener(\"click\", function() {\n    console.log(\"Inner div clicked\");\n});\n</script>",
    "o": [
      "\"Outer div clicked\" followed by \"Inner div clicked\"",
      "\"Inner div clicked\" followed by \"Outer div clicked\"",
      "Only \"Inner div clicked\"",
      "Only \"Outer div clicked\""
    ]
  },
  {
    "q": "Which of the following is an example of stopping event bubbling?",
    "o": [
      "event.stopPropagation();",
      "event.preventDefault();",
      "event.stopImmediatePropagation();",
      "event.cancelBubble();"
    ]
  },
  {
    "q": "Which of the following prevents the default action of a form submission?",
    "o": [
      "event.preventDefault();",
      "event.stopPropagation();",
      "return false;",
      "form.stop();"
    ]
  },
  {
    "q": "What happens when event.stopImmediatePropagation() is called inside an event handler?",
    "o": [
      "It prevents all other event listeners of the same event type from executing on the same element.",
      "It stops event bubbling but allows other listeners on the same element to execute.",
      "It removes all event listeners from the element.",
      "It stops the event from being registered in the event queue."
    ]
  },
  {
    "q": "Which of the following correctly attaches a 'click' event that fires only once?",
    "o": [
      "element.addEventListener(\"click\", myFunction, { once: true });",
      "element.once(\"click\", myFunction);",
      "element.oneClick(myFunction);",
      "element.addEventListener(\"click\", myFunction, false);"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n<script>\nconst btn = document.getElementById(\"btn\");\nbtn.addEventListener(\"click\", function(event) {\n    console.log(event.target.tagName);\n});\n</script>",
    "o": [
      "\"BUTTON\"",
      "\"btn\"",
      "\"Click me\"",
      "undefined"
    ]
  },
  {
    "q": "Which event property contains the reference to the element that the event handler is attached to?",
    "o": [
      "event.currentTarget",
      "event.target",
      "event.srcElement",
      "event.delegate"
    ]
  },
  {
    "q": "Which of the following events will NOT bubble up?",
    "o": [
      "blur",
      "click",
      "keydown",
      "mousedown"
    ]
  },
  {
    "q": "What is the purpose of event.preventDefault()?",
    "o": [
      "It prevents the default browser behavior for the event.",
      "It stops event propagation.",
      "It removes the event listener.",
      "It cancels the event."
    ]
  },
  {
    "q": "What is the difference between capturing and bubbling phases?",
    "o": [
      "Capturing phase starts from the root element and goes down, while bubbling phase goes up from the target element.",
      "Bubbling phase starts from the root element and goes down, while capturing phase goes up from the target element.",
      "Both phases execute in parallel.",
      "There is no difference; both are the same."
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n<script>\nconst btn = document.getElementById(\"btn\");\nbtn.addEventListener(\"click\", function() {\n    console.log(\"First handler\");\n});\nbtn.addEventListener(\"click\", function(event) {\n    console.log(\"Second handler\");\n    event.stopImmediatePropagation();\n});\nbtn.addEventListener(\"click\", function() {\n    console.log(\"Third handler\");\n});\n</script>",
    "o": [
      "\"Second handler\" followed by \"First handler\"",
      "\"First handler\" followed by \"Second handler\" followed by \"Third handler\"",
      "\"Second handler\" only",
      "Only \"Third handler\""
    ]
  },
  {
    "q": "What happens when event.target is used inside an event handler?",
    "o": [
      "It refers to the element that triggered the event.",
      "It refers to the element where the event listener is attached.",
      "It always refers to the document object.",
      "It is always null."
    ]
  },
  {
    "q": "Which of the following will attach an event listener that listens during the capturing phase?",
    "o": [
      "element.addEventListener(\"click\", myFunction, true);",
      "element.addEventListener(\"click\", myFunction, false);",
      "element.addEventListener(\"click\", myFunction);",
      "element.captureEvent(\"click\", myFunction);"
    ]
  },
  {
    "q": "What will be logged when clicking the paragraph?",
    "l": "javascript",
    "c": "<div id=\"parent\">\n  <p id=\"child\">Click me</p>\n</div>\n<script>\ndocument.getElementById(\"parent\").addEventListener(\"click\", function() {\n    console.log(\"Parent clicked\");\n});\ndocument.getElementById(\"child\").addEventListener(\"click\", function(event) {\n    console.log(\"Child clicked\");\n    event.stopPropagation();\n});\n</script>",
    "o": [
      "\"Child clicked\"",
      "\"Child clicked\" followed by \"Parent clicked\"",
      "Only \"Parent clicked\"",
      "Nothing"
    ]
  },
  {
    "q": "What will happen when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    console.log(\"Button clicked\");\n});\n</script>",
    "o": [
      "\"Button clicked\" will be logged.",
      "The default action of the button will still execute.",
      "An error will be thrown.",
      "Nothing will happen."
    ]
  },
  {
    "q": "Which of the following is the correct way to use event delegation?",
    "o": [
      "document.getElementById(\"parent\").addEventListener(\"click\", function(event) { if(event.target.matches(\".child\")) { console.log(\"Child clicked\"); } });",
      "document.querySelectorAll(\".child\").forEach(child => child.addEventListener(\"click\", () => console.log(\"Child clicked\")));",
      "document.getElementById(\"parent\").addEventListener(\"click\", function(event) { console.log(\"Parent clicked\"); });",
      "document.getElementById(\"child\").addEventListener(\"click\", function(event) { console.log(\"Child clicked\"); });"
    ]
  },
  {
    "q": "What is the correct way to prevent an event from bubbling up?",
    "o": [
      "event.stopPropagation();",
      "event.preventDefault();",
      "event.cancelBubble();",
      "event.stopImmediatePropagation();"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    event.stopPropagation();\n    console.log(\"Button clicked\");\n});\n\ndocument.body.addEventListener(\"click\", function() {\n    console.log(\"Body clicked\");\n});\n</script>",
    "o": [
      "\"Button clicked\"",
      "\"Button clicked\" followed by \"Body clicked\"",
      "\"Body clicked\" only",
      "An error will be thrown"
    ]
  },
  {
    "q": "Which method is used to stop all further event listeners from executing on the same event?",
    "o": [
      "event.stopImmediatePropagation();",
      "event.stopPropagation();",
      "event.preventDefault();",
      "event.removeListener();"
    ]
  },
  {
    "q": "What is the default behavior of events in the DOM?",
    "o": [
      "Events bubble up from the target element to the root.",
      "Events are captured from the root down to the target element.",
      "Events always execute immediately.",
      "Events can only be triggered manually."
    ]
  },
  {
    "q": "How do you attach an event listener that executes only once?",
    "o": [
      "element.addEventListener(\"click\", myFunction, { once: true });",
      "element.addEventListener(\"click\", myFunction, false);",
      "element.once(\"click\", myFunction);",
      "element.oneClick(myFunction);"
    ]
  },
  {
    "q": "Which event property refers to the element that triggered the event?",
    "o": [
      "event.target",
      "event.currentTarget",
      "event.srcElement",
      "event.delegateTarget"
    ]
  },
  {
    "q": "What will be logged when clicking the paragraph?",
    "l": "javascript",
    "c": "<div id=\"wrapper\">\n  <p id=\"text\">Click me</p>\n</div>\n<script>\ndocument.getElementById(\"wrapper\").addEventListener(\"click\", function() {\n    console.log(\"Wrapper clicked\");\n}, true);\n\ndocument.getElementById(\"text\").addEventListener(\"click\", function() {\n    console.log(\"Paragraph clicked\");\n});\n</script>",
    "o": [
      "\"Wrapper clicked\" followed by \"Paragraph clicked\"",
      "\"Paragraph clicked\" followed by \"Wrapper clicked\"",
      "Only \"Paragraph clicked\"",
      "Only \"Wrapper clicked\""
    ]
  },
  {
    "q": "Which of the following events does NOT bubble up?",
    "o": [
      "focus",
      "click",
      "keydown",
      "mouseover"
    ]
  },
  {
    "q": "What is event delegation useful for?",
    "o": [
      "Handling events on dynamically added elements efficiently.",
      "Stopping event propagation.",
      "Blocking default actions of elements.",
      "Preventing events from being fired."
    ]
  },
  {
    "q": "Which of the following methods prevents the default action of an event?",
    "o": [
      "event.preventDefault();",
      "event.stopPropagation();",
      "event.stopImmediatePropagation();",
      "event.cancel();"
    ]
  },
  {
    "q": "What will be logged when clicking the link?",
    "l": "javascript",
    "c": "<a href=\"https://example.com\" id=\"link\">Click me</a>\n<script>\ndocument.getElementById(\"link\").addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    console.log(\"Link clicked but not followed\");\n});\n</script>",
    "o": [
      "\"Link clicked but not followed\"",
      "The browser navigates to https://example.com",
      "An error occurs",
      "Nothing happens"
    ]
  },
  {
    "q": "Which phase of event propagation executes first by default?",
    "o": [
      "Bubbling phase",
      "Capturing phase",
      "Both at the same time",
      "None of the above"
    ]
  },
  {
    "q": "What happens if multiple event listeners are added to the same element for the same event?",
    "o": [
      "All event listeners execute in the order they were added.",
      "Only the last event listener executes.",
      "Only the first event listener executes.",
      "The event will not fire."
    ]
  },
  {
    "q": "Which of the following event properties allows checking which key was pressed in a keyboard event?",
    "o": [
      "event.key",
      "event.charCode",
      "event.which",
      "event.button"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    console.log(event.type);\n});\n</script>",
    "o": [
      "\"click\"",
      "\"button\"",
      "\"event\"",
      "\"undefined\""
    ]
  },
  {
    "q": "Which of the following best describes event bubbling?",
    "o": [
      "Events move from the target element up to its ancestors.",
      "Events move from the root down to the target element.",
      "Events execute only on the target element.",
      "Event handlers are automatically removed after execution."
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n<script>\n  document.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    console.log(event.currentTarget);\n  });\n</script>",
    "o": [
      "The button element",
      "The document object",
      "The body element",
      "Undefined"
    ]
  },
  {
    "q": "Which of the following is NOT a valid event type in JavaScript?",
    "o": [
      "onhover",
      "click",
      "keydown",
      "dblclick"
    ]
  },
  {
    "q": "Which method should you use to remove an event listener?",
    "o": [
      "removeEventListener()",
      "detachEvent()",
      "deleteEventListener()",
      "clearEventListener()"
    ]
  },
  {
    "q": "What is event delegation?",
    "o": [
      "Attaching an event listener to a parent element to handle events from child elements.",
      "Using multiple event listeners on different child elements.",
      "Blocking event propagation to prevent bubbling.",
      "Using setTimeout to delay event execution."
    ]
  },
  {
    "q": "What happens if event.stopPropagation() is called inside an event handler?",
    "o": [
      "The event stops propagating to ancestor elements.",
      "The event’s default action is prevented.",
      "The event does not execute at all.",
      "An error is thrown."
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    event.stopImmediatePropagation();\n    console.log(\"First handler\");\n});\n\ndocument.getElementById(\"btn\").addEventListener(\"click\", function() {\n    console.log(\"Second handler\");\n});\n</script>",
    "o": [
      "\"First handler\"",
      "\"First handler\" followed by \"Second handler\"",
      "Nothing",
      "\"Second handler\" only"
    ]
  },
  {
    "q": "What will happen when clicking the link?",
    "l": "javascript",
    "c": "<a href=\"https://example.com\" id=\"link\">Click me</a>\n<script>\ndocument.getElementById(\"link\").addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    console.log(\"Link clicked\");\n});\n</script>",
    "o": [
      "The message \"Link clicked\" will be logged, and the browser will not navigate.",
      "The browser will navigate to https://example.com.",
      "An error will be thrown.",
      "Nothing will happen."
    ]
  },
  {
    "q": "Which of the following is true about event listeners?",
    "o": [
      "Multiple event listeners can be attached to the same element for the same event.",
      "Only one event listener can be attached per element per event type.",
      "Event listeners execute only once by default.",
      "You must manually remove event listeners after execution."
    ]
  },
  {
    "q": "Which event property gives information about which element triggered the event?",
    "o": [
      "event.target",
      "event.currentTarget",
      "event.srcElement",
      "event.relatedTarget"
    ]
  },
  {
    "q": "Which JavaScript method can be used to programmatically trigger an event?",
    "o": [
      "element.dispatchEvent(new Event(\"click\"));",
      "element.trigger(\"click\");",
      "element.emit(\"click\");",
      "element.fireEvent(\"click\");"
    ]
  },
  {
    "q": "What is the purpose of event.stopImmediatePropagation()?",
    "o": [
      "Stops the event and prevents other event handlers on the same element from executing.",
      "Prevents the default action of the event.",
      "Stops the event from bubbling up the DOM.",
      "Removes the event listener."
    ]
  },
  {
    "q": "What will be the output when clicking the inner div?",
    "l": "javascript",
    "c": "<div id=\"outer\">\n  <div id=\"inner\">Click me</div>\n</div>\n<script>\ndocument.getElementById(\"outer\").addEventListener(\"click\", function() {\n    console.log(\"Outer clicked\");\n}, true);\n\ndocument.getElementById(\"inner\").addEventListener(\"click\", function() {\n    console.log(\"Inner clicked\");\n});\n</script>",
    "o": [
      "\"Outer clicked\" followed by \"Inner clicked\"",
      "\"Inner clicked\" followed by \"Outer clicked\"",
      "\"Inner clicked\" only",
      "\"Outer clicked\" only"
    ]
  },
  {
    "q": "What happens if event.preventDefault() is called on a form submission event?",
    "o": [
      "The form submission is blocked.",
      "The form submits as usual.",
      "An error is thrown.",
      "The form submits but without validation."
    ]
  },
  {
    "q": "Which event will be fired when the user right-clicks on an element?",
    "o": [
      "contextmenu",
      "click",
      "mouseup",
      "mousedown"
    ]
  },
  {
    "q": "Which event fires when an input field loses focus?",
    "o": [
      "blur",
      "focus",
      "change",
      "keydown"
    ]
  },
  {
    "q": "Which of the following correctly describes capturing and bubbling?",
    "o": [
      "Capturing occurs from the root to the target, and bubbling occurs from the target to the root.",
      "Bubbling occurs from the root to the target, and capturing occurs from the target to the root.",
      "Both occur in the same direction.",
      "Only bubbling exists in JavaScript."
    ]
  },
  {
    "q": "What will be logged when clicking the paragraph?",
    "l": "javascript",
    "c": "<div id=\"parent\">\n  <p id=\"child\">Click me</p>\n</div>\n<script>\ndocument.getElementById(\"parent\").addEventListener(\"click\", function(event) {\n    console.log(\"Parent clicked\");\n});\n\ndocument.getElementById(\"child\").addEventListener(\"click\", function(event) {\n    console.log(\"Child clicked\");\n    event.stopPropagation();\n});\n</script>",
    "o": [
      "\"Child clicked\"",
      "\"Child clicked\" followed by \"Parent clicked\"",
      "\"Parent clicked\" only",
      "Nothing is logged"
    ]
  },
  {
    "q": "Which method is used to attach an event handler to an element?",
    "o": [
      "addEventListener",
      "attachEvent",
      "setEvent",
      "bindEvent"
    ]
  },
  {
    "q": "What is event bubbling?",
    "o": [
      "An event starts from the target element and propagates up to its ancestors.",
      "An event starts from the root and propagates down to the target element.",
      "An event is executed only on the target element.",
      "An event is canceled before it reaches any element."
    ]
  },
  {
    "q": "Which property refers to the element that triggered the event?",
    "o": [
      "event.target",
      "event.currentTarget",
      "event.srcElement",
      "event.relatedTarget"
    ]
  },
  {
    "q": "What happens when you call event.stopImmediatePropagation()?",
    "o": [
      "It stops the event and prevents any other event listeners on the same element from being executed.",
      "It stops the event but allows other event listeners on the same element to execute.",
      "It prevents the default action of the event.",
      "It removes the event listener from the element."
    ]
  },
  {
    "q": "What is event delegation?",
    "o": [
      "Attaching an event listener to a parent element to handle events for dynamically added child elements.",
      "Using multiple event listeners on each child element individually.",
      "Blocking event propagation to prevent bubbling.",
      "Using setTimeout to delay event execution."
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    console.log(event.currentTarget);\n});\n</script>",
    "o": [
      "The button element",
      "The document object",
      "The body element",
      "Undefined"
    ]
  },
  {
    "q": "Which event is fired when a user clicks on an input field?",
    "o": [
      "focus",
      "blur",
      "keydown",
      "change"
    ]
  },
  {
    "q": "What will be logged when clicking the link?",
    "l": "javascript",
    "c": "<a href=\"https://example.com\" id=\"link\">Click me</a>\n<script>\ndocument.getElementById(\"link\").addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    console.log(\"Link clicked\");\n});\n</script>",
    "o": [
      "The message \"Link clicked\" will be logged, and the browser will not navigate.",
      "The browser will navigate to https://example.com.",
      "An error will be thrown.",
      "Nothing will happen."
    ]
  },
  {
    "q": "Which method is used to trigger an event manually in JavaScript?",
    "o": [
      "dispatchEvent",
      "triggerEvent",
      "emitEvent",
      "fireEvent"
    ]
  },
  {
    "q": "What will be the output when clicking the inner div?",
    "l": "javascript",
    "c": "<div id=\"outer\">\n  <div id=\"inner\">Click me</div>\n</div>\n<script>\ndocument.getElementById(\"outer\").addEventListener(\"click\", function() {\n    console.log(\"Outer clicked\");\n}, true);\n\ndocument.getElementById(\"inner\").addEventListener(\"click\", function() {\n    console.log(\"Inner clicked\");\n});\n</script>",
    "o": [
      "\"Outer clicked\" followed by \"Inner clicked\"",
      "\"Inner clicked\" followed by \"Outer clicked\"",
      "\"Inner clicked\" only",
      "\"Outer clicked\" only"
    ]
  },
  {
    "q": "What is the default behavior of a form submission event?",
    "o": [
      "The form is submitted to the action URL.",
      "The form is prevented from submitting.",
      "An error is thrown.",
      "The form submits but clears the input fields first."
    ]
  },
  {
    "q": "Which event is triggered when an element is right-clicked?",
    "o": [
      "contextmenu",
      "click",
      "mouseup",
      "mousedown"
    ]
  },
  {
    "q": "Which event fires when an input field loses focus?",
    "o": [
      "blur",
      "focus",
      "change",
      "keydown"
    ]
  },
  {
    "q": "What will be logged when clicking the paragraph?",
    "l": "javascript",
    "c": "<div id=\"parent\">\n  <p id=\"child\">Click me</p>\n</div>\n<script>\ndocument.getElementById(\"parent\").addEventListener(\"click\", function(event) {\n    console.log(\"Parent clicked\");\n});\n\ndocument.getElementById(\"child\").addEventListener(\"click\", function(event) {\n    console.log(\"Child clicked\");\n    event.stopPropagation();\n});\n</script>",
    "o": [
      "\"Child clicked\"",
      "\"Child clicked\" followed by \"Parent clicked\"",
      "\"Parent clicked\" only",
      "Nothing is logged"
    ]
  },
  {
    "q": "Which event property contains information about the key pressed by the user?",
    "o": [
      "event.key",
      "event.which",
      "event.charCode",
      "event.code"
    ]
  },
  {
    "q": "Which event fires when a user hovers over an element?",
    "o": [
      "mouseover",
      "mouseenter",
      "hover",
      "mouseout"
    ]
  },
  {
    "q": "What will be logged when clicking the div?",
    "l": "javascript",
    "c": "<div id=\"box\">Click me</div>\n<script>\ndocument.getElementById(\"box\").addEventListener(\"click\", function(event) {\n    console.log(\"Clicked!\");\n    event.stopPropagation();\n});\n\ndocument.addEventListener(\"click\", function() {\n    console.log(\"Document clicked\");\n});\n</script>",
    "o": [
      "\"Clicked!\"",
      "\"Clicked!\" followed by \"Document clicked\"",
      "\"Document clicked\" only",
      "Nothing"
    ]
  },
  {
    "q": "Which method should be used to remove an event listener?",
    "o": [
      "removeEventListener",
      "detachEvent",
      "deleteEvent",
      "clearEventListener"
    ]
  },
  {
    "q": "Which phase of event propagation occurs first when using event capturing?",
    "o": [
      "Capturing phase",
      "Bubbling phase",
      "Target phase",
      "None of the above"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    event.stopPropagation();\n    console.log(\"Button clicked\");\n});\ndocument.body.addEventListener(\"click\", function() {\n    console.log(\"Body clicked\");\n});\n</script>",
    "o": [
      "\"Button clicked\"",
      "\"Button clicked\" followed by \"Body clicked\"",
      "\"Body clicked\" only",
      "Nothing"
    ]
  },
  {
    "q": "What does event.preventDefault() do?",
    "o": [
      "Prevents the default action of the event",
      "Stops the event from propagating",
      "Removes the event listener",
      "Triggers the event manually"
    ]
  },
  {
    "q": "What will be logged when clicking the inner div?",
    "l": "javascript",
    "c": "<div id=\"outer\">\n  <div id=\"inner\">Click me</div>\n</div>\n<script>\ndocument.getElementById(\"outer\").addEventListener(\"click\", function() {\n    console.log(\"Outer clicked\");\n}, false);\n\ndocument.getElementById(\"inner\").addEventListener(\"click\", function() {\n    console.log(\"Inner clicked\");\n});\n</script>",
    "o": [
      "\"Inner clicked\" followed by \"Outer clicked\"",
      "\"Outer clicked\" followed by \"Inner clicked\"",
      "\"Inner clicked\" only",
      "\"Outer clicked\" only"
    ]
  },
  {
    "q": "Which of the following is NOT a valid JavaScript event?",
    "o": [
      "onhover",
      "onclick",
      "onkeydown",
      "onchange"
    ]
  },
  {
    "q": "Which event property allows checking whether an event’s default action has been prevented?",
    "o": [
      "event.defaultPrevented",
      "event.prevented",
      "event.isCanceled",
      "event.isStopped"
    ]
  },
  {
    "q": "What will be logged when clicking the list item?",
    "l": "javascript",
    "c": "<ul id=\"list\">\n  <li id=\"item\">Click me</li>\n</ul>\n<script>\ndocument.getElementById(\"list\").addEventListener(\"click\", function(event) {\n    console.log(\"List clicked\");\n});\ndocument.getElementById(\"item\").addEventListener(\"click\", function(event) {\n    console.log(\"Item clicked\");\n    event.stopPropagation();\n});\n</script>",
    "o": [
      "\"Item clicked\"",
      "\"Item clicked\" followed by \"List clicked\"",
      "\"List clicked\" only",
      "Nothing"
    ]
  },
  {
    "q": "What happens when event.stopPropagation() is called?",
    "o": [
      "Prevents the event from bubbling up the DOM tree",
      "Prevents the event’s default action",
      "Stops the event from executing on the current element",
      "Removes the event listener"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n<script>\nfunction handleClick() {\n    console.log(\"Button clicked\");\n}\ndocument.getElementById(\"btn\").addEventListener(\"click\", handleClick);\ndocument.getElementById(\"btn\").removeEventListener(\"click\", handleClick);\n</script>",
    "o": [
      "Nothing",
      "\"Button clicked\"",
      "An error",
      "Undefined"
    ]
  },
  {
    "q": "Which method is used to check if an element has an event listener?",
    "o": [
      "There is no direct method to check for an event listener",
      "hasEventListener",
      "checkEvent",
      "getEventListeners"
    ]
  },
  {
    "q": "What will be logged when clicking the paragraph?",
    "l": "javascript",
    "c": "<div id=\"wrapper\">\n  <p id=\"text\">Click me</p>\n</div>\n<script>\ndocument.getElementById(\"wrapper\").addEventListener(\"click\", function(event) {\n    console.log(\"Wrapper clicked\");\n});\ndocument.getElementById(\"text\").addEventListener(\"click\", function(event) {\n    console.log(\"Text clicked\");\n    event.stopImmediatePropagation();\n});\ndocument.getElementById(\"text\").addEventListener(\"click\", function(event) {\n    console.log(\"Another text event\");\n});\n</script>",
    "o": [
      "\"Text clicked\"",
      "\"Text clicked\" followed by \"Wrapper clicked\"",
      "\"Text clicked\" followed by \"Another text event\"",
      "\"Another text event\" followed by \"Text clicked\""
    ]
  },
  {
    "q": "Which event fires when a user scrolls a page?",
    "o": [
      "scroll",
      "onscroll",
      "scrolling",
      "wheel"
    ]
  },
  {
    "q": "Which of the following is a valid way to remove an event listener?",
    "o": [
      "element.removeEventListener(\"click\", eventHandler)",
      "element.detachEvent(\"click\", eventHandler)",
      "element.off(\"click\", eventHandler)",
      "element.unbind(\"click\", eventHandler)"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n<script>\nfunction handleClick() {\n    console.log(\"Clicked!\");\n}\ndocument.getElementById(\"btn\").addEventListener(\"click\", handleClick, { once: true });\n</script>",
    "o": [
      "\"Clicked!\" only on the first click",
      "\"Clicked!\" every time the button is clicked",
      "An error",
      "Nothing"
    ]
  },
  {
    "q": "Which of the following is NOT true about event delegation?",
    "o": [
      "It requires adding an event listener to every child element",
      "It is useful for dynamically added elements",
      "It improves performance by reducing the number of event listeners",
      "It relies on event bubbling"
    ]
  },
  {
    "q": "What is the correct way to add an event listener to an element in JavaScript?",
    "o": [
      "element.addEventListener(\"click\", function() { console.log(\"Clicked\"); });",
      "element.attachEvent(\"onclick\", function() { console.log(\"Clicked\"); });",
      "element.on(\"click\", function() { console.log(\"Clicked\"); });",
      "element.addEvent(\"click\", function() { console.log(\"Clicked\"); });"
    ]
  },
  {
    "q": "Which event property is used to determine the element that triggered an event?",
    "o": [
      "event.target",
      "event.currentTarget",
      "event.srcElement",
      "event.trigger"
    ]
  },
  {
    "q": "What happens if an event listener is added to a parent element, but the event occurs on a child element?",
    "o": [
      "The event bubbles up to the parent and triggers the parent's event listener",
      "The parent event listener is ignored",
      "Only the child element’s event is triggered",
      "The event is captured and stops at the child"
    ]
  },
  {
    "q": "What is the output when clicking the inner div?",
    "l": "javascript",
    "c": "<div id=\"outer\">\n  <div id=\"inner\">Click me</div>\n</div>\n<script>\ndocument.getElementById(\"outer\").addEventListener(\"click\", function() {\n    console.log(\"Outer clicked\");\n}, true);\n\ndocument.getElementById(\"inner\").addEventListener(\"click\", function() {\n    console.log(\"Inner clicked\");\n});\n</script>",
    "o": [
      "\"Outer clicked\" followed by \"Inner clicked\"",
      "\"Inner clicked\" followed by \"Outer clicked\"",
      "\"Inner clicked\" only",
      "\"Outer clicked\" only"
    ]
  },
  {
    "q": "Which of the following is TRUE about event bubbling?",
    "o": [
      "An event starts at the target element and bubbles up to the ancestors",
      "An event starts at the document and moves down to the target",
      "An event only affects the target element",
      "Bubbling occurs before the capturing phase"
    ]
  },
  {
    "q": "What will be logged when clicking the link?",
    "l": "javascript",
    "c": "<a href=\"https://example.com\" id=\"myLink\">Click me</a>\n<script>\ndocument.getElementById(\"myLink\").addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    console.log(\"Link clicked but not followed\");\n});\n</script>",
    "o": [
      "\"Link clicked but not followed\"",
      "The browser navigates to 'https://example.com'",
      "Nothing happens",
      "An error occurs"
    ]
  },
  {
    "q": "Which of the following statements is TRUE about event delegation?",
    "o": [
      "It allows handling events on dynamically added elements",
      "It requires adding event listeners to each child element separately",
      "It prevents event bubbling",
      "It works only with 'click' events"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n<script>\nfunction handleClick() {\n    console.log(\"Clicked\");\n}\ndocument.getElementById(\"btn\").addEventListener(\"click\", handleClick);\ndocument.getElementById(\"btn\").removeEventListener(\"click\", handleClick);\n</script>",
    "o": [
      "Nothing",
      "\"Clicked\"",
      "An error",
      "Undefined"
    ]
  },
  {
    "q": "What does event.stopImmediatePropagation() do?",
    "o": [
      "Prevents any other event listeners on the same element from executing",
      "Prevents the default action of the event",
      "Stops the event from bubbling up the DOM tree",
      "Removes the event listener"
    ]
  },
  {
    "q": "Which event type is fired when the user releases a key?",
    "o": [
      "keyup",
      "keydown",
      "keypress",
      "input"
    ]
  },
  {
    "q": "What will be logged when clicking the paragraph?",
    "l": "javascript",
    "c": "<div id=\"wrapper\">\n  <p id=\"text\">Click me</p>\n</div>\n<script>\ndocument.getElementById(\"wrapper\").addEventListener(\"click\", function(event) {\n    console.log(\"Wrapper clicked\");\n});\ndocument.getElementById(\"text\").addEventListener(\"click\", function(event) {\n    console.log(\"Text clicked\");\n    event.stopImmediatePropagation();\n});\ndocument.getElementById(\"text\").addEventListener(\"click\", function(event) {\n    console.log(\"Another text event\");\n});\n</script>",
    "o": [
      "\"Text clicked\"",
      "\"Text clicked\" followed by \"Wrapper clicked\"",
      "\"Text clicked\" followed by \"Another text event\"",
      "\"Another text event\" followed by \"Text clicked\""
    ]
  },
  {
    "q": "Which of the following event listeners is executed only once?",
    "o": [
      "element.addEventListener(\"click\", callback, { once: true });",
      "element.addEventListener(\"click\", callback);",
      "element.addEvent(\"click\", callback, { single: true });",
      "element.once(\"click\", callback);"
    ]
  },
  {
    "q": "Which method can be used to trigger an event manually?",
    "o": [
      "element.dispatchEvent(new Event(\"click\"));",
      "element.triggerEvent(\"click\");",
      "element.callEvent(\"click\");",
      "element.executeEvent(\"click\");"
    ]
  },
  {
    "q": "What will be logged when clicking the inner div?",
    "l": "javascript",
    "c": "<div id=\"outer\">\n  <div id=\"inner\">Click me</div>\n</div>\n<script>\ndocument.getElementById(\"outer\").addEventListener(\"click\", function() {\n    console.log(\"Outer clicked\");\n}, false);\ndocument.getElementById(\"inner\").addEventListener(\"click\", function(event) {\n    console.log(\"Inner clicked\");\n    event.stopPropagation();\n});\n</script>",
    "o": [
      "\"Inner clicked\"",
      "\"Inner clicked\" followed by \"Outer clicked\"",
      "\"Outer clicked\" followed by \"Inner clicked\"",
      "Nothing"
    ]
  },
  {
    "q": "Which of the following is NOT a valid JavaScript event?",
    "o": [
      "onhover",
      "onmouseover",
      "onkeydown",
      "onchange"
    ]
  },
  {
    "q": "Which method prevents an event from propagating to parent elements?",
    "o": [
      "event.stopPropagation()",
      "event.preventDefault()",
      "event.stopImmediatePropagation()",
      "event.cancelBubble = true"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n<script>\nconst button = document.getElementById(\"btn\");\nbutton.addEventListener(\"click\", () => console.log(\"First listener\"));\nbutton.addEventListener(\"click\", (event) => {\n    console.log(\"Second listener\");\n    event.stopImmediatePropagation();\n});\nbutton.addEventListener(\"click\", () => console.log(\"Third listener\"));\n</script>",
    "o": [
      "\"First listener\" followed by \"Second listener\"",
      "\"Second listener\" followed by \"Third listener\"",
      "\"Second listener\" only",
      "\"First listener\", \"Second listener\", and \"Third listener\""
    ]
  },
  {
    "q": "What does the 'capture' phase of event propagation do?",
    "o": [
      "It allows the event to be captured before reaching the target element",
      "It stops the event from propagating to parent elements",
      "It makes the event listener execute only once",
      "It ensures the event runs after all bubbling events"
    ]
  },
  {
    "q": "Which event property prevents the browser's default action?",
    "o": [
      "event.preventDefault()",
      "event.stopPropagation()",
      "event.cancelBubble = true",
      "event.preventBubble()"
    ]
  },
  {
    "q": "What will be logged when clicking the paragraph?",
    "l": "javascript",
    "c": "<div id=\"container\">\n  <p id=\"text\">Click me</p>\n</div>\n<script>\ndocument.getElementById(\"container\").addEventListener(\"click\", function() {\n    console.log(\"Container clicked\");\n}, true);\ndocument.getElementById(\"text\").addEventListener(\"click\", function() {\n    console.log(\"Text clicked\");\n});\n</script>",
    "o": [
      "\"Container clicked\" followed by \"Text clicked\"",
      "\"Text clicked\" followed by \"Container clicked\"",
      "\"Text clicked\" only",
      "\"Container clicked\" only"
    ]
  },
  {
    "q": "Which of the following statements about event delegation is TRUE?",
    "o": [
      "Event delegation allows handling events for dynamically added elements",
      "Event delegation stops event bubbling",
      "Event delegation only works for click events",
      "Event delegation requires attaching event listeners to every child element"
    ]
  },
  {
    "q": "What will be logged when clicking the inner div?",
    "l": "javascript",
    "c": "<div id=\"outer\">\n  <div id=\"inner\">Click me</div>\n</div>\n<script>\ndocument.getElementById(\"outer\").addEventListener(\"click\", function() {\n    console.log(\"Outer clicked\");\n}, false);\ndocument.getElementById(\"inner\").addEventListener(\"click\", function(event) {\n    console.log(\"Inner clicked\");\n    event.stopPropagation();\n});\n</script>",
    "o": [
      "\"Inner clicked\"",
      "\"Inner clicked\" followed by \"Outer clicked\"",
      "\"Outer clicked\" followed by \"Inner clicked\"",
      "Nothing"
    ]
  },
  {
    "q": "Which JavaScript event fires when an input field loses focus?",
    "o": [
      "blur",
      "focus",
      "change",
      "input"
    ]
  },
  {
    "q": "What happens when calling preventDefault() on a form submit event?",
    "o": [
      "The form submission is stopped",
      "The event is removed from the event queue",
      "The default action executes twice",
      "The event listener is removed"
    ]
  },
  {
    "q": "What is the difference between event.target and event.currentTarget?",
    "o": [
      "event.target refers to the actual clicked element, while event.currentTarget refers to the element with the listener",
      "event.target is always the element with the event listener",
      "event.currentTarget is the element that triggered the event",
      "Both event.target and event.currentTarget always refer to the same element"
    ]
  },
  {
    "q": "Which method allows an event listener to execute only once?",
    "o": [
      "addEventListener(event, listener, { once: true })",
      "event.stopPropagation()",
      "removeEventListener(event, listener)",
      "setTimeout(listener, 0)"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click me</button>\n<script>\nconst button = document.getElementById(\"btn\");\nbutton.addEventListener(\"click\", () => console.log(\"First\"));\nbutton.addEventListener(\"click\", () => console.log(\"Second\"), { once: true });\nbutton.addEventListener(\"click\", () => console.log(\"Third\"));\n</script>",
    "o": [
      "\"First\", \"Second\", \"Third\" on first click, then \"First\", \"Third\" on subsequent clicks",
      "\"First\", \"Third\" on every click",
      "\"Second\" on the first click, then nothing",
      "\"First\", \"Second\", \"Third\" on every click"
    ]
  },
  {
    "q": "Which property determines whether an event bubbles up?",
    "o": [
      "event.bubbles",
      "event.target",
      "event.currentTarget",
      "event.type"
    ]
  },
  {
    "q": "What is the main advantage of event delegation?",
    "o": [
      "It reduces the number of event listeners needed",
      "It stops events from bubbling",
      "It makes events execute faster",
      "It prevents the default action of an event"
    ]
  },
  {
    "q": "What will be logged when clicking the list item?",
    "l": "javascript",
    "c": "<ul id=\"list\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>\n<script>\ndocument.getElementById(\"list\").addEventListener(\"click\", function(event) {\n    console.log(event.target.textContent);\n});\n</script>",
    "o": [
      "The text of the clicked <li> item",
      "\"list\"",
      "Nothing",
      "An error"
    ]
  },
  {
    "q": "Which of the following event listeners would correctly prevent a form from submitting?",
    "o": [
      "form.addEventListener(\"submit\", (event) => event.preventDefault());",
      "form.addEventListener(\"click\", (event) => event.preventDefault());",
      "form.onsubmit = false;",
      "form.stopEvent();"
    ]
  },
  {
    "q": "Which event should be used to detect changes in a text input field?",
    "o": [
      "input",
      "change",
      "keydown",
      "keyup"
    ]
  },
  {
    "q": "What is the effect of calling event.stopImmediatePropagation()?",
    "o": [
      "It stops all other event listeners from executing on the same event",
      "It prevents the default action of the event",
      "It removes the event listener",
      "It only stops bubbling, but other listeners on the same element still execute"
    ]
  },
  {
    "q": "What will be logged when clicking the link?",
    "l": "javascript",
    "c": "<a href=\"https://example.com\" id=\"myLink\">Click me</a>\n<script>\ndocument.getElementById(\"myLink\").addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    console.log(\"Link clicked but not followed\");\n});\n</script>",
    "o": [
      "\"Link clicked but not followed\"",
      "The browser navigates to example.com",
      "An error occurs",
      "Nothing happens"
    ]
  },
  {
    "q": "Which of the following events is NOT cancelable using preventDefault()?",
    "o": [
      "load",
      "submit",
      "click",
      "keydown"
    ]
  },
  {
    "q": "What is event bubbling in JavaScript?",
    "o": [
      "An event starts from the target element and propagates up to its ancestors",
      "An event starts from the document and propagates down to the target element",
      "An event occurs only on the target element and does not propagate",
      "An event gets executed multiple times due to multiple listeners"
    ]
  },
  {
    "q": "Which of the following will correctly stop event propagation?",
    "o": [
      "event.stopPropagation()",
      "event.preventDefault()",
      "event.stopImmediatePropagation()",
      "event.disableEvent()"
    ]
  },
  {
    "q": "What will be logged when clicking the button inside the div?",
    "l": "javascript",
    "c": "<div id=\"outer\">\n  <button id=\"inner\">Click Me</button>\n</div>\n<script>\ndocument.getElementById(\"outer\").addEventListener(\"click\", () => console.log(\"Div clicked\"));\ndocument.getElementById(\"inner\").addEventListener(\"click\", (event) => {\n    console.log(\"Button clicked\");\n    event.stopPropagation();\n});\n</script>",
    "o": [
      "\"Button clicked\" only",
      "\"Button clicked\", \"Div clicked\"",
      "\"Div clicked\" only",
      "Nothing is logged"
    ]
  },
  {
    "q": "Which method is used to attach multiple event listeners to an element?",
    "o": [
      "addEventListener()",
      "attachEvent()",
      "onEvent()",
      "bindEvent()"
    ]
  },
  {
    "q": "What is event delegation in JavaScript?",
    "o": [
      "A technique where a parent element handles events for its child elements",
      "A method to stop event propagation",
      "A way to execute an event only once",
      "An alternative to using event.preventDefault()"
    ]
  },
  {
    "q": "What will be logged when clicking on a dynamically added button?",
    "l": "javascript",
    "c": "<div id=\"container\">\n  <button class=\"dynamic\">Click Me</button>\n</div>\n<script>\ndocument.getElementById(\"container\").addEventListener(\"click\", function(event) {\n    if(event.target.classList.contains(\"dynamic\")) {\n        console.log(\"Button clicked\");\n    }\n});\n</script>",
    "o": [
      "\"Button clicked\" when clicking on the button",
      "Nothing happens",
      "An error occurs",
      "\"container clicked\""
    ]
  },
  {
    "q": "Which of the following events will NOT bubble up?",
    "o": [
      "focus",
      "click",
      "keyup",
      "mousedown"
    ]
  },
  {
    "q": "Which of the following statements is TRUE about preventDefault()?",
    "o": [
      "It prevents the default behavior of an event without stopping propagation",
      "It stops event propagation",
      "It removes the event listener",
      "It prevents JavaScript execution"
    ]
  },
  {
    "q": "What will happen when clicking the link?",
    "l": "javascript",
    "c": "<a href=\"https://example.com\" id=\"myLink\">Click me</a>\n<script>\ndocument.getElementById(\"myLink\").addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    console.log(\"Navigation prevented\");\n});\n</script>",
    "o": [
      "\"Navigation prevented\" is logged, and the page does not navigate",
      "The browser navigates to example.com",
      "An error occurs",
      "Nothing happens"
    ]
  },
  {
    "q": "What is the correct way to remove an event listener?",
    "o": [
      "element.removeEventListener(\"click\", myFunction);",
      "element.detachEvent(\"click\", myFunction);",
      "element.onClick = null;",
      "element.disableEvent(\"click\");"
    ]
  },
  {
    "q": "Which of the following best describes the 'capture' phase in event propagation?",
    "o": [
      "The event travels from the root of the DOM tree down to the target element",
      "The event travels from the target element to the root of the DOM tree",
      "The event is handled only at the target element",
      "The event stops propagation once it reaches the target element"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click Me</button>\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function() {\n    console.log(this.textContent);\n});\n</script>",
    "o": [
      "\"Click Me\"",
      "\"undefined\"",
      "Nothing happens",
      "An error occurs"
    ]
  },
  {
    "q": "Which JavaScript method is used to add an event listener that runs only once?",
    "o": [
      "addEventListener(\"click\", myFunction, { once: true })",
      "addEventListenerOnce(\"click\", myFunction)",
      "addEventOnce(\"click\", myFunction)",
      "addSingleEvent(\"click\", myFunction)"
    ]
  },
  {
    "q": "What will be logged when clicking the button inside the div?",
    "l": "javascript",
    "c": "<div id=\"parent\">\n  <button id=\"child\">Click Me</button>\n</div>\n<script>\ndocument.getElementById(\"parent\").addEventListener(\"click\", function() {\n    console.log(\"Parent clicked\");\n}, true);\ndocument.getElementById(\"child\").addEventListener(\"click\", function() {\n    console.log(\"Child clicked\");\n});\n</script>",
    "o": [
      "\"Parent clicked\", \"Child clicked\"",
      "\"Child clicked\", \"Parent clicked\"",
      "\"Parent clicked\" only",
      "\"Child clicked\" only"
    ]
  },
  {
    "q": "Which event property helps to identify the element that triggered the event?",
    "o": [
      "event.target",
      "event.currentTarget",
      "event.srcElement",
      "event.listener"
    ]
  },
  {
    "q": "What happens if an event listener is added to multiple elements with the same class?",
    "o": [
      "Each element will have its own event listener",
      "Only the first element will receive the event",
      "The event listener will be attached to the document instead",
      "An error occurs"
    ]
  },
  {
    "q": "What will be the result of clicking the button in the following code?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click Me</button>\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    event.stopImmediatePropagation();\n    console.log(\"First event listener\");\n});\ndocument.getElementById(\"btn\").addEventListener(\"click\", function() {\n    console.log(\"Second event listener\");\n});\n</script>",
    "o": [
      "\"First event listener\" only",
      "\"First event listener\", \"Second event listener\"",
      "\"Second event listener\" only",
      "An error occurs"
    ]
  },
  {
    "q": "Which of the following is NOT a valid JavaScript event?",
    "o": [
      "onpress",
      "onclick",
      "onkeydown",
      "onfocus"
    ]
  },
  {
    "q": "What will be logged when clicking the dynamically added button?",
    "l": "javascript",
    "c": "<div id=\"container\"></div>\n<script>\ndocument.getElementById(\"container\").addEventListener(\"click\", function(event) {\n    if(event.target.tagName === \"BUTTON\") {\n        console.log(\"Dynamically added button clicked\");\n    }\n});\n\nlet btn = document.createElement(\"button\");\nbtn.textContent = \"Click Me\";\ndocument.getElementById(\"container\").appendChild(btn);\n</script>",
    "o": [
      "\"Dynamically added button clicked\"",
      "Nothing happens",
      "An error occurs",
      "The event does not trigger because the button was added dynamically"
    ]
  },
  {
    "q": "Which method prevents an event's default behavior?",
    "o": [
      "event.preventDefault()",
      "event.stopPropagation()",
      "event.cancelEvent()",
      "event.stopDefault()"
    ]
  },
  {
    "q": "What is the purpose of event delegation in JavaScript?",
    "o": [
      "It allows a parent element to handle events for its child elements",
      "It prevents event propagation from occurring",
      "It makes events execute in the capturing phase only",
      "It stops events from being registered on dynamically created elements"
    ]
  },
  {
    "q": "What will be logged when clicking the inner div?",
    "l": "javascript",
    "c": "<div id=\"outer\">\n  <div id=\"inner\">Click me</div>\n</div>\n<script>\ndocument.getElementById(\"outer\").addEventListener(\"click\", function() {\n    console.log(\"Outer div clicked\");\n});\ndocument.getElementById(\"inner\").addEventListener(\"click\", function(event) {\n    console.log(\"Inner div clicked\");\n    event.stopPropagation();\n});\n</script>",
    "o": [
      "\"Inner div clicked\"",
      "\"Inner div clicked\", \"Outer div clicked\"",
      "\"Outer div clicked\"",
      "Nothing happens"
    ]
  },
  {
    "q": "Which event property refers to the element that is currently handling the event?",
    "o": [
      "event.currentTarget",
      "event.target",
      "event.srcElement",
      "event.delegateTarget"
    ]
  },
  {
    "q": "What will be the result of clicking the anchor element in the following code?",
    "l": "javascript",
    "c": "<a href=\"https://example.com\" id=\"link\">Click Me</a>\n<script>\ndocument.getElementById(\"link\").addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    console.log(\"Link clicked but not followed\");\n});\n</script>",
    "o": [
      "\"Link clicked but not followed\"",
      "Navigates to https://example.com",
      "Nothing happens",
      "An error occurs"
    ]
  },
  {
    "q": "Which event method is used to stop event bubbling?",
    "o": [
      "event.stopPropagation()",
      "event.preventDefault()",
      "event.stopImmediatePropagation()",
      "event.halt()"
    ]
  },
  {
    "q": "What happens if an event listener is added twice to the same element for the same event type?",
    "o": [
      "The event will be triggered twice",
      "The second event listener will overwrite the first",
      "Only the first event listener will be executed",
      "An error will occur"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click Me</button>\n<script>\nfunction clickHandler() {\n    console.log(\"Button clicked\");\n    document.getElementById(\"btn\").removeEventListener(\"click\", clickHandler);\n}\ndocument.getElementById(\"btn\").addEventListener(\"click\", clickHandler);\n</script>",
    "o": [
      "\"Button clicked\" (only once even if clicked multiple times)",
      "\"Button clicked\" (logged every time the button is clicked)",
      "Nothing happens",
      "An error occurs"
    ]
  },
  {
    "q": "Which of the following best describes the event bubbling phase?",
    "o": [
      "The event moves from the target element to its ancestors",
      "The event moves from the root element down to the target element",
      "The event only occurs on the target element",
      "The event is handled twice by the target element"
    ]
  },
  {
    "q": "What will be the output when clicking the paragraph?",
    "l": "javascript",
    "c": "<div id=\"wrapper\">\n  <p id=\"text\">Click me</p>\n</div>\n<script>\ndocument.getElementById(\"wrapper\").addEventListener(\"click\", function(event) {\n    console.log(\"Wrapper clicked\");\n});\ndocument.getElementById(\"text\").addEventListener(\"click\", function() {\n    console.log(\"Paragraph clicked\");\n});\n</script>",
    "o": [
      "\"Paragraph clicked\", \"Wrapper clicked\"",
      "\"Wrapper clicked\", \"Paragraph clicked\"",
      "\"Paragraph clicked\" only",
      "\"Wrapper clicked\" only"
    ]
  },
  {
    "q": "Which event will fire when a user types something into an input field?",
    "o": [
      "input",
      "change",
      "keydown",
      "submit"
    ]
  },
  {
    "q": "Which method is used to attach an event handler to an element in JavaScript?",
    "o": [
      "element.addEventListener()",
      "element.attachEvent()",
      "element.onEvent()",
      "element.setEventHandler()"
    ]
  },
  {
    "q": "What is the default event propagation mode in JavaScript?",
    "o": [
      "Bubbling",
      "Capturing",
      "Delegation",
      "None"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click Me</button>\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    console.log(event.type);\n});\n</script>",
    "o": [
      "\"click\"",
      "\"button\"",
      "\"event\"",
      "\"undefined\""
    ]
  },
  {
    "q": "How can you remove an event listener from an element?",
    "o": [
      "element.removeEventListener(event, handler)",
      "element.detachEvent(event, handler)",
      "element.stopEventListener(event, handler)",
      "element.off(event, handler)"
    ]
  },
  {
    "q": "What will be logged when clicking the inner div?",
    "l": "javascript",
    "c": "<div id=\"outer\">\n  <div id=\"inner\">Click me</div>\n</div>\n<script>\ndocument.getElementById(\"outer\").addEventListener(\"click\", function() {\n    console.log(\"Outer div clicked\");\n}, true);\ndocument.getElementById(\"inner\").addEventListener(\"click\", function() {\n    console.log(\"Inner div clicked\");\n});\n</script>",
    "o": [
      "\"Outer div clicked\", \"Inner div clicked\"",
      "\"Inner div clicked\", \"Outer div clicked\"",
      "\"Outer div clicked\" only",
      "\"Inner div clicked\" only"
    ]
  },
  {
    "q": "What is the purpose of event.preventDefault()?",
    "o": [
      "It prevents the default action of an event from occurring",
      "It stops the event from propagating to parent elements",
      "It removes the event listener from the element",
      "It pauses the execution of the event"
    ]
  },
  {
    "q": "Which of the following events is fired when the DOM is fully loaded?",
    "o": [
      "DOMContentLoaded",
      "load",
      "ready",
      "onLoad"
    ]
  },
  {
    "q": "What will happen when clicking the link?",
    "l": "javascript",
    "c": "<a href=\"https://example.com\" id=\"myLink\">Click me</a>\n<script>\ndocument.getElementById(\"myLink\").addEventListener(\"click\", function(event) {\n    alert(\"Link clicked\");\n});\n</script>",
    "o": [
      "It will show an alert and then navigate to the link",
      "It will only show the alert and not navigate",
      "It will navigate to the link without showing an alert",
      "An error will occur"
    ]
  },
  {
    "q": "Which event is fired when an element loses focus?",
    "o": [
      "blur",
      "focus",
      "change",
      "unfocus"
    ]
  },
  {
    "q": "What will be the output when clicking the button twice?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click Me</button>\n<script>\nfunction handleClick() {\n    console.log(\"Button clicked\");\n}\ndocument.getElementById(\"btn\").addEventListener(\"click\", handleClick);\ndocument.getElementById(\"btn\").addEventListener(\"click\", handleClick);\n</script>",
    "o": [
      "\"Button clicked\" printed twice",
      "\"Button clicked\" printed once",
      "Nothing happens",
      "An error occurs"
    ]
  },
  {
    "q": "Which event propagation phase allows events to be captured before reaching the target element?",
    "o": [
      "Capturing phase",
      "Bubbling phase",
      "Target phase",
      "None of the above"
    ]
  },
  {
    "q": "What will be logged when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click Me</button>\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    console.log(event.currentTarget.tagName);\n});\n</script>",
    "o": [
      "\"BUTTON\"",
      "\"button\"",
      "\"undefined\"",
      "An error occurs"
    ]
  },
  {
    "q": "Which of the following statements about event delegation is TRUE?",
    "o": [
      "It allows handling multiple child elements' events by attaching a listener to a parent element",
      "It prevents event propagation",
      "It blocks the default action of an event",
      "It only works for 'click' events"
    ]
  },
  {
    "q": "What will be logged when clicking the inner div?",
    "l": "javascript",
    "c": "<div id=\"outer\">\n  <div id=\"inner\">Click me</div>\n</div>\n<script>\ndocument.getElementById(\"outer\").addEventListener(\"click\", function() {\n    console.log(\"Outer div clicked\");\n});\ndocument.getElementById(\"inner\").addEventListener(\"click\", function(event) {\n    event.stopPropagation();\n    console.log(\"Inner div clicked\");\n});\n</script>",
    "o": [
      "\"Inner div clicked\"",
      "\"Outer div clicked\", \"Inner div clicked\"",
      "\"Outer div clicked\" only",
      "Nothing will be logged"
    ]
  },
  {
    "q": "Which method stops an event from propagating to parent elements?",
    "o": [
      "event.stopPropagation()",
      "event.preventDefault()",
      "event.stopImmediatePropagation()",
      "event.cancelBubble = true"
    ]
  },
  {
    "q": "What happens when event.stopImmediatePropagation() is called?",
    "o": [
      "It stops all event listeners on the same element from executing",
      "It prevents the default action of the event",
      "It stops event propagation but allows other listeners on the same element to run",
      "It removes the event listener"
    ]
  },
  {
    "q": "What will happen when clicking the button?",
    "l": "javascript",
    "c": "<button id=\"btn\">Click Me</button>\n<script>\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    alert(\"Button clicked\");\n});\n</script>",
    "o": [
      "The alert will show, but no default action will be prevented",
      "The default action of the button will be prevented",
      "An error will occur",
      "Nothing will happen"
    ]
  },
  {
    "q": "Which event is fired when a user right-clicks on an element?",
    "o": [
      "contextmenu",
      "click",
      "mousedown",
      "mouseup"
    ]
  },
  {
    "q": "What will be logged when clicking on the list items?",
    "l": "javascript",
    "c": "<ul id=\"list\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n</ul>\n<script>\ndocument.getElementById(\"list\").addEventListener(\"click\", function(event) {\n    console.log(event.target.textContent);\n});\n</script>",
    "o": [
      "The text content of the clicked <li> item",
      "\"undefined\"",
      "\"Item 1, Item 2, Item 3\"",
      "Nothing will be logged"
    ]
  },
  {
    "q": "Which event is triggered when the user presses a key?",
    "o": [
      "keydown",
      "keypress",
      "keyup",
      "input"
    ]
  },
  {
    "q": "What is the output of the following code snippet when the button is clicked?",
    "l": "javascript",
    "c": "document.querySelector('button').addEventListener('click', function() {\n  console.log('Button clicked!');\n});",
    "o": [
      "Button clicked!",
      "undefined",
      "No output",
      "An error occurs"
    ]
  },
  {
    "q": "Which of the following is the correct way to add an event listener in JavaScript?",
    "o": [
      "element.addEventListener('click', handler)",
      "element.addEvent('click', handler)",
      "element.on('click', handler)",
      "element.attachEvent('click', handler)"
    ]
  },
  {
    "q": "What is event bubbling in JavaScript?",
    "o": [
      "The process where events propagate from the target element up to the root",
      "The process where events propagate from the root down to the target element",
      "When multiple events are triggered simultaneously",
      "When an event triggers multiple handlers"
    ]
  },
  {
    "q": "What will be logged when the inner div is clicked?",
    "l": "javascript",
    "c": "document.getElementById('outer').addEventListener('click', function() {\n  console.log('Outer div clicked');\n});\n\ndocument.getElementById('inner').addEventListener('click', function() {\n  console.log('Inner div clicked');\n});",
    "o": [
      "Inner div clicked, then Outer div clicked",
      "Outer div clicked, then Inner div clicked",
      "Only Inner div clicked",
      "Only Outer div clicked"
    ]
  },
  {
    "q": "What is event delegation in JavaScript?",
    "o": [
      "Attaching a single event listener to a parent to handle events for multiple children",
      "Creating multiple event handlers for the same element",
      "Passing events between different JavaScript files",
      "Delegating event handling to another programming language"
    ]
  },
  {
    "q": "How can you prevent the default action of an event in JavaScript?",
    "o": [
      "event.preventDefault()",
      "event.stopDefault()",
      "event.cancelAction()",
      "event.stop()"
    ]
  },
  {
    "q": "What will be the output when the link is clicked?",
    "l": "javascript",
    "c": "document.querySelector('a').addEventListener('click', function(e) {\n  e.preventDefault();\n  console.log('Link clicked but no navigation');\n});",
    "o": [
      "Link clicked but no navigation",
      "The page navigates and nothing is logged",
      "An error occurs",
      "Both navigation and logging occur"
    ]
  },
  {
    "q": "Which method stops event propagation in JavaScript?",
    "o": [
      "event.stopPropagation()",
      "event.cancelBubble()",
      "event.stopBubbling()",
      "event.preventPropagation()"
    ]
  },
  {
    "q": "What is the third parameter in addEventListener() used for?",
    "o": [
      "To specify whether to use capture phase or bubbling phase",
      "To set the priority of the event handler",
      "To determine if the event should be passive",
      "To specify the number of times the event should fire"
    ]
  },
  {
    "q": "What will happen when clicking the button in this code?",
    "l": "javascript",
    "c": "document.body.addEventListener('click', function() {\n  console.log('Body clicked');\n}, true);\n\ndocument.querySelector('button').addEventListener('click', function() {\n  console.log('Button clicked');\n});",
    "o": [
      "Body clicked, then Button clicked",
      "Button clicked, then Body clicked",
      "Only Button clicked",
      "Only Body clicked"
    ]
  },
  {
    "q": "Which method is used to remove an event listener in JavaScript?",
    "o": [
      "removeEventListener()",
      "deleteEventListener()",
      "detachEvent()",
      "unbind()"
    ]
  },
  {
    "q": "What happens when you click the button in this code snippet?",
    "l": "javascript",
    "c": "document.querySelector('button').addEventListener('click', function(e) {\n  e.stopPropagation();\n  console.log('Button clicked');\n});\n\ndocument.body.addEventListener('click', function() {\n  console.log('Body clicked');\n});",
    "o": [
      "Only 'Button clicked' is logged",
      "Both 'Button clicked' and 'Body clicked' are logged",
      "Only 'Body clicked' is logged",
      "An error occurs"
    ]
  },
  {
    "q": "What is the purpose of the `once` option in `addEventListener()`?",
    "o": [
      "Ensures the event listener runs only once",
      "Makes the event listener execute synchronously",
      "Prevents event bubbling",
      "Allows multiple identical listeners"
    ]
  },
  {
    "q": "What will this code log when the button is clicked?",
    "l": "javascript",
    "c": "document.querySelector('button').addEventListener('click', function() {\n  console.log('First listener');\n}, false);\n\ndocument.querySelector('button').addEventListener('click', function() {\n  console.log('Second listener');\n}, true);",
    "o": [
      "Second listener, then First listener",
      "First listener, then Second listener",
      "Only First listener",
      "Only Second listener"
    ]
  },
  {
    "q": "Which event phase occurs first in the DOM event flow?",
    "o": [
      "Capture phase",
      "Target phase",
      "Bubbling phase",
      "Initial phase"
    ]
  },
  {
    "q": "How does event delegation improve performance?",
    "o": [
      "By reducing the number of event listeners attached to individual elements",
      "By preventing default event actions",
      "By stopping event propagation",
      "By making events asynchronous"
    ]
  },
  {
    "q": "What will this code output when the button is clicked?",
    "l": "javascript",
    "c": "document.querySelector('form').addEventListener('submit', function(e) {\n  e.preventDefault();\n  console.log('Form submission prevented');\n});",
    "o": [
      "'Form submission prevented' and the form does not submit",
      "The form submits and nothing is logged",
      "An error occurs",
      "The form submits, then 'Form submission prevented' is logged"
    ]
  },
  {
    "q": "Which property helps identify the element that triggered an event?",
    "o": [
      "event.target",
      "event.source",
      "event.origin",
      "event.currentTarget"
    ]
  },
  {
    "q": "What is the difference between `event.target` and `event.currentTarget`?",
    "o": [
      "`event.target` is the element that triggered the event, while `event.currentTarget` is the element where the listener is attached",
      "`event.target` is the parent element, while `event.currentTarget` is the child",
      "They are identical and interchangeable",
      "`event.currentTarget` is deprecated in favor of `event.target`"
    ]
  },
  {
    "q": "What happens if you call `e.stopImmediatePropagation()` in an event listener?",
    "o": [
      "Prevents other listeners on the same element from executing",
      "Stops the event from bubbling but allows other listeners",
      "Prevents the default action of the event",
      "Removes all event listeners from the element"
    ]
  },
  {
    "q": "What is the correct way to attach an event listener to multiple buttons with class 'btn'?",
    "o": [
      "document.querySelectorAll('.btn').forEach(btn => btn.addEventListener('click', handler))",
      "document.getElementsByClass('btn').addEventListener('click', handler)",
      "document.querySelector('.btn').on('click', handler)",
      "document.attachEvent('.btn', 'click', handler)"
    ]
  },
  {
    "q": "What will happen when clicking the child element in this scenario?",
    "l": "javascript",
    "c": "document.getElementById('parent').addEventListener('click', function() {\n  console.log('Parent clicked');\n}, true);\n\ndocument.getElementById('child').addEventListener('click', function() {\n  console.log('Child clicked');\n}, false);",
    "o": [
      "'Parent clicked' then 'Child clicked'",
      "'Child clicked' then 'Parent clicked'",
      "Only 'Child clicked'",
      "Only 'Parent clicked'"
    ]
  },
  {
    "q": "Which of these correctly demonstrates event delegation?",
    "o": [
      "document.getElementById('list').addEventListener('click', function(e) {\n  if(e.target.matches('li')) console.log('List item clicked');\n})",
      "document.querySelectorAll('li').forEach(li => li.addEventListener('click', handler))",
      "document.body.onclick = function() { console.log('Body clicked') }",
      "window.addEventListener('li', function(e) { console.log(e.target) })"
    ]
  },
  {
    "q": "What does `return false` do in an inline HTML event handler like `onclick=\"return false\"`?",
    "o": [
      "Prevents default action and stops propagation",
      "Only prevents default action",
      "Only stops propagation",
      "Does nothing in modern JavaScript"
    ]
  },
  {
    "q": "What will this code log when clicking a dynamically added button with class 'dynamic-btn'?",
    "l": "javascript",
    "c": "document.addEventListener('click', function(e) {\n  if(e.target.classList.contains('dynamic-btn')) {\n    console.log('Dynamic button clicked');\n  }\n});",
    "o": [
      "'Dynamic button clicked'",
      "Nothing (event listener won't work)",
      "An error occurs",
      "All clicks are logged regardless of target"
    ]
  },
  {
    "q": "Which statement about passive event listeners is correct?",
    "o": [
      "They improve scrolling performance by indicating the handler won't call preventDefault()",
      "They prevent all default browser behaviors",
      "They execute before non-passive listeners",
      "They only work with mouse events"
    ]
  },
  {
    "q": "What is the output when clicking the div in this code?",
    "l": "javascript",
    "c": "document.querySelector('div').addEventListener('click', function() {\n  console.log('First');\n});\n\ndocument.querySelector('div').addEventListener('click', function() {\n  console.log('Second');\n}, {once: true});",
    "o": [
      "'First' then 'Second' (on first click), then only 'First' on subsequent clicks",
      "'Second' then 'First' on every click",
      "Only 'First' on every click",
      "Only 'Second' on first click"
    ]
  },
  {
    "q": "How can you check if preventDefault() was called on an event?",
    "o": [
      "Check event.defaultPrevented",
      "Check event.isDefaultPrevented()",
      "Check event.cancelable",
      "Check event.propagationStopped"
    ]
  },
  {
    "q": "What is the difference between event.stopPropagation() and event.stopImmediatePropagation()?",
    "o": [
      "stopPropagation() stops bubbling to parent elements, stopImmediatePropagation() also prevents other handlers on the same element",
      "stopImmediatePropagation() only works for custom events",
      "They are identical in functionality",
      "stopPropagation() works in capture phase only"
    ]
  },
  {
    "q": "What will this code log when the form is submitted?",
    "l": "javascript",
    "c": "document.querySelector('form').addEventListener('submit', function(e) {\n  if(!validate()) {\n    e.preventDefault();\n    console.log('Validation failed');\n  }\n});\n\nfunction validate() { return false; }",
    "o": [
      "'Validation failed' and form doesn't submit",
      "Form submits normally",
      "'Validation failed' and form still submits",
      "An error occurs"
    ]
  },
  {
    "q": "What is the correct way to attach an event listener that will automatically remove itself after firing once?",
    "o": [
      "element.addEventListener('click', handler, { once: true })",
      "element.addEventListener('click', handler, { autoRemove: true })",
      "element.addEventListener('click', handler).remove()",
      "element.once('click', handler)"
    ]
  },
  {
    "q": "What happens when you click the button in this code?",
    "l": "javascript",
    "c": "document.body.addEventListener('click', function() {\n  console.log('Body click');\n}, { capture: true });\n\ndocument.querySelector('button').addEventListener('click', function(e) {\n  e.stopPropagation();\n  console.log('Button click');\n});",
    "o": [
      "'Body click' is logged, then 'Button click'",
      "Only 'Button click' is logged",
      "Only 'Body click' is logged",
      "Neither event is logged"
    ]
  },
  {
    "q": "Which statement about event.currentTarget is correct?",
    "o": [
      "It always refers to the element to which the event handler is attached",
      "It changes as the event bubbles through the DOM",
      "It's the same as event.srcElement",
      "It's only available during the capture phase"
    ]
  },
  {
    "q": "What is the output when clicking the <span> inside the button?",
    "l": "javascript",
    "c": "<button><span>Click me</span></button>\n<script>\n  document.querySelector('button').addEventListener('click', function(e) {\n    console.log(e.target.nodeName);\n  });\n</script>",
    "o": [
      "SPAN",
      "BUTTON",
      "UNDEFINED",
      "An error occurs"
    ]
  },
  {
    "q": "How can you check if an event is cancelable?",
    "o": [
      "event.cancelable",
      "event.isCancelable()",
      "event.preventDefaultable",
      "event.canPreventDefault()"
    ]
  },
  {
    "q": "What is the purpose of the passive: true option in event listeners?",
    "o": [
      "To indicate the event handler won't call preventDefault()",
      "To make the event bubble faster",
      "To automatically remove the listener after firing",
      "To prioritize the event handler"
    ]
  },
  {
    "q": "What will this code log when clicking the div?",
    "l": "javascript",
    "c": "document.querySelector('div').addEventListener('click', function() {\n  console.log('First');\n});\n\ndocument.querySelector('div').addEventListener('click', function() {\n  console.log('Second');\n}, true);",
    "o": [
      "'Second' then 'First'",
      "'First' then 'Second'",
      "Only 'First'",
      "Only 'Second'"
    ]
  },
  {
    "q": "Which method allows you to dispatch a custom event?",
    "o": [
      "element.dispatchEvent(new Event('custom'))",
      "element.triggerEvent('custom')",
      "element.fireEvent('custom')",
      "element.sendEvent('custom')"
    ]
  },
  {
    "q": "What happens when you right-click an element with this handler?",
    "l": "javascript",
    "c": "element.addEventListener('contextmenu', function(e) {\n  e.preventDefault();\n  console.log('Custom menu');\n});",
    "o": [
      "Browser context menu is prevented and 'Custom menu' is logged",
      "Both browser menu and custom message appear",
      "Only the browser context menu appears",
      "An error occurs"
    ]
  },
  {
    "q": "What is the correct way to implement event delegation for dynamically added elements?",
    "o": [
      "Add listener to a stable parent and check event.target",
      "Reattach listeners whenever new elements are added",
      "Use MutationObserver to detect new elements",
      "Set interval to check for new elements periodically"
    ]
  },
  {
    "q": "What will be logged when pressing a key with this handler?",
    "l": "javascript",
    "c": "document.addEventListener('keydown', function(e) {\n  console.log(e.key, e.code);\n});",
    "o": [
      "The character value and physical key code",
      "Only the character value",
      "Only the key code",
      "The ASCII code of the key"
    ]
  },
  {
    "q": "Which event property helps distinguish between left, middle and right mouse clicks?",
    "o": [
      "event.button",
      "event.which",
      "event.mouseButton",
      "event.clickType"
    ]
  },
  {
    "q": "What is the effect of this code when scrolling?",
    "l": "javascript",
    "c": "window.addEventListener('scroll', function() {\n  console.log('Scrolling');\n}, { passive: true });",
    "o": [
      "'Scrolling' is logged without delaying scroll performance",
      "Scroll performance is degraded due to logging",
      "Scroll event is prevented from bubbling",
      "Nothing happens - passive listeners can't log"
    ]
  },
  {
    "q": "What is the difference between keydown and keypress events?",
    "o": [
      "keydown fires for all keys, keypress only for character keys",
      "keypress has better browser support",
      "keydown is deprecated in favor of keypress",
      "There is no difference"
    ]
  },
  {
    "q": "What will this code output when clicking a link?",
    "l": "javascript",
    "c": "document.querySelector('a').addEventListener('click', function(e) {\n  e.preventDefault();\n  setTimeout(() => e.target.click(), 1000);\n});",
    "o": [
      "Prevents navigation initially, then navigates after 1 second",
      "Prevents navigation completely",
      "Navigates immediately despite preventDefault",
      "Causes an infinite loop"
    ]
  },
  {
    "q": "What happens when you call `event.stopPropagation()` during the capture phase?",
    "o": [
      "Prevents the event from reaching the target and bubbling phases",
      "Only stops the bubbling phase but allows target phase",
      "Has no effect on capture phase",
      "Triggers the event again"
    ]
  },
  {
    "q": "What is the output when clicking the button in this scenario?",
    "l": "javascript",
    "c": "document.body.addEventListener('click', () => console.log(1), true);\ndocument.body.addEventListener('click', () => console.log(2));\nbutton.addEventListener('click', (e) => {\n  e.stopImmediatePropagation();\n  console.log(3);\n});\nbutton.addEventListener('click', () => console.log(4));",
    "o": [
      "1, 3",
      "1, 2, 3",
      "1, 3, 4",
      "3, 4"
    ]
  },
  {
    "q": "Which of these correctly implements event delegation for button clicks in a dynamic list?",
    "o": [
      "listContainer.addEventListener('click', (e) => { if(e.target.matches('button')) handleClick(e); })",
      "Array.from(listContainer.children).forEach(btn => btn.addEventListener('click', handleClick))",
      "document.on('click', 'button', handleClick)",
      "listContainer.delegate('click', 'button', handleClick)"
    ]
  },
  {
    "q": "What is the difference between `window.onload` and `document.addEventListener('DOMContentLoaded', ...)`?",
    "o": [
      "DOMContentLoaded fires when HTML is parsed, while onload waits for all resources",
      "They are identical in functionality",
      "onload is faster but less reliable",
      "DOMContentLoaded only works in modern browsers"
    ]
  },
  {
    "q": "What happens when you click the link in this code?",
    "l": "javascript",
    "c": "document.querySelector('a').addEventListener('click', (e) => {\n  e.preventDefault();\n  location.href = e.target.href;\n});",
    "o": [
      "Prevents default navigation but still changes location programmatically",
      "Nothing happens",
      "Navigates normally",
      "Causes an infinite loop"
    ]
  },
  {
    "q": "Which method allows you to check if an event listener exists on an element?",
    "o": [
      "getEventListeners() in browser console (dev tools)",
      "element.hasEventListener('click')",
      "event.listenerExists()",
      "window.checkListener(element, 'click')"
    ]
  },
  {
    "q": "What is the effect of this scroll event listener?",
    "l": "javascript",
    "c": "window.addEventListener('scroll', () => {\n  console.log(window.scrollY);\n}, { passive: true, once: true });",
    "o": [
      "Logs scroll position once without delaying scrolling",
      "Logs continuously but only during first scroll",
      "Prevents scrolling after first log",
      "Has no effect"
    ]
  },
  {
    "q": "What will this code output when clicking the div?",
    "l": "javascript",
    "c": "div.addEventListener('click', () => console.log('Bubbling'));\ndiv.addEventListener('click', () => console.log('Capturing'), true);\ndiv.addEventListener('click', () => console.log('Bubbling 2'));",
    "o": [
      "Capturing, Bubbling, Bubbling 2",
      "Bubbling, Capturing, Bubbling 2",
      "Capturing, Bubbling 2, Bubbling",
      "Random order"
    ]
  },
  {
    "q": "How can you programmatically trigger a checkbox change event while preserving its natural behavior?",
    "o": [
      "checkbox.click()",
      "checkbox.trigger('change')",
      "checkbox.dispatchEvent(new Event('change'))",
      "checkbox.fireEvent('onchange')"
    ]
  },
  {
    "q": "What is the purpose of the `event.eventPhase` property?",
    "o": [
      "Indicates which phase the event is in (1=capture, 2=target, 3=bubbling)",
      "Shows how many event listeners are attached",
      "Tells if preventDefault was called",
      "Counts how many times the event has fired"
    ]
  },
  {
    "q": "What happens when submitting this form?",
    "l": "javascript",
    "c": "form.addEventListener('submit', (e) => {\n  if(!valid) {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }\n});\nform.addEventListener('submit', () => console.log('Second listener'));",
    "o": [
      "Prevents submission and stops second listener when invalid",
      "Always logs 'Second listener' then prevents submission",
      "Only prevents submission without affecting listeners",
      "Throws an error"
    ]
  },
  {
    "q": "Which technique would be most efficient for handling clicks on 1000 list items?",
    "o": [
      "Single delegated listener on the parent ul",
      "Individual listeners on each li",
      "Event listeners created on demand",
      "Using event capturing on document.body"
    ]
  },
  {
    "q": "What is the effect of returning false from an inline onclick handler?",
    "o": [
      "Equivalent to preventDefault + stopPropagation",
      "Same as just preventDefault",
      "Same as just stopPropagation",
      "Has no special meaning"
    ]
  },
  {
    "q": "What will this code log when clicking the button?",
    "l": "javascript",
    "c": "button.addEventListener('click', function() {\n  console.log(this === button);\n});\nbutton.addEventListener('click', () => {\n  console.log(this === button);\n});",
    "o": [
      "true, false",
      "true, true",
      "false, false",
      "false, true"
    ]
  },
  {
    "q": "How can you check if an event will bubble?",
    "o": [
      "event.bubbles property",
      "event.willBubble() method",
      "event.propagates value",
      "There's no way to check"
    ]
  },
  {
    "q": "What happens when you call `event.preventDefault()` on a non-cancelable event?",
    "o": [
      "Nothing happens - the event continues normally",
      "Throws an error",
      "Silently fails but stops propagation",
      "Delays the event until it becomes cancelable"
    ]
  },
  {
    "q": "What is logged when clicking the child element in this nested structure?",
    "l": "javascript",
    "c": "parent.addEventListener('click', () => console.log('Parent Capture'), true);\nchild.addEventListener('click', () => console.log('Child Bubble'));\nparent.addEventListener('click', () => console.log('Parent Bubble'));",
    "o": [
      "'Parent Capture', 'Child Bubble', 'Parent Bubble'",
      "'Child Bubble', 'Parent Capture', 'Parent Bubble'",
      "'Parent Capture', 'Parent Bubble', 'Child Bubble'",
      "'Child Bubble' only"
    ]
  },
  {
    "q": "Which statement about Event Delegation is FALSE?",
    "o": [
      "Delegated events trigger faster than direct listeners",
      "It works by leveraging event bubbling",
      "It's memory-efficient for dynamic content",
      "You need to check event.target matches your selector"
    ]
  },
  {
    "q": "What is the output when pressing Enter in this input field?",
    "l": "javascript",
    "c": "input.addEventListener('keydown', (e) => {\n  if(e.key === 'Enter') {\n    e.preventDefault();\n    console.log('Enter pressed');\n  }\n});\nform.addEventListener('submit', () => console.log('Form submitted'));",
    "o": [
      "'Enter pressed' only",
      "'Form submitted' only",
      "'Enter pressed' then 'Form submitted'",
      "Nothing is logged"
    ]
  },
  {
    "q": "How can you determine if an event listener was registered as passive?",
    "o": [
      "Using getEventListeners() in DevTools",
      "Checking event.passive property",
      "Using eventListener.passive flag",
      "There's no way to check"
    ]
  },
  {
    "q": "What happens when clicking this button with both inline and addEventListener handlers?",
    "l": "javascript",
    "c": "<button onclick=\"console.log('Inline')\">Click</button>\n<script>\n  button.addEventListener('click', () => console.log('Listener'));\n</script>",
    "o": [
      "'Inline' then 'Listener'",
      "'Listener' then 'Inline'",
      "Only 'Inline'",
      "Random order"
    ]
  },
  {
    "q": "Which event property helps identify if Alt key was pressed during a mouse click?",
    "o": [
      "event.altKey",
      "event.modifiers.alt",
      "event.key === 'Alt'",
      "event.getModifierState('Alt')"
    ]
  },
  {
    "q": "What is the effect of this touch event listener?",
    "l": "javascript",
    "c": "element.addEventListener('touchstart', handler, { passive: false });",
    "o": [
      "May degrade scroll performance but can preventDefault()",
      "Optimizes scrolling but prevents default touch actions",
      "Has no effect on modern browsers",
      "Creates a memory leak"
    ]
  },
  {
    "q": "What will this code log when clicking the disabled button?",
    "l": "javascript",
    "c": "disabledButton.addEventListener('click', () => console.log('Clicked'));",
    "o": [
      "Nothing (disabled elements don't fire click events)",
      "'Clicked'",
      "Throws an error",
      "Depends on browser"
    ]
  },
  {
    "q": "Which is the MOST efficient way to handle clicks on 10,000 table cells?",
    "o": [
      "Single delegated listener on the table",
      "Individual listeners on each cell",
      "Event listeners created on hover",
      "Using event capturing on document"
    ]
  },
  {
    "q": "What happens when you dispatch a synthetic click event on a submit button?",
    "l": "javascript",
    "c": "button.dispatchEvent(new MouseEvent('click'));",
    "o": [
      "Triggers form submission if not prevented",
      "Only runs click handlers without submitting",
      "Throws an error",
      "Requires {bubbles: true} to work"
    ]
  },
  {
    "q": "What is the difference between event.which and event.keyCode?",
    "o": [
      "They're aliases but both are deprecated in favor of event.key",
      "which is for mouse events, keyCode for keyboard",
      "keyCode works in all browsers but which doesn't",
      "which returns Unicode while keyCode returns ASCII"
    ]
  },
  {
    "q": "What will this code log when clicking the div?",
    "l": "javascript",
    "c": "div.addEventListener('click', function() {\n  console.log(this.tagName);\n}, { once: true, capture: true });",
    "o": [
      "'DIV' once then never again",
      "'DIV' on every click",
      "Nothing (capture phase prevents bubbling)",
      "Undefined"
    ]
  },
  {
    "q": "How can you remove ALL click listeners from an element?",
    "o": [
      "element.cloneNode(true) (no direct method exists)",
      "element.removeAllEventListeners()",
      "element.off('click')",
      "delete element.eventListeners"
    ]
  },
  {
    "q": "What is the effect of this form submission handler?",
    "l": "javascript",
    "c": "form.addEventListener('submit', async (e) => {\n  e.preventDefault();\n  await submitData();\n  e.target.submit();\n});",
    "o": [
      "Prevents default, submits via AJAX, then does regular submission",
      "Causes infinite submission loop",
      "Prevents all form submissions",
      "Only works with GET methods"
    ]
  },
  {
    "q": "What happens when you call `event.stopPropagation()` inside a capturing phase listener?",
    "o": [
      "Prevents the event from reaching any subsequent phases (target and bubbling)",
      "Only stops the bubbling phase",
      "Has no effect on the capturing phase",
      "Restarts the event propagation"
    ]
  },
  {
    "q": "What is logged when clicking the child element in this nested structure?",
    "l": "javascript",
    "c": "parent.addEventListener('click', () => console.log('Capture'), true);\nchild.addEventListener('click', () => console.log('Target'));\nparent.addEventListener('click', () => console.log('Bubble'));\nchild.addEventListener('click', (e) => e.stopPropagation());",
    "o": [
      "'Capture', 'Target'",
      "'Capture', 'Target', 'Bubble'",
      "'Target' only",
      "'Capture' only"
    ]
  },
  {
    "q": "Which method provides the best performance for handling clicks on 1000+ dynamically created elements?",
    "o": [
      "Event delegation on a static parent element",
      "Adding individual listeners to each element",
      "Using event capturing on document.body",
      "MutationObserver to attach listeners when elements are created"
    ]
  },
  {
    "q": "What is the effect of this scroll event listener?",
    "l": "javascript",
    "c": "window.addEventListener('scroll', heavyFunction, { passive: true });",
    "o": [
      "Improves scroll performance but prevents calling preventDefault()",
      "Causes janky scrolling due to synchronous execution",
      "Nothing - passive has no effect on scroll events",
      "Automatically throttles the event"
    ]
  },
  {
    "q": "What will this code output when clicking the button?",
    "l": "javascript",
    "c": "button.addEventListener('click', () => console.log(1));\nbutton.addEventListener('click', () => console.log(2), true);\nbutton.addEventListener('click', () => console.log(3));",
    "o": [
      "2, 1, 3",
      "1, 2, 3",
      "1, 3, 2",
      "3, 2, 1"
    ]
  },
  {
    "q": "Which statement about event.returnValue is true?",
    "o": [
      "Setting it to false is equivalent to preventDefault()",
      "It's the modern replacement for preventDefault()",
      "It only works for custom events",
      "It stops event propagation"
    ]
  },
  {
    "q": "What happens when dispatching a custom event with bubbles: false?",
    "o": [
      "The event only triggers on the dispatch target",
      "The event bubbles but can't be canceled",
      "The event captures but doesn't bubble",
      "The event automatically becomes passive"
    ]
  },
  {
    "q": "What is the output when clicking the div with this handler?",
    "l": "javascript",
    "c": "div.addEventListener('click', function() {\n  console.log(this === div);\n});\ndiv.addEventListener('click', () => {\n  console.log(this === div);\n});",
    "o": [
      "true, false",
      "true, true",
      "false, false",
      "false, true"
    ]
  },
  {
    "q": "Which technique should be used to handle third-party widget events when you can't modify their code?",
    "o": [
      "Event capturing on document level",
      "MutationObserver to detect widget changes",
      "Periodic polling of widget state",
      "There's no way to handle such events"
    ]
  },
  {
    "q": "What is the effect of this form submission handler?",
    "l": "javascript",
    "c": "form.addEventListener('submit', (e) => {\n  if(!valid) {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }\n});\nform.addEventListener('submit', () => console.log('Second listener'));",
    "o": [
      "When invalid: prevents submit and blocks second listener",
      "Always runs both listeners then prevents submit",
      "Only prevents submit without affecting listeners",
      "Throws an error for invalid forms"
    ]
  },
  {
    "q": "Which property identifies if the Ctrl key was pressed during a click event?",
    "o": [
      "event.ctrlKey",
      "event.modifiers.control",
      "event.getModifierState('Control')",
      "event.key === 'Control'"
    ]
  },
  {
    "q": "What happens when calling preventDefault() on a passive event listener?",
    "o": [
      "Throws a 'Unable to preventDefault' error",
      "Silently fails with no effect",
      "Works normally despite passive flag",
      "Delays the default action"
    ]
  },
  {
    "q": "What is the output when clicking the button with this handler?",
    "l": "javascript",
    "c": "button.addEventListener('click', (e) => {\n  console.log(e.eventPhase);\n}, true);",
    "o": [
      "1 (CAPTURING_PHASE)",
      "2 (AT_TARGET)",
      "3 (BUBBLING_PHASE)",
      "0 (NONE)"
    ]
  },
  {
    "q": "Which is the most efficient way to handle window resize events?",
    "o": [
      "Debounced event listener",
      "Immediate listener with heavy calculations",
      "Continuous polling of window dimensions",
      "Capture-phase listener"
    ]
  },
  {
    "q": "What is the effect of this code when clicking links?",
    "l": "javascript",
    "c": "document.addEventListener('click', (e) => {\n  if(e.target.closest('a')) {\n    e.preventDefault();\n    fetch(e.target.href);\n  }\n});",
    "o": [
      "Converts all link clicks to fetch requests",
      "Only prevents default for relative links",
      "Causes infinite fetch loop",
      "Has no effect on link navigation"
    ]
  },
  {
    "q": "What is the phase order when an event occurs on an element with both parent and child listeners?",
    "o": [
      "Parent Capture → Target → Parent Bubble",
      "Parent Bubble → Target → Parent Capture",
      "Target → Parent Capture → Parent Bubble",
      "Random order depending on browser"
    ]
  },
  {
    "q": "What happens when you click the button in this scenario?",
    "l": "javascript",
    "c": "parent.addEventListener('click', () => console.log('Parent'));\nbutton.addEventListener('click', (e) => {\n  e.stopImmediatePropagation();\n  console.log('Button 1');\n});\nbutton.addEventListener('click', () => console.log('Button 2'));",
    "o": [
      "'Button 1' only",
      "'Button 1', 'Button 2'",
      "'Parent', 'Button 1', 'Button 2'",
      "'Parent', 'Button 1'"
    ]
  },
  {
    "q": "Which is the most efficient way to handle hover events for hundreds of elements?",
    "o": [
      "CSS hover pseudo-class instead of JavaScript",
      "Individual mouseenter/mouseleave listeners",
      "Event delegation with mouseover/mouseout",
      "IntersectionObserver API"
    ]
  },
  {
    "q": "What is the effect of this touch event listener?",
    "l": "javascript",
    "c": "element.addEventListener('touchstart', handler, { passive: true, capture: true });",
    "o": [
      "Optimizes performance but can't preventDefault during capture",
      "Causes scroll jank but allows preventDefault",
      "Same as regular listener but faster",
      "Prevents all touch events on the element"
    ]
  },
  {
    "q": "What will this code log when clicking the div?",
    "l": "javascript",
    "c": "div.addEventListener('click', () => console.log('Div'), true);\ndocument.addEventListener('click', () => console.log('Document'));\nwindow.addEventListener('click', () => console.log('Window'));",
    "o": [
      "'Div', 'Document', 'Window'",
      "'Window', 'Document', 'Div'",
      "'Document', 'Div', 'Window'",
      "'Div' only"
    ]
  },
  {
    "q": "Which property indicates if the event's default was prevented?",
    "o": [
      "event.defaultPrevented",
      "event.isDefaultPrevented()",
      "event.canceled",
      "event.propagationStopped"
    ]
  },
  {
    "q": "What is the difference between mouseenter/mouseleave and mouseover/mouseout?",
    "o": [
      "enter/leave don't bubble while over/out do",
      "enter/leave are deprecated in favor of over/out",
      "over/out have better performance",
      "They are identical in behavior"
    ]
  },
  {
    "q": "What happens when you dispatch a non-bubbling custom event?",
    "l": "javascript",
    "c": "element.dispatchEvent(new Event('custom', { bubbles: false }));",
    "o": [
      "Only triggers on the dispatched element",
      "Triggers on parent elements but not children",
      "Throws an error",
      "Becomes automatically passive"
    ]
  },
  {
    "q": "What is the output when clicking the button?",
    "l": "javascript",
    "c": "button.addEventListener('click', () => console.log(1), { once: true });\nbutton.addEventListener('click', () => console.log(2));\nbutton.click();\nbutton.click();",
    "o": [
      "1, 2, 2",
      "1, 2, 1, 2",
      "1, 2",
      "2, 2"
    ]
  },
  {
    "q": "Which is the proper way to handle form submission via AJAX?",
    "o": [
      "form.addEventListener('submit', (e) => { e.preventDefault(); /* AJAX */ })",
      "form.onsubmit = () => { /* AJAX */ return false; }",
      "Both approaches are equally valid",
      "Neither approach works for AJAX"
    ]
  },
  {
    "q": "What is the effect of this drag handler?",
    "l": "javascript",
    "c": "div.addEventListener('dragstart', (e) => e.preventDefault());",
    "o": [
      "Prevents the default drag behavior",
      "Has no effect on drag operations",
      "Improves drag performance",
      "Only works with passive listeners"
    ]
  },
  {
    "q": "Which event property helps detect double-clicks?",
    "o": [
      "event.detail (2 for double-click)",
      "event.clickCount",
      "event.isDoubleClick",
      "event.taps"
    ]
  },
  {
    "q": "What happens when clicking this link?",
    "l": "javascript",
    "c": "a.addEventListener('click', (e) => {\n  if(!confirm('Leave?')) e.preventDefault();\n});",
    "o": [
      "Shows confirmation before navigation",
      "Always prevents navigation",
      "Navigates then shows confirmation",
      "Throws an error"
    ]
  },
  {
    "q": "Which is the most efficient infinite scroll implementation?",
    "o": [
      "IntersectionObserver + event delegation",
      "Scroll event listener with debouncing",
      "MutationObserver on container",
      "setInterval content checker"
    ]
  },
  {
    "q": "What is the effect of this keyboard event handler?",
    "l": "javascript",
    "c": "input.addEventListener('keydown', (e) => {\n  if(e.key === 'Enter' && !e.repeat) console.log('First press');\n});",
    "o": [
      "Logs only on initial Enter press (not repeats)",
      "Logs on every Enter key event",
      "Prevents Enter key default action",
      "Throws an error on key repeat"
    ]
  },
  {
    "q": "What happens when you call `event.stopPropagation()` during the target phase?",
    "o": [
      "Prevents the bubbling phase but the target phase completes",
      "Immediately stops all event processing",
      "Has no effect on the bubbling phase",
      "Restarts the event from the capture phase"
    ]
  },
  {
    "q": "What is logged when clicking the button in this nested structure?",
    "l": "javascript",
    "c": "grandparent.addEventListener('click', () => console.log(1), true);\nparent.addEventListener('click', () => console.log(2));\nbutton.addEventListener('click', (e) => {\n  e.stopPropagation();\n  console.log(3);\n});\ngrandparent.addEventListener('click', () => console.log(4));",
    "o": [
      "1, 3",
      "1, 2, 3, 4",
      "1, 3, 4",
      "3 only"
    ]
  },
  {
    "q": "Which is the most memory-efficient way to handle clicks in a list with frequent item updates?",
    "o": [
      "Single delegated listener on the list container",
      "Adding/removing listeners when items update",
      "Using event capturing on document",
      "MutationObserver to manage listeners"
    ]
  },
  {
    "q": "What is the effect of this scroll handler?",
    "l": "javascript",
    "c": "window.addEventListener('scroll', () => {\n  console.log(window.scrollY);\n}, { passive: true, capture: true });",
    "o": [
      "Logs scroll position with optimized performance during capture",
      "Prevents default scroll behavior",
      "Only works in bubbling phase",
      "Causes scroll jank due to logging"
    ]
  },
  {
    "q": "What will this code output when clicking the div?",
    "l": "javascript",
    "c": "div.addEventListener('click', () => console.log('A'));\ndiv.addEventListener('click', () => console.log('B'), true);\ndiv.addEventListener('click', () => console.log('C'));",
    "o": [
      "B, A, C",
      "A, B, C",
      "A, C, B",
      "Random order"
    ]
  },
  {
    "q": "Which property indicates if an event can be canceled?",
    "o": [
      "event.cancelable",
      "event.isCancelable()",
      "event.preventDefaultable",
      "event.mayPreventDefault"
    ]
  },
  {
    "q": "What is the difference between `event.target` and `event.currentTarget` in a delegated listener?",
    "o": [
      "target is the originator, currentTarget is the listener's element",
      "They always reference the same element",
      "currentTarget is deprecated in modern browsers",
      "target changes during propagation while currentTarget doesn't"
    ]
  },
  {
    "q": "What happens when you dispatch a custom event with `composed: true`?",
    "o": [
      "Crosses shadow DOM boundaries",
      "Automatically bubbles to window",
      "Cannot be prevented",
      "Becomes a passive event"
    ]
  },
  {
    "q": "What is the output when clicking the button?",
    "l": "javascript",
    "c": "button.addEventListener('click', () => console.log(1), { once: true });\nbutton.addEventListener('click', () => console.log(2));\nbutton.click();\nbutton.click();",
    "o": [
      "1, 2, 2",
      "1, 2, 1, 2",
      "1, 2",
      "2, 2"
    ]
  },
  {
    "q": "Which is the proper way to handle right-clicks?",
    "o": [
      "contextmenu event with preventDefault()",
      "click event checking event.button === 2",
      "mousedown event with modifier key check",
      "auxclick event with event.detail check"
    ]
  },
  {
    "q": "What is the effect of this form handler?",
    "l": "javascript",
    "c": "form.addEventListener('submit', async (e) => {\n  e.preventDefault();\n  await validate();\n  e.target.submit();\n});",
    "o": [
      "Validates asynchronously then submits",
      "Causes infinite submission loop",
      "Bypasses validation on second attempt",
      "Throws an error"
    ]
  },
  {
    "q": "Which event property helps detect touch screen devices?",
    "o": [
      "'ontouchstart' in window",
      "event.isTouchDevice",
      "navigator.touchEnabled",
      "window.touchSupported"
    ]
  },
  {
    "q": "What happens when clicking this link?",
    "l": "javascript",
    "c": "a.addEventListener('click', (e) => {\n  if(e.ctrlKey) e.preventDefault();\n});",
    "o": [
      "Prevents navigation only when Ctrl is pressed",
      "Always prevents navigation",
      "Only prevents Ctrl+Click in some browsers",
      "Does nothing"
    ]
  },
  {
    "q": "Which is the most efficient way to detect clicks outside an element?",
    "o": [
      "Document click handler checking event.target.closest()",
      "Focusout/blur event handlers",
      "MutationObserver watching DOM changes",
      "Periodic element position checking"
    ]
  },
  {
    "q": "What is the effect of this keyboard handler?",
    "l": "javascript",
    "c": "input.addEventListener('keydown', (e) => {\n  if(e.key === 'Tab' && !e.shiftKey) e.preventDefault();\n});",
    "o": [
      "Prevents tabbing forward but allows backward tab",
      "Prevents all tab navigation",
      "Has no effect on tab key behavior",
      "Only works in Chrome"
    ]
  },
  {
    "q": "What happens when you call `event.stopImmediatePropagation()` on an element with multiple listeners?",
    "o": [
      "Stops all subsequent listeners on that element but allows bubbling",
      "Prevents all listeners including parent elements",
      "Only stops synchronous listeners",
      "Has no effect on attached listeners"
    ]
  },
  {
    "q": "What is logged when clicking the button in this structure?",
    "l": "javascript",
    "c": "div.addEventListener('click', () => console.log('Div Capture'), true);\nbutton.addEventListener('click', () => console.log('Button 1'));\nbutton.addEventListener('click', (e) => {\n  e.stopImmediatePropagation();\n  console.log('Button 2');\n});\nbutton.addEventListener('click', () => console.log('Button 3'));\ndiv.addEventListener('click', () => console.log('Div Bubble'));",
    "o": [
      "'Div Capture', 'Button 1', 'Button 2'",
      "'Div Capture', 'Button 1', 'Button 2', 'Button 3'",
      "'Button 1', 'Button 2', 'Div Bubble'",
      "'Div Capture', 'Button 2'"
    ]
  },
  {
    "q": "Which is the most efficient way to handle clicks on 10,000 table rows that need individual processing?",
    "o": [
      "Single delegated listener on table checking event.target.closest('tr')",
      "Individual listeners on each row",
      "Event capturing on document body",
      "MutationObserver to attach listeners dynamically"
    ]
  },
  {
    "q": "What is the effect of this wheel event listener?",
    "l": "javascript",
    "c": "element.addEventListener('wheel', (e) => {\n  e.preventDefault();\n  customScroll(e.deltaY);\n}, { passive: false });",
    "o": [
      "Implements custom scroll behavior but may cause jank",
      "Has no effect on wheel events",
      "Improves scroll performance",
      "Throws an error due to passive conflict"
    ]
  },
  {
    "q": "What will this code log when clicking the button?",
    "l": "javascript",
    "c": "button.addEventListener('click', () => console.log('A'), { once: true, capture: true });\nbutton.addEventListener('click', () => console.log('B'));\nbutton.addEventListener('click', () => console.log('C'), { once: true });\nbutton.click();\nbutton.click();",
    "o": [
      "First click: 'A', 'B', 'C' | Second click: 'B'",
      "First click: 'A', 'C', 'B' | Second click: 'B'",
      "Both clicks: 'A', 'B', 'C'",
      "First click: 'A', 'B' | Second click: 'B', 'C'"
    ]
  },
  {
    "q": "Which property indicates if an event is currently in the bubbling phase?",
    "o": [
      "event.eventPhase === 3 (Event.BUBBLING_PHASE)",
      "event.bubbles === true",
      "event.isBubbling()",
      "event.propagationState === 'bubble'"
    ]
  },
  {
    "q": "What is the difference between `event.composedPath()` and `event.path`?",
    "o": [
      "composedPath() is standard and includes shadow DOM, path is deprecated",
      "They are identical in all browsers",
      "path works in more browsers than composedPath()",
      "composedPath() only shows capturing phase nodes"
    ]
  },
  {
    "q": "What happens when you dispatch a cancelable custom event that gets prevented?",
    "l": "javascript",
    "c": "const event = new CustomEvent('myevent', { cancelable: true });\nelement.dispatchEvent(event);\n// Some listener calls event.preventDefault()",
    "o": [
      "event.defaultPrevented becomes true but propagation continues",
      "Event immediately stops propagating",
      "Throws an error because it's a custom event",
      "Automatically re-dispatches the event"
    ]
  },
  {
    "q": "What is the output when clicking the div with this handler?",
    "l": "javascript",
    "c": "div.addEventListener('click', function() {\n  console.log(this === div, event.currentTarget === div);\n});",
    "o": [
      "true, true",
      "true, false",
      "false, true",
      "false, false"
    ]
  },
  {
    "q": "Which is the proper way to handle middle mouse button clicks?",
    "o": [
      "Check event.button === 1 in mousedown/up events",
      "Use auxclick event with event.detail check",
      "Listen for click event with event.which === 2",
      "Check event.buttons bitmask for value 4"
    ]
  },
  {
    "q": "What is the effect of this form submission handler?",
    "l": "javascript",
    "c": "form.addEventListener('submit', (e) => {\n  if(!validate()) {\n    e.preventDefault();\n    e.stopPropagation();\n    return false;\n  }\n});\nform.addEventListener('submit', () => console.log('Submitted'));",
    "o": [
      "When invalid: prevents submit and blocks second listener",
      "Always logs 'Submitted' then validates",
      "return false has no additional effect",
      "Throws an error on invalid forms"
    ]
  },
  {
    "q": "Which event property helps detect if the Meta (Cmd) key was pressed?",
    "o": [
      "event.metaKey",
      "event.modifiers.meta",
      "event.getModifierState('Meta')",
      "event.key === 'Meta'"
    ]
  },
  {
    "q": "What happens when calling preventDefault() on a passive scroll event?",
    "o": [
      "Throws 'Unable to preventDefault inside passive event' error",
      "Silently fails with no effect",
      "Works normally despite passive flag",
      "Delays the scroll until passive timeout"
    ]
  },
  {
    "q": "What will this code log when clicking the button?",
    "l": "javascript",
    "c": "button.addEventListener('click', (e) => {\n  console.log(e.eventPhase, e.bubbles);\n}, true);",
    "o": [
      "1 (CAPTURING_PHASE), true",
      "2 (AT_TARGET), true",
      "1 (CAPTURING_PHASE), false",
      "2 (AT_TARGET), false"
    ]
  },
  {
    "q": "Which is the most efficient infinite scroll implementation for modern browsers?",
    "o": [
      "IntersectionObserver + event delegation",
      "Scroll event listener with throttling",
      "MutationObserver on container",
      "setInterval content checker"
    ]
  },
  {
    "q": "What is the effect of this code when clicking links?",
    "l": "javascript",
    "c": "document.addEventListener('click', (e) => {\n  if(e.target.tagName === 'A' && e.target.hostname !== location.hostname) {\n    e.preventDefault();\n    trackOutboundLink(e.target.href);\n  }\n}, true);",
    "o": [
      "Tracks outbound links while preventing navigation",
      "Breaks all link navigation",
      "Only works for relative links",
      "Causes infinite tracking loop"
    ]
  },
  {
    "q": "What happens when you call `event.preventDefault()` on a non-cancelable scroll event?",
    "o": [
      "Nothing happens and the scroll continues normally",
      "Throws a 'Cannot prevent default' error",
      "Delays the scroll until released",
      "Forces the event to become cancelable"
    ]
  },
  {
    "q": "What is logged when clicking the button in this structure?",
    "l": "javascript",
    "c": "div.addEventListener('click', () => console.log('Div Capture'), true);\nbutton.addEventListener('click', () => console.log('Button'));\ndiv.addEventListener('click', (e) => {\n  if(e.target !== e.currentTarget) e.stopPropagation();\n  console.log('Div Bubble');\n});",
    "o": [
      "'Div Capture', 'Button', 'Div Bubble'",
      "'Div Capture', 'Button'",
      "'Button', 'Div Bubble'",
      "'Div Capture' only"
    ]
  },
  {
    "q": "Which is the most efficient way to handle clicks in a virtual scrolling list with 100k items?",
    "o": [
      "Single delegated listener on container checking rendered items only",
      "Individual listeners on each visible item",
      "MutationObserver to track DOM changes",
      "ResizeObserver to manage visibility"
    ]
  },
  {
    "q": "What is the effect of this touch event listener?",
    "l": "javascript",
    "c": "element.addEventListener('touchmove', handler, { passive: false, capture: true });",
    "o": [
      "Allows preventDefault() but may cause scroll jank during capture",
      "Optimizes performance by making touch passive",
      "Has no effect on touch events",
      "Automatically prevents all touch moves"
    ]
  },
  {
    "q": "What will this code log when clicking the button?",
    "l": "javascript",
    "c": "button.addEventListener('click', () => console.log('A'), { once: true });\nbutton.addEventListener('click', () => console.log('B'));\nbutton.click();\nbutton.removeEventListener('click', () => console.log('B'));\nbutton.click();",
    "o": [
      "First click: 'A', 'B' | Second click: 'B'",
      "First click: 'A', 'B' | Second click: nothing",
      "Both clicks: 'A', 'B'",
      "First click: 'A' | Second click: 'B'"
    ]
  },
  {
    "q": "Which property indicates if an event has completed all propagation phases?",
    "o": [
      "event.eventPhase === 0 (Event.NONE)",
      "event.propagationComplete",
      "event.isPropagationStopped()",
      "event.bubbles === false"
    ]
  },
  {
    "q": "What is the difference between `event.composed` and `event.bubbles`?",
    "o": [
      "composed crosses shadow DOM boundaries, bubbles controls parent propagation",
      "They are identical in modern browsers",
      "bubbles is deprecated in favor of composed",
      "composed only applies to custom events"
    ]
  },
  {
    "q": "What happens when dispatching a non-bubbling, non-composed custom event from a shadow root?",
    "o": [
      "Only triggers on elements inside the shadow DOM",
      "Bubbles to the light DOM anyway",
      "Automatically becomes cancelable",
      "Throws a DOMException"
    ]
  },
  {
    "q": "What is the output when clicking the div with this handler?",
    "l": "javascript",
    "c": "div.addEventListener('click', function() {\n  console.log(event.eventPhase, this === event.currentTarget);\n}, true);",
    "o": [
      "1 (CAPTURING_PHASE), true",
      "2 (AT_TARGET), true",
      "3 (BUBBLING_PHASE), false",
      "0 (NONE), true"
    ]
  },
  {
    "q": "Which is the proper way to detect browser back/forward button navigation?",
    "o": [
      "window.onpopstate event",
      "window.onbeforeunload event",
      "document.onnavigation event",
      "history.onchange event"
    ]
  },
  {
    "q": "What is the effect of this form submission handler?",
    "l": "javascript",
    "c": "form.addEventListener('submit', (e) => {\n  if(!valid) {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    return false;\n  }\n}, true);\nform.addEventListener('submit', () => console.log('Submitted'));",
    "o": [
      "When invalid: prevents submit and blocks second listener during capture",
      "Always logs 'Submitted' then validates",
      "return false has no effect in capture phase",
      "Throws an error when invalid"
    ]
  },
  {
    "q": "Which event property helps detect if the platform modifier key (Cmd/Ctrl) was pressed?",
    "o": [
      "event.ctrlKey || event.metaKey",
      "event.platformKey",
      "event.getModifierState('Platform')",
      "event.modifiers.ctrlOrMeta"
    ]
  },
  {
    "q": "What happens when calling stopPropagation() on a passive wheel event?",
    "o": [
      "Stops propagation but scroll still occurs",
      "Prevents both propagation and scrolling",
      "Throws 'Cannot stop propagation' error",
      "Delays propagation until scrolling completes"
    ]
  },
  {
    "q": "What will this code log when clicking the button?",
    "l": "javascript",
    "c": "button.addEventListener('click', (e) => {\n  console.log(e.bubbles, e.cancelable);\n});\nbutton.dispatchEvent(new Event('click', { bubbles: false }));",
    "o": [
      "false, true",
      "true, true",
      "false, false",
      "true, false"
    ]
  },
  {
    "q": "Which is the most efficient way to handle clicks on SVG elements within a complex graphic?",
    "o": [
      "Single delegated listener on SVG root checking event.target",
      "Individual listeners on each SVG element",
      "getElementFromPoint() in a capture listener",
      "IntersectionObserver tracking visible elements"
    ]
  },
  {
    "q": "What is the effect of this code when clicking submit buttons?",
    "l": "javascript",
    "c": "document.addEventListener('click', (e) => {\n  if(e.target.type === 'submit') {\n    e.preventDefault();\n    e.target.form.requestSubmit();\n  }\n}, true);",
    "o": [
      "Converts all submit clicks to programmatic form submission",
      "Prevents all form submissions",
      "Causes infinite submission loop",
      "Only works with AJAX forms"
    ]
  },
  {
    "q": "What happens when you call `event.stopPropagation()` during the target phase of a non-bubbling event?",
    "o": [
      "Has no effect since the event wouldn't bubble anyway",
      "Prevents all remaining target phase listeners",
      "Throws an error because it's invalid",
      "Forces the event to bubble"
    ]
  },
  {
    "q": "What is logged when clicking the button in this structure?",
    "l": "javascript",
    "c": "parent.addEventListener('click', () => console.log('Parent Capture'), true);\nbutton.addEventListener('click', () => console.log('Button 1'));\nbutton.addEventListener('click', (e) => {\n  if(e.eventPhase === 2) e.stopImmediatePropagation();\n  console.log('Button 2');\n});\nparent.addEventListener('click', () => console.log('Parent Bubble'));",
    "o": [
      "'Parent Capture', 'Button 1', 'Button 2'",
      "'Parent Capture', 'Button 1', 'Button 2', 'Parent Bubble'",
      "'Button 1', 'Button 2'",
      "'Parent Capture', 'Button 2'"
    ]
  },
  {
    "q": "Which is the most efficient way to handle clicks in a table where only 5% of cells are interactive?",
    "o": [
      "Single delegated listener checking if target matches interactive cells",
      "Individual listeners on each interactive cell",
      "Event capturing on the table element",
      "MutationObserver to watch for cell changes"
    ]
  },
  {
    "q": "What is the effect of this mouseenter listener?",
    "l": "javascript",
    "c": "element.addEventListener('mouseenter', (e) => {\n  e.preventDefault();\n  console.log('Enter');\n});",
    "o": [
      "Logs 'Enter' but preventDefault has no effect",
      "Prevents the mouseenter event from occurring",
      "Throws an error because mouseenter isn't cancelable",
      "Delays the mouseenter event"
    ]
  },
  {
    "q": "What will this code log when clicking the button twice?",
    "l": "javascript",
    "c": "button.addEventListener('click', () => console.log('A'), { once: true });\nbutton.addEventListener('click', () => console.log('B'));\nbutton.click();\nbutton.addEventListener('click', () => console.log('C'));\nbutton.click();",
    "o": [
      "First click: 'A', 'B' | Second click: 'B', 'C'",
      "First click: 'A', 'B' | Second click: 'C'",
      "Both clicks: 'A', 'B', 'C'",
      "First click: 'A' | Second click: 'B', 'C'"
    ]
  },
  {
    "q": "Which property indicates if an event has completed propagation to the window?",
    "o": [
      "event.eventPhase === 0 (Event.NONE) and no more listeners execute",
      "event.propagationComplete === true",
      "window.event === null",
      "There's no direct way to tell"
    ]
  },
  {
    "q": "What is the difference between `event.composedPath()` and checking `event.target` in shadow DOM?",
    "o": [
      "composedPath() shows full path including shadow hosts, target only shows innermost element",
      "They return identical information",
      "target is deprecated in shadow DOM",
      "composedPath() only works for custom events"
    ]
  },
  {
    "q": "What happens when dispatching a cancelable custom event that gets prevented in a capture listener?",
    "l": "javascript",
    "c": "const event = new CustomEvent('test', { cancelable: true, bubbles: true });\nelement.addEventListener('test', (e) => e.preventDefault(), true);\ndocument.dispatchEvent(event);",
    "o": [
      "event.defaultPrevented becomes true but propagation continues",
      "Event immediately stops propagating",
      "Throws an error because capture listeners can't prevent default",
      "Automatically redispatches the event"
    ]
  },
  {
    "q": "What is the output when clicking the div with this handler?",
    "l": "javascript",
    "c": "div.addEventListener('click', function() {\n  console.log(event.bubbles, event.cancelable);\n});\ndiv.dispatchEvent(new Event('click', { bubbles: false }));",
    "o": [
      "false, true",
      "true, true",
      "false, false",
      "true, false"
    ]
  },
  {
    "q": "Which is the proper way to detect middle mouse button clicks that considers all browsers?",
    "o": [
      "Check event.button === 1 in mousedown/up events",
      "Use click event with event.which === 2",
      "Listen for auxclick event exclusively",
      "Check event.buttons === 4 in click event"
    ]
  },
  {
    "q": "What is the effect of this form submission handler?",
    "l": "javascript",
    "c": "form.addEventListener('submit', (e) => {\n  if(!valid) {\n    e.preventDefault();\n    e.stopPropagation();\n    return false;\n  }\n}, { capture: true, passive: false });\nform.addEventListener('submit', () => console.log('Submitted'));",
    "o": [
      "When invalid: prevents submit during capture and blocks bubble phase listeners",
      "Always logs 'Submitted' then validates",
      "return false has no effect in passive listener",
      "Throws an error when invalid"
    ]
  },
  {
    "q": "Which event property helps detect if the platform's primary modifier key was pressed during a click?",
    "o": [
      "event.metaKey on Mac, event.ctrlKey otherwise",
      "event.primaryModifier",
      "event.platformKey",
      "event.getModifierState('Primary')"
    ]
  },
  {
    "q": "What happens when calling stopPropagation() on a passive touch event?",
    "o": [
      "Stops propagation but default touch action still occurs",
      "Prevents both propagation and default action",
      "Throws 'Cannot stop propagation' error",
      "Only stops synchronous listeners"
    ]
  },
  {
    "q": "What will this code log when clicking the button?",
    "l": "javascript",
    "c": "button.addEventListener('click', (e) => {\n  console.log(e.eventPhase, e.currentTarget === button);\n}, { once: true, capture: true });\nbutton.click();\nbutton.click();",
    "o": [
      "First click: 1, true | Second click: nothing",
      "Both clicks: 1, true",
      "First click: 2, true | Second click: nothing",
      "First click: 1, false | Second click: 1, true"
    ]
  },
  {
    "q": "Which is the most efficient way to handle clicks on canvas-drawn UI elements?",
    "o": [
      "Single canvas listener with coordinates-to-element hit testing",
      "Individual listeners on each virtual element",
      "MutationObserver watching canvas changes",
      "getElementFromPoint() in a capture listener"
    ]
  },
  {
    "q": "What is the effect of this code when clicking checkboxes?",
    "l": "javascript",
    "c": "document.addEventListener('change', (e) => {\n  if(e.target.type === 'checkbox') {\n    e.preventDefault();\n    e.target.checked = !e.target.checked;\n  }\n}, true);",
    "o": [
      "Inverts checkbox behavior (click unchecks, click again checks)",
      "Prevents all checkbox changes",
      "Causes infinite toggle loop",
      "Only works with programmatic changes"
    ]
  },
  {
    "q": "What happens when you call `event.stopPropagation()` during the capture phase of a non-bubbling event?",
    "o": [
      "Prevents the event from reaching the target phase",
      "Has no effect since the event wouldn't bubble",
      "Only stops other capture phase listeners",
      "Converts the event into a bubbling event"
    ]
  },
  {
    "q": "What is logged when clicking the button in this nested shadow DOM structure?",
    "l": "javascript",
    "c": "host.addEventListener('click', () => console.log('Host Capture'), true);\nshadowDiv.addEventListener('click', () => console.log('Shadow Div'));\nbutton.addEventListener('click', (e) => {\n  e.stopPropagation();\n  console.log('Button');\n});\nhost.addEventListener('click', () => console.log('Host Bubble'), { composed: true });",
    "o": [
      "'Host Capture', 'Button'",
      "'Host Capture', 'Shadow Div', 'Button', 'Host Bubble'",
      "'Shadow Div', 'Button'",
      "'Host Capture', 'Button', 'Host Bubble'"
    ]
  },
  {
    "q": "Which pattern provides the best performance for handling clicks in a grid with 10,000 cells where cells change state dynamically?",
    "o": [
      "Single delegated listener on grid container using event.target.matches()",
      "Individual listeners on each cell added/removed with state changes",
      "Event capturing on document level with coordinates checking",
      "ResizeObserver to manage visible cell listeners"
    ]
  },
  {
    "q": "What is the effect of this pointer event listener?",
    "l": "javascript",
    "c": "canvas.addEventListener('pointermove', trackPosition, { passive: true, capture: true });",
    "o": [
      "Optimizes performance but prevents preventDefault() during capture",
      "Causes input lag due to passive handling",
      "Blocks all other pointer events on the canvas",
      "Same as non-passive listener but with better touch support"
    ]
  },
  {
    "q": "What will this code log when clicking the button twice?",
    "l": "javascript",
    "c": "button.addEventListener('click', () => console.log('A'), { once: true, capture: true });\nbutton.addEventListener('click', () => console.log('B'));\nbutton.click();\nbutton.addEventListener('click', () => console.log('C'), { once: true });\nbutton.click();",
    "o": [
      "First click: 'A', 'B' | Second click: 'B', 'C'",
      "First click: 'A', 'B' | Second click: 'C'",
      "Both clicks: 'A', 'B', 'C'",
      "First click: 'A' | Second click: 'B', 'C'"
    ]
  },
  {
    "q": "Which property indicates if an event was dispatched from a shadow root?",
    "o": [
      "event.composedPath()[0] !== event.target",
      "event.isShadowEvent",
      "event.composed === false",
      "event.target.getRootNode() !== document"
    ]
  },
  {
    "q": "What is the difference between `event.stopPropagation()` and `event.stopImmediatePropagation()` during the target phase?",
    "o": [
      "stopPropagation allows remaining target listeners, stopImmediatePropagation doesn't",
      "They behave identically during target phase",
      "stopImmediatePropagation also prevents default action",
      "stopPropagation only works for bubbling phase"
    ]
  },
  {
    "q": "What happens when dispatching a cancelable, composed custom event that gets prevented in a shadow DOM listener?",
    "l": "javascript",
    "c": "const event = new CustomEvent('test', { cancelable: true, composed: true });\nshadowHost.addEventListener('test', (e) => e.preventDefault());\ndocument.dispatchEvent(event);",
    "o": [
      "event.defaultPrevented becomes true but propagation continues to light DOM",
      "Event stops at shadow boundary despite composed: true",
      "Throws an error because shadow DOM can't prevent composed events",
      "Redispatches the event as non-cancelable"
    ]
  },
  {
    "q": "What is the output when clicking the button with this handler?",
    "l": "javascript",
    "c": "button.addEventListener('click', function() {\n  console.log(event.eventPhase, event.currentTarget === this);\n}, { once: true, capture: true });",
    "o": [
      "1 (CAPTURING_PHASE), true",
      "2 (AT_TARGET), true",
      "1 (CAPTURING_PHASE), false",
      "2 (AT_TARGET), false"
    ]
  },
  {
    "q": "Which is the most reliable way to detect right-clicks across all browsers?",
    "o": [
      "contextmenu event with preventDefault()",
      "click event checking event.button === 2",
      "mousedown with event.which === 3",
      "auxclick event with detail check"
    ]
  },
  {
    "q": "What is the effect of this form submission handler?",
    "l": "javascript",
    "c": "form.addEventListener('submit', (e) => {\n  if(!valid) {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    return false;\n  }\n}, { passive: false, capture: true });\nform.addEventListener('submit', () => console.log('Submitted'));",
    "o": [
      "When invalid: prevents submit during capture and blocks all other listeners",
      "Always logs 'Submitted' then validates",
      "return false has no effect in passive: false listeners",
      "Throws an error when invalid"
    ]
  },
  {
    "q": "Which event property helps detect if the platform's secondary modifier key was pressed during drag?",
    "o": [
      "event.altKey on Windows/Linux, event.metaKey on Mac",
      "event.secondaryModifier",
      "event.getModifierState('Secondary')",
      "event.platformKey === 'secondary'"
    ]
  },
  {
    "q": "What happens when calling stopPropagation() on a passive scroll event?",
    "o": [
      "Stops propagation but scrolling still occurs",
      "Prevents both propagation and scrolling",
      "Throws 'Cannot stop propagation' error",
      "Only stops synchronous listeners"
    ]
  },
  {
    "q": "What will this code log when programmatically clicking the button?",
    "l": "javascript",
    "c": "button.addEventListener('click', (e) => {\n  console.log(e.isTrusted, e.detail);\n});\nbutton.click();",
    "o": [
      "false, 0",
      "true, 1",
      "false, 1",
      "true, 0"
    ]
  },
  {
    "q": "Which is the most efficient way to handle clicks on WebGL-rendered UI elements?",
    "o": [
      "Single canvas listener with raycasting hit detection",
      "Individual listeners on each virtual element",
      "getElementFromPoint() in a capture listener",
      "IntersectionObserver tracking visible elements"
    ]
  },
  {
    "q": "What is the effect of this code when clicking radio buttons?",
    "l": "javascript",
    "c": "document.addEventListener('click', (e) => {\n  if(e.target.type === 'radio') {\n    e.preventDefault();\n    e.target.checked = !e.target.checked;\n  }\n}, true);",
    "o": [
      "Allows radio buttons to be toggled off (breaking native behavior)",
      "Prevents all radio button selections",
      "Causes infinite toggle loop",
      "Only works with programmatic changes"
    ]
  },
  {
    "q": "What happens when you call `event.stopPropagation()` on a non-bubbling event during the capture phase?",
    "o": [
      "Prevents the event from reaching the target phase",
      "Has no effect since the event wouldn't bubble anyway",
      "Converts the event into a bubbling event",
      "Throws an error because it's invalid"
    ]
  },
  {
    "q": "What is logged when clicking the button in this shadow DOM structure?",
    "l": "javascript",
    "c": "host.addEventListener('click', () => console.log('Host Capture'), true);\nshadowButton.addEventListener('click', (e) => {\n  e.stopPropagation();\n  console.log('Button');\n});\nhost.addEventListener('click', () => console.log('Host Bubble'), { composed: true });",
    "o": [
      "'Host Capture', 'Button'",
      "'Host Capture', 'Button', 'Host Bubble'",
      "'Button' only",
      "'Host Capture' only"
    ]
  },
  {
    "q": "Which pattern provides optimal performance for handling clicks in a spreadsheet with 100,000 cells?",
    "o": [
      "Single delegated listener on container using event.target.closest()",
      "Individual listeners on each visible cell",
      "Event capturing on document with coordinates checking",
      "IntersectionObserver to manage visible cell listeners"
    ]
  },
  {
    "q": "What is the effect of this wheel event listener?",
    "l": "javascript",
    "c": "element.addEventListener('wheel', handler, { passive: true, capture: true });",
    "o": [
      "Optimizes performance but prevents preventDefault() during capture",
      "Causes scroll jank due to passive handling",
      "Blocks all other wheel events on the element",
      "Same as non-passive listener but with better performance"
    ]
  },
  {
    "q": "What will this code log when clicking the button twice?",
    "l": "javascript",
    "c": "button.addEventListener('click', () => console.log('A'), { once: true });\nbutton.addEventListener('click', () => console.log('B'), true);\nbutton.click();\nbutton.addEventListener('click', () => console.log('C'));\nbutton.click();",
    "o": [
      "First click: 'B', 'A' | Second click: 'B', 'C'",
      "First click: 'A', 'B' | Second click: 'C'",
      "Both clicks: 'A', 'B', 'C'",
      "First click: 'A' | Second click: 'B', 'C'"
    ]
  },
  {
    "q": "Which property indicates if an event has propagation stopped during capture phase?",
    "o": [
      "event.eventPhase === 1 && no subsequent capture listeners run",
      "event.captureStopped === true",
      "event.propagationState === 'capture-stopped'",
      "There's no direct way to tell"
    ]
  },
  {
    "q": "What is the difference between `event.composedPath()` and `event.path` in shadow DOM?",
    "o": [
      "composedPath() is standard and reliable, path is deprecated and inconsistent",
      "They return identical information in all browsers",
      "path shows more shadow DOM details than composedPath()",
      "composedPath() only works for custom events"
    ]
  },
  {
    "q": "What happens when dispatching a non-composed custom event from a shadow root?",
    "o": [
      "Only triggers listeners inside the shadow DOM",
      "Bubbles to the light DOM anyway",
      "Throws a DOMException",
      "Automatically becomes cancelable"
    ]
  },
  {
    "q": "What is the output when clicking the div with this handler?",
    "l": "javascript",
    "c": "div.addEventListener('click', function() {\n  console.log(event.eventPhase, event.bubbles);\n}, true);\ndiv.dispatchEvent(new Event('click', { bubbles: false }));",
    "o": [
      "1 (CAPTURING_PHASE), false",
      "2 (AT_TARGET), false",
      "1 (CAPTURING_PHASE), true",
      "2 (AT_TARGET), true"
    ]
  },
  {
    "q": "Which is the most reliable way to detect middle mouse clicks across browsers?",
    "o": [
      "Check event.button === 1 in mousedown/up events",
      "Use auxclick event with event.detail check",
      "Listen for click event with event.which === 2",
      "Check event.buttons bitmask for value 4"
    ]
  },
  {
    "q": "What is the effect of this form submission handler?",
    "l": "javascript",
    "c": "form.addEventListener('submit', (e) => {\n  if(!valid) {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    return false;\n  }\n}, { capture: true });\nform.addEventListener('submit', () => console.log('Submitted'));",
    "o": [
      "When invalid: prevents submit during capture and blocks all other listeners",
      "Always logs 'Submitted' then validates",
      "return false has no effect in capture phase",
      "Throws an error when invalid"
    ]
  },
  {
    "q": "Which event property helps detect if the platform's primary selection key was pressed during drag?",
    "o": [
      "event.ctrlKey on Windows/Linux, event.metaKey on Mac",
      "event.primarySelectionKey",
      "event.getModifierState('PrimarySelection')",
      "event.platformKey === 'select'"
    ]
  },
  {
    "q": "What happens when calling stopPropagation() on a passive touchstart event?",
    "o": [
      "Stops propagation but default touch action still occurs",
      "Prevents both propagation and default action",
      "Throws 'Cannot stop propagation' error",
      "Only stops synchronous listeners"
    ]
  },
  {
    "q": "What will this code log when programmatically clicking the button?",
    "l": "javascript",
    "c": "button.addEventListener('click', (e) => {\n  console.log(e.isTrusted, e.detail);\n});\nbutton.dispatchEvent(new MouseEvent('click'));",
    "o": [
      "false, 0",
      "true, 1",
      "false, 1",
      "true, 0"
    ]
  },
  {
    "q": "Which is the most efficient way to handle clicks on dynamically rendered SVG components?",
    "o": [
      "Single delegated listener on SVG root using event.target.matches()",
      "Individual listeners on each SVG element",
      "getElementFromPoint() in a capture listener",
      "MutationObserver watching SVG changes"
    ]
  },
  {
    "q": "What is the effect of this code when clicking checkboxes?",
    "l": "javascript",
    "c": "document.addEventListener('change', (e) => {\n  if(e.target.type === 'checkbox') {\n    e.preventDefault();\n    e.target.checked = !e.target.checked;\n  }\n}, true);",
    "o": [
      "Inverts default checkbox toggle behavior",
      "Prevents all checkbox changes",
      "Causes infinite toggle loop",
      "Only works with programmatic changes"
    ]
  },
  {
    "q": "What happens when you call `event.stopImmediatePropagation()` during the capture phase?",
    "o": [
      "Prevents all subsequent listeners on the current element and stops propagation",
      "Only stops bubbling phase listeners",
      "Has no effect during capture phase",
      "Throws an error because it's invalid in capture phase"
    ]
  },
  {
    "q": "What is logged when clicking the button in this structure?",
    "l": "javascript",
    "c": "parent.addEventListener('click', () => console.log('Parent Capture'), true);\nbutton.addEventListener('click', () => console.log('Button 1'));\nbutton.addEventListener('click', (e) => {\n  if(e.eventPhase === 2) e.stopImmediatePropagation();\n  console.log('Button 2');\n});\nparent.addEventListener('click', () => console.log('Parent Bubble'));",
    "o": [
      "'Parent Capture', 'Button 1', 'Button 2'",
      "'Parent Capture', 'Button 1', 'Button 2', 'Parent Bubble'",
      "'Button 1', 'Button 2'",
      "'Parent Capture', 'Button 2'"
    ]
  },
  {
    "q": "Which is the most efficient way to handle clicks in a virtual scrolled list with 50,000 items?",
    "o": [
      "Single delegated listener on container checking visible items only",
      "Individual listeners on each rendered item",
      "Event capturing on document with position checking",
      "IntersectionObserver to manage item listeners"
    ]
  },
  {
    "q": "What is the effect of this touch event listener?",
    "l": "javascript",
    "c": "element.addEventListener('touchstart', handler, { passive: true, capture: true });",
    "o": [
      "Optimizes performance but prevents preventDefault() during capture",
      "Causes touch delay due to passive handling",
      "Blocks all other touch events on the element",
      "Same as non-passive listener but with better performance"
    ]
  },
  {
    "q": "What will this code log when clicking the button twice?",
    "l": "javascript",
    "c": "button.addEventListener('click', () => console.log('A'), { once: true });\nbutton.addEventListener('click', () => console.log('B'), true);\nbutton.click();\nbutton.addEventListener('click', () => console.log('C'));\nbutton.click();",
    "o": [
      "First click: 'B', 'A' | Second click: 'B', 'C'",
      "First click: 'A', 'B' | Second click: 'C'",
      "Both clicks: 'A', 'B', 'C'",
      "First click: 'A' | Second click: 'B', 'C'"
    ]
  },
  {
    "q": "Which property indicates if an event has had its default action prevented?",
    "o": [
      "event.defaultPrevented",
      "event.isDefaultPrevented()",
      "event.canceled",
      "event.propagationStopped"
    ]
  },
  {
    "q": "What is the difference between `event.composedPath()` and checking `event.target` in shadow DOM?",
    "o": [
      "composedPath() shows full path including shadow hosts, target only shows innermost element",
      "They return identical information",
      "target is deprecated in shadow DOM",
      "composedPath() only works for custom events"
    ]
  },
  {
    "q": "What happens when dispatching a non-bubbling, non-composed custom event from a shadow root?",
    "o": [
      "Only triggers listeners inside the shadow DOM",
      "Bubbles to the light DOM anyway",
      "Throws a DOMException",
      "Automatically becomes cancelable"
    ]
  },
  {
    "q": "What is the output when clicking the div with this handler?",
    "l": "javascript",
    "c": "div.addEventListener('click', function() {\n  console.log(event.eventPhase, event.currentTarget === this);\n}, true);\ndiv.dispatchEvent(new Event('click', { bubbles: false }));",
    "o": [
      "1 (CAPTURING_PHASE), true",
      "2 (AT_TARGET), true",
      "1 (CAPTURING_PHASE), false",
      "2 (AT_TARGET), false"
    ]
  },
  {
    "q": "Which is the proper way to detect right-clicks considering all browsers?",
    "o": [
      "contextmenu event with preventDefault()",
      "click event checking event.button === 2",
      "mousedown with event.which === 3",
      "auxclick event with detail check"
    ]
  },
  {
    "q": "What is the effect of this form submission handler?",
    "l": "javascript",
    "c": "form.addEventListener('submit', (e) => {\n  if(!valid) {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    return false;\n  }\n}, { capture: true });\nform.addEventListener('submit', () => console.log('Submitted'));",
    "o": [
      "When invalid: prevents submit during capture and blocks all other listeners",
      "Always logs 'Submitted' then validates",
      "return false has no effect in capture phase",
      "Throws an error when invalid"
    ]
  },
  {
    "q": "Which event property helps detect if the platform's primary modifier key was pressed?",
    "o": [
      "event.metaKey on Mac, event.ctrlKey otherwise",
      "event.primaryModifier",
      "event.platformKey",
      "event.getModifierState('Primary')"
    ]
  },
  {
    "q": "What happens when calling stopPropagation() on a passive wheel event?",
    "o": [
      "Stops propagation but scrolling still occurs",
      "Prevents both propagation and scrolling",
      "Throws 'Cannot stop propagation' error",
      "Only stops synchronous listeners"
    ]
  },
  {
    "q": "What will this code log when programmatically clicking the button?",
    "l": "javascript",
    "c": "button.addEventListener('click', (e) => {\n  console.log(e.isTrusted, e.detail);\n});\nbutton.dispatchEvent(new MouseEvent('click'));",
    "o": [
      "false, 0",
      "true, 1",
      "false, 1",
      "true, 0"
    ]
  },
  {
    "q": "Which is the most efficient way to handle clicks on canvas-drawn UI elements?",
    "o": [
      "Single canvas listener with coordinates-to-element hit testing",
      "Individual listeners on each virtual element",
      "getElementFromPoint() in a capture listener",
      "IntersectionObserver tracking visible elements"
    ]
  },
  {
    "q": "What is the effect of this code when clicking radio buttons?",
    "l": "javascript",
    "c": "document.addEventListener('click', (e) => {\n  if(e.target.type === 'radio') {\n    e.preventDefault();\n    e.target.checked = !e.target.checked;\n  }\n}, true);",
    "o": [
      "Allows radio buttons to be toggled off (breaking native behavior)",
      "Prevents all radio button selections",
      "Causes infinite toggle loop",
      "Only works with programmatic changes"
    ]
  },
  {
    "q": "What happens when you call `event.stopPropagation()` during the target phase of a non-bubbling event?",
    "o": [
      "Has no effect since the event wouldn't bubble anyway",
      "Prevents all remaining target phase listeners",
      "Converts the event into a bubbling event",
      "Throws an error because it's invalid"
    ]
  },
  {
    "q": "What is logged when clicking the button in this structure?",
    "l": "javascript",
    "c": "parent.addEventListener('click', () => console.log('Parent Capture'), true);\nbutton.addEventListener('click', () => console.log('Button 1'));\nbutton.addEventListener('click', (e) => {\n  if(e.eventPhase === 2) e.stopImmediatePropagation();\n  console.log('Button 2');\n});\nparent.addEventListener('click', () => console.log('Parent Bubble'));",
    "o": [
      "'Parent Capture', 'Button 1', 'Button 2'",
      "'Parent Capture', 'Button 1', 'Button 2', 'Parent Bubble'",
      "'Button 1', 'Button 2'",
      "'Parent Capture', 'Button 2'"
    ]
  },
  {
    "q": "Which pattern provides optimal performance for handling clicks in a grid with 10,000 cells where only 5% are interactive?",
    "o": [
      "Single delegated listener on grid container checking event.target.matches()",
      "Individual listeners on each interactive cell",
      "Event capturing on document with coordinates checking",
      "MutationObserver to manage cell listeners"
    ]
  },
  {
    "q": "What is the effect of this mouseenter listener?",
    "l": "javascript",
    "c": "element.addEventListener('mouseenter', (e) => {\n  e.preventDefault();\n  console.log('Enter');\n});",
    "o": [
      "Logs 'Enter' but preventDefault has no effect",
      "Prevents the mouseenter event from occurring",
      "Throws an error because mouseenter isn't cancelable",
      "Delays the mouseenter event"
    ]
  },
  {
    "q": "What will this code log when clicking the button twice?",
    "l": "javascript",
    "c": "button.addEventListener('click', () => console.log('A'), { once: true });\nbutton.addEventListener('click', () => console.log('B'));\nbutton.click();\nbutton.addEventListener('click', () => console.log('C'));\nbutton.click();",
    "o": [
      "First click: 'A', 'B' | Second click: 'B', 'C'",
      "First click: 'A', 'B' | Second click: 'C'",
      "Both clicks: 'A', 'B', 'C'",
      "First click: 'A' | Second click: 'B', 'C'"
    ]
  },
  {
    "q": "Which property indicates if an event has completed propagation to the window?",
    "o": [
      "event.eventPhase === 0 (Event.NONE)",
      "event.propagationComplete === true",
      "window.event === null",
      "There's no direct way to tell"
    ]
  },
  {
    "q": "What is the difference between `event.composedPath()` and checking `event.target` in shadow DOM?",
    "o": [
      "composedPath() shows full path including shadow hosts, target only shows innermost element",
      "They return identical information",
      "target is deprecated in shadow DOM",
      "composedPath() only works for custom events"
    ]
  },
  {
    "q": "What happens when dispatching a cancelable custom event that gets prevented in a capture listener?",
    "l": "javascript",
    "c": "const event = new CustomEvent('test', { cancelable: true, bubbles: true });\nelement.addEventListener('test', (e) => e.preventDefault(), true);\ndocument.dispatchEvent(event);",
    "o": [
      "event.defaultPrevented becomes true but propagation continues",
      "Event immediately stops propagating",
      "Throws an error because capture listeners can't prevent default",
      "Automatically redispatches the event"
    ]
  },
  {
    "q": "What is the output when clicking the div with this handler?",
    "l": "javascript",
    "c": "div.addEventListener('click', function() {\n  console.log(event.bubbles, event.cancelable);\n});\ndiv.dispatchEvent(new Event('click', { bubbles: false }));",
    "o": [
      "false, true",
      "true, true",
      "false, false",
      "true, false"
    ]
  },
  {
    "q": "Which is the proper way to detect middle mouse button clicks across browsers?",
    "o": [
      "Check event.button === 1 in mousedown/up events",
      "Use click event with event.which === 2",
      "Listen for auxclick event exclusively",
      "Check event.buttons === 4 in click event"
    ]
  },
  {
    "q": "What is the effect of this form submission handler?",
    "l": "javascript",
    "c": "form.addEventListener('submit', (e) => {\n  if(!valid) {\n    e.preventDefault();\n    e.stopPropagation();\n    return false;\n  }\n}, { capture: true, passive: false });\nform.addEventListener('submit', () => console.log('Submitted'));",
    "o": [
      "When invalid: prevents submit during capture and blocks bubble phase listeners",
      "Always logs 'Submitted' then validates",
      "return false has no effect in passive listener",
      "Throws an error when invalid"
    ]
  },
  {
    "q": "Which event property helps detect if the platform's primary modifier key was pressed during a click?",
    "o": [
      "event.metaKey on Mac, event.ctrlKey otherwise",
      "event.primaryModifier",
      "event.getModifierState('Primary')",
      "event.modifiers.ctrlOrMeta"
    ]
  },
  {
    "q": "What happens when calling stopPropagation() on a passive touch event?",
    "o": [
      "Stops propagation but default touch action still occurs",
      "Prevents both propagation and default action",
      "Throws 'Cannot stop propagation' error",
      "Only stops synchronous listeners"
    ]
  },
  {
    "q": "What will this code log when clicking the button?",
    "l": "javascript",
    "c": "button.addEventListener('click', (e) => {\n  console.log(e.eventPhase, e.currentTarget === button);\n}, { once: true, capture: true });\nbutton.click();\nbutton.click();",
    "o": [
      "First click: 1, true | Second click: nothing",
      "Both clicks: 1, true",
      "First click: 2, true | Second click: nothing",
      "First click: 1, false | Second click: 1, true"
    ]
  },
  {
    "q": "Which is the most efficient way to handle clicks on canvas-drawn UI elements?",
    "o": [
      "Single canvas listener with coordinates-to-element hit testing",
      "Individual listeners on each virtual element",
      "getElementFromPoint() in a capture listener",
      "IntersectionObserver tracking visible elements"
    ]
  },
  {
    "q": "What is the effect of this code when clicking checkboxes?",
    "l": "javascript",
    "c": "document.addEventListener('change', (e) => {\n  if(e.target.type === 'checkbox') {\n    e.preventDefault();\n    e.target.checked = !e.target.checked;\n  }\n}, true);",
    "o": [
      "Inverts checkbox behavior (click unchecks, click again checks)",
      "Prevents all checkbox changes",
      "Causes infinite toggle loop",
      "Only works with programmatic changes"
    ]
  },
  {
    "q": "What happens when you call `event.stopPropagation()` during the target phase of a non-bubbling event?",
    "o": [
      "Has no effect since the event wouldn't bubble anyway",
      "Prevents all remaining target phase listeners",
      "Converts the event into a bubbling event",
      "Throws an error because it's invalid"
    ]
  },
  {
    "q": "What is logged when clicking the button in this structure?",
    "l": "javascript",
    "c": "parent.addEventListener('click', () => console.log('Parent Capture'), true);\nbutton.addEventListener('click', () => console.log('Button 1'));\nbutton.addEventListener('click', (e) => {\n  if(e.eventPhase === 2) e.stopImmediatePropagation();\n  console.log('Button 2');\n});\nparent.addEventListener('click', () => console.log('Parent Bubble'));",
    "o": [
      "'Parent Capture', 'Button 1', 'Button 2'",
      "'Parent Capture', 'Button 1', 'Button 2', 'Parent Bubble'",
      "'Button 1', 'Button 2'",
      "'Parent Capture', 'Button 2'"
    ]
  },
  {
    "q": "Which pattern provides optimal performance for handling clicks in a grid with 10,000 cells where only 5% are interactive?",
    "o": [
      "Single delegated listener on grid container checking event.target.matches()",
      "Individual listeners on each interactive cell",
      "Event capturing on document with coordinates checking",
      "MutationObserver to manage cell listeners"
    ]
  },
  {
    "q": "What is the effect of this mouseenter listener?",
    "l": "javascript",
    "c": "element.addEventListener('mouseenter', (e) => {\n  e.preventDefault();\n  console.log('Enter');\n});",
    "o": [
      "Logs 'Enter' but preventDefault has no effect",
      "Prevents the mouseenter event from occurring",
      "Throws an error because mouseenter isn't cancelable",
      "Delays the mouseenter event"
    ]
  },
  {
    "q": "What will this code log when clicking the button twice?",
    "l": "javascript",
    "c": "button.addEventListener('click', () => console.log('A'), { once: true });\nbutton.addEventListener('click', () => console.log('B'));\nbutton.click();\nbutton.addEventListener('click', () => console.log('C'));\nbutton.click();",
    "o": [
      "First click: 'A', 'B' | Second click: 'B', 'C'",
      "First click: 'A', 'B' | Second click: 'C'",
      "Both clicks: 'A', 'B', 'C'",
      "First click: 'A' | Second click: 'B', 'C'"
    ]
  },
  {
    "q": "Which property indicates if an event has completed propagation to the window?",
    "o": [
      "event.eventPhase === 0 (Event.NONE)",
      "event.propagationComplete === true",
      "window.event === null",
      "There's no direct way to tell"
    ]
  },
  {
    "q": "What is the difference between `event.composedPath()` and checking `event.target` in shadow DOM?",
    "o": [
      "composedPath() shows full path including shadow hosts, target only shows innermost element",
      "They return identical information",
      "target is deprecated in shadow DOM",
      "composedPath() only works for custom events"
    ]
  },
  {
    "q": "What happens when dispatching a cancelable custom event that gets prevented in a capture listener?",
    "l": "javascript",
    "c": "const event = new CustomEvent('test', { cancelable: true, bubbles: true });\nelement.addEventListener('test', (e) => e.preventDefault(), true);\ndocument.dispatchEvent(event);",
    "o": [
      "event.defaultPrevented becomes true but propagation continues",
      "Event immediately stops propagating",
      "Throws an error because capture listeners can't prevent default",
      "Automatically redispatches the event"
    ]
  },
  {
    "q": "What is the output when clicking the div with this handler?",
    "l": "javascript",
    "c": "div.addEventListener('click', function() {\n  console.log(event.bubbles, event.cancelable);\n});\ndiv.dispatchEvent(new Event('click', { bubbles: false }));",
    "o": [
      "false, true",
      "true, true",
      "false, false",
      "true, false"
    ]
  },
  {
    "q": "Which is the proper way to detect middle mouse button clicks across browsers?",
    "o": [
      "Check event.button === 1 in mousedown/up events",
      "Use click event with event.which === 2",
      "Listen for auxclick event exclusively",
      "Check event.buttons === 4 in click event"
    ]
  },
  {
    "q": "What is the effect of this form submission handler?",
    "l": "javascript",
    "c": "form.addEventListener('submit', (e) => {\n  if(!valid) {\n    e.preventDefault();\n    e.stopPropagation();\n    return false;\n  }\n}, { capture: true, passive: false });\nform.addEventListener('submit', () => console.log('Submitted'));",
    "o": [
      "When invalid: prevents submit during capture and blocks bubble phase listeners",
      "Always logs 'Submitted' then validates",
      "return false has no effect in passive listener",
      "Throws an error when invalid"
    ]
  },
  {
    "q": "Which event property helps detect if the platform's primary modifier key was pressed during a click?",
    "o": [
      "event.metaKey on Mac, event.ctrlKey otherwise",
      "event.primaryModifier",
      "event.getModifierState('Primary')",
      "event.modifiers.ctrlOrMeta"
    ]
  },
  {
    "q": "What happens when calling stopPropagation() on a passive touch event?",
    "o": [
      "Stops propagation but default touch action still occurs",
      "Prevents both propagation and default action",
      "Throws 'Cannot stop propagation' error",
      "Only stops synchronous listeners"
    ]
  },
  {
    "q": "What will this code log when clicking the button?",
    "l": "javascript",
    "c": "button.addEventListener('click', (e) => {\n  console.log(e.eventPhase, e.currentTarget === button);\n}, { once: true, capture: true });\nbutton.click();\nbutton.click();",
    "o": [
      "First click: 1, true | Second click: nothing",
      "Both clicks: 1, true",
      "First click: 2, true | Second click: nothing",
      "First click: 1, false | Second click: 1, true"
    ]
  },
  {
    "q": "Which is the most efficient way to handle clicks on canvas-drawn UI elements?",
    "o": [
      "Single canvas listener with coordinates-to-element hit testing",
      "Individual listeners on each virtual element",
      "getElementFromPoint() in a capture listener",
      "IntersectionObserver tracking visible elements"
    ]
  },
  {
    "q": "What is the effect of this code when clicking checkboxes?",
    "l": "javascript",
    "c": "document.addEventListener('change', (e) => {\n  if(e.target.type === 'checkbox') {\n    e.preventDefault();\n    e.target.checked = !e.target.checked;\n  }\n}, true);",
    "o": [
      "Inverts checkbox behavior (click unchecks, click again checks)",
      "Prevents all checkbox changes",
      "Causes infinite toggle loop",
      "Only works with programmatic changes"
    ]
  },
  {
    "q": "What happens when you call `event.stopImmediatePropagation()` during the capture phase?",
    "o": [
      "Prevents all subsequent listeners on the current element and stops propagation",
      "Only stops bubbling phase listeners",
      "Has no effect during capture phase",
      "Throws an error because it's invalid in capture phase"
    ]
  },
  {
    "q": "What is logged when clicking the button in this nested shadow DOM structure?",
    "l": "javascript",
    "c": "host.addEventListener('click', () => console.log('Host Capture'), true);\nshadowButton.addEventListener('click', (e) => {\n  e.stopPropagation();\n  console.log('Button');\n});\nhost.addEventListener('click', () => console.log('Host Bubble'), { composed: true });",
    "o": [
      "'Host Capture', 'Button'",
      "'Host Capture', 'Button', 'Host Bubble'",
      "'Button' only",
      "'Host Capture' only"
    ]
  },
  {
    "q": "Which pattern provides the best performance for handling clicks in a virtual scrolled list with 50,000 items?",
    "o": [
      "Single delegated listener on container checking visible items only",
      "Individual listeners on each rendered item",
      "Event capturing on document with position checking",
      "IntersectionObserver to manage item listeners"
    ]
  },
  {
    "q": "What is the effect of this touch event listener?",
    "l": "javascript",
    "c": "element.addEventListener('touchstart', handler, { passive: true, capture: true });",
    "o": [
      "Optimizes performance but prevents preventDefault() during capture",
      "Causes touch delay due to passive handling",
      "Blocks all other touch events on the element",
      "Same as non-passive listener but with better performance"
    ]
  },
  {
    "q": "What will this code log when clicking the button twice?",
    "l": "javascript",
    "c": "button.addEventListener('click', () => console.log('A'), { once: true });\nbutton.addEventListener('click', () => console.log('B'), true);\nbutton.click();\nbutton.addEventListener('click', () => console.log('C'));\nbutton.click();",
    "o": [
      "First click: 'B', 'A' | Second click: 'B', 'C'",
      "First click: 'A', 'B' | Second click: 'C'",
      "Both clicks: 'A', 'B', 'C'",
      "First click: 'A' | Second click: 'B', 'C'"
    ]
  },
  {
    "q": "Which property indicates if an event has had its default action prevented?",
    "o": [
      "event.defaultPrevented",
      "event.isDefaultPrevented()",
      "event.canceled",
      "event.propagationStopped"
    ]
  },
  {
    "q": "What is the difference between `event.composedPath()` and checking `event.target` in shadow DOM?",
    "o": [
      "composedPath() shows full path including shadow hosts, target only shows innermost element",
      "They return identical information",
      "target is deprecated in shadow DOM",
      "composedPath() only works for custom events"
    ]
  },
  {
    "q": "What happens when dispatching a non-bubbling, non-composed custom event from a shadow root?",
    "o": [
      "Only triggers listeners inside the shadow DOM",
      "Bubbles to the light DOM anyway",
      "Throws a DOMException",
      "Automatically becomes cancelable"
    ]
  },
  {
    "q": "What is the output when clicking the div with this handler?",
    "l": "javascript",
    "c": "div.addEventListener('click', function() {\n  console.log(event.eventPhase, event.currentTarget === this);\n}, true);\ndiv.dispatchEvent(new Event('click', { bubbles: false }));",
    "o": [
      "1 (CAPTURING_PHASE), true",
      "2 (AT_TARGET), true",
      "1 (CAPTURING_PHASE), false",
      "2 (AT_TARGET), false"
    ]
  },
  {
    "q": "Which is the most reliable way to detect right-clicks considering all browsers?",
    "o": [
      "contextmenu event with preventDefault()",
      "click event checking event.button === 2",
      "mousedown with event.which === 3",
      "auxclick event with detail check"
    ]
  },
  {
    "q": "What is the effect of this form submission handler?",
    "l": "javascript",
    "c": "form.addEventListener('submit', (e) => {\n  if(!valid) {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    return false;\n  }\n}, { capture: true });\nform.addEventListener('submit', () => console.log('Submitted'));",
    "o": [
      "When invalid: prevents submit during capture and blocks all other listeners",
      "Always logs 'Submitted' then validates",
      "return false has no effect in capture phase",
      "Throws an error when invalid"
    ]
  },
  {
    "q": "Which event property helps detect if the platform's primary modifier key was pressed?",
    "o": [
      "event.metaKey on Mac, event.ctrlKey otherwise",
      "event.primaryModifier",
      "event.platformKey",
      "event.getModifierState('Primary')"
    ]
  },
  {
    "q": "What happens when calling stopPropagation() on a passive wheel event?",
    "o": [
      "Stops propagation but scrolling still occurs",
      "Prevents both propagation and scrolling",
      "Throws 'Cannot stop propagation' error",
      "Only stops synchronous listeners"
    ]
  },
  {
    "q": "What will this code log when programmatically clicking the button?",
    "l": "javascript",
    "c": "button.addEventListener('click', (e) => {\n  console.log(e.isTrusted, e.detail);\n});\nbutton.dispatchEvent(new MouseEvent('click'));",
    "o": [
      "false, 0",
      "true, 1",
      "false, 1",
      "true, 0"
    ]
  },
  {
    "q": "Which is the most efficient way to handle clicks on dynamically rendered SVG components?",
    "o": [
      "Single delegated listener on SVG root using event.target.matches()",
      "Individual listeners on each SVG element",
      "getElementFromPoint() in a capture listener",
      "MutationObserver watching SVG changes"
    ]
  },
  {
    "q": "What is the effect of this code when clicking checkboxes?",
    "l": "javascript",
    "c": "document.addEventListener('change', (e) => {\n  if(e.target.type === 'checkbox') {\n    e.preventDefault();\n    e.target.checked = !e.target.checked;\n  }\n}, true);",
    "o": [
      "Inverts default checkbox toggle behavior",
      "Prevents all checkbox changes",
      "Causes infinite toggle loop",
      "Only works with programmatic changes"
    ]
  },
  {
    "q": "What happens when you call `event.stopPropagation()` on a non-bubbling event during the target phase?",
    "o": [
      "Has no effect since the event wouldn't bubble anyway",
      "Prevents all remaining target phase listeners",
      "Converts the event into a bubbling event",
      "Throws an error because it's invalid"
    ]
  },
  {
    "q": "What is logged when clicking the button in this structure?",
    "l": "javascript",
    "c": "parent.addEventListener('click', () => console.log('Parent Capture'), true);\nbutton.addEventListener('click', () => console.log('Button 1'));\nbutton.addEventListener('click', (e) => {\n  if(e.eventPhase === 2) e.stopImmediatePropagation();\n  console.log('Button 2');\n});\nparent.addEventListener('click', () => console.log('Parent Bubble'));",
    "o": [
      "'Parent Capture', 'Button 1', 'Button 2'",
      "'Parent Capture', 'Button 1', 'Button 2', 'Parent Bubble'",
      "'Button 1', 'Button 2'",
      "'Parent Capture', 'Button 2'"
    ]
  },
  {
    "q": "Which pattern provides optimal performance for handling clicks in a grid with 10,000 cells where only 5% are interactive?",
    "o": [
      "Single delegated listener on grid container checking event.target.matches()",
      "Individual listeners on each interactive cell",
      "Event capturing on document with coordinates checking",
      "MutationObserver to manage cell listeners"
    ]
  },
  {
    "q": "What is the effect of this mouseenter listener?",
    "l": "javascript",
    "c": "element.addEventListener('mouseenter', (e) => {\n  e.preventDefault();\n  console.log('Enter');\n});",
    "o": [
      "Logs 'Enter' but preventDefault has no effect",
      "Prevents the mouseenter event from occurring",
      "Throws an error because mouseenter isn't cancelable",
      "Delays the mouseenter event"
    ]
  },
  {
    "q": "What will this code log when clicking the button twice?",
    "l": "javascript",
    "c": "button.addEventListener('click', () => console.log('A'), { once: true });\nbutton.addEventListener('click', () => console.log('B'));\nbutton.click();\nbutton.addEventListener('click', () => console.log('C'));\nbutton.click();",
    "o": [
      "First click: 'A', 'B' | Second click: 'B', 'C'",
      "First click: 'A', 'B' | Second click: 'C'",
      "Both clicks: 'A', 'B', 'C'",
      "First click: 'A' | Second click: 'B', 'C'"
    ]
  },
  {
    "q": "Which property indicates if an event has completed propagation to the window?",
    "o": [
      "event.eventPhase === 0 (Event.NONE)",
      "event.propagationComplete === true",
      "window.event === null",
      "There's no direct way to tell"
    ]
  },
  {
    "q": "What is the difference between `event.composedPath()` and checking `event.target` in shadow DOM?",
    "o": [
      "composedPath() shows full path including shadow hosts, target only shows innermost element",
      "They return identical information",
      "target is deprecated in shadow DOM",
      "composedPath() only works for custom events"
    ]
  },
  {
    "q": "What happens when dispatching a cancelable custom event that gets prevented in a capture listener?",
    "l": "javascript",
    "c": "const event = new CustomEvent('test', { cancelable: true, bubbles: true });\nelement.addEventListener('test', (e) => e.preventDefault(), true);\ndocument.dispatchEvent(event);",
    "o": [
      "event.defaultPrevented becomes true but propagation continues",
      "Event immediately stops propagating",
      "Throws an error because capture listeners can't prevent default",
      "Automatically redispatches the event"
    ]
  },
  {
    "q": "What is the output when clicking the div with this handler?",
    "l": "javascript",
    "c": "div.addEventListener('click', function() {\n  console.log(event.bubbles, event.cancelable);\n});\ndiv.dispatchEvent(new Event('click', { bubbles: false }));",
    "o": [
      "false, true",
      "true, true",
      "false, false",
      "true, false"
    ]
  },
  {
    "q": "Which is the proper way to detect middle mouse button clicks across browsers?",
    "o": [
      "Check event.button === 1 in mousedown/up events",
      "Use click event with event.which === 2",
      "Listen for auxclick event exclusively",
      "Check event.buttons === 4 in click event"
    ]
  },
  {
    "q": "What is the effect of this form submission handler?",
    "l": "javascript",
    "c": "form.addEventListener('submit', (e) => {\n  if(!valid) {\n    e.preventDefault();\n    e.stopPropagation();\n    return false;\n  }\n}, { capture: true, passive: false });\nform.addEventListener('submit', () => console.log('Submitted'));",
    "o": [
      "When invalid: prevents submit during capture and blocks bubble phase listeners",
      "Always logs 'Submitted' then validates",
      "return false has no effect in passive listener",
      "Throws an error when invalid"
    ]
  },
  {
    "q": "Which event property helps detect if the platform's primary modifier key was pressed during a click?",
    "o": [
      "event.metaKey on Mac, event.ctrlKey otherwise",
      "event.primaryModifier",
      "event.getModifierState('Primary')",
      "event.modifiers.ctrlOrMeta"
    ]
  },
  {
    "q": "What happens when calling stopPropagation() on a passive touch event?",
    "o": [
      "Stops propagation but default touch action still occurs",
      "Prevents both propagation and default action",
      "Throws 'Cannot stop propagation' error",
      "Only stops synchronous listeners"
    ]
  },
  {
    "q": "What will this code log when clicking the button?",
    "l": "javascript",
    "c": "button.addEventListener('click', (e) => {\n  console.log(e.eventPhase, e.currentTarget === button);\n}, { once: true, capture: true });\nbutton.click();\nbutton.click();",
    "o": [
      "First click: 1, true | Second click: nothing",
      "Both clicks: 1, true",
      "First click: 2, true | Second click: nothing",
      "First click: 1, false | Second click: 1, true"
    ]
  },
  {
    "q": "Which is the most efficient way to handle clicks on canvas-drawn UI elements?",
    "o": [
      "Single canvas listener with coordinates-to-element hit testing",
      "Individual listeners on each virtual element",
      "getElementFromPoint() in a capture listener",
      "IntersectionObserver tracking visible elements"
    ]
  },
  {
    "q": "What is the effect of this code when clicking checkboxes?",
    "l": "javascript",
    "c": "document.addEventListener('change', (e) => {\n  if(e.target.type === 'checkbox') {\n    e.preventDefault();\n    e.target.checked = !e.target.checked;\n  }\n}, true);",
    "o": [
      "Inverts checkbox behavior (click unchecks, click again checks)",
      "Prevents all checkbox changes",
      "Causes infinite toggle loop",
      "Only works with programmatic changes"
    ]
  }
]