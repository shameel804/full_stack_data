[
  {
    "q": "What will be the output of the following JavaScript code?",
    "l": "javascript",
    "c": "const person = { name: 'Alice', age: 25 };\nconsole.log(person.name);",
    "o": [
      "'Alice'",
      "'age'",
      "undefined",
      "25"
    ]
  },
  {
    "q": "Which of the following is a correct way to create an object in JavaScript?",
    "o": [
      "const obj = { key: 'value' };",
      "const obj = key: 'value';",
      "const obj = (key: 'value');",
      "const obj = ['key', 'value'];"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3, 4, 5];\nconst [first, second] = numbers;\nconsole.log(first, second);",
    "o": [
      "1 2",
      "1 3",
      "2 3",
      "undefined undefined"
    ]
  },
  {
    "q": "Which method is used to add an element at the end of an array in JavaScript?",
    "o": [
      "push()",
      "pop()",
      "shift()",
      "unshift()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 10, b: 20 };\nconst { a, b } = obj;\nconsole.log(a + b);",
    "o": [
      "30",
      "10",
      "20",
      "undefined"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for destructuring an object?",
    "o": [
      "const { name, age } = person;",
      "const [ name, age ] = person;",
      "const name = person[name], age = person[age];",
      "const name: person.name, age: person.age;"
    ]
  },
  {
    "q": "What does the `map()` method do in JavaScript?",
    "o": [
      "Creates a new array by applying a function to each element",
      "Modifies the original array",
      "Filters elements based on a condition",
      "Sorts the array in ascending order"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "const fruits = ['apple', 'banana', 'cherry'];\nconsole.log(fruits.length);",
    "o": [
      "3",
      "2",
      "4",
      "undefined"
    ]
  },
  {
    "q": "Which method is used to remove the last element from an array in JavaScript?",
    "o": [
      "pop()",
      "push()",
      "shift()",
      "splice()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [10, 20, 30];\narr.unshift(5);\nconsole.log(arr);",
    "o": [
      "[5, 10, 20, 30]",
      "[10, 20, 30, 5]",
      "[5, 30, 20, 10]",
      "[10, 20, 30]"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript code?",
    "l": "javascript",
    "c": "const user = { name: 'John', age: 30 };\nconsole.log(user['name']);",
    "o": [
      "'John'",
      "'name'",
      "undefined",
      "30"
    ]
  },
  {
    "q": "Which of the following is a valid way to create an empty array in JavaScript?",
    "o": [
      "const arr = [];",
      "const arr = {};",
      "const arr = ();",
      "const arr = new Object();"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const numbers = [5, 10, 15, 20];\nnumbers.pop();\nconsole.log(numbers);",
    "o": [
      "[5, 10, 15]",
      "[5, 10, 15, 20]",
      "[10, 15, 20]",
      "[5, 10, 15, 20, undefined]"
    ]
  },
  {
    "q": "Which JavaScript method is used to merge two or more arrays?",
    "o": [
      "concat()",
      "push()",
      "merge()",
      "splice()"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4];\nconst newArr = arr.map(num => num * 2);\nconsole.log(newArr);",
    "o": [
      "[2, 4, 6, 8]",
      "[1, 2, 3, 4]",
      "[1, 4, 9, 16]",
      "[[2], [4], [6], [8]]"
    ]
  },
  {
    "q": "Which of the following is NOT a valid JavaScript object method?",
    "o": [
      "remove()",
      "hasOwnProperty()",
      "keys()",
      "values()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript code?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2, c: 3 };\nconst keys = Object.keys(obj);\nconsole.log(keys);",
    "o": [
      "['a', 'b', 'c']",
      "[1, 2, 3]",
      "[['a', 1], ['b', 2], ['c', 3]]",
      "undefined"
    ]
  },
  {
    "q": "Which method is used to check if an object has a specific property?",
    "o": [
      "hasOwnProperty()",
      "includes()",
      "contains()",
      "exists()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const user = { name: 'Alice', age: 25 };\nconst { age } = user;\nconsole.log(age);",
    "o": [
      "25",
      "'Alice'",
      "undefined",
      "null"
    ]
  },
  {
    "q": "Which JavaScript method is used to convert an object into an array of key-value pairs?",
    "o": [
      "Object.entries()",
      "Object.keys()",
      "Object.values()",
      "Object.toArray()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript code?",
    "l": "javascript",
    "c": "const arr = ['a', 'b', 'c'];\narr.splice(1, 1);\nconsole.log(arr);",
    "o": [
      "['a', 'c']",
      "['a', 'b']",
      "['b', 'c']",
      "['a', 'b', 'c']"
    ]
  },
  {
    "q": "Which method is used to combine all elements of an array into a single string?",
    "o": [
      "join()",
      "concat()",
      "toString()",
      "split()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript code?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4, 5];\nconst result = arr.filter(num => num > 2);\nconsole.log(result);",
    "o": [
      "[3, 4, 5]",
      "[1, 2, 3, 4, 5]",
      "[2, 3, 4, 5]",
      "[1, 2]"
    ]
  },
  {
    "q": "Which of the following is NOT a way to create an object in JavaScript?",
    "o": [
      "const obj = Object.create(null, { key: { value: 'value' } });",
      "const obj = new Object();",
      "const obj = Object.assign({}, { key: 'value' });",
      "const obj = new Array();"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 5, b: 10 };\nconst newObj = { ...obj, b: 20 };\nconsole.log(newObj.b);",
    "o": [
      "20",
      "10",
      "undefined",
      "5"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconsole.log(Object.values(obj));",
    "o": [
      "[1, 2]",
      "['a', 'b']",
      "[['a', 1], ['b', 2]]",
      "undefined"
    ]
  },
  {
    "q": "Which of the following is a correct way to merge two objects in JavaScript?",
    "o": [
      "const newObj = { ...obj1, ...obj2 };",
      "const newObj = obj1 + obj2;",
      "const newObj = merge(obj1, obj2);",
      "const newObj = obj1.concat(obj2);"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript code?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr.push(4);\nconsole.log(arr);",
    "o": [
      "[1, 2, 3, 4]",
      "[1, 2, 3]",
      "[4, 1, 2, 3]",
      "[1, 2, 3, '4']"
    ]
  },
  {
    "q": "Which method removes the last element from an array and returns it?",
    "o": [
      "pop()",
      "shift()",
      "splice()",
      "remove()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { x: 10, y: 20 };\ndelete obj.x;\nconsole.log(obj);",
    "o": [
      "{ y: 20 }",
      "{ x: null, y: 20 }",
      "{ x: undefined, y: 20 }",
      "{ x: 10, y: 20 }"
    ]
  },
  {
    "q": "Which JavaScript method is used to check if an array includes a specific element?",
    "o": [
      "includes()",
      "contains()",
      "exists()",
      "has()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript code?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4, 5];\nconst slicedArr = arr.slice(1, 4);\nconsole.log(slicedArr);",
    "o": [
      "[2, 3, 4]",
      "[1, 2, 3, 4]",
      "[1, 4]",
      "[3, 4, 5]"
    ]
  },
  {
    "q": "Which method can be used to flatten a nested array in JavaScript?",
    "o": [
      "flat()",
      "reduce()",
      "map()",
      "concat()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const person = { name: 'Alice', age: 25 };\nconst { name, age } = person;\nconsole.log(name, age);",
    "o": [
      "'Alice' 25",
      "'name' 'age'",
      "'Alice' undefined",
      "undefined 25"
    ]
  },
  {
    "q": "Which of the following is NOT a valid JavaScript array method?",
    "o": [
      "objectify()",
      "map()",
      "reduce()",
      "find()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4, 5];\narr.shift();\nconsole.log(arr);",
    "o": [
      "[2, 3, 4, 5]",
      "[1, 2, 3, 4, 5]",
      "[1, 2, 3, 4]",
      "[null, 2, 3, 4, 5]"
    ]
  },
  {
    "q": "Which method is used to iterate over an array and return a new array with modified values?",
    "o": [
      "map()",
      "forEach()",
      "filter()",
      "find()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript code?",
    "l": "javascript",
    "c": "const arr = ['a', 'b', 'c'];\nconst newArr = arr.reverse();\nconsole.log(newArr);",
    "o": [
      "['c', 'b', 'a']",
      "['a', 'b', 'c']",
      "['a', 'c', 'b']",
      "['c', 'a', 'b']"
    ]
  },
  {
    "q": "Which JavaScript method converts an object into an array of its property values?",
    "o": [
      "Object.values()",
      "Object.keys()",
      "Object.entries()",
      "Object.toArray()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { name: 'John', age: 30 };\nconsole.log('name' in obj);",
    "o": [
      "true",
      "false",
      "'name'",
      "undefined"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 10, b: 20 };\nconst key = 'a';\nconsole.log(obj[key]);",
    "o": [
      "10",
      "'a'",
      "undefined",
      "20"
    ]
  },
  {
    "q": "Which of the following is a valid way to create an empty object in JavaScript?",
    "o": [
      "const obj = {};",
      "const obj = [];",
      "const obj = Object.create(null, {});",
      "const obj = new Array();"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript code?",
    "l": "javascript",
    "c": "const arr = [3, 6, 9];\nconst newArr = arr.map(x => x * 2);\nconsole.log(newArr);",
    "o": [
      "[6, 12, 18]",
      "[3, 6, 9]",
      "[2, 4, 6]",
      "[12, 24, 36]"
    ]
  },
  {
    "q": "Which of the following is NOT a valid way to iterate over an array in JavaScript?",
    "o": [
      "for (item of arr.keys())",
      "arr.forEach(item => console.log(item))",
      "for (let i = 0; i < arr.length; i++)",
      "for (let item of arr)"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2, c: 3 };\nconst { a, ...rest } = obj;\nconsole.log(rest);",
    "o": [
      "{ b: 2, c: 3 }",
      "{ a: 1 }",
      "{ a: 1, b: 2, c: 3 }",
      "undefined"
    ]
  },
  {
    "q": "Which JavaScript method can be used to find an object in an array based on a property value?",
    "o": [
      "find()",
      "map()",
      "filter()",
      "reduce()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript code?",
    "l": "javascript",
    "c": "const obj = { name: 'Alice' };\nobj.age = 25;\nconsole.log(obj);",
    "o": [
      "{ name: 'Alice', age: 25 }",
      "{ name: 'Alice' }",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method is used to convert an array into a single value by applying a function?",
    "o": [
      "reduce()",
      "map()",
      "filter()",
      "join()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { x: 1, y: 2, z: 3 };\nconsole.log(Object.keys(obj));",
    "o": [
      "['x', 'y', 'z']",
      "[1, 2, 3]",
      "[['x', 1], ['y', 2], ['z', 3]]",
      "undefined"
    ]
  },
  {
    "q": "Which method adds new elements to the beginning of an array?",
    "o": [
      "unshift()",
      "push()",
      "pop()",
      "concat()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4];\nconst [first, , third] = arr;\nconsole.log(first, third);",
    "o": [
      "1 3",
      "1 2",
      "2 3",
      "undefined 3"
    ]
  },
  {
    "q": "Which JavaScript method removes elements from an array based on an index and count?",
    "o": [
      "splice()",
      "slice()",
      "pop()",
      "shift()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4];\nconsole.log(arr.includes(2));",
    "o": [
      "true",
      "false",
      "2",
      "undefined"
    ]
  },
  {
    "q": "Which JavaScript method returns a new array with only elements that pass a certain condition?",
    "o": [
      "filter()",
      "map()",
      "reduce()",
      "every()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj1 = { a: 1, b: 2 };\nconst obj2 = { ...obj1, c: 3 };\nconsole.log(obj2);",
    "o": [
      "{ a: 1, b: 2, c: 3 }",
      "{ a: 1, b: 2 }",
      "{ a: 1, c: 3 }",
      "undefined"
    ]
  },
  {
    "q": "Which method checks if an object has a specific property?",
    "o": [
      "hasOwnProperty()",
      "contains()",
      "exists()",
      "has()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = ['apple', 'banana', 'cherry'];\nconsole.log(arr.join(' - '));",
    "o": [
      "'apple - banana - cherry'",
      "['apple', 'banana', 'cherry']",
      "'apple,banana,cherry'",
      "'apple banana cherry'"
    ]
  },
  {
    "q": "Which JavaScript method sorts the elements of an array in place?",
    "o": [
      "sort()",
      "order()",
      "arrange()",
      "set()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [10, 5, 20];\narr.sort();\nconsole.log(arr);",
    "o": [
      "[10, 20, 5]",
      "[5, 10, 20]",
      "[10, 5, 20]",
      "[20, 10, 5]"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { x: 42 };\nconst obj2 = obj;\nobj2.x = 100;\nconsole.log(obj.x);",
    "o": [
      "100",
      "42",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method is used to merge two objects in JavaScript?",
    "o": [
      "Object.assign()",
      "mergeObjects()",
      "combine()",
      "append()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, [3, 4], 5];\nconsole.log(arr.flat());",
    "o": [
      "[1, 2, 3, 4, 5]",
      "[1, 2, [3, 4], 5]",
      "Error",
      "[[1, 2], [3, 4], 5]"
    ]
  },
  {
    "q": "Which of the following is NOT a valid way to access a property of an object in JavaScript?",
    "o": [
      "obj->key",
      "obj.key",
      "obj['key']",
      "const { key } = obj"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr.length = 5;\nconsole.log(arr);",
    "o": [
      "[1, 2, 3, empty × 2]",
      "[1, 2, 3, 0, 0]",
      "[1, 2, 3, undefined, undefined]",
      "Error"
    ]
  },
  {
    "q": "Which JavaScript method returns an array of an object's property values?",
    "o": [
      "Object.values()",
      "Object.keys()",
      "Object.entries()",
      "Object.getProperties()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [10, 20, 30];\nconst res = arr.reduce((acc, val) => acc + val, 0);\nconsole.log(res);",
    "o": [
      "60",
      "[10, 20, 30]",
      "10",
      "Error"
    ]
  },
  {
    "q": "Which method is used to convert an object into an array of key-value pairs?",
    "o": [
      "Object.entries()",
      "Object.keys()",
      "Object.values()",
      "Object.toArray()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { name: 'Bob' };\nconst { age = 30 } = obj;\nconsole.log(age);",
    "o": [
      "30",
      "undefined",
      "Error",
      "null"
    ]
  },
  {
    "q": "Which method removes the last element from an array and returns it?",
    "o": [
      "pop()",
      "shift()",
      "splice()",
      "slice()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = ['apple', 'banana', 'cherry'];\nconsole.log(arr.indexOf('banana'));",
    "o": [
      "1",
      "2",
      "0",
      "-1"
    ]
  },
  {
    "q": "Which method adds new elements to the end of an array?",
    "o": [
      "push()",
      "unshift()",
      "append()",
      "concat()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 10 };\ndelete obj.a;\nconsole.log(obj);",
    "o": [
      "{}",
      "{ a: 10 }",
      "null",
      "Error"
    ]
  },
  {
    "q": "Which JavaScript method creates a shallow copy of an object?",
    "o": [
      "Object.assign()",
      "copyObject()",
      "Object.clone()",
      "duplicate()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr1 = [1, 2];\nconst arr2 = [...arr1, 3, 4];\nconsole.log(arr2);",
    "o": [
      "[1, 2, 3, 4]",
      "[[1, 2], 3, 4]",
      "[1, 2, [3, 4]]",
      "[1, 2, 3, 4, 5]"
    ]
  },
  {
    "q": "Which method can be used to check if an array contains a specific element?",
    "o": [
      "includes()",
      "has()",
      "contains()",
      "exists()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconst obj2 = { ...obj, c: 3 };\nconsole.log(obj2);",
    "o": [
      "{ a: 1, b: 2, c: 3 }",
      "{ a: 1, b: 2 }",
      "{ a: 1, c: 3 }",
      "undefined"
    ]
  },
  {
    "q": "Which method removes elements from an array without modifying the original array?",
    "o": [
      "slice()",
      "splice()",
      "pop()",
      "delete"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = ['a', 'b', 'c'];\nconsole.log(arr.reverse());",
    "o": [
      "['c', 'b', 'a']",
      "['a', 'b', 'c']",
      "['b', 'a', 'c']",
      "undefined"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconst obj2 = Object.assign({}, obj, { c: 3 });\nconsole.log(obj2);",
    "o": [
      "{ a: 1, b: 2, c: 3 }",
      "{ a: 1, b: 2 }",
      "{ c: 3 }",
      "{ a: 1, b: 2, c: 3, d: 4 }"
    ]
  },
  {
    "q": "Which method is used to create an array from an iterable or array-like object?",
    "o": [
      "Array.from()",
      "Array.of()",
      "Array.create()",
      "Array.generate()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 10, b: 20 };\nconst keys = Object.keys(obj);\nconsole.log(keys);",
    "o": [
      "[\"a\", \"b\"]",
      "[10, 20]",
      "{ a: 10, b: 20 }",
      "Error"
    ]
  },
  {
    "q": "Which JavaScript method returns a shallow copy of a portion of an array?",
    "o": [
      "slice()",
      "splice()",
      "copy()",
      "cut()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4];\nconst newArr = arr.map(x => x * 2);\nconsole.log(newArr);",
    "o": [
      "[2, 4, 6, 8]",
      "[1, 2, 3, 4]",
      "[2, 3, 4, 5]",
      "Error"
    ]
  },
  {
    "q": "Which method removes the first element from an array and returns it?",
    "o": [
      "shift()",
      "pop()",
      "splice()",
      "unshift()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { x: 10, y: 20 };\nconst { x, y } = obj;\nconsole.log(x + y);",
    "o": [
      "30",
      "{ x: 10, y: 20 }",
      "10",
      "undefined"
    ]
  },
  {
    "q": "Which JavaScript method is used to add new properties to an object?",
    "o": [
      "Object.defineProperty()",
      "Object.append()",
      "Object.add()",
      "Object.insert()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [5, 10, 15, 20];\nconst filtered = arr.filter(num => num > 10);\nconsole.log(filtered);",
    "o": [
      "[15, 20]",
      "[10, 15, 20]",
      "[5, 10, 15, 20]",
      "[]"
    ]
  },
  {
    "q": "Which method returns the first element in an array that satisfies a given condition?",
    "o": [
      "find()",
      "filter()",
      "map()",
      "reduce()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 5, b: 10 };\nconst objCopy = { ...obj, c: 15 };\nconsole.log(objCopy);",
    "o": [
      "{ a: 5, b: 10, c: 15 }",
      "{ a: 5, b: 10 }",
      "{ c: 15 }",
      "Error"
    ]
  },
  {
    "q": "Which JavaScript method merges multiple arrays into a single array?",
    "o": [
      "concat()",
      "merge()",
      "join()",
      "append()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst [first, ...rest] = arr;\nconsole.log(rest);",
    "o": [
      "[2, 3]",
      "[1, 2]",
      "[1, 3]",
      "[3, 2]"
    ]
  },
  {
    "q": "Which JavaScript method checks if an object has a specific property?",
    "o": [
      "hasOwnProperty()",
      "containsKey()",
      "has()",
      "includes()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [2, 4, 6, 8];\nconsole.log(arr.every(num => num % 2 === 0));",
    "o": [
      "true",
      "false",
      "[2, 4, 6, 8]",
      "Error"
    ]
  },
  {
    "q": "Which method is used to transform each element of an array and return a new array?",
    "o": [
      "map()",
      "reduce()",
      "filter()",
      "transform()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2, c: 3 };\nconsole.log(Object.entries(obj));",
    "o": [
      "[[\"a\", 1], [\"b\", 2], [\"c\", 3]]",
      "[\"a\", \"b\", \"c\"]",
      "[1, 2, 3]",
      "[{ a: 1, b: 2, c: 3 }]"
    ]
  },
  {
    "q": "Which JavaScript method is used to iterate over an array and execute a function on each element?",
    "o": [
      "forEach()",
      "map()",
      "reduce()",
      "filter()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = ['a', 'b', 'c'];\narr.splice(1, 1, 'x');\nconsole.log(arr);",
    "o": [
      "[\"a\", \"x\", \"c\"]",
      "[\"a\", \"b\", \"c\"]",
      "[\"x\", \"b\", \"c\"]",
      "[\"a\", \"c\"]"
    ]
  },
  {
    "q": "Which method is used to sort the elements of an array in JavaScript?",
    "o": [
      "sort()",
      "order()",
      "arrange()",
      "setOrder()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 10, b: 20, a: 30 };\nconsole.log(obj.a);",
    "o": [
      "30",
      "10",
      "20",
      "undefined"
    ]
  },
  {
    "q": "Which JavaScript method creates an array with a given length and fills it with values?",
    "o": [
      "Array.fill()",
      "Array.create()",
      "Array.set()",
      "Array.new()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [3, 1, 4, 2];\narr.sort();\nconsole.log(arr);",
    "o": [
      "[1, 2, 3, 4]",
      "[3, 1, 4, 2]",
      "[2, 3, 1, 4]",
      "[1, 3, 2, 4]"
    ]
  },
  {
    "q": "Which method is used to create a shallow copy of an array?",
    "o": [
      "slice()",
      "copy()",
      "duplicate()",
      "extract()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { name: 'John', age: 25 };\ndelete obj.age;\nconsole.log(obj);",
    "o": [
      "{ name: 'John' }",
      "{ name: 'John', age: 25 }",
      "{ age: 25 }",
      "undefined"
    ]
  },
  {
    "q": "Which JavaScript method is used to check if an array includes a specific value?",
    "o": [
      "includes()",
      "contains()",
      "exists()",
      "find()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [5, 10, 15, 20];\nconst doubled = arr.map(x => x * 2);\nconsole.log(doubled[1]);",
    "o": [
      "20",
      "10",
      "30",
      "40"
    ]
  },
  {
    "q": "Which method is used to convert an array into a string, separating elements with a specified delimiter?",
    "o": [
      "join()",
      "concat()",
      "merge()",
      "split()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { x: 5, y: 10 };\nconst { x, y, z = 15 } = obj;\nconsole.log(z);",
    "o": [
      "15",
      "undefined",
      "10",
      "Error"
    ]
  },
  {
    "q": "Which JavaScript method merges two or more objects into one?",
    "o": [
      "Object.assign()",
      "Object.combine()",
      "Object.merge()",
      "Object.append()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = ['a', 'b', 'c'];\narr.push('d');\nconsole.log(arr);",
    "o": [
      "[\"a\", \"b\", \"c\", \"d\"]",
      "[\"a\", \"b\", \"c\"]",
      "[\"d\", \"a\", \"b\", \"c\"]",
      "Error"
    ]
  },
  {
    "q": "Which method is used to iterate over an object's properties?",
    "o": [
      "Object.keys()",
      "Object.iterate()",
      "Object.loop()",
      "Object.forEach()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2, c: 3 };\nconsole.log(Object.values(obj));",
    "o": [
      "[1, 2, 3]",
      "[\"a\", \"b\", \"c\"]",
      "[{ a: 1, b: 2, c: 3 }]",
      "Error"
    ]
  },
  {
    "q": "Which method is used to reduce an array to a single value by applying a function?",
    "o": [
      "reduce()",
      "filter()",
      "map()",
      "concat()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { x: 10, y: 20 };\nconst { x, ...rest } = obj;\nconsole.log(rest);",
    "o": [
      "{ y: 20 }",
      "{ x: 10 }",
      "{}",
      "undefined"
    ]
  },
  {
    "q": "Which method removes the last element from an array and returns it?",
    "o": [
      "pop()",
      "shift()",
      "slice()",
      "splice()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { name: 'Alice', age: 25 };\nobj.city = 'New York';\nconsole.log(obj);",
    "o": [
      "{ name: 'Alice', age: 25, city: 'New York' }",
      "{ name: 'Alice', age: 25 }",
      "{ name: 'Alice', city: 'New York' }",
      "Error"
    ]
  },
  {
    "q": "Which method is used to find the index of the first occurrence of a value in an array?",
    "o": [
      "indexOf()",
      "findIndex()",
      "search()",
      "lookup()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [2, 4, 6, 8];\nconst sum = arr.reduce((acc, num) => acc + num, 0);\nconsole.log(sum);",
    "o": [
      "20",
      "10",
      "[2, 4, 6, 8]",
      "Error"
    ]
  },
  {
    "q": "Which method returns a new array with all sub-array elements concatenated into it?",
    "o": [
      "flat()",
      "concat()",
      "merge()",
      "combine()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const person = { name: 'John', age: 30 };\nperson.gender = 'Male';\nconsole.log(person);",
    "o": [
      "{ name: 'John', age: 30, gender: 'Male' }",
      "{ name: 'John', age: 30 }",
      "{ gender: 'Male' }",
      "undefined"
    ]
  },
  {
    "q": "Which method is used to convert an object's properties into an array of key-value pairs?",
    "o": [
      "Object.entries()",
      "Object.toArray()",
      "Object.values()",
      "Object.keys()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj1 = { a: 1, b: 2 };\nconst obj2 = { b: 3, c: 4 };\nconst merged = { ...obj1, ...obj2 };\nconsole.log(merged);",
    "o": [
      "{ a: 1, b: 3, c: 4 }",
      "{ a: 1, b: 2, c: 4 }",
      "{ a: 1, b: 2, b: 3, c: 4 }",
      "Error"
    ]
  },
  {
    "q": "Which method removes the first element of an array and returns it?",
    "o": [
      "shift()",
      "pop()",
      "splice()",
      "slice()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = ['x', 'y', 'z'];\nconst first = arr.shift();\nconsole.log(first, arr);",
    "o": [
      "\"x\", [\"y\", \"z\"]",
      "\"y\", [\"x\", \"z\"]",
      "[\"x\"], [\"y\", \"z\"]",
      "Error"
    ]
  },
  {
    "q": "Which method is used to check if all elements in an array satisfy a condition?",
    "o": [
      "every()",
      "some()",
      "filter()",
      "map()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 5, b: 10, c: 15 };\nconst keys = Object.keys(obj);\nconsole.log(keys.length);",
    "o": [
      "3",
      "5",
      "10",
      "undefined"
    ]
  },
  {
    "q": "Which method is used to find the first element in an array that satisfies a condition?",
    "o": [
      "find()",
      "filter()",
      "map()",
      "indexOf()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { p: 42, q: 50 };\nconst { p, q, r = 99 } = obj;\nconsole.log(r);",
    "o": [
      "99",
      "42",
      "50",
      "undefined"
    ]
  },
  {
    "q": "Which method is used to sort elements in an array?",
    "o": [
      "sort()",
      "order()",
      "arrange()",
      "filter()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4, 5];\nconst reversed = arr.reverse();\nconsole.log(reversed);",
    "o": [
      "[5, 4, 3, 2, 1]",
      "[1, 2, 3, 4, 5]",
      "[2, 3, 4, 5, 1]",
      "Error"
    ]
  },
  {
    "q": "Which method returns a portion of an array without modifying the original array?",
    "o": [
      "slice()",
      "splice()",
      "trim()",
      "cut()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const numbers = [2, 4, 6, 8];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled[2]);",
    "o": [
      "12",
      "8",
      "16",
      "Error"
    ]
  },
  {
    "q": "Which method removes elements from an array and can insert new elements at the same time?",
    "o": [
      "splice()",
      "slice()",
      "filter()",
      "map()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [\"a\", \"b\", \"c\", \"d\"];\narr.splice(2, 1);\nconsole.log(arr);",
    "o": [
      "[\"a\", \"b\", \"d\"]",
      "[\"a\", \"c\", \"d\"]",
      "[\"a\", \"b\", \"c\"]",
      "Error"
    ]
  },
  {
    "q": "Which method combines two arrays and returns a new one?",
    "o": [
      "concat()",
      "merge()",
      "combine()",
      "append()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst result = arr1.concat(arr2);\nconsole.log(result);",
    "o": [
      "[1, 2, 3, 4, 5, 6]",
      "[[1, 2, 3], [4, 5, 6]]",
      "[1, 2, 3], [4, 5, 6]",
      "Error"
    ]
  },
  {
    "q": "Which method is used to find the last index of a specified value in an array?",
    "o": [
      "lastIndexOf()",
      "findLast()",
      "indexOf()",
      "search()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const numbers = [10, 20, 30, 40, 50];\nconsole.log(numbers.lastIndexOf(30));",
    "o": [
      "2",
      "3",
      "-1",
      "undefined"
    ]
  },
  {
    "q": "Which JavaScript method is used to check if at least one element in an array satisfies a condition?",
    "o": [
      "some()",
      "every()",
      "filter()",
      "map()"
    ]
  },
  {
    "q": "Which of the following is a correct way to create an object in JavaScript?",
    "o": [
      "const obj = { key: 'value' };",
      "const obj = ( key: 'value' );",
      "const obj = [ key: 'value' ];",
      "const obj = new Object[key: 'value'];"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const user = { name: 'Alice', age: 25 };\nconsole.log(Object.keys(user));",
    "o": [
      "[\"name\", \"age\"]",
      "{ name: \"Alice\", age: 25 }",
      "[\"Alice\", 25]",
      "undefined"
    ]
  },
  {
    "q": "Which method is used to merge multiple objects into one?",
    "o": [
      "Object.assign()",
      "Object.merge()",
      "Object.concat()",
      "Object.combine()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3, 4];\nnumbers.length = 2;\nconsole.log(numbers);",
    "o": [
      "[1, 2]",
      "[1, 2, 3, 4]",
      "[]",
      "Error"
    ]
  },
  {
    "q": "Which method is used to remove the last element from an array?",
    "o": [
      "pop()",
      "shift()",
      "slice()",
      "splice()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [10, 20, 30];\narr.push(40);\nconsole.log(arr);",
    "o": [
      "[10, 20, 30, 40]",
      "[40, 10, 20, 30]",
      "[10, 20, 30]",
      "Error"
    ]
  },
  {
    "q": "Which method creates a new array by applying a function to each element of an existing array?",
    "o": [
      "map()",
      "forEach()",
      "filter()",
      "reduce()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const numbers = [5, 10, 15, 20];\nconst filtered = numbers.filter(num => num > 10);\nconsole.log(filtered);",
    "o": [
      "[15, 20]",
      "[5, 10]",
      "[10, 15, 20]",
      "Error"
    ]
  },
  {
    "q": "Which method is used to combine all elements of an array into a single value?",
    "o": [
      "reduce()",
      "concat()",
      "join()",
      "map()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const person = { name: 'John', age: 30 };\nconst { name, age } = person;\nconsole.log(name, age);",
    "o": [
      "\"John\", 30",
      "\"name\", \"age\"",
      "undefined, undefined",
      "Error"
    ]
  },
  {
    "q": "Which method returns an array of an object's values?",
    "o": [
      "Object.values()",
      "Object.keys()",
      "Object.entries()",
      "Object.get()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2, c: 3 };\nconst { a, ...rest } = obj;\nconsole.log(rest);",
    "o": [
      "{ b: 2, c: 3 }",
      "{ a: 1 }",
      "{ a: 1, b: 2, c: 3 }",
      "Error"
    ]
  },
  {
    "q": "Which method checks if an object has a specific property?",
    "o": [
      "hasOwnProperty()",
      "includes()",
      "find()",
      "exists()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const colors = ['red', 'blue', 'green'];\nconst newColors = [...colors, 'yellow'];\nconsole.log(newColors);",
    "o": [
      "[\"red\", \"blue\", \"green\", \"yellow\"]",
      "[\"red\", \"blue\", \"green\"]",
      "[[\"red\", \"blue\", \"green\"], \"yellow\"]",
      "Error"
    ]
  },
  {
    "q": "Which method is used to check if an array contains a specific element?",
    "o": [
      "includes()",
      "exists()",
      "find()",
      "contains()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4, 5];\nconst sliced = arr.slice(1, 4);\nconsole.log(sliced);",
    "o": [
      "[2, 3, 4]",
      "[1, 2, 3, 4]",
      "[1, 2, 3]",
      "Error"
    ]
  },
  {
    "q": "Which method is used to loop through each element in an array without creating a new array?",
    "o": [
      "forEach()",
      "map()",
      "reduce()",
      "filter()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [3, 6, 9];\nconst tripled = arr.map(num => num * 3);\nconsole.log(tripled);",
    "o": [
      "[9, 18, 27]",
      "[3, 6, 9]",
      "[6, 12, 18]",
      "Error"
    ]
  },
  {
    "q": "Which method is used to add elements to the beginning of an array?",
    "o": [
      "unshift()",
      "push()",
      "prepend()",
      "insert()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj1 = { x: 10 };\nconst obj2 = { y: 20 };\nconst merged = Object.assign({}, obj1, obj2);\nconsole.log(merged);",
    "o": [
      "{ x: 10, y: 20 }",
      "{ x: 10 }",
      "{ y: 20 }",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a correct way to create an array in JavaScript?",
    "o": [
      "const arr = [1, 2, 3];",
      "const arr = (1, 2, 3);",
      "const arr = {1, 2, 3};",
      "const arr = new Array{1, 2, 3};"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = {a: 1, b: 2, a: 3};\nconsole.log(obj.a);",
    "o": [
      "3",
      "1",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method is used to get an array of key-value pairs from an object?",
    "o": [
      "Object.entries()",
      "Object.keys()",
      "Object.values()",
      "Object.pairs()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const fruits = ['apple', 'banana', 'cherry'];\nfruits.splice(1, 1, 'grape');\nconsole.log(fruits);",
    "o": [
      "[\"apple\", \"grape\", \"cherry\"]",
      "[\"apple\", \"banana\", \"cherry\", \"grape\"]",
      "[\"apple\", \"cherry\"]",
      "Error"
    ]
  },
  {
    "q": "Which method removes the first element of an array and returns it?",
    "o": [
      "shift()",
      "pop()",
      "slice()",
      "splice()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [2, 4, 6, 8];\nconst newArr = arr.map(num => num / 2);\nconsole.log(newArr);",
    "o": [
      "[1, 2, 3, 4]",
      "[2, 4, 6, 8]",
      "[4, 8, 12, 16]",
      "Error"
    ]
  },
  {
    "q": "Which statement is used to create a shallow copy of an object?",
    "o": [
      "const copy = {...original};",
      "const copy = original;",
      "const copy = Object.copy(original);",
      "const copy = shallowCopy(original);"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = {name: 'Alice', age: 25};\nconst {name: firstName} = obj;\nconsole.log(firstName);",
    "o": [
      "\"Alice\"",
      "undefined",
      "\"name\"",
      "Error"
    ]
  },
  {
    "q": "Which method converts an array to a string by joining its elements?",
    "o": [
      "join()",
      "concat()",
      "split()",
      "toString()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3, 4, 5];\nconsole.log(numbers.slice(2));",
    "o": [
      "[3, 4, 5]",
      "[1, 2]",
      "[1, 2, 3]",
      "Error"
    ]
  },
  {
    "q": "Which of the following is NOT a valid way to iterate over an array?",
    "o": [
      "for (const item of arr)",
      "arr.forEach(item => console.log(item))",
      "arr.loop(item => console.log(item))",
      "for (let i = 0; i < arr.length; i++)"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { x: 10, y: 20 };\ndelete obj.x;\nconsole.log(obj);",
    "o": [
      "{ y: 20 }",
      "{ x: 10, y: 20 }",
      "{}",
      "Error"
    ]
  },
  {
    "q": "Which method is used to sort an array in JavaScript?",
    "o": [
      "sort()",
      "order()",
      "arrange()",
      "filter()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const numbers = [10, 5, 20, 15];\nnumbers.sort();\nconsole.log(numbers);",
    "o": [
      "[10, 15, 20, 5]",
      "[5, 10, 15, 20]",
      "[10, 5, 15, 20]",
      "Error"
    ]
  },
  {
    "q": "Which method is used to reverse an array in JavaScript?",
    "o": [
      "reverse()",
      "invert()",
      "flip()",
      "rotate()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = ['a', 'b', 'c'];\nconst result = arr.concat(['d', 'e']);\nconsole.log(result);",
    "o": [
      "[\"a\", \"b\", \"c\", \"d\", \"e\"]",
      "[\"a\", \"b\", \"c\"]",
      "[\"d\", \"e\"]",
      "Error"
    ]
  },
  {
    "q": "Which method returns a new array containing only the elements that satisfy a condition?",
    "o": [
      "filter()",
      "map()",
      "forEach()",
      "reduce()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = {a: 1, b: 2, c: 3};\nconst keys = Object.keys(obj);\nconsole.log(keys);",
    "o": [
      "[\"a\", \"b\", \"c\"]",
      "[1, 2, 3]",
      "[\"a\": 1, \"b\": 2, \"c\": 3]",
      "Error"
    ]
  },
  {
    "q": "Which operator is used to spread elements of an array into another array?",
    "o": [
      "... (spread operator)",
      "* (multiplication operator)",
      "& (bitwise AND operator)",
      "@ (decorator operator)"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr1 = [1, 2, 3];\nconst arr2 = [...arr1, 4, 5];\nconsole.log(arr2);",
    "o": [
      "[1, 2, 3, 4, 5]",
      "[[1, 2, 3], 4, 5]",
      "[1, 2, 3]",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a correct way to create an object in JavaScript?",
    "o": [
      "const obj = { name: 'John', age: 30 };",
      "const obj = ( name: 'John', age: 30 );",
      "const obj = [ name: 'John', age: 30 ];",
      "const obj = new Object[name: 'John', age: 30];"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = {a: 1, b: 2};\nconst newObj = { ...obj, c: 3 };\nconsole.log(newObj);",
    "o": [
      "{ a: 1, b: 2, c: 3 }",
      "{ a: 1, b: 2 }",
      "{ a: 1, c: 3 }",
      "Error"
    ]
  },
  {
    "q": "Which method is used to check if an object has a certain property?",
    "o": [
      "Object.hasOwnProperty()",
      "Object.contains()",
      "Object.has()",
      "Object.propertyExists()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst [first, ...rest] = arr;\nconsole.log(rest);",
    "o": [
      "[2, 3]",
      "[1, 2]",
      "[3]",
      "Error"
    ]
  },
  {
    "q": "Which method is used to merge two arrays in JavaScript?",
    "o": [
      "concat()",
      "merge()",
      "combine()",
      "append()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = {name: 'Alice', age: 25};\nconst {age} = obj;\nconsole.log(age);",
    "o": [
      "25",
      "Alice",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which statement correctly creates an array of object properties?",
    "o": [
      "const keys = Object.keys(obj);",
      "const keys = obj.keys();",
      "const keys = Object.getProperties(obj);",
      "const keys = obj.getKeys();"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = {x: 10, y: 20};\nconsole.log(Object.values(obj));",
    "o": [
      "[10, 20]",
      "[\"x\", \"y\"]",
      "[{x: 10}, {y: 20}]",
      "Error"
    ]
  },
  {
    "q": "Which method is used to loop through an array and return a new array?",
    "o": [
      "map()",
      "forEach()",
      "reduce()",
      "filter()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const numbers = [5, 10, 15];\nconst result = numbers.find(num => num > 5);\nconsole.log(result);",
    "o": [
      "10",
      "[10, 15]",
      "[5, 10, 15]",
      "Error"
    ]
  },
  {
    "q": "Which method adds an element to the beginning of an array?",
    "o": [
      "unshift()",
      "push()",
      "shift()",
      "addFirst()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = ['red', 'blue', 'green'];\narr.length = 2;\nconsole.log(arr);",
    "o": [
      "[\"red\", \"blue\"]",
      "[\"red\", \"blue\", \"green\"]",
      "[]",
      "Error"
    ]
  },
  {
    "q": "Which operator is used to copy an object in JavaScript?",
    "o": [
      "... (spread operator)",
      "copy()",
      "clone()",
      "Object.copy()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4];\nconst newArr = arr.filter(num => num % 2 === 0);\nconsole.log(newArr);",
    "o": [
      "[2, 4]",
      "[1, 2, 3, 4]",
      "[1, 3]",
      "Error"
    ]
  },
  {
    "q": "Which method returns the index of the first occurrence of an element in an array?",
    "o": [
      "indexOf()",
      "findIndex()",
      "search()",
      "position()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = ['a', 'b', 'c'];\nconsole.log(arr.includes('b'));",
    "o": [
      "true",
      "false",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following is NOT a valid way to clone an object?",
    "o": [
      "const copy = Object.assign({}, obj);",
      "const copy = JSON.parse(JSON.stringify(obj));",
      "const copy = {...obj};",
      "const copy = Object.clone(obj);"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = {x: 5, y: 10};\nconst {x, y, z = 20} = obj;\nconsole.log(z);",
    "o": [
      "20",
      "undefined",
      "Error",
      "null"
    ]
  },
  {
    "q": "Which method combines all elements of an array into a single value?",
    "o": [
      "reduce()",
      "concat()",
      "join()",
      "map()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [10, 20, 30];\narr.reverse();\nconsole.log(arr);",
    "o": [
      "[30, 20, 10]",
      "[10, 20, 30]",
      "[30, 10, 20]",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a valid way to create an array in JavaScript?",
    "o": [
      "const arr = [1, 2, 3];",
      "const arr = (1, 2, 3);",
      "const arr = {1, 2, 3};",
      "const arr = new Array{1, 2, 3};"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 10, b: 20 };\nconst obj2 = Object.assign({}, obj, { c: 30 });\nconsole.log(obj2);",
    "o": [
      "{ a: 10, b: 20, c: 30 }",
      "{ a: 10, b: 20 }",
      "{ c: 30 }",
      "Error"
    ]
  },
  {
    "q": "Which method returns an array containing all key-value pairs of an object?",
    "o": [
      "Object.entries()",
      "Object.values()",
      "Object.keys()",
      "Object.pairs()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst newArr = arr.map(num => num * 2);\nconsole.log(newArr);",
    "o": [
      "[2, 4, 6]",
      "[1, 2, 3]",
      "[1, 4, 9]",
      "Error"
    ]
  },
  {
    "q": "Which method removes the last element from an array?",
    "o": [
      "pop()",
      "push()",
      "shift()",
      "splice()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [5, 10, 15, 20];\nconst slicedArr = arr.slice(1, 3);\nconsole.log(slicedArr);",
    "o": [
      "[10, 15]",
      "[5, 10]",
      "[10, 15, 20]",
      "Error"
    ]
  },
  {
    "q": "Which method combines two or more arrays into one?",
    "o": [
      "concat()",
      "merge()",
      "combine()",
      "append()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = {x: 5, y: 10};\nconst {x, y, z = 15} = obj;\nconsole.log(z);",
    "o": [
      "15",
      "undefined",
      "Error",
      "null"
    ]
  },
  {
    "q": "Which method checks if an array contains a specific value?",
    "o": [
      "includes()",
      "find()",
      "exists()",
      "has()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4];\nconst result = arr.find(num => num > 2);\nconsole.log(result);",
    "o": [
      "3",
      "[3, 4]",
      "[1, 2, 3, 4]",
      "Error"
    ]
  },
  {
    "q": "Which method removes the first element from an array?",
    "o": [
      "shift()",
      "pop()",
      "unshift()",
      "slice()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [\"a\", \"b\", \"c\"];\narr.reverse();\nconsole.log(arr);",
    "o": [
      "[\"c\", \"b\", \"a\"]",
      "[\"a\", \"b\", \"c\"]",
      "[\"b\", \"c\", \"a\"]",
      "Error"
    ]
  },
  {
    "q": "Which method is used to iterate over an array without modifying it?",
    "o": [
      "forEach()",
      "map()",
      "filter()",
      "reduce()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr.length = 5;\nconsole.log(arr);",
    "o": [
      "[1, 2, 3, empty × 2]",
      "[1, 2, 3, 0, 0]",
      "[1, 2, 3, null, null]",
      "Error"
    ]
  },
  {
    "q": "Which method is used to merge two objects in JavaScript?",
    "o": [
      "Object.assign()",
      "Object.merge()",
      "Object.concat()",
      "Object.join()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = {a: 10, b: 20};\nconst objCopy = {...obj, c: 30};\nconsole.log(objCopy);",
    "o": [
      "{ a: 10, b: 20, c: 30 }",
      "{ a: 10, b: 20 }",
      "{ c: 30 }",
      "Error"
    ]
  },
  {
    "q": "Which method removes elements from an array and optionally inserts new elements?",
    "o": [
      "splice()",
      "slice()",
      "cut()",
      "remove()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { p: 10, q: 20, r: 30 };\nconst keys = Object.keys(obj);\nconsole.log(keys);",
    "o": [
      "[\"p\", \"q\", \"r\"]",
      "[10, 20, 30]",
      "{ p: 10, q: 20, r: 30 }",
      "Error"
    ]
  },
  {
    "q": "Which method returns a string by concatenating all elements of an array?",
    "o": [
      "join()",
      "concat()",
      "reduce()",
      "merge()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [10, 20, 30];\nconsole.log(arr.indexOf(20));",
    "o": [
      "1",
      "2",
      "0",
      "-1"
    ]
  },
  {
    "q": "Which of the following correctly creates an object in JavaScript?",
    "o": [
      "const obj = { name: 'Alice', age: 25 };",
      "const obj = [ name: 'Alice', age: 25 ];",
      "const obj = ( name: 'Alice', age: 25 );",
      "const obj = new Object[name: 'Alice', age: 25];"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { x: 10, y: 20 };\ndelete obj.x;\nconsole.log(obj);",
    "o": [
      "{ y: 20 }",
      "{ x: 10, y: 20 }",
      "{ x: null, y: 20 }",
      "Error"
    ]
  },
  {
    "q": "Which method returns an array of an object's values?",
    "o": [
      "Object.values()",
      "Object.keys()",
      "Object.entries()",
      "Object.data()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [5, 10, 15];\narr.push(20);\nconsole.log(arr);",
    "o": [
      "[5, 10, 15, 20]",
      "[5, 10, 15]",
      "[20, 5, 10, 15]",
      "Error"
    ]
  },
  {
    "q": "Which array method is used to create a new array with elements that pass a condition?",
    "o": [
      "filter()",
      "map()",
      "forEach()",
      "reduce()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2, c: 3 };\nconst { a, b } = obj;\nconsole.log(a, b);",
    "o": [
      "1 2",
      "{ a: 1, b: 2 }",
      "undefined undefined",
      "Error"
    ]
  },
  {
    "q": "Which method is used to convert an array to a string with a specified separator?",
    "o": [
      "join()",
      "split()",
      "toString()",
      "concat()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = ['a', 'b', 'c'];\narr.unshift('z');\nconsole.log(arr);",
    "o": [
      "[\"z\", \"a\", \"b\", \"c\"]",
      "[\"a\", \"b\", \"c\", \"z\"]",
      "[\"a\", \"b\", \"c\"]",
      "Error"
    ]
  },
  {
    "q": "Which array method is used to check if at least one element meets a condition?",
    "o": [
      "some()",
      "every()",
      "includes()",
      "find()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4, 5];\nconst result = arr.findIndex(num => num > 3);\nconsole.log(result);",
    "o": [
      "3",
      "4",
      "5",
      "-1"
    ]
  },
  {
    "q": "Which method creates a shallow copy of an object?",
    "o": [
      "Object.assign()",
      "JSON.stringify()",
      "copyObject()",
      "Object.copy()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { x: 5, y: 10 };\nconst obj2 = { ...obj, y: 15 };\nconsole.log(obj2);",
    "o": [
      "{ x: 5, y: 15 }",
      "{ x: 5, y: 10, y: 15 }",
      "{ y: 15 }",
      "Error"
    ]
  },
  {
    "q": "Which array method is used to execute a function on every element and return a single value?",
    "o": [
      "reduce()",
      "map()",
      "filter()",
      "forEach()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst result = arr.includes(2);\nconsole.log(result);",
    "o": [
      "true",
      "false",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method merges two arrays without modifying the original ones?",
    "o": [
      "concat()",
      "push()",
      "splice()",
      "join()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 10, b: 20 };\nconst keys = Object.keys(obj);\nconsole.log(keys.length);",
    "o": [
      "2",
      "10",
      "20",
      "undefined"
    ]
  },
  {
    "q": "Which method is used to sort an array in place?",
    "o": [
      "sort()",
      "order()",
      "arrange()",
      "orderBy()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4, 5];\nconst newArr = arr.slice(2, 4);\nconsole.log(newArr);",
    "o": [
      "[3, 4]",
      "[2, 3, 4]",
      "[3, 4, 5]",
      "Error"
    ]
  },
  {
    "q": "Which method converts an object into an array of key-value pairs?",
    "o": [
      "Object.entries()",
      "Object.keys()",
      "Object.values()",
      "Object.toArray()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = ['apple', 'banana', 'cherry'];\nconst result = arr.indexOf('banana');\nconsole.log(result);",
    "o": [
      "1",
      "0",
      "2",
      "-1"
    ]
  },
  {
    "q": "Which of the following correctly creates an array in JavaScript?",
    "o": [
      "const arr = [1, 2, 3];",
      "const arr = {1, 2, 3};",
      "const arr = new Array{1, 2, 3};",
      "const arr = (1, 2, 3);"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const person = { name: 'Alice', age: 30 };\nconsole.log('name' in person);",
    "o": [
      "true",
      "false",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method returns a new array with the results of calling a function on every element?",
    "o": [
      "map()",
      "forEach()",
      "filter()",
      "reduce()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2, c: 3 };\nconst keys = Object.keys(obj);\nconsole.log(keys);",
    "o": [
      "[\"a\", \"b\", \"c\"]",
      "[1, 2, 3]",
      "{ a: 1, b: 2, c: 3 }",
      "undefined"
    ]
  },
  {
    "q": "Which method removes the last element from an array and returns it?",
    "o": [
      "pop()",
      "shift()",
      "splice()",
      "slice()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = ['apple', 'banana', 'cherry'];\nconst last = arr.pop();\nconsole.log(last);",
    "o": [
      "\"cherry\"",
      "[\"apple\", \"banana\"]",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a valid way to merge two objects?",
    "o": [
      "const merged = { ...obj1, ...obj2 };",
      "const merged = obj1 + obj2;",
      "const merged = merge(obj1, obj2);",
      "const merged = obj1.concat(obj2);"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { x: 5, y: 10 };\nconst obj2 = Object.assign({}, obj, { y: 15 });\nconsole.log(obj2);",
    "o": [
      "{ x: 5, y: 15 }",
      "{ x: 5, y: 10, y: 15 }",
      "{ y: 15 }",
      "Error"
    ]
  },
  {
    "q": "Which method is used to check if all elements in an array meet a condition?",
    "o": [
      "every()",
      "some()",
      "filter()",
      "find()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [10, 20, 30, 40];\nconsole.log(arr.slice(1, 3));",
    "o": [
      "[20, 30]",
      "[10, 20, 30]",
      "[30, 40]",
      "Error"
    ]
  },
  {
    "q": "Which method is used to find the first element that satisfies a condition in an array?",
    "o": [
      "find()",
      "filter()",
      "map()",
      "forEach()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 5, b: 10, c: 15 };\nconst values = Object.values(obj);\nconsole.log(values);",
    "o": [
      "[5, 10, 15]",
      "[\"a\", \"b\", \"c\"]",
      "{ a: 5, b: 10, c: 15 }",
      "undefined"
    ]
  },
  {
    "q": "Which method converts an array into a single value by executing a reducer function?",
    "o": [
      "reduce()",
      "map()",
      "filter()",
      "concat()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4, 5];\nconst sum = arr.reduce((acc, num) => acc + num, 0);\nconsole.log(sum);",
    "o": [
      "15",
      "[1, 2, 3, 4, 5]",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which method is used to add elements at the beginning of an array?",
    "o": [
      "unshift()",
      "push()",
      "pop()",
      "splice()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [\"apple\", \"banana\", \"cherry\"];\narr.reverse();\nconsole.log(arr);",
    "o": [
      "[\"cherry\", \"banana\", \"apple\"]",
      "[\"apple\", \"banana\", \"cherry\"]",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which method checks if a value exists in an array?",
    "o": [
      "includes()",
      "find()",
      "some()",
      "every()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [\"red\", \"green\", \"blue\"];\nconst index = arr.indexOf(\"green\");\nconsole.log(index);",
    "o": [
      "1",
      "0",
      "2",
      "-1"
    ]
  },
  {
    "q": "Which method creates a new array with elements that pass a test?",
    "o": [
      "filter()",
      "map()",
      "some()",
      "every()"
    ]
  },
  {
    "q": "Which of the following is a correct way to create an object in JavaScript?",
    "o": [
      "const obj = { key: 'value' };",
      "const obj = (key: 'value');",
      "const obj = [key: 'value'];",
      "const obj = new Object[key: 'value'];"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { name: 'John', age: 25 };\ndelete obj.age;\nconsole.log(obj);",
    "o": [
      "{ name: 'John' }",
      "{ name: 'John', age: 25 }",
      "{ name: 'John', age: undefined }",
      "Error"
    ]
  },
  {
    "q": "Which method creates an array with all object keys?",
    "o": [
      "Object.keys()",
      "Object.values()",
      "Object.entries()",
      "Object.assign()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2, c: 3 };\nconsole.log(Object.entries(obj));",
    "o": [
      "[[\"a\", 1], [\"b\", 2], [\"c\", 3]]",
      "[\"a\", \"b\", \"c\"]",
      "[1, 2, 3]",
      "{ a: 1, b: 2, c: 3 }"
    ]
  },
  {
    "q": "Which array method modifies the original array?",
    "o": [
      "splice()",
      "map()",
      "filter()",
      "concat()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [10, 20, 30, 40];\narr.splice(1, 2);\nconsole.log(arr);",
    "o": [
      "[10, 40]",
      "[10, 20, 30]",
      "[20, 30, 40]",
      "Error"
    ]
  },
  {
    "q": "Which syntax correctly destructures an object?",
    "o": [
      "const { name, age } = obj;",
      "const ( name, age ) = obj;",
      "const name, age = obj;",
      "const obj = { name, age };"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const user = { name: 'Alice', age: 30 };\nconst { name, age } = user;\nconsole.log(name, age);",
    "o": [
      "Alice 30",
      "{ name: 'Alice', age: 30 }",
      "['Alice', 30]",
      "Error"
    ]
  },
  {
    "q": "Which of the following is the correct way to spread an object?",
    "o": [
      "const newObj = { ...oldObj };",
      "const newObj = oldObj...;",
      "const newObj = { oldObj };",
      "const newObj = spread(oldObj);"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst newArr = [...arr, 4, 5];\nconsole.log(newArr);",
    "o": [
      "[1, 2, 3, 4, 5]",
      "[[1, 2, 3], 4, 5]",
      "[1, 2, 3]",
      "Error"
    ]
  },
  {
    "q": "Which method checks if at least one element in an array meets a condition?",
    "o": [
      "some()",
      "every()",
      "find()",
      "filter()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = [2, 4, 6, 8];\nconsole.log(arr.some(num => num > 5));",
    "o": [
      "true",
      "false",
      "[6, 8]",
      "Error"
    ]
  },
  {
    "q": "Which method returns a shallow copy of a portion of an array?",
    "o": [
      "slice()",
      "splice()",
      "split()",
      "copyWithin()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = ['a', 'b', 'c', 'd'];\nconsole.log(arr.slice(1, 3));",
    "o": [
      "[\"b\", \"c\"]",
      "[\"a\", \"b\", \"c\"]",
      "[\"c\", \"d\"]",
      "Error"
    ]
  },
  {
    "q": "Which method is used to convert an array into a string?",
    "o": [
      "join()",
      "toString()",
      "concat()",
      "map()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = ['red', 'green', 'blue'];\nconsole.log(arr.join('-'));",
    "o": [
      "\"red-green-blue\"",
      "[\"red\", \"green\", \"blue\"]",
      "\"red, green, blue\"",
      "Error"
    ]
  },
  {
    "q": "Which method returns the index of the first matching element in an array?",
    "o": [
      "indexOf()",
      "findIndex()",
      "includes()",
      "search()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const arr = ['apple', 'banana', 'cherry'];\nconsole.log(arr.indexOf('banana'));",
    "o": [
      "1",
      "0",
      "2",
      "-1"
    ]
  },
  {
    "q": "Which of the following correctly uses array destructuring?",
    "o": [
      "const [first, second] = arr;",
      "const first, second = arr;",
      "const (first, second) = arr;",
      "const arr = { first, second };"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const colors = ['red', 'green', 'blue'];\nconst [first, second] = colors;\nconsole.log(first, second);",
    "o": [
      "red green",
      "[\"red\", \"green\"]",
      "{ first: 'red', second: 'green' }",
      "Error"
    ]
  },
  {
    "q": "Which of the following creates an empty object in JavaScript?",
    "o": [
      "const obj = {};",
      "const obj = [];",
      "const obj = Object.create();",
      "const obj = new Array();"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const person = { name: 'John', age: 30 };\nperson.city = 'New York';\nconsole.log(person);",
    "o": [
      "{ name: 'John', age: 30, city: 'New York' }",
      "{ name: 'John', age: 30 }",
      "Error",
      "['John', 30, 'New York']"
    ]
  },
  {
    "q": "Which method returns an array of an object's values?",
    "o": [
      "Object.values()",
      "Object.keys()",
      "Object.entries()",
      "Object.assign()"
    ]
  },
  {
    "q": "What will be the output of the following JavaScript snippet?",
    "l": "javascript",
    "c": "const obj = { a: 10, b: 20 };\nconsole.log(Object.values(obj));",
    "o": [
      "[10, 20]",
      "[\"a\", \"b\"]",
      "[[\"a\", 10], [\"b\", 20]]",
      "{ a: 10, b: 20 }"
    ]
  },
  {
    "q": "Which of the following is NOT a valid way to create an array?",
    "o": [
      "const arr = {1, 2, 3};",
      "const arr = [1, 2, 3];",
      "const arr = new Array(3);",
      "const arr = Array.of(1, 2, 3);"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3, 4];\nnumbers.push(5);\nconsole.log(numbers);",
    "o": [
      "[1, 2, 3, 4, 5]",
      "[1, 2, 3, 4]",
      "[1, 2, 3]",
      "Error"
    ]
  },
  {
    "q": "Which method removes the last element from an array and returns it?",
    "o": [
      "pop()",
      "shift()",
      "splice()",
      "slice()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [5, 10, 15];\nconst last = arr.pop();\nconsole.log(last, arr);",
    "o": [
      "15 [5, 10]",
      "15 [5, 10, 15]",
      "[5, 10] 15",
      "Error"
    ]
  },
  {
    "q": "Which syntax correctly destructures an array?",
    "o": [
      "const [first, second] = arr;",
      "const (first, second) = arr;",
      "const first, second = arr;",
      "const arr = { first, second };"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const fruits = ['apple', 'banana', 'cherry'];\nconst [first, , third] = fruits;\nconsole.log(first, third);",
    "o": [
      "apple cherry",
      "apple banana",
      "['apple', 'cherry']",
      "Error"
    ]
  },
  {
    "q": "Which method merges two arrays without modifying the original ones?",
    "o": [
      "concat()",
      "push()",
      "splice()",
      "join()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst result = arr1.concat(arr2);\nconsole.log(result);",
    "o": [
      "[1, 2, 3, 4]",
      "[[1, 2], [3, 4]]",
      "[1, 2]",
      "Error"
    ]
  },
  {
    "q": "Which of the following spreads an array into another array?",
    "o": [
      "const newArr = [...oldArr];",
      "const newArr = spread(oldArr);",
      "const newArr = { ...oldArr };",
      "const newArr = [..., oldArr];"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst newArr = [...arr, 4, 5];\nconsole.log(newArr);",
    "o": [
      "[1, 2, 3, 4, 5]",
      "[[1, 2, 3], 4, 5]",
      "[1, 2, 3]",
      "Error"
    ]
  },
  {
    "q": "Which method checks if an object has a property?",
    "o": [
      "hasOwnProperty()",
      "includes()",
      "contains()",
      "checkProperty()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconsole.log(obj.hasOwnProperty('a'));",
    "o": [
      "true",
      "false",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method creates a copy of an object?",
    "o": [
      "Object.assign()",
      "Object.copy()",
      "Object.duplicate()",
      "Object.clone()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj1 = { x: 10 };\nconst obj2 = Object.assign({}, obj1);\nconsole.log(obj2);",
    "o": [
      "{ x: 10 }",
      "{}",
      "{ x: undefined }",
      "Error"
    ]
  },
  {
    "q": "Which method converts an object into an array of key-value pairs?",
    "o": [
      "Object.entries()",
      "Object.keys()",
      "Object.values()",
      "Object.pairs()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconsole.log(Object.entries(obj));",
    "o": [
      "[[\"a\", 1], [\"b\", 2]]",
      "[\"a\", \"b\"]",
      "[1, 2]",
      "{ a: 1, b: 2 }"
    ]
  },
  {
    "q": "Which statement correctly creates an object with a property 'name'?",
    "o": [
      "const person = { name: 'Alice' };",
      "const person = [ name: 'Alice' ];",
      "const person = ( name: 'Alice' );",
      "const person = name: 'Alice';"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2, c: 3 };\ndelete obj.b;\nconsole.log(obj);",
    "o": [
      "{ a: 1, c: 3 }",
      "{ a: 1, b: undefined, c: 3 }",
      "Error",
      "{ a: 1, b: null, c: 3 }"
    ]
  },
  {
    "q": "Which method merges multiple objects into one?",
    "o": [
      "Object.assign()",
      "Object.merge()",
      "Object.combine()",
      "Object.extend()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj1 = { x: 1 };\nconst obj2 = { y: 2 };\nconst obj3 = Object.assign({}, obj1, obj2);\nconsole.log(obj3);",
    "o": [
      "{ x: 1, y: 2 }",
      "[1, 2]",
      "{ x: 1 }",
      "{ y: 2 }"
    ]
  },
  {
    "q": "Which method checks if an array contains a specific value?",
    "o": [
      "includes()",
      "contains()",
      "has()",
      "find()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [10, 20, 30, 40];\nconsole.log(arr.includes(20));",
    "o": [
      "true",
      "false",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which syntax correctly destructures properties from an object?",
    "o": [
      "const { name, age } = person;",
      "const [ name, age ] = person;",
      "const ( name, age ) = person;",
      "const name, age = person;"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const person = { name: 'Alice', age: 25 };\nconst { name } = person;\nconsole.log(name);",
    "o": [
      "Alice",
      "25",
      "{ name: 'Alice' }",
      "Error"
    ]
  },
  {
    "q": "Which method returns the first element in an array that meets a condition?",
    "o": [
      "find()",
      "filter()",
      "map()",
      "indexOf()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [5, 12, 8, 130, 44];\nconst result = numbers.find(num => num > 10);\nconsole.log(result);",
    "o": [
      "12",
      "[12, 130, 44]",
      "5",
      "Error"
    ]
  },
  {
    "q": "Which method creates a new array with only elements that meet a condition?",
    "o": [
      "filter()",
      "map()",
      "find()",
      "reduce()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const words = ['apple', 'banana', 'grape', 'kiwi'];\nconst result = words.filter(word => word.length > 5);\nconsole.log(result);",
    "o": [
      "['banana', 'grape']",
      "['banana', 'grape', 'kiwi']",
      "['apple', 'banana', 'grape', 'kiwi']",
      "Error"
    ]
  },
  {
    "q": "Which method transforms each element of an array?",
    "o": [
      "map()",
      "filter()",
      "reduce()",
      "forEach()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled);",
    "o": [
      "[2, 4, 6]",
      "[1, 2, 3]",
      "2, 4, 6",
      "Error"
    ]
  },
  {
    "q": "Which operator is used for object property spread?",
    "o": [
      "...",
      "->",
      "@",
      "&"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj1 = { a: 1, b: 2 };\nconst obj2 = { ...obj1, c: 3 };\nconsole.log(obj2);",
    "o": [
      "{ a: 1, b: 2, c: 3 }",
      "{ obj1, c: 3 }",
      "{ a: 1, b: 2 }",
      "Error"
    ]
  },
  {
    "q": "Which method flattens a nested array?",
    "o": [
      "flat()",
      "reduce()",
      "join()",
      "concat()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const nestedArr = [1, [2, [3, 4]]];\nconsole.log(nestedArr.flat(2));",
    "o": [
      "[1, 2, 3, 4]",
      "[1, [2, 3, 4]]",
      "[1, [2, [3, 4]]]",
      "Error"
    ]
  },
  {
    "q": "Which method removes the first element from an array and returns it?",
    "o": [
      "shift()",
      "pop()",
      "unshift()",
      "slice()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = ['apple', 'banana', 'cherry'];\nconst first = arr.shift();\nconsole.log(first, arr);",
    "o": [
      "'apple' ['banana', 'cherry']",
      "'banana' ['apple', 'cherry']",
      "['apple', 'banana', 'cherry']",
      "Error"
    ]
  },
  {
    "q": "Which of the following is the correct way to create an empty object?",
    "o": [
      "const obj = {};",
      "const obj = [];",
      "const obj = Object();",
      "const obj = new Array();"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const person = { name: 'John', age: 30 };\nconsole.log(Object.keys(person));",
    "o": [
      "['name', 'age']",
      "['John', 30]",
      "['name', 30]",
      "['John', 'age']"
    ]
  },
  {
    "q": "Which method returns an array of an object's property values?",
    "o": [
      "Object.values()",
      "Object.keys()",
      "Object.entries()",
      "Object.getProperties()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const person = { name: 'Alice', age: 25 };\nconsole.log(Object.entries(person));",
    "o": [
      "[['name', 'Alice'], ['age', 25]]",
      "{ name: 'Alice', age: 25 }",
      "['name', 'Alice', 'age', 25]",
      "[ 'Alice', 25 ]"
    ]
  },
  {
    "q": "Which syntax correctly adds a new property to an object?",
    "o": [
      "person.city = 'New York';",
      "person->city = 'New York';",
      "person(city: 'New York');",
      "person.addProperty('city', 'New York');"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { x: 5 };\nobj.y = 10;\nconsole.log(obj);",
    "o": [
      "{ x: 5, y: 10 }",
      "{ x: 5 }",
      "{ y: 10 }",
      "Error"
    ]
  },
  {
    "q": "Which method checks if an object has a specific property?",
    "o": [
      "hasOwnProperty()",
      "includes()",
      "contains()",
      "checkProperty()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const car = { brand: 'Toyota', model: 'Corolla' };\nconsole.log(car.hasOwnProperty('brand'));",
    "o": [
      "true",
      "false",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which syntax correctly destructures an array?",
    "o": [
      "const [a, b] = arr;",
      "const { a, b } = arr;",
      "const [a: first, b: second] = arr;",
      "const (a, b) = arr;"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [10, 20, 30];\nconst [first, second] = numbers;\nconsole.log(first, second);",
    "o": [
      "10 20",
      "[10, 20]",
      "[10] [20]",
      "Error"
    ]
  },
  {
    "q": "Which method returns a new array without modifying the original array?",
    "o": [
      "slice()",
      "splice()",
      "trim()",
      "remove()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const fruits = ['apple', 'banana', 'cherry'];\nconst newFruits = fruits.slice(1);\nconsole.log(newFruits);",
    "o": [
      "['banana', 'cherry']",
      "['apple', 'banana']",
      "['apple', 'banana', 'cherry']",
      "['apple']"
    ]
  },
  {
    "q": "Which method is used to combine two arrays?",
    "o": [
      "concat()",
      "merge()",
      "combine()",
      "join()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst combined = arr1.concat(arr2);\nconsole.log(combined);",
    "o": [
      "[1, 2, 3, 4]",
      "[1, 2], [3, 4]",
      "[3, 4, 1, 2]",
      "Error"
    ]
  },
  {
    "q": "Which method removes an element from the end of an array?",
    "o": [
      "pop()",
      "shift()",
      "splice()",
      "removeLast()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const colors = ['red', 'green', 'blue'];\nconst lastColor = colors.pop();\nconsole.log(lastColor, colors);",
    "o": [
      "'blue' ['red', 'green']",
      "'red' ['green', 'blue']",
      "'green' ['red', 'blue']",
      "Error"
    ]
  },
  {
    "q": "Which method converts an array into a string?",
    "o": [
      "join()",
      "toString()",
      "concat()",
      "split()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const letters = ['a', 'b', 'c'];\nconsole.log(letters.join('-'));",
    "o": [
      "'a-b-c'",
      "['a', 'b', 'c']",
      "'abc'",
      "Error"
    ]
  },
  {
    "q": "Which method reduces an array to a single value?",
    "o": [
      "reduce()",
      "map()",
      "filter()",
      "collapse()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((acc, num) => acc + num, 0);\nconsole.log(sum);",
    "o": [
      "10",
      "[1, 2, 3, 4]",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following is the correct way to create an array in JavaScript?",
    "o": [
      "const arr = [];",
      "const arr = {};",
      "const arr = new Object();",
      "const arr = array();"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const user = { name: 'John', age: 25 };\ndelete user.age;\nconsole.log(user);",
    "o": [
      "{ name: 'John' }",
      "{ name: 'John', age: null }",
      "{ name: 'John', age: 25 }",
      "Error"
    ]
  },
  {
    "q": "Which method returns an array containing all properties of an object?",
    "o": [
      "Object.keys()",
      "Object.values()",
      "Object.entries()",
      "Object.getProperties()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2, c: 3 };\nconsole.log(Object.values(obj));",
    "o": [
      "[1, 2, 3]",
      "['a', 'b', 'c']",
      "[['a', 1], ['b', 2], ['c', 3]]",
      "undefined"
    ]
  },
  {
    "q": "Which syntax correctly destructures an object?",
    "o": [
      "const { name, age } = person;",
      "const ( name, age ) = person;",
      "const [ name, age ] = person;",
      "const person = { name, age };"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2, c: 3 };\nconst { a, c } = obj;\nconsole.log(a, c);",
    "o": [
      "1 3",
      "1 2",
      "undefined 3",
      "Error"
    ]
  },
  {
    "q": "Which method is used to create a shallow copy of an object?",
    "o": [
      "Object.assign()",
      "Object.clone()",
      "Object.copy()",
      "Object.duplicate()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj1 = { x: 10, y: 20 };\nconst obj2 = Object.assign({}, obj1);\nobj2.x = 30;\nconsole.log(obj1.x, obj2.x);",
    "o": [
      "10 30",
      "30 30",
      "10 10",
      "undefined 30"
    ]
  },
  {
    "q": "Which method merges two arrays without modifying them?",
    "o": [
      "concat()",
      "push()",
      "splice()",
      "merge()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst arr3 = [...arr1, ...arr2];\nconsole.log(arr3);",
    "o": [
      "[1, 2, 3, 4]",
      "[[1, 2], [3, 4]]",
      "[1, 2] [3, 4]",
      "Error"
    ]
  },
  {
    "q": "Which method removes an element from the beginning of an array?",
    "o": [
      "shift()",
      "pop()",
      "splice()",
      "removeFirst()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [5, 10, 15];\nnumbers.shift();\nconsole.log(numbers);",
    "o": [
      "[10, 15]",
      "[5, 10]",
      "[5, 10, 15]",
      "Error"
    ]
  },
  {
    "q": "Which method creates a new array by applying a function to each element?",
    "o": [
      "map()",
      "filter()",
      "reduce()",
      "forEach()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const nums = [1, 2, 3];\nconst doubled = nums.map(n => n * 2);\nconsole.log(doubled);",
    "o": [
      "[2, 4, 6]",
      "[1, 2, 3]",
      "[[2], [4], [6]]",
      "Error"
    ]
  },
  {
    "q": "Which method removes elements from an array based on a condition?",
    "o": [
      "filter()",
      "map()",
      "reduce()",
      "splice()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3, 4, 5];\nconst evens = numbers.filter(n => n % 2 === 0);\nconsole.log(evens);",
    "o": [
      "[2, 4]",
      "[1, 3, 5]",
      "[[2], [4]]",
      "Error"
    ]
  },
  {
    "q": "Which method adds one or more elements to the end of an array?",
    "o": [
      "push()",
      "unshift()",
      "splice()",
      "append()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const fruits = ['apple', 'banana'];\nfruits.push('cherry');\nconsole.log(fruits);",
    "o": [
      "['apple', 'banana', 'cherry']",
      "['apple', 'cherry']",
      "['banana', 'cherry']",
      "Error"
    ]
  },
  {
    "q": "Which method checks if every element in an array passes a condition?",
    "o": [
      "every()",
      "some()",
      "filter()",
      "includes()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [10, 20, 30];\nconst allAboveFive = numbers.every(n => n > 5);\nconsole.log(allAboveFive);",
    "o": [
      "true",
      "false",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following is the correct way to create an object in JavaScript?",
    "o": [
      "const obj = {};",
      "const obj = [];",
      "const obj = new Array();",
      "const obj = Object[];"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const person = { name: 'Alice', age: 30 };\nconsole.log(Object.keys(person));",
    "o": [
      "['name', 'age']",
      "['Alice', 30]",
      "[['name', 'Alice'], ['age', 30]]",
      "undefined"
    ]
  },
  {
    "q": "Which method returns an array containing an object's values?",
    "o": [
      "Object.values()",
      "Object.keys()",
      "Object.entries()",
      "Object.getValues()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4];\narr.splice(1, 2);\nconsole.log(arr);",
    "o": [
      "[1, 4]",
      "[1, 2, 3, 4]",
      "[2, 3]",
      "[1, 3, 4]"
    ]
  },
  {
    "q": "Which syntax correctly destructures an array?",
    "o": [
      "const [a, b] = [10, 20];",
      "const {a, b} = [10, 20];",
      "const a = [10, 20]; const b = a[1];",
      "const (a, b) = [10, 20];"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { x: 5, y: 10 };\nconst { x, y } = obj;\nconsole.log(x, y);",
    "o": [
      "5 10",
      "{x: 5, y: 10}",
      "[5, 10]",
      "undefined 10"
    ]
  },
  {
    "q": "Which method is used to merge multiple objects into one?",
    "o": [
      "Object.assign()",
      "Object.merge()",
      "Object.combine()",
      "Object.concat()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj1 = { a: 1, b: 2 };\nconst obj2 = { b: 3, c: 4 };\nconst merged = Object.assign({}, obj1, obj2);\nconsole.log(merged);",
    "o": [
      "{ a: 1, b: 3, c: 4 }",
      "{ a: 1, b: 2, c: 4 }",
      "{ a: 1, b: [2, 3], c: 4 }",
      "Error"
    ]
  },
  {
    "q": "Which method is used to check if an array contains a specific element?",
    "o": [
      "includes()",
      "indexOf()",
      "find()",
      "contains()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [10, 20, 30];\nconsole.log(numbers.includes(20));",
    "o": [
      "true",
      "false",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method returns a new array with elements that satisfy a condition?",
    "o": [
      "filter()",
      "map()",
      "reduce()",
      "every()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const nums = [1, 2, 3, 4, 5];\nconst greaterThanTwo = nums.filter(n => n > 2);\nconsole.log(greaterThanTwo);",
    "o": [
      "[3, 4, 5]",
      "[1, 2, 3]",
      "[2, 3, 4]",
      "Error"
    ]
  },
  {
    "q": "Which method returns a new array by applying a function to each element?",
    "o": [
      "map()",
      "filter()",
      "reduce()",
      "forEach()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3];\nconst squared = numbers.map(n => n * n);\nconsole.log(squared);",
    "o": [
      "[1, 4, 9]",
      "[1, 2, 3]",
      "[1, 2, 3, 4]",
      "Error"
    ]
  },
  {
    "q": "Which method finds the first element that matches a condition?",
    "o": [
      "find()",
      "filter()",
      "map()",
      "every()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [5, 10, 15, 20];\nconst firstEven = numbers.find(n => n % 2 === 0);\nconsole.log(firstEven);",
    "o": [
      "10",
      "[10, 20]",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method combines two or more arrays?",
    "o": [
      "concat()",
      "push()",
      "splice()",
      "join()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst merged = arr1.concat(arr2);\nconsole.log(merged);",
    "o": [
      "[1, 2, 3, 4]",
      "[[1, 2], [3, 4]]",
      "[1, 2] [3, 4]",
      "Error"
    ]
  },
  {
    "q": "Which method checks if at least one array element passes a condition?",
    "o": [
      "some()",
      "every()",
      "filter()",
      "map()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [3, 7, 11, 20];\nconst hasEven = numbers.some(n => n % 2 === 0);\nconsole.log(hasEven);",
    "o": [
      "true",
      "false",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method converts an object's properties into an array of key-value pairs?",
    "o": [
      "Object.entries()",
      "Object.values()",
      "Object.keys()",
      "Object.pairs()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const user = { id: 1, name: 'John', active: true };\nconsole.log(Object.values(user));",
    "o": [
      "[1, 'John', true]",
      "['id', 'name', 'active']",
      "[['id', 1], ['name', 'John'], ['active', true]]",
      "undefined"
    ]
  },
  {
    "q": "Which method checks if an object has a specific property?",
    "o": [
      "hasOwnProperty()",
      "contains()",
      "includes()",
      "exists()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { x: 10, y: 20 };\nconsole.log(obj.hasOwnProperty('x'));",
    "o": [
      "true",
      "false",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which array method executes a function once for each element?",
    "o": [
      "forEach()",
      "map()",
      "filter()",
      "reduce()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const nums = [1, 2, 3];\nnums.forEach(n => console.log(n * 2));",
    "o": [
      "2 4 6",
      "[2, 4, 6]",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method removes the last element from an array?",
    "o": [
      "pop()",
      "shift()",
      "splice()",
      "slice()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr.pop();\nconsole.log(arr);",
    "o": [
      "[1, 2]",
      "[1, 2, 3]",
      "[2, 3]",
      "undefined"
    ]
  },
  {
    "q": "Which method removes the first element from an array?",
    "o": [
      "shift()",
      "pop()",
      "splice()",
      "slice()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = ['a', 'b', 'c'];\narr.shift();\nconsole.log(arr);",
    "o": [
      "['b', 'c']",
      "['a', 'b', 'c']",
      "['c']",
      "undefined"
    ]
  },
  {
    "q": "Which method combines all elements of an array into a single string?",
    "o": [
      "join()",
      "concat()",
      "toString()",
      "merge()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const fruits = ['Apple', 'Banana', 'Cherry'];\nconsole.log(fruits.join('-'));",
    "o": [
      "'Apple-Banana-Cherry'",
      "['Apple', 'Banana', 'Cherry']",
      "'Apple Banana Cherry'",
      "Error"
    ]
  },
  {
    "q": "Which method creates a shallow copy of an array?",
    "o": [
      "slice()",
      "splice()",
      "copy()",
      "clone()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4];\nconst copy = arr.slice(1, 3);\nconsole.log(copy);",
    "o": [
      "[2, 3]",
      "[1, 2, 3]",
      "[3, 4]",
      "[1, 3]"
    ]
  },
  {
    "q": "Which method adds elements to the beginning of an array?",
    "o": [
      "unshift()",
      "push()",
      "concat()",
      "splice()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [2, 3, 4];\narr.unshift(1);\nconsole.log(arr);",
    "o": [
      "[1, 2, 3, 4]",
      "[2, 3, 4, 1]",
      "[1, [2, 3, 4]]",
      "Error"
    ]
  },
  {
    "q": "Which method returns the index of the first occurrence of an element in an array?",
    "o": [
      "indexOf()",
      "find()",
      "filter()",
      "search()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const colors = ['red', 'blue', 'green', 'blue'];\nconsole.log(colors.indexOf('blue'));",
    "o": [
      "1",
      "2",
      "[1, 3]",
      "undefined"
    ]
  },
  {
    "q": "Which method reverses the elements in an array?",
    "o": [
      "reverse()",
      "sort()",
      "flip()",
      "backwards()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const nums = [1, 2, 3, 4];\nnums.reverse();\nconsole.log(nums);",
    "o": [
      "[4, 3, 2, 1]",
      "[1, 2, 3, 4]",
      "[1, 3, 2, 4]",
      "Error"
    ]
  },
  {
    "q": "Which syntax correctly creates an empty object in JavaScript?",
    "o": [
      "{}",
      "new Object[]",
      "[]",
      "Object.create()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { name: 'Alice', age: 25 };\nconsole.log(Object.keys(obj));",
    "o": [
      "['name', 'age']",
      "['Alice', 25]",
      "[['name', 'Alice'], ['age', 25]]",
      "undefined"
    ]
  },
  {
    "q": "Which method creates a new array by applying a function to each element?",
    "o": [
      "map()",
      "forEach()",
      "filter()",
      "reduce()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3, 4];\nconst doubled = numbers.map(n => n * 2);\nconsole.log(doubled);",
    "o": [
      "[2, 4, 6, 8]",
      "[1, 2, 3, 4]",
      "[[2], [4], [6], [8]]",
      "undefined"
    ]
  },
  {
    "q": "Which syntax correctly creates an array in JavaScript?",
    "o": [
      "[1, 2, 3]",
      "new Array(1, 2, 3)",
      "Array{1, 2, 3}",
      "createArray(1, 2, 3)"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconsole.log(arr.length);",
    "o": [
      "3",
      "2",
      "4",
      "undefined"
    ]
  },
  {
    "q": "Which method removes elements from an array and can also insert new ones?",
    "o": [
      "splice()",
      "slice()",
      "pop()",
      "shift()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4, 5];\narr.splice(1, 2);\nconsole.log(arr);",
    "o": [
      "[1, 4, 5]",
      "[1, 2, 3]",
      "[3, 4, 5]",
      "[1, 2, 4, 5]"
    ]
  },
  {
    "q": "Which method checks if at least one element in an array meets a condition?",
    "o": [
      "some()",
      "every()",
      "filter()",
      "find()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const nums = [1, 3, 5, 7];\nconsole.log(nums.some(n => n % 2 === 0));",
    "o": [
      "false",
      "true",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method extracts properties from an object into variables?",
    "o": [
      "Destructuring assignment",
      "Object.assign()",
      "Object.create()",
      "objectExtract()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const person = { name: 'Alice', age: 25 };\nconst { name, age } = person;\nconsole.log(name, age);",
    "o": [
      "'Alice', 25",
      "{ name: 'Alice', age: 25 }",
      "'name', 'age'",
      "undefined"
    ]
  },
  {
    "q": "Which method merges two arrays into one?",
    "o": [
      "concat()",
      "merge()",
      "join()",
      "combine()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconsole.log(arr1.concat(arr2));",
    "o": [
      "[1, 2, 3, 4]",
      "[[1, 2], [3, 4]]",
      "[1, 2][3, 4]",
      "[3, 4, 1, 2]"
    ]
  },
  {
    "q": "Which method returns a copy of an array without modifying the original?",
    "o": [
      "slice()",
      "splice()",
      "trim()",
      "filter()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4, 5];\nconst newArr = arr.slice(1, 4);\nconsole.log(newArr);",
    "o": [
      "[2, 3, 4]",
      "[1, 2, 3]",
      "[3, 4, 5]",
      "[1, 3, 4]"
    ]
  },
  {
    "q": "Which method finds the first element that satisfies a condition in an array?",
    "o": [
      "find()",
      "filter()",
      "map()",
      "reduce()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const nums = [10, 20, 30, 40];\nconsole.log(nums.find(n => n > 25));",
    "o": [
      "30",
      "[30, 40]",
      "[10, 20, 30]",
      "undefined"
    ]
  },
  {
    "q": "Which of the following is the correct way to spread an array?",
    "o": [
      "[...array]",
      "spread(array)",
      "array.spread()",
      "copy(array)"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr1 = [1, 2];\nconst arr2 = [...arr1, 3, 4];\nconsole.log(arr2);",
    "o": [
      "[1, 2, 3, 4]",
      "[[1, 2], 3, 4]",
      "[1, [2, 3, 4]]",
      "Error"
    ]
  },
  {
    "q": "Which of the following is the correct way to create an object with properties in JavaScript?",
    "o": [
      "{ name: 'John', age: 30 }",
      "new Object[name: 'John', age: 30]",
      "Object.create(name: 'John', age: 30)",
      "createObject({ name: 'John', age: 30 })"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2, c: 3 };\nconsole.log(Object.values(obj));",
    "o": [
      "[1, 2, 3]",
      "['a', 'b', 'c']",
      "[['a', 1], ['b', 2], ['c', 3]]",
      "undefined"
    ]
  },
  {
    "q": "Which method checks if a property exists in an object?",
    "o": [
      "hasOwnProperty()",
      "includes()",
      "find()",
      "checkProperty()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { x: 10, y: 20 };\nconsole.log('x' in obj);",
    "o": [
      "true",
      "false",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following is the correct way to add a new property to an object?",
    "o": [
      "obj.newKey = 'value';",
      "addProperty(obj, 'newKey', 'value');",
      "obj.add('newKey', 'value');",
      "insert(obj, 'newKey', 'value');"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [10, 20, 30, 40];\nconsole.log(arr.indexOf(30));",
    "o": [
      "2",
      "3",
      "30",
      "-1"
    ]
  },
  {
    "q": "Which method returns a shallow copy of an array?",
    "o": [
      "slice()",
      "splice()",
      "filter()",
      "map()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const nums = [1, 2, 3, 4, 5];\nconst part = nums.slice(1, 4);\nconsole.log(part);",
    "o": [
      "[2, 3, 4]",
      "[1, 2, 3]",
      "[3, 4, 5]",
      "[1, 3, 4]"
    ]
  },
  {
    "q": "Which array method executes a function on each element without modifying the original array?",
    "o": [
      "forEach()",
      "map()",
      "reduce()",
      "filter()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [5, 10, 15];\narr.forEach(num => console.log(num * 2));",
    "o": [
      "10\n20\n30",
      "[10, 20, 30]",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which syntax correctly uses destructuring to extract values from an object?",
    "o": [
      "const { name, age } = person;",
      "const [ name, age ] = person;",
      "const name = person{name};",
      "person => { name, age }"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 5, b: 10, c: 15 };\nconst { a, b } = obj;\nconsole.log(a, b);",
    "o": [
      "5 10",
      "{ a: 5, b: 10 }",
      "[5, 10]",
      "undefined"
    ]
  },
  {
    "q": "Which method merges two objects into one?",
    "o": [
      "Object.assign()",
      "mergeObjects()",
      "Object.combine()",
      "spreadMerge()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj1 = { x: 1, y: 2 };\nconst obj2 = { y: 10, z: 3 };\nconst newObj = { ...obj1, ...obj2 };\nconsole.log(newObj);",
    "o": [
      "{ x: 1, y: 10, z: 3 }",
      "{ x: 1, y: 2, y: 10, z: 3 }",
      "{ x: 1, y: 2, z: 3 }",
      "Error"
    ]
  },
  {
    "q": "Which array method combines all elements into a single value?",
    "o": [
      "reduce()",
      "concat()",
      "map()",
      "join()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((acc, num) => acc + num, 0);\nconsole.log(sum);",
    "o": [
      "10",
      "[1, 2, 3, 4]",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which of the following is the correct way to use the spread operator in an array?",
    "o": [
      "[...arr1, ...arr2]",
      "spread(arr1, arr2)",
      "arr1.spread(arr2)",
      "combineArrays([...arr1, arr2])"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr1 = [1, 2];\nconst arr2 = [...arr1, 3, 4];\nconsole.log(arr2);",
    "o": [
      "[1, 2, 3, 4]",
      "[[1, 2], 3, 4]",
      "[1, [2, 3, 4]]",
      "Error"
    ]
  },
  {
    "q": "Which of the following methods returns the last element of an array and removes it?",
    "o": [
      "pop()",
      "shift()",
      "slice()",
      "splice()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const items = ['apple', 'banana', 'cherry'];\nconsole.log(items.pop());\nconsole.log(items);",
    "o": [
      "'cherry'\n['apple', 'banana']",
      "['apple', 'banana']\n'cherry'",
      "['apple', 'banana', 'cherry']",
      "Error"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconst key = 'b';\nconsole.log(obj[key]);",
    "o": [
      "2",
      "'b'",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method creates an array from an object’s keys?",
    "o": [
      "Object.keys()",
      "Object.entries()",
      "Object.values()",
      "Object.extractKeys()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\ndelete obj.a;\nconsole.log(obj);",
    "o": [
      "{ b: 2 }",
      "{ a: undefined, b: 2 }",
      "{ a: null, b: 2 }",
      "{ a: 1, b: 2 }"
    ]
  },
  {
    "q": "How can you freeze an object so its properties cannot be changed?",
    "o": [
      "Object.freeze(obj)",
      "Object.lock(obj)",
      "obj.preventEdit()",
      "Object.static(obj)"
    ]
  },
  {
    "q": "What does Object.seal() do?",
    "o": [
      "Prevents adding or removing properties but allows modifying existing ones",
      "Freezes the object completely",
      "Allows adding new properties but not removing them",
      "Creates a shallow copy of the object"
    ]
  },
  {
    "q": "Which of the following is the correct way to merge two objects in JavaScript?",
    "o": [
      "const merged = { ...obj1, ...obj2 };",
      "const merged = merge(obj1, obj2);",
      "const merged = obj1 + obj2;",
      "const merged = Object.combine(obj1, obj2);"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { x: 5, y: 10, z: 15 };\nconst { y, ...rest } = obj;\nconsole.log(rest);",
    "o": [
      "{ x: 5, z: 15 }",
      "{ y: 10, z: 15 }",
      "{ x: 5, y: undefined, z: 15 }",
      "Error"
    ]
  },
  {
    "q": "Which array method modifies the original array by adding or removing elements?",
    "o": [
      "splice()",
      "slice()",
      "map()",
      "filter()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = ['a', 'b', 'c'];\narr.splice(1, 1);\nconsole.log(arr);",
    "o": [
      "['a', 'c']",
      "['a', 'b', 'c']",
      "['b', 'c']",
      "['a']"
    ]
  },
  {
    "q": "Which method creates a new array with elements that pass a test function?",
    "o": [
      "filter()",
      "map()",
      "reduce()",
      "every()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [5, 10, 15, 20];\nconst filtered = numbers.filter(num => num > 10);\nconsole.log(filtered);",
    "o": [
      "[15, 20]",
      "[10, 15, 20]",
      "[5, 10, 15, 20]",
      "[5, 10]"
    ]
  },
  {
    "q": "Which array method checks if at least one element satisfies a condition?",
    "o": [
      "some()",
      "every()",
      "includes()",
      "find()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [3, 6, 9];\nconsole.log(arr.some(num => num > 5));",
    "o": [
      "true",
      "false",
      "[6, 9]",
      "undefined"
    ]
  },
  {
    "q": "Which array method returns the first element that satisfies a condition?",
    "o": [
      "find()",
      "filter()",
      "map()",
      "some()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4];\nconst found = arr.find(num => num % 2 === 0);\nconsole.log(found);",
    "o": [
      "2",
      "4",
      "[2, 4]",
      "undefined"
    ]
  },
  {
    "q": "What is the purpose of the map() method in JavaScript?",
    "o": [
      "Creates a new array by applying a function to each element",
      "Modifies the original array by applying a function",
      "Returns a single value based on all elements",
      "Checks if all elements pass a condition"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const nums = [1, 2, 3];\nconst doubled = nums.map(n => n * 2);\nconsole.log(doubled);",
    "o": [
      "[2, 4, 6]",
      "[1, 2, 3]",
      "[[2], [4], [6]]",
      "undefined"
    ]
  },
  {
    "q": "Which method sorts an array in place?",
    "o": [
      "sort()",
      "sorted()",
      "order()",
      "arrange()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [3, 1, 4, 2];\nnumbers.sort();\nconsole.log(numbers);",
    "o": [
      "[1, 2, 3, 4]",
      "[3, 1, 4, 2]",
      "[4, 3, 2, 1]",
      "[1, 10, 2, 3, 4]"
    ]
  },
  {
    "q": "Which method removes the first element of an array and returns it?",
    "o": [
      "shift()",
      "pop()",
      "slice()",
      "splice()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const fruits = ['apple', 'banana', 'cherry'];\nconsole.log(fruits.shift());\nconsole.log(fruits);",
    "o": [
      "'apple'\n['banana', 'cherry']",
      "'banana'\n['apple', 'cherry']",
      "'cherry'\n['apple', 'banana']",
      "['apple', 'banana', 'cherry']"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 5 };\nObject.defineProperty(obj, 'b', { value: 10, writable: false });\nobj.b = 20;\nconsole.log(obj.b);",
    "o": [
      "10",
      "20",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method checks if an object has a specific property?",
    "o": [
      "obj.hasOwnProperty('key')",
      "'key' in obj",
      "Object.hasOwn(obj, 'key')",
      "All of the above"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconst obj2 = Object.assign(obj, { b: 5, c: 3 });\nconsole.log(obj, obj2);",
    "o": [
      "{ a: 1, b: 5, c: 3 } { a: 1, b: 5, c: 3 }",
      "{ a: 1, b: 2 } { a: 1, b: 5, c: 3 }",
      "{ a: 1, b: 2, c: 3 } { a: 1, b: 5, c: 3 }",
      "Error"
    ]
  },
  {
    "q": "Which method prevents adding new properties to an object but allows modification of existing ones?",
    "o": [
      "Object.preventExtensions()",
      "Object.freeze()",
      "Object.seal()",
      "Object.lock()"
    ]
  },
  {
    "q": "How can you deeply clone an object in JavaScript?",
    "o": [
      "JSON.parse(JSON.stringify(obj))",
      "Object.assign({}, obj)",
      "const clone = { ...obj }",
      "obj.clone()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr[10] = 4;\nconsole.log(arr.length);",
    "o": [
      "11",
      "4",
      "10",
      "3"
    ]
  },
  {
    "q": "Which array method removes the last element and returns it?",
    "o": [
      "pop()",
      "push()",
      "shift()",
      "splice()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = ['a', 'b', 'c'];\narr.push('d');\nconsole.log(arr);",
    "o": [
      "['a', 'b', 'c', 'd']",
      "['d', 'a', 'b', 'c']",
      "['a', 'b', 'c']",
      "['a', 'b', 'c', ['d']]"
    ]
  },
  {
    "q": "Which array method reverses the elements in place?",
    "o": [
      "reverse()",
      "sort()",
      "flip()",
      "swap()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3, 4];\nconst newArr = numbers.map(num => num * 2);\nconsole.log(newArr);",
    "o": [
      "[2, 4, 6, 8]",
      "[1, 2, 3, 4]",
      "[[2], [4], [6], [8]]",
      "undefined"
    ]
  },
  {
    "q": "Which array method returns a single accumulated value?",
    "o": [
      "reduce()",
      "map()",
      "filter()",
      "forEach()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((acc, num) => acc + num, 0);\nconsole.log(sum);",
    "o": [
      "10",
      "[1, 2, 3, 4]",
      "undefined",
      "1"
    ]
  },
  {
    "q": "Which of the following statements correctly checks if all elements in an array pass a test function?",
    "o": [
      "arr.every(callback)",
      "arr.all(callback)",
      "arr.some(callback)",
      "arr.test(callback)"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [3, 6, 9];\nconsole.log(arr.every(num => num > 2));",
    "o": [
      "true",
      "false",
      "[6, 9]",
      "undefined"
    ]
  },
  {
    "q": "Which array method finds the index of the first occurrence of an element?",
    "o": [
      "indexOf()",
      "findIndex()",
      "find()",
      "search()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = ['a', 'b', 'c', 'b'];\nconsole.log(arr.indexOf('b'));",
    "o": [
      "1",
      "2",
      "3",
      "-1"
    ]
  },
  {
    "q": "Which method is best suited to find the index of an element based on a condition?",
    "o": [
      "findIndex()",
      "indexOf()",
      "filter()",
      "map()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [5, 10, 15, 20];\nconsole.log(arr.findIndex(num => num > 10));",
    "o": [
      "2",
      "1",
      "3",
      "-1"
    ]
  },
  {
    "q": "Which array method removes and returns the first element?",
    "o": [
      "shift()",
      "pop()",
      "slice()",
      "splice()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const fruits = ['apple', 'banana', 'cherry'];\nconsole.log(fruits.shift());\nconsole.log(fruits);",
    "o": [
      "'apple'\n['banana', 'cherry']",
      "'banana'\n['apple', 'cherry']",
      "'cherry'\n['apple', 'banana']",
      "['apple', 'banana', 'cherry']"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 10 };\nconst obj2 = { b: 20 };\nconst merged = { ...obj, ...obj2, a: 30 };\nconsole.log(merged);",
    "o": [
      "{ a: 30, b: 20 }",
      "{ a: 10, b: 20 }",
      "{ b: 20, a: 10 }",
      "Error"
    ]
  },
  {
    "q": "Which method creates an object with a null prototype?",
    "o": [
      "Object.create(null)",
      "Object.setPrototype(null)",
      "Object.assign({}, null)",
      "new Object(null)"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: { c: 2 } };\nconst copy = Object.assign({}, obj);\ncopy.b.c = 5;\nconsole.log(obj.b.c);",
    "o": [
      "5",
      "2",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method is best for deeply freezing an object?",
    "o": [
      "A recursive function using Object.freeze()",
      "Object.seal()",
      "Object.preventExtensions()",
      "JSON.parse(JSON.stringify(obj))"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = { a: 10 };\nObject.freeze(obj);\nobj.a = 20;\ndelete obj.a;\nconsole.log(obj);",
    "o": [
      "{ a: 10 }",
      "{}",
      "{ a: 20 }",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements is true about JavaScript arrays?",
    "o": [
      "Arrays in JavaScript are dynamic and can hold multiple data types.",
      "Arrays in JavaScript are implemented as linked lists.",
      "JavaScript arrays have a fixed length.",
      "Arrays in JavaScript can only store primitive values."
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\ndelete arr[1];\nconsole.log(arr.length);",
    "o": [
      "3",
      "2",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method returns a new array with only elements that pass a test?",
    "o": [
      "filter()",
      "map()",
      "reduce()",
      "forEach()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [5, 10, 15];\nconsole.log(arr.splice(1, 1, 20));\nconsole.log(arr);",
    "o": [
      "[10], [5, 20, 15]",
      "[5], [10, 15, 20]",
      "[5, 10], [15, 20]",
      "Error"
    ]
  },
  {
    "q": "Which method is best for flattening an array of arrays?",
    "o": [
      "flat()",
      "map()",
      "reduce()",
      "filter()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [[1, 2], [3, 4], [5, 6]];\nconsole.log(arr.flat());",
    "o": [
      "[1, 2, 3, 4, 5, 6]",
      "[[1, 2], [3, 4], [5, 6]]",
      "[[1], [2], [3], [4], [5], [6]]",
      "Error"
    ]
  },
  {
    "q": "Which array method applies a function to each element and flattens the result?",
    "o": [
      "flatMap()",
      "map()",
      "reduce()",
      "filter()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [2, 4, 6];\nconsole.log(arr.flatMap(num => [num, num * 2]));",
    "o": [
      "[2, 4, 4, 8, 6, 12]",
      "[[2, 4], [4, 8], [6, 12]]",
      "[2, 4], [4, 8], [6, 12]",
      "Error"
    ]
  },
  {
    "q": "Which array method returns the first element that passes a test?",
    "o": [
      "find()",
      "filter()",
      "indexOf()",
      "forEach()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4, 5];\nconsole.log(arr.find(num => num > 2));",
    "o": [
      "3",
      "[3, 4, 5]",
      "undefined",
      "5"
    ]
  },
  {
    "q": "Which array method removes the last element and returns it?",
    "o": [
      "pop()",
      "push()",
      "shift()",
      "splice()"
    ]
  },
  {
    "q": "Which of the following statements about JavaScript objects is true?",
    "o": [
      "Objects in JavaScript are reference types.",
      "Objects in JavaScript are immutable.",
      "JavaScript objects cannot contain functions.",
      "JavaScript objects must have a fixed number of properties."
    ]
  },
  {
    "q": "Which of the following is a valid way to iterate over an object's properties?",
    "o": [
      "for...in loop",
      "forEach()",
      "for...of loop",
      "map()"
    ]
  },
  {
    "q": "Which array method checks if at least one element passes a test?",
    "o": [
      "some()",
      "every()",
      "filter()",
      "includes()"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4];\nconsole.log(arr.some(num => num > 3));",
    "o": [
      "true",
      "false",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "What is the correct way to create an empty object in JavaScript?",
    "o": [
      "let obj = {};",
      "let obj = new Object;",
      "let obj = Object.create();",
      "let obj = [];"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "let arr = [1, 2, 3];\narr.push(4);\nconsole.log(arr.length);",
    "o": [
      "4",
      "3",
      "1",
      "undefined"
    ]
  },
  {
    "q": "Which method is used to merge two or more arrays?",
    "o": [
      "concat()",
      "merge()",
      "join()",
      "combine()"
    ]
  },
  {
    "q": "What does the following destructuring assignment do?",
    "l": "javascript",
    "c": "const {name, age} = person;",
    "o": [
      "Extracts name and age properties from person object",
      "Creates a new object with name and age properties",
      "Merges name and age into the person object",
      "Checks if person has name and age properties"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "let obj = {a: 1, b: 2};\nconsole.log(Object.keys(obj));",
    "o": [
      "['a', 'b']",
      "[1, 2]",
      "{a: 1, b: 2}",
      "['a:1', 'b:2']"
    ]
  },
  {
    "q": "Which method creates a new array with all sub-array elements concatenated?",
    "o": [
      "flat()",
      "join()",
      "concat()",
      "merge()"
    ]
  },
  {
    "q": "What is the result of this array destructuring?",
    "l": "javascript",
    "c": "const [first, , third] = [1, 2, 3, 4];",
    "o": [
      "first = 1, third = 3",
      "first = 1, third = 2",
      "first = 1, third = undefined",
      "first = 1, third = 4"
    ]
  },
  {
    "q": "How do you access the 'age' property in the object 'person'?",
    "o": [
      "person.age or person['age']",
      "person(age)",
      "person->age",
      "person{'age'}"
    ]
  },
  {
    "q": "What does the following code output?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconsole.log(arr.includes(2));",
    "o": [
      "true",
      "false",
      "2",
      "undefined"
    ]
  },
  {
    "q": "Which method removes the last element from an array?",
    "o": [
      "pop()",
      "shift()",
      "removeLast()",
      "slice()"
    ]
  },
  {
    "q": "What is the output of this object destructuring?",
    "l": "javascript",
    "c": "const {x = 10, y = 20} = {x: 5};\nconsole.log(x, y);",
    "o": [
      "5 20",
      "10 20",
      "5 undefined",
      "10 undefined"
    ]
  },
  {
    "q": "Which method creates a new array with elements that pass a test?",
    "o": [
      "filter()",
      "map()",
      "find()",
      "reduce()"
    ]
  },
  {
    "q": "What is the correct way to create an array with three numbers in JavaScript?",
    "o": [
      "let arr = [1, 2, 3];",
      "let arr = (1, 2, 3);",
      "let arr = {1, 2, 3};",
      "let arr = new Array(1 2 3);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "l": "javascript",
    "c": "const obj = {a: 1, b: 2};\nobj.c = 3;\ndelete obj.b;\nconsole.log(Object.keys(obj));",
    "o": [
      "['a', 'c']",
      "['a', 'b']",
      "['a', 'b', 'c']",
      "['c']"
    ]
  },
  {
    "q": "Which method is used to check if an object has a specific property?",
    "o": [
      "hasOwnProperty()",
      "contains()",
      "includes()",
      "exists()"
    ]
  },
  {
    "q": "What does the following destructuring assignment do?",
    "l": "javascript",
    "c": "const [first, ...rest] = [1, 2, 3, 4];",
    "o": [
      "first = 1, rest = [2, 3, 4]",
      "first = [1, 2, 3], rest = 4",
      "first = 1, rest = 2",
      "first = [1], rest = [2, 3, 4]"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const arr = ['a', 'b', 'c'];\nconsole.log(arr.slice(1));",
    "o": [
      "['b', 'c']",
      "['a', 'b']",
      "['a']",
      "['c']"
    ]
  },
  {
    "q": "Which method creates a new array with the results of calling a function on every element?",
    "o": [
      "map()",
      "filter()",
      "forEach()",
      "reduce()"
    ]
  },
  {
    "q": "What is the result of this nested destructuring?",
    "l": "javascript",
    "c": "const {a: {b}} = {a: {b: 5}};\nconsole.log(b);",
    "o": [
      "5",
      "{b: 5}",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "How do you create a shallow copy of an array in JavaScript?",
    "o": [
      "arr.slice() or [...arr]",
      "arr.copy()",
      "arr.clone()",
      "Array.copy(arr)"
    ]
  },
  {
    "q": "What does the following code output?",
    "l": "javascript",
    "c": "const obj = {x: 1, y: 2};\nconst {x: newX} = obj;\nconsole.log(newX);",
    "o": [
      "1",
      "2",
      "{x: 1}",
      "undefined"
    ]
  },
  {
    "q": "Which method converts an array to a string with elements separated by commas?",
    "o": [
      "toString()",
      "join()",
      "stringify()",
      "split()"
    ]
  },
  {
    "q": "What is the output of this array method chain?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 4];\nconsole.log(arr.filter(x => x > 2).map(x => x * 2));",
    "o": [
      "[6, 8]",
      "[3, 4]",
      "[2, 4, 6, 8]",
      "[1, 2, 3, 4]"
    ]
  },
  {
    "q": "What does the following object rest pattern do?",
    "l": "javascript",
    "c": "const {a, ...rest} = {a: 1, b: 2, c: 3};",
    "o": [
      "a = 1, rest = {b: 2, c: 3}",
      "a = {1}, rest = [2, 3]",
      "a = 1, rest = [b: 2, c: 3]",
      "Error"
    ]
  },
  {
    "q": "Which method finds the first element that satisfies a condition?",
    "o": [
      "find()",
      "filter()",
      "search()",
      "first()"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr.reverse();\nconsole.log(arr);",
    "o": [
      "[3, 2, 1]",
      "[1, 2, 3]",
      "[3]", 
      "[1]"
    ]
  },
  {
    "q": "What does this destructuring with default values do?",
    "l": "javascript",
    "c": "const {width = 100, height = 200} = {width: 150};",
    "o": [
      "width = 150, height = 200",
      "width = 100, height = 200",
      "width = 150, height = undefined",
      "Error"
    ]
  },
  {
    "q": "Which syntax creates an object with a computed property name?",
    "o": [
      "const key = 'name'; const obj = { [key]: 'Alice' };",
      "const obj = { 'name': 'Alice' };",
      "const obj = { name = 'Alice' };",
      "const obj = new Object('name', 'Alice');"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const arr = [10, 20, 30];\nconsole.log(arr.at(-1));",
    "o": [
      "30",
      "10",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method checks if an array includes a certain value?",
    "o": [
      "includes()",
      "contains()",
      "has()",
      "find()"
    ]
  },
  {
    "q": "What does this destructuring assignment do?",
    "l": "javascript",
    "c": "const { name: userName } = { name: 'Bob' };",
    "o": [
      "Assigns 'Bob' to a variable named `userName`",
      "Creates a nested object `{ name: 'Bob' }`",
      "Throws an error due to invalid syntax",
      "Assigns 'Bob' to both `name` and `userName`"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconsole.log('a' in obj);",
    "o": [
      "true",
      "false",
      "1",
      "undefined"
    ]
  },
  {
    "q": "Which method removes the first element of an array and returns it?",
    "o": [
      "shift()",
      "pop()",
      "splice(0, 1)",
      "unshift()"
    ]
  },
  {
    "q": "What is the result of this destructuring?",
    "l": "javascript",
    "c": "const [x, y = 5] = [1];\nconsole.log(y);",
    "o": [
      "5",
      "1",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "How do you merge two objects into a new one?",
    "o": [
      "const merged = { ...obj1, ...obj2 };",
      "const merged = obj1 + obj2;",
      "const merged = Object.merge(obj1, obj2);",
      "const merged = [obj1, obj2];"
    ]
  },
  {
    "q": "What does the following code output?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr.forEach(num => num * 2);\nconsole.log(arr);",
    "o": [
      "[1, 2, 3]",
      "[2, 4, 6]",
      "[]",
      "undefined"
    ]
  },
  {
    "q": "Which method converts an object to an array of its values?",
    "o": [
      "Object.values()",
      "Object.keys()",
      "Object.entries()",
      "Array.fromObject()"
    ]
  },
  {
    "q": "What is the output of this nested destructuring?",
    "l": "javascript",
    "c": "const { a: { b: { c } } } = { a: { b: { c: 10 } } };\nconsole.log(c);",
    "o": [
      "10",
      "{ c: 10 }",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method adds elements to the beginning of an array?",
    "o": [
      "unshift()",
      "push()",
      "prepend()",
      "shift()"
    ]
  },
  {
    "q": "What does the following code log?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst [first, ...others] = arr;\nconsole.log(others);",
    "o": [
      "[2, 3]",
      "[1, 2]",
      "[3]",
      "Error"
    ]
  },
  {
    "q": "Which method returns the first index where a given element is found?",
    "o": [
      "indexOf()",
      "findIndex()",
      "search()",
      "locate()"
    ]
  },
  {
    "q": "What is the output of this code?",
    "l": "javascript",
    "c": "const obj = { x: 1, y: 2 };\nconst { x: newX, z = 0 } = obj;\nconsole.log(z);",
    "o": [
      "0",
      "undefined",
      "Error",
      "null"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconst { a: aliasA } = obj;\nconsole.log(aliasA);",
    "o": [
      "1",
      "undefined",
      "{ a: 1 }",
      "Error"
    ]
  },
  {
    "q": "Which method creates a new array with all elements that pass a test implemented by a provided function?",
    "o": [
      "filter()",
      "map()",
      "reduce()",
      "forEach()"
    ]
  },
  {
    "q": "What does the following code output?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst [first, , third] = arr;\nconsole.log(third);",
    "o": [
      "3",
      "1",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "How do you create a deep copy of a nested object in JavaScript?",
    "o": [
      "JSON.parse(JSON.stringify(obj))",
      "Object.assign({}, obj)",
      "{ ...obj }",
      "obj.clone()"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nObject.freeze(obj);\nobj.a = 2;\nconsole.log(obj.a);",
    "o": [
      "1",
      "2",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method executes a reducer function on each element of the array, resulting in a single output value?",
    "o": [
      "reduce()",
      "map()",
      "filter()",
      "forEach()"
    ]
  },
  {
    "q": "What does the following destructuring assignment do?",
    "l": "javascript",
    "c": "const { a, ...rest } = { a: 1, b: 2, c: 3 };",
    "o": [
      "a = 1, rest = { b: 2, c: 3 }",
      "a = { b: 2, c: 3 }, rest = 1",
      "a = 1, rest = [2, 3]",
      "Error"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr.length = 0;\nconsole.log(arr);",
    "o": [
      "[]",
      "[1, 2, 3]",
      "[undefined, undefined, undefined]",
      "Error"
    ]
  },
  {
    "q": "Which method returns the first element in the array that satisfies a provided testing function?",
    "o": [
      "find()",
      "filter()",
      "some()",
      "indexOf()"
    ]
  },
  {
    "q": "What does the following code output?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nconst obj2 = obj;\nobj2.a = 2;\nconsole.log(obj.a);",
    "o": [
      "2",
      "1",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method checks if at least one element in the array passes the test implemented by the provided function?",
    "o": [
      "some()",
      "every()",
      "includes()",
      "find()"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconst newArr = arr.map(num => num * 2);\nconsole.log(newArr);",
    "o": [
      "[2, 4, 6]",
      "[1, 2, 3]",
      "[1, 4, 9]",
      "Error"
    ]
  },
  {
    "q": "What does the following destructuring assignment do?",
    "l": "javascript",
    "c": "const [x, y, z = 3] = [1, 2];",
    "o": [
      "x = 1, y = 2, z = 3",
      "x = 1, y = 2, z = undefined",
      "x = 1, y = 2, z = 0",
      "Error"
    ]
  },
  {
    "q": "Which method returns a new array with all sub-array elements concatenated into it recursively up to the specified depth?",
    "o": [
      "flat()",
      "concat()",
      "join()",
      "reduce()"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconst { a: newA, b: newB } = obj;\nconsole.log(newB);",
    "o": [
      "2",
      "1",
      "{ b: 2 }",
      "Error"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nconst obj2 = Object.create(obj);\nconsole.log(obj2.a);",
    "o": [
      "1",
      "undefined",
      "{}",
      "Error"
    ]
  },
  {
    "q": "Which method returns an array iterator object with key/value pairs for each index?",
    "o": [
      "entries()",
      "keys()",
      "values()",
      "items()"
    ]
  },
  {
    "q": "What does this destructuring assignment do?",
    "l": "javascript",
    "c": "const { a: { b } = { b: 2 } } = {};",
    "o": [
      "b = 2 (fallback to default)",
      "b = undefined",
      "Error due to missing property",
      "Creates a nested object { a: { b: 2 } }"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const arr = [1, 2, , 4];\nconsole.log(arr.length);",
    "o": [
      "4",
      "3",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method creates a new array populated with results of calling a function on every element?",
    "o": [
      "map()",
      "forEach()",
      "reduce()",
      "filter()"
    ]
  },
  {
    "q": "What does this code output?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nconsole.log(Object.getOwnPropertyDescriptor(obj, 'a').value);",
    "o": [
      "1",
      "undefined",
      "{ value: 1 }",
      "Error"
    ]
  },
  {
    "q": "What is the result of this destructuring?",
    "l": "javascript",
    "c": "const [x, ...[y, z]] = [1, 2, 3];",
    "o": [
      "x = 1, y = 2, z = 3",
      "x = 1, y = [2, 3]",
      "Error due to syntax",
      "x = 1, z = 3"
    ]
  },
  {
    "q": "Which method checks if all elements satisfy a condition?",
    "o": [
      "every()",
      "some()",
      "filter()",
      "includes()"
    ]
  },
  {
    "q": "What is the output of this code?",
    "l": "javascript",
    "c": "const arr = [1, 2];\narr[10] = 3;\nconsole.log(arr.length);",
    "o": [
      "11",
      "3",
      "2",
      "Error"
    ]
  },
  {
    "q": "How do you make an object property non-enumerable?",
    "o": [
      "Object.defineProperty(obj, 'prop', { enumerable: false })",
      "obj.prop.enumerable = false",
      "Object.hideProperty(obj, 'prop')",
      "obj.prop = undefined"
    ]
  },
  {
    "q": "What does this code output?",
    "l": "javascript",
    "c": "const { a = 1, b = 2 } = { a: null };\nconsole.log(a, b);",
    "o": [
      "null 2",
      "1 2",
      "undefined 2",
      "Error"
    ]
  },
  {
    "q": "Which method removes/adds elements anywhere in an array?",
    "o": [
      "splice()",
      "slice()",
      "shift()",
      "pop()"
    ]
  },
  {
    "q": "What is the output of this code?",
    "l": "javascript",
    "c": "const obj = {};\nconsole.log(obj?.a?.b ?? 'default');",
    "o": [
      "'default'",
      "undefined",
      "null",
      "Error"
    ]
  },
  {
    "q": "What does this destructuring do?",
    "l": "javascript",
    "c": "const { [1 + 1]: two } = { 2: 'two' };",
    "o": [
      "two = 'two' (computed property name)",
      "Error due to expression in brackets",
      "Creates a property named '1 + 1'",
      "two = undefined"
    ]
  },
  {
    "q": "Which method returns a string representation of an array?",
    "o": [
      "toString()",
      "join()",
      "stringify()",
      "toText()"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nObject.defineProperty(obj, 'b', { value: 2, enumerable: false });\nconsole.log(Object.keys(obj));",
    "o": [
      "['a']",
      "['a', 'b']",
      "[]",
      "Error"
    ]
  },
  {
    "q": "Which method creates a new array with all sub-array elements concatenated recursively up to the specified depth?",
    "o": [
      "flat()",
      "concat()",
      "join()",
      "merge()"
    ]
  },
  {
    "q": "What does the following destructuring assignment do?",
    "l": "javascript",
    "c": "const { a: { b = 2 } = {} } = {};",
    "o": [
      "b = 2 (with nested defaults)",
      "b = undefined",
      "Error due to missing property",
      "Creates an empty object"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const arr = [1, 2];\narr[3] = 4;\nconsole.log(arr[2]);",
    "o": [
      "undefined",
      "null",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which method returns a new array with elements in reverse order?",
    "o": [
      "toReversed()",
      "reverse()",
      "flip()",
      "sort((a, b) => b - a)"
    ]
  },
  {
    "q": "What does this code output?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nconst { a, ...rest } = obj;\nconsole.log(rest);",
    "o": [
      "{}",
      "{ a: 1 }",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "What is the result of this array destructuring?",
    "l": "javascript",
    "c": "const [x = 1, y = x] = [];",
    "o": [
      "x = 1, y = 1",
      "x = undefined, y = undefined",
      "Error due to reference before declaration",
      "x = 1, y = undefined"
    ]
  },
  {
    "q": "Which method creates a new array with a portion of the original array?",
    "o": [
      "slice()",
      "splice()",
      "split()",
      "chunk()"
    ]
  },
  {
    "q": "What is the output of this code?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nObject.preventExtensions(obj);\nobj.b = 2;\nconsole.log(obj.b);",
    "o": [
      "undefined",
      "2",
      "Error",
      "{ a: 1 }"
    ]
  },
  {
    "q": "What does this destructuring assignment do?",
    "l": "javascript",
    "c": "const { a: { b }, c = 3 } = { a: { b: 2 } };",
    "o": [
      "b = 2, c = 3",
      "b = undefined, c = 3",
      "Error due to missing property",
      "b = 2, c = undefined"
    ]
  },
  {
    "q": "Which method returns the last index at which a given element can be found?",
    "o": [
      "lastIndexOf()",
      "findLastIndex()",
      "searchLast()",
      "indexOf() from end"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr.copyWithin(1, 0);\nconsole.log(arr);",
    "o": [
      "[1, 1, 2]",
      "[1, 2, 3]",
      "[2, 3, 1]",
      "Error"
    ]
  },
  {
    "q": "How do you check if an object is the prototype of another object?",
    "o": [
      "Object.prototype.isPrototypeOf()",
      "obj.isPrototype()",
      "Object.isPrototype()",
      "obj instanceof prototype"
    ]
  },
  {
    "q": "What does this code output?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nObject.seal(obj);\nobj.a = 2;\ndelete obj.a;\nconsole.log(obj.a);",
    "o": [
      "2",
      "1",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method creates a new array with all elements that pass the test implemented by the provided function?",
    "o": [
      "filter()",
      "map()",
      "reduce()",
      "find()"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const obj = {};\nObject.defineProperty(obj, 'hidden', { value: 42, enumerable: false });\nconsole.log({...obj});",
    "o": [
      "{}",
      "{hidden: 42}",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which method creates a new array with elements from start to end (exclusive)?",
    "o": [
      "arr.slice(start, end)",
      "arr.splice(start, end)",
      "arr.split(start, end)",
      "arr.cut(start, end)"
    ]
  },
  {
    "q": "What does this destructuring do when the value is null?",
    "l": "javascript",
    "c": "const { a: { b } = {} } = { a: null };",
    "o": [
      "Throws TypeError",
      "b = undefined",
      "b = null",
      "Creates empty object"
    ]
  },
  {
    "q": "What is the output of this sparse array code?",
    "l": "javascript",
    "c": "const arr = [1,,3];\nconsole.log(arr.map(x => x * 2));",
    "o": [
      "[2, empty, 6]",
      "[2, undefined, 6]",
      "[2, NaN, 6]",
      "Error"
    ]
  },
  {
    "q": "Which method creates an array from an array-like object?",
    "o": [
      "Array.from()",
      "Array.of()",
      "Array.create()",
      "Array.new()"
    ]
  },
  {
    "q": "What does this code output?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nObject.preventExtensions(obj);\nconsole.log(Object.isExtensible(obj));",
    "o": [
      "false",
      "true",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "What is the result of this nested destructuring?",
    "l": "javascript",
    "c": "const { a: [x, , y] } = { a: [1, 2, 3] };",
    "o": [
      "x = 1, y = 3",
      "x = 1, y = undefined",
      "Error due to syntax",
      "x = [1], y = [3]"
    ]
  },
  {
    "q": "Which method returns the first index where a predicate is true?",
    "o": [
      "findIndex()",
      "indexOf()",
      "search()",
      "locate()"
    ]
  },
  {
    "q": "What is the output of this Proxy code?",
    "l": "javascript",
    "c": "const target = {};\nconst handler = { get: () => 42 };\nconst proxy = new Proxy(target, handler);\nconsole.log(proxy.anyProperty);",
    "o": [
      "42",
      "undefined",
      "Error",
      "{}"
    ]
  },
  {
    "q": "What does this destructuring with rename do?",
    "l": "javascript",
    "c": "const { a: newName } = { a: 1 };\nconsole.log(newName);",
    "o": [
      "1",
      "undefined",
      "{a: 1}",
      "Error"
    ]
  },
  {
    "q": "Which method creates a new array with all falsey values removed?",
    "o": [
      "arr.filter(Boolean)",
      "arr.compact()",
      "arr.removeFalsey()",
      "arr.clean()"
    ]
  },
  {
    "q": "What is the output of this Symbol property code?",
    "l": "javascript",
    "c": "const sym = Symbol('key');\nconst obj = { [sym]: 42 };\nconsole.log(Object.keys(obj));",
    "o": [
      "[]",
      "['key']",
      "[Symbol(key)]",
      "Error"
    ]
  },
  {
    "q": "What does this array destructuring with default do?",
    "l": "javascript",
    "c": "const [x = 1, y = x] = [undefined, 2];",
    "o": [
      "x = 1, y = 2",
      "x = undefined, y = 2",
      "Error",
      "x = 1, y = 1"
    ]
  },
  {
    "q": "Which method checks if an object exists in another object's prototype chain?",
    "o": [
      "Object.prototype.isPrototypeOf()",
      "Object.hasPrototype()",
      "Object.inChain()",
      "Object.checkPrototype()"
    ]
  },
  {
    "q": "What is the output of this spread operator code?",
    "l": "javascript",
    "c": "const obj1 = { a: 1 };\nconst obj2 = { ...obj1, a: 2 };\nconsole.log(obj2);",
    "o": [
      "{a: 2}",
      "{a: 1, a: 2}",
      "Error due to duplicate key",
      "{...obj1, a: 2}"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconst { a, ...rest } = obj;\nconsole.log(rest);",
    "o": [
      "{ b: 2 }",
      "{ a: 1, b: 2 }",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method is used to merge two or more arrays without modifying the original arrays?",
    "o": [
      "concat()",
      "push()",
      "splice()",
      "merge()"
    ]
  },
  {
    "q": "What does the following destructuring assignment do?",
    "l": "javascript",
    "c": "const [x, y, z = 3] = [1, 2];",
    "o": [
      "x = 1, y = 2, z = 3",
      "x = 1, y = 2, z = undefined",
      "Error due to missing value",
      "x = 1, y = 2, z = null"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr.length = 0;\nconsole.log(arr);",
    "o": [
      "[]",
      "[1, 2, 3]",
      "[undefined, undefined, undefined]",
      "Error"
    ]
  },
  {
    "q": "Which method creates a new array with all elements that pass the test implemented by a provided function?",
    "o": [
      "filter()",
      "map()",
      "reduce()",
      "forEach()"
    ]
  },
  {
    "q": "What does the following code output?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nconst obj2 = obj;\nobj2.a = 2;\nconsole.log(obj.a);",
    "o": [
      "2",
      "1",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "What is the result of this destructuring assignment?",
    "l": "javascript",
    "c": "const { a: { b } } = { a: { b: 5 } };\nconsole.log(b);",
    "o": [
      "5",
      "{ b: 5 }",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method removes the first element from an array and returns it?",
    "o": [
      "shift()",
      "pop()",
      "splice(0, 1)",
      "removeFirst()"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconsole.log(arr.slice(-1));",
    "o": [
      "[3]",
      "[1]",
      "3",
      "Error"
    ]
  },
  {
    "q": "What does the following destructuring assignment do?",
    "l": "javascript",
    "c": "const [first, ...rest] = [1, 2, 3, 4];",
    "o": [
      "first = 1, rest = [2, 3, 4]",
      "first = [1], rest = [2, 3, 4]",
      "first = 1, rest = 2",
      "Error"
    ]
  },
  {
    "q": "Which method checks if an array includes a certain value?",
    "o": [
      "includes()",
      "contains()",
      "has()",
      "find()"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const obj = { a: 1, b: 2 };\nconsole.log('a' in obj);",
    "o": [
      "true",
      "false",
      "1",
      "undefined"
    ]
  },
  {
    "q": "What does the following destructuring assignment do?",
    "l": "javascript",
    "c": "const { a = 10, b = 20 } = { a: 5 };\nconsole.log(a, b);",
    "o": [
      "5, 20",
      "10, 20",
      "5, undefined",
      "Error"
    ]
  },
  {
    "q": "Which method executes a reducer function on each element of the array, resulting in a single output value?",
    "o": [
      "reduce()",
      "map()",
      "filter()",
      "forEach()"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\narr.forEach(num => num * 2);\nconsole.log(arr);",
    "o": [
      "[1, 2, 3]",
      "[2, 4, 6]",
      "[]",
      "undefined"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nObject.defineProperty(obj, 'b', { get: () => 2 });\nconsole.log(obj.b);",
    "o": [
      "2",
      "undefined",
      "Error",
      "{ get: () => 2 }"
    ]
  },
  {
    "q": "Which method creates a new array with all falsey values removed?",
    "o": [
      "arr.filter(Boolean)",
      "arr.compact()",
      "arr.clean()",
      "arr.removeFalsey()"
    ]
  },
  {
    "q": "What does this destructuring do when the value is undefined?",
    "l": "javascript",
    "c": "const { a = 1, b = 2 } = { a: undefined };",
    "o": [
      "a = 1, b = 2",
      "a = undefined, b = 2",
      "Error",
      "a = null, b = 2"
    ]
  },
  {
    "q": "What is the output of this Proxy trap code?",
    "l": "javascript",
    "c": "const target = {};\nconst handler = { get: (target, prop) => prop in target ? target[prop] : 42 };\nconst proxy = new Proxy(target, handler);\nconsole.log(proxy.answer);",
    "o": [
      "42",
      "undefined",
      "Error",
      "{}"
    ]
  },
  {
    "q": "Which method returns a new array with elements from sub-arrays concatenated recursively?",
    "o": [
      "flat()",
      "concat()",
      "join()",
      "merge()"
    ]
  },
  {
    "q": "What does this code output?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nObject.preventExtensions(obj);\nobj.b = 2;\nconsole.log(obj.b);",
    "o": [
      "undefined",
      "2",
      "Error",
      "{ a: 1 }"
    ]
  },
  {
    "q": "What is the result of this nested destructuring?",
    "l": "javascript",
    "c": "const { a: { b: { c } } } = { a: { b: { c: 10 } } };\nconsole.log(c);",
    "o": [
      "10",
      "{ c: 10 }",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method creates an array from an iterable object?",
    "o": [
      "Array.from()",
      "Array.of()",
      "Array.create()",
      "Array.new()"
    ]
  },
  {
    "q": "What is the output of this Symbol-keyed property code?",
    "l": "javascript",
    "c": "const sym = Symbol('key');\nconst obj = { [sym]: 42 };\nconsole.log(obj[sym]);",
    "o": [
      "42",
      "undefined",
      "Symbol(key)",
      "Error"
    ]
  },
  {
    "q": "What does this destructuring with aliasing do?",
    "l": "javascript",
    "c": "const { a: alias } = { a: 1 };\nconsole.log(alias);",
    "o": [
      "1",
      "undefined",
      "{ a: 1 }",
      "Error"
    ]
  },
  {
    "q": "Which method returns the last index at which a given element can be found?",
    "o": [
      "lastIndexOf()",
      "findLastIndex()",
      "searchLast()",
      "indexOf() from end"
    ]
  },
  {
    "q": "What is the output of this array initialization?",
    "l": "javascript",
    "c": "const arr = Array(3).fill({});\narr[0].prop = 1;\nconsole.log(arr[2].prop);",
    "o": [
      "1",
      "undefined",
      "null",
      "Error"
    ]
  },
  {
    "q": "What does this code demonstrate about object references?",
    "l": "javascript",
    "c": "const a = {};\nconst b = a;\nb.prop = 1;\nconsole.log(a.prop);",
    "o": [
      "1",
      "undefined",
      "null",
      "Error"
    ]
  },
  {
    "q": "Which method checks if all elements satisfy a condition?",
    "o": [
      "every()",
      "some()",
      "filter()",
      "includes()"
    ]
  },
  {
    "q": "What is the output of this destructuring with default values?",
    "l": "javascript",
    "c": "const [x = 1, y = x] = [];\nconsole.log(x, y);",
    "o": [
      "1, 1",
      "undefined, undefined",
      "Error",
      "1, undefined"
    ]
  },
  {
    "q": "What is the output of the following code using Object.groupBy?",
    "l": "javascript",
    "c": "const items = [{type: 'fruit', name: 'apple'}, {type: 'vegetable', name: 'carrot'}];\nconsole.log(Object.groupBy(items, ({type}) => type));",
    "o": [
      "{fruit: [{...}], vegetable: [{...}]}",
      "['fruit', 'vegetable']",
      "Error: groupBy is not a function",
      "[[type:'fruit'], [type:'vegetable']]"
    ]
  },
  {
    "q": "What does this code output when using Array.prototype.with?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconsole.log(arr.with(1, 4));",
    "o": [
      "[1, 4, 3]",
      "[1, 2, 3]",
      "Error: with is not a function",
      "[1, 2, 3, 4]"
    ]
  },
  {
    "q": "What is the result of this destructuring with private class fields?",
    "l": "javascript",
    "c": "class Test { #secret = 42; getSecret() { return this.#secret; } }\nconst { getSecret } = new Test();\nconsole.log(getSecret());",
    "o": [
      "Error: Cannot read private member",
      "42",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "Which method creates an array from an async iterable?",
    "o": [
      "Array.fromAsync()",
      "Array.from()",
      "Array.ofAsync()",
      "Promise.all()"
    ]
  },
  {
    "q": "What does this code output using the new Record type?",
    "l": "javascript",
    "c": "const record = #{\na: 1,\nb: 2\n};\nconsole.log(record.a);",
    "o": [
      "1",
      "undefined",
      "Error: Unexpected token '#'",
      "{a: 1, b: 2}"
    ]
  },
  {
    "q": "What is the output of this code using Temporal API?",
    "l": "javascript",
    "c": "const date = Temporal.Now.plainDateISO();\nconsole.log(date instanceof Date);",
    "o": [
      "false",
      "true",
      "Error: Temporal is not defined",
      "undefined"
    ]
  },
  {
    "q": "Which method creates an immutable copy of an array with a change?",
    "o": [
      "toSpliced()",
      "splice()",
      "toChanged()",
      "immutableSplice()"
    ]
  },
  {
    "q": "What does this destructuring do with a Symbol.iterator?",
    "l": "javascript",
    "c": "const obj = { [Symbol.iterator]: function*() { yield 1; yield 2; } };\nconst [a, b] = obj;\nconsole.log(a, b);",
    "o": [
      "1 2",
      "undefined undefined",
      "Error: obj is not iterable",
      "{ [Symbol.iterator]: function }"
    ]
  },
  {
    "q": "What is the output of this code using WeakRef?",
    "l": "javascript",
    "c": "let obj = { data: 'important' };\nconst ref = new WeakRef(obj);\nobj = null;\nconsole.log(ref.deref()?.data);",
    "o": [
      "undefined (or 'important' if GC hasn't run)",
      "'important'",
      "Error: deref is not a function",
      "null"
    ]
  },
  {
    "q": "Which decorator can be used to make a class method immutable?",
    "o": [
      "@readonly",
      "@immutable",
      "@freeze",
      "@const"
    ]
  },
  {
    "q": "What does this code output using Array.prototype.findLast?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3, 2, 1];\nconsole.log(arr.findLast(x => x === 2));",
    "o": [
      "2",
      "1",
      "undefined",
      "Error: findLast is not a function"
    ]
  },
  {
    "q": "What is the result of this destructuring with a Proxy?",
    "l": "javascript",
    "c": "const proxy = new Proxy({ a: 1, b: 2 }, { get: (t, p) => p.toUpperCase() });\nconst { a, b } = proxy;\nconsole.log(a, b);",
    "o": [
      "A B",
      "1 2",
      "undefined undefined",
      "Error"
    ]
  },
  {
    "q": "Which method creates a new array with all possible pairs from two arrays?",
    "o": [
      "Array.prototype.flatMap(a => b.map(c => [a, c]))",
      "Array.prototype.cartesian()",
      "Array.prototype.pair()",
      "Array.prototype.combine()"
    ]
  },
  {
    "q": "What does this code output using private methods?",
    "l": "javascript",
    "c": "class Test { #method() { return 42; }\ncall() { return this.#method(); } }\nconst { call } = new Test();\nconsole.log(call());",
    "o": [
      "42",
      "undefined",
      "Error: Private method accessed",
      "{ #method: function }"
    ]
  },
  {
    "q": "What is the output of this code using RegExp match indices?",
    "l": "javascript",
    "c": "const str = 'test';\nconst re = /t/d;\nconsole.log(str.match(re).indices[0].join(','));",
    "o": [
      "0,1",
      "t",
      "Error: indices is not defined",
      "[0, 1]"
    ]
  },
  {
    "q": "What is the output of the following code using Object.seal?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nObject.seal(obj);\nobj.a = 2;\ndelete obj.a;\nconsole.log(obj);",
    "o": [
      "{ a: 2 }",
      "{ }",
      "Error",
      "{ a: 1 }"
    ]
  },
  {
    "q": "Which method creates a new array with all elements that are truthy?",
    "o": [
      "arr.filter(Boolean)",
      "arr.compact()",
      "arr.truthy()",
      "arr.clean()"
    ]
  },
  {
    "q": "What does this destructuring do when the property doesn't exist?",
    "l": "javascript",
    "c": "const { a = 1, b = 2 } = { a: undefined };",
    "o": [
      "a = 1, b = 2",
      "a = undefined, b = 2",
      "Error",
      "a = null, b = 2"
    ]
  },
  {
    "q": "What is the output of this Proxy get trap code?",
    "l": "javascript",
    "c": "const target = {};\nconst handler = { get: (target, prop) => prop in target ? target[prop] : 42 };\nconst proxy = new Proxy(target, handler);\nconsole.log(proxy.answer);",
    "o": [
      "42",
      "undefined",
      "Error",
      "{}"
    ]
  },
  {
    "q": "Which method flattens a nested array recursively up to the specified depth?",
    "o": [
      "flat()",
      "flatten()",
      "join()",
      "merge()"
    ]
  },
  {
    "q": "What does this code output when using Object.preventExtensions?",
    "l": "javascript",
    "c": "const obj = { a: 1 };\nObject.preventExtensions(obj);\nobj.b = 2;\nconsole.log(obj.b);",
    "o": [
      "undefined",
      "2",
      "Error",
      "{ a: 1 }"
    ]
  },
  {
    "q": "What is the result of this nested destructuring?",
    "l": "javascript",
    "c": "const { a: { b: { c } } } = { a: { b: { c: 10 } } };\nconsole.log(c);",
    "o": [
      "10",
      "{ c: 10 }",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method creates an array from an array-like or iterable object?",
    "o": [
      "Array.from()",
      "Array.of()",
      "Array.create()",
      "Array.new()"
    ]
  },
  {
    "q": "What is the output of this Symbol-keyed property code?",
    "l": "javascript",
    "c": "const sym = Symbol('key');\nconst obj = { [sym]: 42 };\nconsole.log(obj[sym]);",
    "o": [
      "42",
      "undefined",
      "Symbol(key)",
      "Error"
    ]
  },
  {
    "q": "What does this destructuring with property renaming do?",
    "l": "javascript",
    "c": "const { a: newName } = { a: 1 };\nconsole.log(newName);",
    "o": [
      "1",
      "undefined",
      "{ a: 1 }",
      "Error"
    ]
  },
  {
    "q": "Which method returns the last index at which a given element can be found?",
    "o": [
      "lastIndexOf()",
      "findLastIndex()",
      "searchLast()",
      "indexOf() from end"
    ]
  },
  {
    "q": "What is the output of this array initialization?",
    "l": "javascript",
    "c": "const arr = Array(3).fill({});\narr[0].prop = 1;\nconsole.log(arr[2].prop);",
    "o": [
      "1",
      "undefined",
      "null",
      "Error"
    ]
  },
  {
    "q": "What does this code demonstrate about object references?",
    "l": "javascript",
    "c": "const a = {};\nconst b = a;\nb.prop = 1;\nconsole.log(a.prop);",
    "o": [
      "1",
      "undefined",
      "null",
      "Error"
    ]
  },
  {
    "q": "Which method checks if all elements satisfy a condition?",
    "o": [
      "every()",
      "some()",
      "filter()",
      "includes()"
    ]
  },
  {
    "q": "What is the output of this destructuring with default values?",
    "l": "javascript",
    "c": "const [x = 1, y = x] = [];\nconsole.log(x, y);",
    "o": [
      "1, 1",
      "undefined, undefined",
      "Error",
      "1, undefined"
    ]
  },
  {
    "q": "What is the output when trying to destructure a null value?",
    "l": "javascript",
    "c": "const { a } = null;",
    "o": [
      "TypeError",
      "undefined",
      "null",
      "{ a: null }"
    ]
  },
  {
    "q": "Which method creates a new array with elements that are the results of calling a provided function on every element in the calling array?",
    "o": [
      "map()",
      "forEach()",
      "reduce()",
      "filter()"
    ]
  },
  {
    "q": "What does this code output when using array destructuring with gaps?",
    "l": "javascript",
    "c": "const [a, , b] = [1, 2, 3];\nconsole.log(a, b);",
    "o": [
      "1 3",
      "1 2",
      "undefined 3",
      "Error"
    ]
  },
  {
    "q": "What is the result when using Object.assign with property descriptors?",
    "l": "javascript",
    "c": "const obj1 = {};\nObject.defineProperty(obj1, 'a', { value: 1, enumerable: false });\nconst obj2 = Object.assign({}, obj1);\nconsole.log(Object.keys(obj2));",
    "o": [
      "[]",
      "['a']",
      "[undefined]",
      "Error"
    ]
  },
  {
    "q": "Which method returns a new array with all sub-array elements concatenated recursively up to the specified depth?",
    "o": [
      "flat()",
      "concat()",
      "join()",
      "merge()"
    ]
  },
  {
    "q": "What does this code output when using computed property names in destructuring?",
    "l": "javascript",
    "c": "const prop = 'name';\nconst { [prop]: myName } = { name: 'Alice' };\nconsole.log(myName);",
    "o": [
      "'Alice'",
      "'name'",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "What is the output when using Array.from with a mapping function?",
    "l": "javascript",
    "c": "console.log(Array.from([1, 2, 3], x => x * 2));",
    "o": [
      "[2, 4, 6]",
      "[1, 2, 3]",
      "[NaN, NaN, NaN]",
      "Error"
    ]
  },
  {
    "q": "Which method checks if an object exists in another object's prototype chain?",
    "o": [
      "Object.prototype.isPrototypeOf()",
      "Object.hasPrototype()",
      "Object.inChain()",
      "Object.checkPrototype()"
    ]
  },
  {
    "q": "What does this code output when using nested object destructuring with defaults?",
    "l": "javascript",
    "c": "const { a: { b = 2 } = {} } = {};\nconsole.log(b);",
    "o": [
      "2",
      "undefined",
      "{}",
      "Error"
    ]
  },
  {
    "q": "What is the result when using Array.prototype.keys() on a sparse array?",
    "l": "javascript",
    "c": "const arr = [1, , 3];\nconsole.log([...arr.keys()]);",
    "o": [
      "[0, 1, 2]",
      "[0, 2]",
      "[1, undefined, 3]",
      "Error"
    ]
  },
  {
    "q": "Which method creates a new, shallow-copied array instance from an array-like or iterable object?",
    "o": [
      "Array.from()",
      "Array.of()",
      "Array.slice()",
      "Array.copy()"
    ]
  },
  {
    "q": "What does this code output when using object rest properties?",
    "l": "javascript",
    "c": "const { a, ...rest } = { a: 1, b: 2, c: 3 };\nconsole.log(rest);",
    "o": [
      "{ b: 2, c: 3 }",
      "{ a: 1 }",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "What is the output when using Object.entries with a Symbol property?",
    "l": "javascript",
    "c": "const sym = Symbol('key');\nconst obj = { [sym]: 'value', a: 1 };\nconsole.log(Object.entries(obj));",
    "o": [
      "[['a', 1]]",
      "[[Symbol('key'), 'value'], ['a', 1]]",
      "[]",
      "Error"
    ]
  },
  {
    "q": "Which method returns the first element in the array that satisfies a provided testing function?",
    "o": [
      "find()",
      "filter()",
      "search()",
      "first()"
    ]
  },
  {
    "q": "What does this code output when using array destructuring with default values?",
    "l": "javascript",
    "c": "const [x = 1, y = x] = [];\nconsole.log(x, y);",
    "o": [
      "1 1",
      "undefined undefined",
      "Error",
      "1 undefined"
    ]
  },
  {
    "q": "What is the output when using Object.hasOwn() with a Symbol property?",
    "l": "javascript",
    "c": "const sym = Symbol('key');\nconst obj = { [sym]: 'value' };\nconsole.log(Object.hasOwn(obj, sym));",
    "o": [
      "true",
      "false",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method creates a new array with all elements that pass the test implemented by a predicate function, starting from the end?",
    "o": [
      "findLast()",
      "findFromEnd()",
      "lastMatch()",
      "searchLast()"
    ]
  },
  {
    "q": "What does this code output when using destructuring with a Proxy?",
    "l": "javascript",
    "c": "const proxy = new Proxy({ a: 1 }, { get: (t, p) => p.toUpperCase() });\nconst { a } = proxy;\nconsole.log(a);",
    "o": [
      "A",
      "1",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "What is the result when using Array.prototype.toSpliced() to replace elements?",
    "l": "javascript",
    "c": "const arr = [1, 2, 3];\nconsole.log(arr.toSpliced(1, 1, 4));",
    "o": [
      "[1, 4, 3]",
      "[1, 2, 3]",
      "[1, 4]",
      "Error"
    ]
  },
  {
    "q": "Which method creates a new array with all possible combinations of elements from two arrays?",
    "o": [
      "a.flatMap(x => b.map(y => [x, y]))",
      "a.combine(b)",
      "a.cartesian(b)",
      "Array.product(a, b)"
    ]
  },
  {
    "q": "What does this code output when using private class fields in destructuring?",
    "l": "javascript",
    "c": "class Test { #secret = 42; getSecret() { return this.#secret; } }\nconst { getSecret } = new Test();\nconsole.log(getSecret());",
    "o": [
      "Error: Cannot read private member",
      "42",
      "undefined",
      "TypeError"
    ]
  },
  {
    "q": "What is the output when using Object.groupBy with a numeric key?",
    "l": "javascript",
    "c": "const items = [{type: 1}, {type: 2}, {type: 1}];\nconsole.log(Object.groupBy(items, ({type}) => type));",
    "o": [
      "Map {1 => [...], 2 => [...]}",
      "{1: [...], 2: [...]}",
      "[[1, [...]], [2, [...]]]",
      "Error"
    ]
  },
  {
    "q": "Which method creates an immutable copy of an array with one element changed?",
    "o": [
      "with()",
      "set()",
      "copyWith()",
      "immutableSet()"
    ]
  },
  {
    "q": "What does this code output when using Temporal.Instant?",
    "l": "javascript",
    "c": "console.log(Temporal.Instant.from('2023-01-01').epochMilliseconds > 0);",
    "o": [
      "true",
      "false",
      "Error: Temporal is not defined",
      "undefined"
    ]
  },
  {
    "q": "What is the result when destructuring a Map iterator?",
    "l": "javascript",
    "c": "const map = new Map([['a', 1]]);\nconst [first] = map;\nconsole.log(first);",
    "o": [
      "['a', 1]",
      "{'a': 1}",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which method returns a new array with elements from start to end (exclusive) without modifying the original?",
    "o": [
      "slice()",
      "splice()",
      "cut()",
      "extract()"
    ]
  },
  {
    "q": "What does this code output when using a Symbol as a computed method name?",
    "l": "javascript",
    "c": "const sym = Symbol('method');\nconst obj = { [sym]() { return 42; } };\nconsole.log(obj[sym]());",
    "o": [
      "42",
      "undefined",
      "Symbol(method)",
      "Error"
    ]
  },
  {
    "q": "What is the output when using Array.prototype.at() with a typed array?",
    "l": "javascript",
    "c": "const arr = new Uint8Array([10, 20, 30]);\nconsole.log(arr.at(-1));",
    "o": [
      "30",
      "undefined",
      "20",
      "Error"
    ]
  },
  {
    "q": "Which decorator can be used to make a class property read-only?",
    "o": [
      "@readonly",
      "@immutable",
      "@const",
      "@freeze"
    ]
  },
  {
    "q": "What does this code output when using a WeakMap as an object property store?",
    "l": "javascript",
    "c": "const wm = new WeakMap();\nconst obj = {};\nwm.set(obj, 'secret');\nconsole.log(wm.get(obj));",
    "o": [
      "'secret'",
      "undefined",
      "{}",
      "Error"
    ]
  }
]